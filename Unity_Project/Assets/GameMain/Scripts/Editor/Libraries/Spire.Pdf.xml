<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spire.Pdf</name>
    </assembly>
    <members>
        <member name="T:Spire.Security.Apache.Bzip2.BZip2Constants">
             Base class for both the compress and decompress classes.
             Holds common arrays, and static data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Spire.Security.Apache.Bzip2.CBZip2InputStream">
             An input stream that decompresses from the BZip2 format (with the file
             header chars) to be read as any other stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             <b>NB:</b> note this class has been modified to read the leading BZ from the
             start of the BZIP2 stream to make it compatible with other PGP programs.
        </member>
        <member name="T:Spire.Security.Apache.Bzip2.CBZip2OutputStream">
             An output stream that compresses into the BZip2 format (with the file
             header chars) into another stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             TODO:    Update to BZip2 1.0.1
             <b>NB:</b> note this class has been modified to add a leading BZ to the
             start of the BZIP2 stream to make it compatible with other PGP programs.
        </member>
        <member name="M:Spire.Security.Apache.Bzip2.CBZip2OutputStream.WriteByte(System.Byte)">
            
             modified by Oliver Merkel, 010128
            
        </member>
        <member name="T:Spire.Security.Apache.Bzip2.CRC">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="M:Spire.Security.Asn1.Anssi.AnssiNamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Asn1.Anssi.AnssiNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.Anssi.AnssiNamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Asn1.Anssi.AnssiNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Encodable.GetDerEncoded">
             Return the DER encoding of the object, null if the DER encoding can not be made.
            
             @return a DER byte array, null otherwise.
        </member>
        <member name="T:Spire.Security.Asn1.Asn1InputStream">
            a general purpose ASN.1 decoder - note: this class differs from the
            others in that it returns null after it has read the last object in
            the stream. If an ASN.1 Null is encountered a Der/BER Null object is
            returned.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1InputStream.#ctor(System.IO.Stream,System.Int32)">
             Create an ASN1InputStream where no DER object will be longer than limit.
            
             @param input stream containing ASN.1 encoded data.
             @param limit maximum size of a DER encoded object.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1InputStream.#ctor(System.Byte[])">
             Create an ASN1InputStream based on the input byte array. The length of DER objects in
             the stream is automatically limited to the length of the input array.
            
             @param input array containing ASN.1 encoded data.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1InputStream.BuildObject(System.Int32,System.Int32,System.Int32)">
            build an object given its tag and the number of bytes to construct it from.
        </member>
        <member name="T:Spire.Security.Asn1.Asn1Null">
            A Null object.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Object.FromByteArray(System.Byte[])">
            <summary>Create a base ASN.1 object from a byte array.</summary>
            <param name="data">The byte array to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">
            If there is a problem parsing the data, or parsing an object did not exhaust the available data.
            </exception>
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Object.FromStream(System.IO.Stream)">
            <summary>Read a base ASN.1 object from a stream.</summary>
            <param name="inStr">The stream to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:Spire.Security.Asn1.Asn1OctetString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Octet string from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1OctetString.GetInstance(System.Object)">
             return an Octet string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1OctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Sequence.GetInstance(System.Object)">
             return an Asn1Sequence from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Sequence.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 sequence from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             sequence - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sequences you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged,
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="P:Spire.Security.Asn1.Asn1Sequence.Item(System.Int32)">
             return the object at the sequence position indicated by index.
            
             @param index the sequence number (starting at zero) of the object
             @return the object at the sequence position indicated by index.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Set.GetInstance(System.Object)">
             return an ASN1Set from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1Set.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 set from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             set - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sets you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="P:Spire.Security.Asn1.Asn1Set.Item(System.Int32)">
             return the object at the set position indicated by index.
            
             @param index the set number (starting at zero) of the object
             @return the object at the set position indicated by index.
        </member>
        <member name="T:Spire.Security.Asn1.Asn1TaggedObject">
            ASN.1 TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:Spire.Security.Asn1.Asn1TaggedObject.#ctor(System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            @param explicitly true if the object is explicitly tagged.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Spire.Security.Asn1.Asn1TaggedObject.IsExplicit">
            return whether or not the object may be explicitly tagged.
            <p>
            Note: if the object has been read from an input stream, the only
            time you can be sure if isExplicit is returning the true state of
            affairs is if it returns false. An implicitly tagged object may appear
            to be explicitly tagged, so you need to understand the context under
            which the reading was done as well, see GetObject below.</p>
        </member>
        <member name="M:Spire.Security.Asn1.Asn1TaggedObject.GetObject">
            return whatever was following the tag.
            <p>
            Note: tagged objects are generally context dependent if you're
            trying to extract a tagged object you should be going via the
            appropriate GetInstance method.</p>
        </member>
        <member name="M:Spire.Security.Asn1.Asn1TaggedObject.GetObjectParser(System.Int32,System.Boolean)">
            Return the object held in this tagged object as a parser assuming it has
            the type of the passed in tag. If the object doesn't have a parser
            associated with it, the base object is returned.
        </member>
        <!-- 对于成员“F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256">
            SHA-2.SHA-256; 1.3.6.1.4.1.22554.1.2.1 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha384">
            SHA-2.SHA-384; 1.3.6.1.4.1.22554.1.2.2 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha512">
            SHA-2.SHA-512; 1.3.6.1.4.1.22554.1.2.3 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha224">
            SHA-2.SHA-224; 1.3.6.1.4.1.22554.1.2.4 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs5">
            PKCS-5(1)|PKCS-12(2)
            SHA-1.PKCS5;  1.3.6.1.4.1.22554.1.1.1 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12">
            SHA-1.PKCS12; 1.3.6.1.4.1.22554.1.1.2 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs5">
            SHA-256.PKCS12; 1.3.6.1.4.1.22554.1.2.1.1 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12">
            SHA-256.PKCS12; 1.3.6.1.4.1.22554.1.2.1.2 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes128_cbc">
            AES(1) . (CBC-128(2)|CBC-192(22)|CBC-256(42))
            1.3.6.1.4.1.22554.1.1.2.1.2 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes192_cbc">
            1.3.6.1.4.1.22554.1.1.2.1.22 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha1_pkcs12_aes256_cbc">
            1.3.6.1.4.1.22554.1.1.2.1.42 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes128_cbc">
            1.3.6.1.4.1.22554.1.1.2.2.2 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes192_cbc">
            1.3.6.1.4.1.22554.1.1.2.2.22 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_pbe_sha256_pkcs12_aes256_cbc">
            1.3.6.1.4.1.22554.1.1.2.2.42 
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_sig">
            signature(2) algorithms
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.sphincs256">
            Sphincs-256
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.xmss">
            XMSS
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.xmss_mt">
            XMSS^MT
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.bc_exch">
            key_exchange(3) algorithms
        </member>
        <member name="F:Spire.Security.Asn1.BC.BCObjectIdentifiers.newHope">
            NewHope
        </member>
        <member name="T:Spire.Security.Asn1.BerNull">
            A BER Null object.
        </member>
        <member name="M:Spire.Security.Asn1.BerOctetString.ToBytes(System.Collections.IEnumerable)">
            convert a vector of octet strings into a single byte string
        </member>
        <member name="M:Spire.Security.Asn1.BerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:Spire.Security.Asn1.BerOctetString.GetEnumerator">
            return the DER octets that make up this string.
        </member>
        <member name="M:Spire.Security.Asn1.BerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Spire.Security.Asn1.BerSequence.#ctor(Spire.Security.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Spire.Security.Asn1.BerSequence.#ctor(Spire.Security.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:Spire.Security.Asn1.BerSet.#ctor">
            create an empty sequence
        </member>
        <member name="M:Spire.Security.Asn1.BerSet.#ctor(Spire.Security.Asn1.Asn1Encodable)">
            create a set containing one object
        </member>
        <member name="M:Spire.Security.Asn1.BerSet.#ctor(Spire.Security.Asn1.Asn1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="T:Spire.Security.Asn1.BerTaggedObject">
            BER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:Spire.Security.Asn1.BerTaggedObject.#ctor(System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Spire.Security.Asn1.BerTaggedObject.#ctor(System.Boolean,System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Spire.Security.Asn1.BerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CAKeyUpdAnnContent.ToAsn1Object">
            <pre>
            CAKeyUpdAnnContent ::= SEQUENCE {
                                        oldWithNew   CmpCertificate, -- old pub signed with new priv
                                        newWithOld   CmpCertificate, -- new pub signed with old priv
                                        newWithNew   CmpCertificate  -- new pub signed with new priv
             }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CertConfirmContent.ToAsn1Object">
            <pre>
            CertConfirmContent ::= SEQUENCE OF CertStatus
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CertifiedKeyPair.ToAsn1Object">
            <pre>
            CertifiedKeyPair ::= SEQUENCE {
                                             certOrEncCert       CertOrEncCert,
                                             privateKey      [0] EncryptedValue      OPTIONAL,
                                             -- see [CRMF] for comment on encoding
                                             publicationInfo [1] PKIPublicationInfo  OPTIONAL
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CertOrEncCert.ToAsn1Object">
            <pre>
            CertOrEncCert ::= CHOICE {
                                 certificate     [0] CMPCertificate,
                                 encryptedCert   [1] EncryptedValue
                      }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CertRepMessage.ToAsn1Object">
            <pre>
            CertRepMessage ::= SEQUENCE {
                                     caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                        OPTIONAL,
                                     response         SEQUENCE OF CertResponse
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CertResponse.ToAsn1Object">
            <pre>
            CertResponse ::= SEQUENCE {
                                       certReqId           INTEGER,
                                       -- to match this response with corresponding request (a value
                                       -- of -1 is to be used if certReqId is not specified in the
                                       -- corresponding request)
                                       status              PKIStatusInfo,
                                       certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
                                       rspInfo             OCTET STRING        OPTIONAL
                                       -- analogous to the id-regInfo-utf8Pairs string defined
                                       -- for regInfo in CertReqMsg [CRMF]
                        }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CertStatus.ToAsn1Object">
            <pre>
            CertStatus ::= SEQUENCE {
                              certHash    OCTET STRING,
                              -- the hash of the certificate, using the same hash algorithm
                              -- as is used to create and verify the certificate signature
                              certReqId   INTEGER,
                              -- to match this confirmation with the corresponding req/rep
                              statusInfo  PKIStatusInfo OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.Challenge.ToAsn1Object">
             <pre>
             Challenge ::= SEQUENCE {
                             owf                 AlgorithmIdentifier  OPTIONAL,
            
                             -- MUST be present in the first Challenge; MAY be omitted in
                             -- any subsequent Challenge in POPODecKeyChallContent (if
                             -- omitted, then the owf used in the immediately preceding
                             -- Challenge is to be used).
            
                             witness             OCTET STRING,
                             -- the result of applying the one-way function (owf) to a
                             -- randomly-generated INTEGER, A.  [Note that a different
                             -- INTEGER MUST be used for each Challenge.]
                             challenge           OCTET STRING
                             -- the encryption (under the public key for which the cert.
                             -- request is being made) of Rand, where Rand is specified as
                             --   Rand ::= SEQUENCE {
                             --      int      INTEGER,
                             --       - the randomly-generated INTEGER A (above)
                             --      sender   GeneralName
                             --       - the sender's name (as included in PKIHeader)
                             --   }
                  }
             </pre>
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CmpCertificate.#ctor(Spire.Security.Asn1.X509.AttributeCertificate)">
            Note: the addition of attribute certificates is a BC extension.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CmpCertificate.ToAsn1Object">
             <pre>
             CMPCertificate ::= CHOICE {
                        x509v3PKCert        Certificate
                        x509v2AttrCert      [1] AttributeCertificate
              }
             </pre>
             Note: the addition of attribute certificates is a BC extension.
            
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.CrlAnnContent.ToAsn1Object">
            <pre>
            CrlAnnContent ::= SEQUENCE OF CertificateList
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.ErrorMsgContent.ToAsn1Object">
            <pre>
            ErrorMsgContent ::= SEQUENCE {
                                   pKIStatusInfo          PKIStatusInfo,
                                   errorCode              INTEGER           OPTIONAL,
                                   -- implementation-specific error codes
                                   errorDetails           PKIFreeText       OPTIONAL
                                   -- implementation-specific error details
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.GenMsgContent.ToAsn1Object">
            <pre>
            GenMsgContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.GenRepContent.ToAsn1Object">
            <pre>
            GenRepContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Spire.Security.Asn1.Cmp.InfoTypeAndValue">
             Example InfoTypeAndValue contents include, but are not limited
             to, the following (un-comment in this ASN.1 module and use as
             appropriate for a given environment):
             <pre>
               id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
                  CAProtEncCertValue      ::= CMPCertificate
               id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
                 SignKeyPairTypesValue   ::= SEQUENCE OF AlgorithmIdentifier
               id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
                 EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier
               id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
                  PreferredSymmAlgValue   ::= AlgorithmIdentifier
               id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
                  CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
               id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
                  CurrentCRLValue         ::= CertificateList
               id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
                  UnsupportedOIDsValue    ::= SEQUENCE OF OBJECT IDENTIFIER
               id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
                  KeyPairParamReqValue    ::= OBJECT IDENTIFIER
               id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
                  KeyPairParamRepValue    ::= AlgorithmIdentifer
               id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
                  RevPassphraseValue      ::= EncryptedValue
               id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
                  ImplicitConfirmValue    ::= NULL
               id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
                  ConfirmWaitTimeValue    ::= GeneralizedTime
               id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
                  OrigPKIMessageValue     ::= PKIMessages
               id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
                  SuppLangTagsValue       ::= SEQUENCE OF UTF8String
            
             where
            
               id-pkix OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3)
                  dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
             and
                  id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.InfoTypeAndValue.ToAsn1Object">
            <pre>
            InfoTypeAndValue ::= SEQUENCE {
                                    infoType               OBJECT IDENTIFIER,
                                    infoValue              ANY DEFINED BY infoType  OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.KeyRecRepContent.ToAsn1Object">
            <pre>
            KeyRecRepContent ::= SEQUENCE {
                                    status                  PKIStatusInfo,
                                    newSigCert          [0] CMPCertificate OPTIONAL,
                                    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                                                      CMPCertificate OPTIONAL,
                                    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                                                      CertifiedKeyPair OPTIONAL
                         }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.OobCertHash.ToAsn1Object">
            <pre>
            OobCertHash ::= SEQUENCE {
                                 hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
                                 certId      [1] CertId                  OPTIONAL,
                                 hashVal         BIT STRING
                                 -- hashVal is calculated over the Der encoding of the
                                 -- self-signed certificate with the identifier certID.
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PbmParameter.ToAsn1Object">
            <pre>
             PbmParameter ::= SEQUENCE {
                                   salt                OCTET STRING,
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this string to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   owf                 AlgorithmIdentifier,
                                   -- AlgId for a One-Way Function (SHA-1 recommended)
                                   iterationCount      INTEGER,
                                   -- number of times the OWF is applied
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this integer to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   mac                 AlgorithmIdentifier
                                   -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
               }   -- or HMAC [RFC2104, RFC2202])
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiBody.#ctor(System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            Creates a new PkiBody.
            @param type one of the TYPE_* constants
            @param content message content
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiBody.ToAsn1Object">
            <pre>
            PkiBody ::= CHOICE {       -- message-specific body elements
                   ir       [0]  CertReqMessages,        --Initialization Request
                   ip       [1]  CertRepMessage,         --Initialization Response
                   cr       [2]  CertReqMessages,        --Certification Request
                   cp       [3]  CertRepMessage,         --Certification Response
                   p10cr    [4]  CertificationRequest,   --imported from [PKCS10]
                   popdecc  [5]  POPODecKeyChallContent, --pop Challenge
                   popdecr  [6]  POPODecKeyRespContent,  --pop Response
                   kur      [7]  CertReqMessages,        --Key Update Request
                   kup      [8]  CertRepMessage,         --Key Update Response
                   krr      [9]  CertReqMessages,        --Key Recovery Request
                   krp      [10] KeyRecRepContent,       --Key Recovery Response
                   rr       [11] RevReqContent,          --Revocation Request
                   rp       [12] RevRepContent,          --Revocation Response
                   ccr      [13] CertReqMessages,        --Cross-Cert. Request
                   ccp      [14] CertRepMessage,         --Cross-Cert. Response
                   ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
                   cann     [16] CertAnnContent,         --Certificate Ann.
                   rann     [17] RevAnnContent,          --Revocation Ann.
                   crlann   [18] CRLAnnContent,          --CRL Announcement
                   pkiconf  [19] PKIConfirmContent,      --Confirmation
                   nested   [20] NestedMessageContent,   --Nested Message
                   genm     [21] GenMsgContent,          --General Message
                   genp     [22] GenRepContent,          --General Response
                   error    [23] ErrorMsgContent,        --Error Message
                   certConf [24] CertConfirmContent,     --Certificate confirm
                   pollReq  [25] PollReqContent,         --Polling request
                   pollRep  [26] PollRepContent          --Polling response
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiConfirmContent.ToAsn1Object">
            <pre>
            PkiConfirmContent ::= NULL
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Spire.Security.Asn1.Cmp.PkiFailureInfo">
            <pre>
            PKIFailureInfo ::= BIT STRING {
            badAlg               (0),
              -- unrecognized or unsupported Algorithm Identifier
            badMessageCheck      (1), -- integrity check failed (e.g., signature did not verify)
            badRequest           (2),
              -- transaction not permitted or supported
            badTime              (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
            badCertId            (4), -- no certificate could be found matching the provided criteria
            badDataFormat        (5),
              -- the data submitted has the wrong format
            wrongAuthority       (6), -- the authority indicated in the request is different from the one creating the response token
            incorrectData        (7), -- the requester's data is incorrect (for notary services)
            missingTimeStamp     (8), -- when the timestamp is missing but should be there (by policy)
            badPOP               (9)  -- the proof-of-possession failed
            certRevoked         (10),
            certConfirmed       (11),
            wrongIntegrity      (12),
            badRecipientNonce   (13), 
            timeNotAvailable    (14),
              -- the TSA's time source is not available
            unacceptedPolicy    (15),
              -- the requested TSA policy is not supported by the TSA
            unacceptedExtension (16),
              -- the requested extension is not supported by the TSA
            addInfoNotAvailable (17)
              -- the additional information requested could not be understood
              -- or is not available
            badSenderNonce      (18),
            badCertTemplate     (19),
            signerNotTrusted    (20),
            transactionIdInUse  (21),
            unsupportedVersion  (22),
            notAuthorized       (23),
            systemUnavail       (24),    
            systemFailure       (25),
              -- the request cannot be handled due to system failure
            duplicateCertReq    (26) 
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiFailureInfo.#ctor(System.Int32)">
            Basic constructor.
        </member>
        <member name="P:Spire.Security.Asn1.Cmp.PkiFreeText.Size">
             Return the number of string elements present.
            
             @return number of elements present.
        </member>
        <member name="P:Spire.Security.Asn1.Cmp.PkiFreeText.Item(System.Int32)">
             Return the UTF8STRING at index.
            
             @param index index of the string of interest
             @return the string at index.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiFreeText.ToAsn1Object">
            <pre>
            PkiFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
            </pre>
        </member>
        <member name="F:Spire.Security.Asn1.Cmp.PkiHeader.NULL_NAME">
            Value for a "null" recipient or sender.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiHeader.ToAsn1Object">
            <pre>
             PkiHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiHeaderBuilder.Build">
            <pre>
             PKIHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiMessage.#ctor(Spire.Security.Asn1.Cmp.PkiHeader,Spire.Security.Asn1.Cmp.PkiBody,Spire.Security.Asn1.DerBitString,Spire.Security.Asn1.Cmp.CmpCertificate[])">
             Creates a new PkiMessage.
            
             @param header message header
             @param body message body
             @param protection message protection (may be null)
             @param extraCerts extra certificates (may be null)
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiMessage.ToAsn1Object">
            <pre>
            PkiMessage ::= SEQUENCE {
                             header           PKIHeader,
                             body             PKIBody,
                             protection   [0] PKIProtection OPTIONAL,
                             extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiMessages.ToAsn1Object">
            <pre>
            PkiMessages ::= SEQUENCE SIZE (1..MAX) OF PkiMessage
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32)">
            @param status
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32,Spire.Security.Asn1.Cmp.PkiFreeText)">
            @param status
            @param statusString
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PkiStatusInfo.ToAsn1Object">
             <pre>
             PkiStatusInfo ::= SEQUENCE {
                 status        PKIStatus,                (INTEGER)
                 statusString  PkiFreeText     OPTIONAL,
                 failInfo      PkiFailureInfo  OPTIONAL  (BIT STRING)
             }
            
             PKIStatus:
               granted                (0), -- you got exactly what you asked for
               grantedWithMods        (1), -- you got something like what you asked for
               rejection              (2), -- you don't get it, more information elsewhere in the message
               waiting                (3), -- the request body part has not yet been processed, expect to hear more later
               revocationWarning      (4), -- this message contains a warning that a revocation is imminent
               revocationNotification (5), -- notification that a revocation has occurred
               keyUpdateWarning       (6)  -- update already done for the oldCertId specified in CertReqMsg
            
             PkiFailureInfo:
               badAlg           (0), -- unrecognized or unsupported Algorithm Identifier
               badMessageCheck  (1), -- integrity check failed (e.g., signature did not verify)
               badRequest       (2), -- transaction not permitted or supported
               badTime          (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
               badCertId        (4), -- no certificate could be found matching the provided criteria
               badDataFormat    (5), -- the data submitted has the wrong format
               wrongAuthority   (6), -- the authority indicated in the request is different from the one creating the response token
               incorrectData    (7), -- the requester's data is incorrect (for notary services)
               missingTimeStamp (8), -- when the timestamp is missing but should be there (by policy)
               badPOP           (9)  -- the proof-of-possession failed
            
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PollRepContent.ToAsn1Object">
            <pre>
            PollRepContent ::= SEQUENCE OF SEQUENCE {
                    certReqId              INTEGER,
                    checkAfter             INTEGER,  -- time in seconds
                    reason                 PKIFreeText OPTIONAL
                }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PollReqContent.ToAsn1Object">
            <pre>
            PollReqContent ::= SEQUENCE OF SEQUENCE {
                                   certReqId              INTEGER
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PopoDecKeyChallContent.ToAsn1Object">
            <pre>
            PopoDecKeyChallContent ::= SEQUENCE OF Challenge
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.PopoDecKeyRespContent.ToAsn1Object">
            <pre>
            PopoDecKeyRespContent ::= SEQUENCE OF INTEGER
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.ProtectedPart.ToAsn1Object">
            <pre>
            ProtectedPart ::= SEQUENCE {
                               header    PKIHeader,
                               body      PKIBody
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.RevAnnContent.ToAsn1Object">
            <pre>
            RevAnnContent ::= SEQUENCE {
                  status              PKIStatus,
                  certId              CertId,
                  willBeRevokedAt     GeneralizedTime,
                  badSinceDate        GeneralizedTime,
                  crlDetails          Extensions  OPTIONAL
                   -- extra CRL details (e.g., crl number, reason, location, etc.)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.RevDetails.ToAsn1Object">
            <pre>
            RevDetails ::= SEQUENCE {
                             certDetails         CertTemplate,
                              -- allows requester to specify as much as they can about
                              -- the cert. for which revocation is requested
                              -- (e.g., for cases in which serialNumber is not available)
                              crlEntryDetails     Extensions       OPTIONAL
                              -- requested crlEntryExtensions
                        }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.RevRepContent.ToAsn1Object">
            <pre>
            RevRepContent ::= SEQUENCE {
                   status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
                   -- in same order as was sent in RevReqContent
                   revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
                   -- IDs for which revocation was requested
                   -- (same order as status)
                   crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
                   -- the resulting CRLs (there may be more than one)
              }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cmp.RevReqContent.ToAsn1Object">
            <pre>
            RevReqContent ::= SEQUENCE OF RevDetails
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Attribute.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Attribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Attributes.ToAsn1Object">
            <pre>
            Attributes ::=
              SET SIZE(1..MAX) OF Attribute -- according to RFC 5652
            </pre>
            @return
        </member>
        <member name="P:Spire.Security.Asn1.Cms.AttributeTable.Item(Spire.Security.Asn1.DerObjectIdentifier)">
            <summary>Return the first attribute matching the given OBJECT IDENTIFIER</summary>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AttributeTable.GetAll(Spire.Security.Asn1.DerObjectIdentifier)">
             Return all the attributes matching the OBJECT IDENTIFIER oid. The vector will be
             empty if there are no attributes of the required type present.
            
             @param oid type of attribute required.
             @return a vector of all the attributes found of type oid.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AttributeTable.Add(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.Asn1Encodable)">
             Return a new table with the passed in attribute added.
            
             @param attrType
             @param attrValue
             @return
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AuthenticatedData.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthenticatedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AuthenticatedData.GetInstance(System.Object)">
             return an AuthenticatedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AuthenticatedData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Cms.AuthenticatedDataParser">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AuthEnvelopedData.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AuthEnvelopedData.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.AuthEnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Cms.AuthEnvelopedDataParser">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="F:Spire.Security.Asn1.Cms.CmsObjectIdentifiers.id_ri">
            The other Revocation Info arc
            id-ri OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
                                              dod(6) internet(1) security(5) mechanisms(5) pkix(7) ri(16) }
        </member>
        <member name="T:Spire.Security.Asn1.Cms.CompressedData">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= Sequence {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.CompressedData.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a CompressedData object from a tagged object.
            
             @param ato the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.CompressedData.GetInstance(System.Object)">
             return a CompressedData object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="T:Spire.Security.Asn1.Cms.CompressedDataParser">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= SEQUENCE {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Cms.ContentInfoParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= SEQUENCE {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Ecc.MQVuserKeyingMaterial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            MQVuserKeyingMaterial ::= SEQUENCE {
              ephemeralPublicKey OriginatorPublicKey,
              addedukm [0] EXPLICIT UserKeyingMaterial OPTIONAL  }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.EncryptedContentInfo.GetInstance(System.Object)">
             return an EncryptedContentInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.EncryptedContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EncryptedContentInfo ::= Sequence {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Cms.EncryptedContentInfoParser">
            <pre>
            EncryptedContentInfo ::= SEQUENCE {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.EncryptedData.ToAsn1Object">
            <pre>
                  EncryptedData ::= SEQUENCE {
                                version CMSVersion,
                                encryptedContentInfo EncryptedContentInfo,
                                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.EnvelopedData.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an EnvelopedData object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.EnvelopedData.GetInstance(System.Object)">
             return an EnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.EnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= Sequence {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Cms.EnvelopedDataParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= SEQUENCE {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KekIdentifier.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KekIdentifier.GetInstance(System.Object)">
             return a KekIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KekIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekIdentifier ::= Sequence {
                keyIdentifier OCTET STRING,
                date GeneralizedTime OPTIONAL,
                other OtherKeyAttribute OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KekRecipientInfo.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KekRecipientInfo.GetInstance(System.Object)">
             return a KekRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KekRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 4
                kekID KekIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an KeyAgreeRecipientIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(System.Object)">
             return an KeyAgreeRecipientIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyAgreeRecipientIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyAgreeRecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                rKeyId [0] IMPLICIT RecipientKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KeyAgreeRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(System.Object)">
             return a KeyAgreeRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyAgreeRecipientInfo.ToAsn1Object">
                     * Produce an object suitable for an Asn1OutputStream.
                     * <pre>
                     * KeyAgreeRecipientInfo ::= Sequence {
                     *     version CMSVersion,  -- always set to 3
                     *     originator [0] EXPLICIT OriginatorIdentifierOrKey,
                     *     ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
                     *     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                     *     recipientEncryptedKeys RecipientEncryptedKeys
                     * }
            		 *
            		 * UserKeyingMaterial ::= OCTET STRING
                     * </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyTransRecipientInfo.GetInstance(System.Object)">
             return a KeyTransRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.KeyTransRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyTransRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.MetaData.ToAsn1Object">
            <pre>
            MetaData ::= SEQUENCE {
              hashProtected        BOOLEAN,
              fileName             UTF8String OPTIONAL,
              mediaType            IA5String OPTIONAL,
              otherMetaData        Attributes OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorIdentifierOrKey object from a tagged object.
            
             @param o the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(System.Object)">
             return an OriginatorIdentifierOrKey object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorIdentifierOrKey.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             OriginatorIdentifierOrKey ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier,
                 originatorKey [1] OriginatorPublicKey
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorInfo.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorInfo.GetInstance(System.Object)">
             return an OriginatorInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorInfo ::= Sequence {
                certs [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorPublicKey.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorPublicKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorPublicKey.GetInstance(System.Object)">
             return an OriginatorPublicKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OriginatorPublicKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorPublicKey ::= Sequence {
                algorithm AlgorithmIdentifier,
                publicKey BIT STRING
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherKeyAttribute.GetInstance(System.Object)">
             return an OtherKeyAttribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherKeyAttribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherKeyAttribute ::= Sequence {
                keyAttrId OBJECT IDENTIFIER,
                keyAttr ANY DEFINED BY keyAttrId OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherRecipientInfo.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherRecipientInfo.GetInstance(System.Object)">
             return a OtherRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherRecipientInfo ::= Sequence {
               oriType OBJECT IDENTIFIER,
               oriValue ANY DEFINED BY oriType }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRevocationInfoFormat object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(System.Object)">
             return a OtherRevocationInfoFormat object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.OtherRevocationInfoFormat.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OtherRevocationInfoFormat ::= SEQUENCE {
                 otherRevInfoFormat OBJECT IDENTIFIER,
                 otherRevInfo ANY DEFINED BY otherRevInfoFormat }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.PasswordRecipientInfo.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a PasswordRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.PasswordRecipientInfo.GetInstance(System.Object)">
             return a PasswordRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.PasswordRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            PasswordRecipientInfo ::= Sequence {
              version CMSVersion,   -- Always set to 0
              keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                        OPTIONAL,
             keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
             encryptedKey EncryptedKey }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientEncryptedKey.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an RecipientEncryptedKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientEncryptedKey.GetInstance(System.Object)">
             return a RecipientEncryptedKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientEncryptedKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientEncryptedKey ::= SEQUENCE {
                rid KeyAgreeRecipientIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientIdentifier.GetInstance(System.Object)">
             return a RecipientIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo,
                kekri [2] KekRecipientInfo,
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientKeyIdentifier.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a RecipientKeyIdentifier object from a tagged object.
            
             @param _ato the tagged object holding the object we want.
             @param _explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientKeyIdentifier.GetInstance(System.Object)">
             return a RecipientKeyIdentifier object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.RecipientKeyIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientKeyIdentifier ::= Sequence {
                 subjectKeyIdentifier SubjectKeyIdentifier,
                 date GeneralizedTime OPTIONAL,
                 other OtherKeyAttribute OPTIONAL
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.ScvpReqRes.ToAsn1Object">
            <pre>
               ScvpReqRes ::= SEQUENCE {
               request  [0] EXPLICIT ContentInfo OPTIONAL,
               response     ContentInfo }
            </pre>
            @return  the ASN.1 primitive representation.
        </member>
        <member name="T:Spire.Security.Asn1.Cms.SignedData">
            a signed data object.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SignedData ::= Sequence {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Cms.SignedDataParser">
            <pre>
            SignedData ::= SEQUENCE {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.SignerIdentifier.GetInstance(System.Object)">
             return a SignerIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.SignerIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             SignerIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  SignerIdentifier sid,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:Spire.Security.Asn1.Cms.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Cms.TimeStampAndCrl.ToAsn1Object">
            <pre>
            TimeStampAndCRL ::= SEQUENCE {
                timeStamp   TimeStampToken,          -- according to RFC 3161
                crl         CertificateList OPTIONAL -- according to RFC 5280
             }
            </pre>
            @return
        </member>
        <member name="M:Spire.Security.Asn1.Cms.TimeStampedData.ToAsn1Object">
            <pre>
            TimeStampedData ::= SEQUENCE {
              version              INTEGER { v1(1) },
              dataUri              IA5String OPTIONAL,
              metaData             MetaData OPTIONAL,
              content              OCTET STRING OPTIONAL,
              temporalEvidence     Evidence
            }
            </pre>
            @return
        </member>
        <member name="M:Spire.Security.Asn1.Cms.TimeStampTokenEvidence.ToAsn1Object">
            <pre>
            TimeStampTokenEvidence ::=
               SEQUENCE SIZE(1..MAX) OF TimeStampAndCrl
            </pre>
            @return
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.AttributeTypeAndValue.ToAsn1Object">
            <pre>
            AttributeTypeAndValue ::= SEQUENCE {
                      type         OBJECT IDENTIFIER,
                      value        ANY DEFINED BY type }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertId.ToAsn1Object">
            <pre>
            CertId ::= SEQUENCE {
                            issuer           GeneralName,
                            serialNumber     INTEGER }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertReqMessages.ToAsn1Object">
            <pre>
            CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertReqMsg.#ctor(Spire.Security.Asn1.Crmf.CertRequest,Spire.Security.Asn1.Crmf.ProofOfPossession,Spire.Security.Asn1.Crmf.AttributeTypeAndValue[])">
            Creates a new CertReqMsg.
            @param certReq CertRequest
            @param popo may be null
            @param regInfo may be null
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertReqMsg.ToAsn1Object">
            <pre>
            CertReqMsg ::= SEQUENCE {
                               certReq   CertRequest,
                               pop       ProofOfPossession  OPTIONAL,
                               -- content depends upon key type
                               regInfo   SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertRequest.ToAsn1Object">
            <pre>
            CertRequest ::= SEQUENCE {
                                 certReqId     INTEGER,          -- ID for matching request and reply
                                 certTemplate  CertTemplate,  -- Selected fields of cert to be issued
                                 controls      Controls OPTIONAL }   -- Attributes affecting issuance
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertTemplate.ToAsn1Object">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertTemplateBuilder.SetVersion(System.Int32)">
            Sets the X.509 version. Note: for X509v3, use 2 here. 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertTemplateBuilder.SetIssuerUID(Spire.Security.Asn1.DerBitString)">
            Sets the issuer unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertTemplateBuilder.SetSubjectUID(Spire.Security.Asn1.DerBitString)">
            Sets the subject unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.CertTemplateBuilder.Build">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.Controls.ToAsn1Object">
            <pre>
            Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.EncKeyWithID.ToAsn1Object">
            <pre>
            EncKeyWithID ::= SEQUENCE {
                 privateKey           PrivateKeyInfo,
                 identifier CHOICE {
                    string               UTF8String,
                    generalName          GeneralName
                } OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.EncryptedKey.ToAsn1Object">
            <pre>
               EncryptedKey ::= CHOICE {
                   encryptedValue        EncryptedValue, -- deprecated
                   envelopedData     [0] EnvelopedData }
                   -- The encrypted private key MUST be placed in the envelopedData
                   -- encryptedContentInfo encryptedContent OCTET STRING.
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.EncryptedValue.ToAsn1Object">
            <pre>
            EncryptedValue ::= SEQUENCE {
                                intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,
                                -- the intended algorithm for which the value will be used
                                symmAlg       [1] AlgorithmIdentifier  OPTIONAL,
                                -- the symmetric algorithm used to encrypt the value
                                encSymmKey    [2] BIT STRING           OPTIONAL,
                                -- the (encrypted) symmetric key used to encrypt the value
                                keyAlg        [3] AlgorithmIdentifier  OPTIONAL,
                                -- algorithm used to encrypt the symmetric key
                                valueHint     [4] OCTET STRING         OPTIONAL,
                                -- a brief description or identifier of the encValue content
                                -- (may be meaningful only to the sending entity, and used only
                                -- if EncryptedValue might be re-examined by the sending entity
                                -- in the future)
                                encValue       BIT STRING }
                                -- the encrypted value itself
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.OptionalValidity.ToAsn1Object">
            <pre>
            OptionalValidity ::= SEQUENCE {
                                   notBefore  [0] Time OPTIONAL,
                                   notAfter   [1] Time OPTIONAL } --at least one MUST be present
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PkiArchiveOptions.ToAsn1Object">
            <pre>
             PkiArchiveOptions ::= CHOICE {
                 encryptedPrivKey     [0] EncryptedKey,
                 -- the actual value of the private key
                 keyGenParameters     [1] KeyGenParameters,
                 -- parameters which allow the private key to be re-generated
                 archiveRemGenPrivKey [2] BOOLEAN }
                 -- set to TRUE if sender wishes receiver to archive the private
                 -- key of a key pair that the receiver generates in response to
                 -- this request; set to FALSE if no archival is desired.
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PkiPublicationInfo.ToAsn1Object">
            <pre>
            PkiPublicationInfo ::= SEQUENCE {
                             action     INTEGER {
                                            dontPublish (0),
                                            pleasePublish (1) },
                             pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }
            -- pubInfos MUST NOT be present if action is "dontPublish"
            -- (if action is "pleasePublish" and pubInfos is omitted,
            -- "dontCare" is assumed)
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Spire.Security.Asn1.Crmf.PKMacValue">
            Password-based MAC value for use with POPOSigningKeyInput.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PKMacValue.#ctor(Spire.Security.Asn1.Cmp.PbmParameter,Spire.Security.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param params parameters for password-based MAC
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PKMacValue.#ctor(Spire.Security.Asn1.X509.AlgorithmIdentifier,Spire.Security.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param aid CMPObjectIdentifiers.passwordBasedMAC, with PBMParameter
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PKMacValue.ToAsn1Object">
            <pre>
            PKMACValue ::= SEQUENCE {
                 algId  AlgorithmIdentifier,
                 -- algorithm value shall be PasswordBasedMac 1.2.840.113533.7.66.13
                 -- parameter value is PBMParameter
                 value  BIT STRING }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PopoPrivKey.ToAsn1Object">
            <pre>
            PopoPrivKey ::= CHOICE {
                   thisMessage       [0] BIT STRING,         -- Deprecated
                    -- possession is proven in this message (which contains the private
                    -- key itself (encrypted for the CA))
                   subsequentMessage [1] SubsequentMessage,
                    -- possession will be proven in a subsequent message
                   dhMAC             [2] BIT STRING,         -- Deprecated
                   agreeMAC          [3] PKMACValue,
                   encryptedKey      [4] EnvelopedData }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PopoSigningKey.#ctor(Spire.Security.Asn1.Crmf.PopoSigningKeyInput,Spire.Security.Asn1.X509.AlgorithmIdentifier,Spire.Security.Asn1.DerBitString)">
            Creates a new Proof of Possession object for a signing key.
            @param poposkIn the PopoSigningKeyInput structure, or null if the
                CertTemplate includes both subject and publicKey values.
            @param aid the AlgorithmIdentifier used to sign the proof of possession.
            @param signature a signature over the DER-encoded value of poposkIn,
                or the DER-encoded value of certReq if poposkIn is null.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PopoSigningKey.ToAsn1Object">
            <pre>
            PopoSigningKey ::= SEQUENCE {
                                 poposkInput           [0] PopoSigningKeyInput OPTIONAL,
                                 algorithmIdentifier   AlgorithmIdentifier,
                                 signature             BIT STRING }
             -- The signature (using "algorithmIdentifier") is on the
             -- DER-encoded value of poposkInput.  NOTE: If the CertReqMsg
             -- certReq CertTemplate contains the subject and publicKey values,
             -- then poposkInput MUST be omitted and the signature MUST be
             -- computed on the DER-encoded value of CertReqMsg certReq.  If
             -- the CertReqMsg certReq CertTemplate does not contain the public
             -- key and subject values, then poposkInput MUST be present and
             -- MUST be signed.  This strategy ensures that the public key is
             -- not present in both the poposkInput and CertReqMsg certReq
             -- CertTemplate fields.
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PopoSigningKeyInput.#ctor(Spire.Security.Asn1.X509.GeneralName,Spire.Security.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput with sender name as authInfo. 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PopoSigningKeyInput.#ctor(Spire.Security.Asn1.Crmf.PKMacValue,Spire.Security.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput using password-based MAC. 
        </member>
        <member name="P:Spire.Security.Asn1.Crmf.PopoSigningKeyInput.Sender">
            Returns the sender field, or null if authInfo is publicKeyMac 
        </member>
        <member name="P:Spire.Security.Asn1.Crmf.PopoSigningKeyInput.PublicKeyMac">
            Returns the publicKeyMac field, or null if authInfo is sender 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.PopoSigningKeyInput.ToAsn1Object">
            <pre>
            PopoSigningKeyInput ::= SEQUENCE {
                   authInfo             CHOICE {
                                            sender              [0] GeneralName,
                                            -- used only if an authenticated identity has been
                                            -- established for the sender (e.g., a DN from a
                                            -- previously-issued and currently-valid certificate
                                            publicKeyMac        PKMacValue },
                                            -- used if no authenticated GeneralName currently exists for
                                            -- the sender; publicKeyMac contains a password-based MAC
                                            -- on the DER-encoded value of publicKey
                   publicKey           SubjectPublicKeyInfo }  -- from CertTemplate
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.ProofOfPossession.#ctor">
            Creates a ProofOfPossession with type raVerified. 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.ProofOfPossession.#ctor(Spire.Security.Asn1.Crmf.PopoSigningKey)">
            Creates a ProofOfPossession for a signing key. 
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.ProofOfPossession.#ctor(System.Int32,Spire.Security.Asn1.Crmf.PopoPrivKey)">
            Creates a ProofOfPossession for key encipherment or agreement.
            @param type one of TYPE_KEY_ENCIPHERMENT or TYPE_KEY_AGREEMENT
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.ProofOfPossession.ToAsn1Object">
            <pre>
            ProofOfPossession ::= CHOICE {
                                      raVerified        [0] NULL,
                                      -- used if the RA has already verified that the requester is in
                                      -- possession of the private key
                                      signature         [1] PopoSigningKey,
                                      keyEncipherment   [2] PopoPrivKey,
                                      keyAgreement      [3] PopoPrivKey }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:Spire.Security.Asn1.Crmf.SinglePubInfo.ToAsn1Object">
            <pre>
            SinglePubInfo ::= SEQUENCE {
                   pubMethod    INTEGER {
                      dontCare    (0),
                      x500        (1),
                      web         (2),
                      ldap        (3) },
                  pubLocation  GeneralName OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:Spire.Security.Asn1.CryptoPro.ECGost3410NamedCurves">
            <summary>
            Table of the available named parameters for GOST 3410-2001 / 2012.
            </summary>
        </member>
        <member name="M:Spire.Security.Asn1.CryptoPro.ECGost3410NamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the ECDomainParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="P:Spire.Security.Asn1.CryptoPro.ECGost3410NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Spire.Security.Asn1.CryptoPro.ECGost3410NamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="M:Spire.Security.Asn1.CryptoPro.Gost28147Parameters.ToAsn1Object">
             <pre>
             Gost28147-89-Parameters ::=
                           SEQUENCE {
                                   iv                   Gost28147-89-IV,
                                   encryptionParamSet   OBJECT IDENTIFIER
                            }
            
               Gost28147-89-IV ::= OCTET STRING (SIZE (8))
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.CryptoPro.Gost3410NamedParameters">
            table of the available named parameters for GOST 3410-94.
        </member>
        <member name="M:Spire.Security.Asn1.CryptoPro.Gost3410NamedParameters.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the GOST3410ParamSetParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="P:Spire.Security.Asn1.CryptoPro.Gost3410NamedParameters.Names">
            returns an enumeration containing the name strings for parameters
            contained in this structure.
        </member>
        <member name="T:Spire.Security.Asn1.DerApplicationSpecific">
            Base class for an application specific object
        </member>
        <member name="M:Spire.Security.Asn1.DerApplicationSpecific.GetObject">
             Return the enclosed object assuming explicit tagging.
            
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="M:Spire.Security.Asn1.DerApplicationSpecific.GetObject(System.Int32)">
             Return the enclosed object assuming implicit tagging.
            
             @param derTagNo the type tag that should be applied to the object's contents.
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="M:Spire.Security.Asn1.DerBitString.GetInstance(System.Object)">
             return a Bit string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerBitString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Bit string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerBitString.#ctor(System.Byte[],System.Int32)">
            @param data the octets making up the bit string.
            @param padBits the number of extra bits at the end of the string.
        </member>
        <member name="M:Spire.Security.Asn1.DerBitString.GetOctets">
             Return the octets contained in this BIT STRING, checking that this BIT STRING really
             does represent an octet aligned string. Only use this method when the standard you are
             following dictates that the BIT STRING will be octet aligned.
            
             @return a copy of the octet aligned data.
        </member>
        <member name="P:Spire.Security.Asn1.DerBitString.IntValue">
            @return the value of the bit string as an int (truncating if necessary)
        </member>
        <member name="T:Spire.Security.Asn1.DerBmpString">
            Der BMPString object.
        </member>
        <member name="M:Spire.Security.Asn1.DerBmpString.GetInstance(System.Object)">
             return a BMP string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerBmpString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a BMP string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerBmpString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Spire.Security.Asn1.DerBmpString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:Spire.Security.Asn1.DerBoolean.GetInstance(System.Object)">
             return a bool from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerBoolean.GetInstance(System.Boolean)">
            return a DerBoolean from the passed in bool.
        </member>
        <member name="M:Spire.Security.Asn1.DerBoolean.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Boolean from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerEnumerated.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerEnumerated.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Enumerated from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="T:Spire.Security.Asn1.DerExternal">
            Class representing the DER-type External
        </member>
        <member name="M:Spire.Security.Asn1.DerExternal.#ctor(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.DerInteger,Spire.Security.Asn1.Asn1Object,Spire.Security.Asn1.DerTaggedObject)">
            Creates a new instance of DerExternal
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param externalData The external data in its encoded form.
        </member>
        <member name="M:Spire.Security.Asn1.DerExternal.#ctor(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.DerInteger,Spire.Security.Asn1.Asn1Object,System.Int32,Spire.Security.Asn1.Asn1Object)">
            Creates a new instance of DerExternal.
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param encoding The encoding to be used for the external data
            @param externalData The external data
        </member>
        <member name="P:Spire.Security.Asn1.DerExternal.Encoding">
            The encoding of the content. Valid values are
            <ul>
            <li><code>0</code> single-ASN1-type</li>
            <li><code>1</code> OCTET STRING</li>
            <li><code>2</code> BIT STRING</li>
            </ul>
        </member>
        <member name="T:Spire.Security.Asn1.DerGeneralizedTime">
            Generalized time object.
        </member>
        <member name="M:Spire.Security.Asn1.DerGeneralizedTime.GetInstance(System.Object)">
             return a generalized time from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerGeneralizedTime.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Generalized Time object from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerGeneralizedTime.#ctor(System.String)">
             The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z
             for local time, or Z+-HHMM on the end, for difference between local
             time and UTC time. The fractional second amount f must consist of at
             least one number with trailing zeroes removed.
            
             @param time the time string.
             @exception ArgumentException if string is an illegal format.
        </member>
        <member name="M:Spire.Security.Asn1.DerGeneralizedTime.#ctor(System.DateTime)">
            base constructor from a local time object
        </member>
        <member name="P:Spire.Security.Asn1.DerGeneralizedTime.TimeString">
            Return the time.
            @return The time string as it appeared in the encoded object.
        </member>
        <member name="M:Spire.Security.Asn1.DerGeneralizedTime.GetTime">
            return the time - always in the form of
             YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyyyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
        </member>
        <member name="M:Spire.Security.Asn1.DerGraphicString.GetInstance(System.Object)">
             return a Graphic String from the passed in object
            
             @param obj a DerGraphicString or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return a DerGraphicString instance, or null.
        </member>
        <member name="M:Spire.Security.Asn1.DerGraphicString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Graphic String from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
             @return a DerGraphicString instance, or null.
        </member>
        <member name="M:Spire.Security.Asn1.DerGraphicString.#ctor(System.Byte[])">
            basic constructor - with bytes.
            @param string the byte encoding of the characters making up the string.
        </member>
        <member name="T:Spire.Security.Asn1.DerIA5String">
            Der IA5String object - this is an ascii string.
        </member>
        <member name="M:Spire.Security.Asn1.DerIA5String.GetInstance(System.Object)">
             return a IA5 string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerIA5String.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an IA5 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerIA5String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:Spire.Security.Asn1.DerIA5String.#ctor(System.String)">
            basic constructor - without validation.
        </member>
        <member name="M:Spire.Security.Asn1.DerIA5String.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in an IA5String.
        </member>
        <member name="M:Spire.Security.Asn1.DerIA5String.IsIA5String(System.String)">
             return true if the passed in String can be represented without
             loss as an IA5String, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.DerInteger.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerInteger.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Integer from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="P:Spire.Security.Asn1.DerInteger.PositiveValue">
            in some cases positive values Get crammed into a space,
            that's not quite big enough...
        </member>
        <member name="T:Spire.Security.Asn1.DerNull">
            A Null object.
        </member>
        <member name="T:Spire.Security.Asn1.DerNumericString">
            Der NumericString object - this is an ascii string of characters {0,1,2,3,4,5,6,7,8,9, }.
        </member>
        <member name="M:Spire.Security.Asn1.DerNumericString.GetInstance(System.Object)">
             return a Numeric string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerNumericString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Numeric string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerNumericString.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:Spire.Security.Asn1.DerNumericString.#ctor(System.String)">
            basic constructor -  without validation..
        </member>
        <member name="M:Spire.Security.Asn1.DerNumericString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a NumericString.
        </member>
        <member name="M:Spire.Security.Asn1.DerNumericString.IsNumericString(System.String)">
             Return true if the string can be represented as a NumericString ('0'..'9', ' ')
            
             @param str string to validate.
             @return true if numeric, fale otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.DerObjectIdentifier.GetInstance(System.Object)">
             return an Oid from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerObjectIdentifier.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an object Identifier from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerObjectIdentifier.On(Spire.Security.Asn1.DerObjectIdentifier)">
            Return  true if this oid is an extension of the passed in branch, stem.
            @param stem the arc or branch that is a possible parent.
            @return  true if the branch is on the passed in stem, false otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.DerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="T:Spire.Security.Asn1.DerPrintableString">
            Der PrintableString object.
        </member>
        <member name="M:Spire.Security.Asn1.DerPrintableString.GetInstance(System.Object)">
             return a printable string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerPrintableString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Printable string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerPrintableString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Spire.Security.Asn1.DerPrintableString.#ctor(System.String)">
            basic constructor - this does not validate the string
        </member>
        <member name="M:Spire.Security.Asn1.DerPrintableString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a PrintableString.
        </member>
        <member name="M:Spire.Security.Asn1.DerPrintableString.IsPrintableString(System.String)">
             return true if the passed in String can be represented without
             loss as a PrintableString, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.DerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Spire.Security.Asn1.DerSequence.#ctor(Spire.Security.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Spire.Security.Asn1.DerSequence.#ctor(Spire.Security.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="T:Spire.Security.Asn1.DerSet">
            A Der encoded set object
        </member>
        <member name="M:Spire.Security.Asn1.DerSet.#ctor">
            create an empty set
        </member>
        <member name="M:Spire.Security.Asn1.DerSet.#ctor(Spire.Security.Asn1.Asn1Encodable)">
            @param obj - a single object that makes up the set.
        </member>
        <member name="M:Spire.Security.Asn1.DerSet.#ctor(Spire.Security.Asn1.Asn1EncodableVector)">
            @param v - a vector of objects making up the set.
        </member>
        <member name="T:Spire.Security.Asn1.DerT61String">
            Der T61String (also the teletex string) - 8-bit characters
        </member>
        <member name="M:Spire.Security.Asn1.DerT61String.GetInstance(System.Object)">
             return a T61 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerT61String.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an T61 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerT61String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:Spire.Security.Asn1.DerT61String.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="T:Spire.Security.Asn1.DerTaggedObject">
            DER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:Spire.Security.Asn1.DerTaggedObject.#ctor(System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Spire.Security.Asn1.DerTaggedObject.#ctor(System.Boolean,System.Int32,Spire.Security.Asn1.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Spire.Security.Asn1.DerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="T:Spire.Security.Asn1.DerUniversalString">
            Der UniversalString object.
        </member>
        <member name="M:Spire.Security.Asn1.DerUniversalString.GetInstance(System.Object)">
             return a Universal string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerUniversalString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Universal string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerUniversalString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="T:Spire.Security.Asn1.DerUtcTime">
            UTC time object.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtcTime.GetInstance(System.Object)">
             return an UTC Time from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtcTime.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an UTC Time from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtcTime.#ctor(System.String)">
            The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were
            never encoded. When you're creating one of these objects from scratch, that's
            what you want to use, otherwise we'll try to deal with whatever Gets read from
            the input stream... (this is why the input format is different from the GetTime()
            method output).
            <p>
            @param time the time string.</p>
        </member>
        <member name="M:Spire.Security.Asn1.DerUtcTime.#ctor(System.DateTime)">
            base constructor from a DateTime object
        </member>
        <member name="M:Spire.Security.Asn1.DerUtcTime.ToDateTime">
             return the time as a date based on whatever a 2 digit year will return. For
             standardised processing use ToAdjustedDateTime().
            
             @return the resulting date
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtcTime.ToAdjustedDateTime">
             return the time as an adjusted date
             in the range of 1950 - 2049.
            
             @return a date in the range of 1950 to 2049.
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="P:Spire.Security.Asn1.DerUtcTime.TimeString">
            return the time - always in the form of
             YYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
            <p>
            <b>Note:</b> In some cases, due to the local date processing, this
            may lead to unexpected results. If you want to stick the normal
            convention of 1950 to 2049 use the GetAdjustedTime() method.</p>
        </member>
        <member name="P:Spire.Security.Asn1.DerUtcTime.AdjustedTimeString">
            <summary>
            Return a time string as an adjusted date with a 4 digit year.
            This goes in the range of 1950 - 2049.
            </summary>
        </member>
        <member name="T:Spire.Security.Asn1.DerUtf8String">
            Der UTF8String object.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtf8String.GetInstance(System.Object)">
             return an UTF8 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtf8String.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return an UTF8 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtf8String.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Spire.Security.Asn1.DerUtf8String.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:Spire.Security.Asn1.DerVideotexString.GetInstance(System.Object)">
             return a Videotex String from the passed in object
            
             @param obj a DERVideotexString or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return a DERVideotexString instance, or null.
        </member>
        <member name="M:Spire.Security.Asn1.DerVideotexString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Videotex String from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
             @return a DERVideotexString instance, or null.
        </member>
        <member name="M:Spire.Security.Asn1.DerVideotexString.#ctor(System.Byte[])">
            basic constructor - with bytes.
            @param string the byte encoding of the characters making up the string.
        </member>
        <member name="T:Spire.Security.Asn1.DerVisibleString">
            Der VisibleString object.
        </member>
        <member name="M:Spire.Security.Asn1.DerVisibleString.GetInstance(System.Object)">
             return a Visible string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerVisibleString.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Visible string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Spire.Security.Asn1.DerVisibleString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Spire.Security.Asn1.DerVisibleString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CertificateValues">
            <remarks>
            RFC 3126: 4.3.1 Certificate Values Attribute Definition
            <code>
            CertificateValues ::= SEQUENCE OF Certificate
            </code>
            </remarks>
        </member>
        <member name="M:Spire.Security.Asn1.Esf.CommitmentTypeIndication.ToAsn1Object">
            <pre>
            CommitmentTypeIndication ::= SEQUENCE {
                 commitmentTypeId   CommitmentTypeIdentifier,
                 commitmentTypeQualifier   SEQUENCE SIZE (1..MAX) OF
                         CommitmentTypeQualifier OPTIONAL }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CommitmentTypeQualifier">
             Commitment type qualifiers, used in the Commitment-Type-Indication attribute (RFC3126).
            
             <pre>
               CommitmentTypeQualifier ::= SEQUENCE {
                   commitmentTypeIdentifier  CommitmentTypeIdentifier,
                   qualifier          ANY DEFINED BY commitmentTypeIdentifier OPTIONAL }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Esf.CommitmentTypeQualifier.#ctor(Spire.Security.Asn1.DerObjectIdentifier)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
        </member>
        <member name="M:Spire.Security.Asn1.Esf.CommitmentTypeQualifier.#ctor(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.Asn1Encodable)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:Spire.Security.Asn1.Esf.CommitmentTypeQualifier.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param as <code>CommitmentTypeQualifier</code> structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:Spire.Security.Asn1.Esf.CommitmentTypeQualifier.ToAsn1Object">
             Returns a DER-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CompleteCertificateRefs">
            <remarks>
            RFC 3126: 4.2.1 Complete Certificate Refs Attribute Definition
            <code>
            CompleteCertificateRefs ::= SEQUENCE OF OtherCertID
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CompleteRevocationRefs">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CrlIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlIdentifier ::= SEQUENCE 
            {
            	crlissuer		Name,
            	crlIssuedTime	UTCTime,
            	crlNumber		INTEGER OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CrlListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CRLListID ::= SEQUENCE 
            {
            	crls	SEQUENCE OF CrlValidatedID
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CrlOcspRef">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlOcspRef ::= SEQUENCE {
            	crlids		[0] CRLListID		OPTIONAL,
            	ocspids		[1] OcspListID		OPTIONAL,
            	otherRev	[2] OtherRevRefs	OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.CrlValidatedID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlValidatedID ::= SEQUENCE {
            	crlHash			OtherHash,
            	crlIdentifier	CrlIdentifier OPTIONAL}
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OcspIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspIdentifier ::= SEQUENCE {
            	ocspResponderID		ResponderID,
            		-- As in OCSP response data
            	producedAt			GeneralizedTime
            		-- As in OCSP response data
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OcspListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspListID ::=  SEQUENCE {
            	ocspResponses	SEQUENCE OF OcspResponsesID
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OcspResponsesID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspResponsesID ::= SEQUENCE {
            	ocspIdentifier	OcspIdentifier,
            	ocspRepHash		OtherHash OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OtherCertID">
            <remarks>
            <code>
            OtherCertID ::= SEQUENCE {
            	otherCertHash	OtherHash,
            	issuerSerial	IssuerSerial OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OtherHash">
            <remarks>
            <code>
            OtherHash ::= CHOICE {
            	sha1Hash	OtherHashValue, -- This contains a SHA-1 hash
            	otherHash	OtherHashAlgAndValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OtherHashAlgAndValue">
            <summary>
            Summary description for OtherHashAlgAndValue.
            </summary>
            <remarks>
            <code>
            OtherHashAlgAndValue ::= SEQUENCE {
            	hashAlgorithm	AlgorithmIdentifier,
            	hashValue		OtherHashValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OtherRevRefs">
             <remarks>
             RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
             <code>
             OtherRevRefs ::= SEQUENCE 
             {
            		otherRevRefType      OtherRevRefType,
            		otherRevRefs         ANY DEFINED BY otherRevRefType
             }
            
             OtherRevRefType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OtherRevVals">
             <remarks>
             RFC 3126: 4.3.2 Revocation Values Attribute Definition
             <code>
             OtherRevVals ::= SEQUENCE 
             {
            		otherRevValType      OtherRevValType,
            		otherRevVals         ANY DEFINED BY otherRevValType
             }
            
             OtherRevValType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.OtherSigningCertificate">
            <remarks>
            <code>
            OtherSigningCertificate ::= SEQUENCE {
            	certs		SEQUENCE OF OtherCertID,
            	policies	SEQUENCE OF PolicyInformation OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.RevocationValues">
            <remarks>
            RFC 5126: 6.3.4.  revocation-values Attribute Definition
            <code>
            RevocationValues ::=  SEQUENCE {
            	crlVals			[0] SEQUENCE OF CertificateList     OPTIONAL,
            	ocspVals		[1] SEQUENCE OF BasicOCSPResponse   OPTIONAL,
            	otherRevVals	[2] OtherRevVals OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.SignaturePolicyId">
            <remarks>
            <code>
            SignaturePolicyId ::= SEQUENCE {
            	sigPolicyIdentifier		SigPolicyId,
            	sigPolicyHash			SigPolicyHash,
            	sigPolicyQualifiers		SEQUENCE SIZE (1..MAX) OF SigPolicyQualifierInfo OPTIONAL
            }
            
            SigPolicyId ::= OBJECT IDENTIFIER
            
            SigPolicyHash ::= OtherHashAlgAndValue
            </code>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.SignaturePolicyIdentifier">
            <remarks>
            <code>
            SignaturePolicyIdentifier ::= CHOICE {
            	SignaturePolicyId		SignaturePolicyId,
            	SignaturePolicyImplied	SignaturePolicyImplied
            }
            
            SignaturePolicyImplied ::= NULL
            </code>
            </remarks>
        </member>
        <member name="M:Spire.Security.Asn1.Esf.SignerAttribute.ToAsn1Object">
            
             <pre>
              SignerAttribute ::= SEQUENCE OF CHOICE {
                  claimedAttributes   [0] ClaimedAttributes,
                  certifiedAttributes [1] CertifiedAttributes }
            
              ClaimedAttributes ::= SEQUENCE OF Attribute
              CertifiedAttributes ::= AttributeCertificate -- as defined in RFC 3281: see clause 4.1.
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.SignerLocation">
             Signer-Location attribute (RFC3126).
            
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Esf.SignerLocation.ToAsn1Object">
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
            
               DirectoryString ::= CHOICE {
                     teletexString           TeletexString (SIZE (1..MAX)),
                     printableString         PrintableString (SIZE (1..MAX)),
                     universalString         UniversalString (SIZE (1..MAX)),
                     utf8String              UTF8String (SIZE (1.. MAX)),
                     bmpString               BMPString (SIZE (1..MAX)) }
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Esf.SigPolicyQualifierInfo">
            <remarks>
            <code>
            SigPolicyQualifierInfo ::= SEQUENCE {
            	sigPolicyQualifierId  SigPolicyQualifierId,
            	sigQualifier          ANY DEFINED BY sigPolicyQualifierId
            }
            
            SigPolicyQualifierId ::= OBJECT IDENTIFIER
            </code>
            </remarks>
        </member>
        <member name="M:Spire.Security.Asn1.Ess.ContentHints.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:Spire.Security.Asn1.Ess.ContentHints.ToAsn1Object">
            <pre>
            ContentHints ::= SEQUENCE {
              contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
              contentType ContentType }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ess.ContentIdentifier.#ctor(Spire.Security.Asn1.Asn1OctetString)">
            Create from OCTET STRING whose octets represent the identifier.
        </member>
        <member name="M:Spire.Security.Asn1.Ess.ContentIdentifier.#ctor(System.Byte[])">
            Create from byte array representing the identifier.
        </member>
        <member name="M:Spire.Security.Asn1.Ess.ContentIdentifier.ToAsn1Object">
            The definition of ContentIdentifier is
            <pre>
            ContentIdentifier ::=  OCTET STRING
            </pre>
            id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 7 }
        </member>
        <member name="M:Spire.Security.Asn1.Ess.EssCertID.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:Spire.Security.Asn1.Ess.EssCertID.ToAsn1Object">
            <pre>
            EssCertID ::= SEQUENCE {
                certHash Hash,
                issuerSerial IssuerSerial OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ess.EssCertIDv2.ToAsn1Object">
             <pre>
             EssCertIDv2 ::=  SEQUENCE {
                 hashAlgorithm     AlgorithmIdentifier
                          DEFAULT {algorithm id-sha256},
                 certHash          Hash,
                 issuerSerial      IssuerSerial OPTIONAL
             }
            
             Hash ::= OCTET STRING
            
             IssuerSerial ::= SEQUENCE {
                 issuer         GeneralNames,
                 serialNumber   CertificateSerialNumber
             }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ess.OtherCertID.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:Spire.Security.Asn1.Ess.OtherCertID.ToAsn1Object">
             <pre>
             OtherCertID ::= SEQUENCE {
                 otherCertHash    OtherHash,
                 issuerSerial     IssuerSerial OPTIONAL }
            
             OtherHash ::= CHOICE {
                 sha1Hash     OCTET STRING,
                 otherHash    OtherHashAlgAndValue }
            
             OtherHashAlgAndValue ::= SEQUENCE {
                 hashAlgorithm    AlgorithmIdentifier,
                 hashValue        OCTET STRING }
            
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ess.OtherSigningCertificate.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:Spire.Security.Asn1.Ess.OtherSigningCertificate.ToAsn1Object">
            The definition of OtherSigningCertificate is
            <pre>
            OtherSigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF OtherCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-ets-otherSigCert OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 19 }
        </member>
        <member name="M:Spire.Security.Asn1.Ess.SigningCertificate.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:Spire.Security.Asn1.Ess.SigningCertificate.ToAsn1Object">
            The definition of SigningCertificate is
            <pre>
            SigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 12 }
        </member>
        <member name="M:Spire.Security.Asn1.Ess.SigningCertificateV2.ToAsn1Object">
            The definition of SigningCertificateV2 is
            <pre>
            SigningCertificateV2 ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertIDv2,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)
               member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
               smime(16) id-aa(2) 47 }
        </member>
        <member name="M:Spire.Security.Asn1.GM.GMNamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Asn1.GM.GMNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.GM.GMNamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Asn1.GM.GMNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:Spire.Security.Asn1.Gnu.GnuObjectIdentifiers.EllipticCurve">
            1.3.6.1.4.1.11591.15 - ellipticCurve 
        </member>
        <member name="T:Spire.Security.Asn1.IAsn1Choice">
            Marker interface for CHOICE objects - if you implement this in a roll-your-own
            object, any attempt to tag the object implicitly will convert the tag to an
            explicit one as the encoding rules require.
            <p>
            If you use this interface your class should also implement the getInstance
            pattern which takes a tag object and the tagging mode used. 
            </p>
        </member>
        <member name="T:Spire.Security.Asn1.IAsn1String">
            basic interface for Der string objects.
        </member>
        <member name="T:Spire.Security.Asn1.Icao.CscaMasterList">
             The CscaMasterList object. This object can be wrapped in a
             CMSSignedData to be published in LDAP.
            
             <pre>
             CscaMasterList ::= SEQUENCE {
               version                CscaMasterListVersion,
               certList               SET OF Certificate }
               
             CscaMasterListVersion :: INTEGER {v0(0)}
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Icao.DataGroupHash">
             The DataGroupHash object.
             <pre>
             DataGroupHash  ::=  SEQUENCE {
                  dataGroupNumber         DataGroupNumber,
                  dataGroupHashValue     OCTET STRING }
            
             DataGroupNumber ::= INTEGER {
                     dataGroup1    (1),
                     dataGroup1    (2),
                     dataGroup1    (3),
                     dataGroup1    (4),
                     dataGroup1    (5),
                     dataGroup1    (6),
                     dataGroup1    (7),
                     dataGroup1    (8),
                     dataGroup1    (9),
                     dataGroup1    (10),
                     dataGroup1    (11),
                     dataGroup1    (12),
                     dataGroup1    (13),
                     dataGroup1    (14),
                     dataGroup1    (15),
                     dataGroup1    (16) }
            
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Icao.LdsSecurityObject">
             The LDSSecurityObject object (V1.8).
             <pre>
             LDSSecurityObject ::= SEQUENCE {
               version                LDSSecurityObjectVersion,
               hashAlgorithm          DigestAlgorithmIdentifier,
               dataGroupHashValues    SEQUENCE SIZE (2..ub-DataGroups) OF DataHashGroup,
               ldsVersionInfo         LDSVersionInfo OPTIONAL
                 -- if present, version MUST be v1 }
            
             DigestAlgorithmIdentifier ::= AlgorithmIdentifier,
            
             LDSSecurityObjectVersion :: INTEGER {V0(0)}
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Icao.LdsVersionInfo.ToAsn1Object">
            <pre>
            LDSVersionInfo ::= SEQUENCE {
               ldsVersion PRINTABLE STRING
               unicodeVersion PRINTABLE STRING
             }
            </pre>
            @return
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCPAccredited">
            The id-isismtt-cp-accredited OID indicates that the certificate is a
            qualified certificate according to Directive 1999/93/EC of the European
            Parliament and of the Council of 13 December 1999 on a Community
            Framework for Electronic Signatures, which additionally conforms the
            special requirements of the SigG and has been issued by an accredited CA.
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDateOfCertGen">
             Certificate extensionDate of certificate generation
             
             <pre>
            		DateOfCertGenSyntax ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATProcuration">
            Attribute to indicate that the certificate holder may sign in the name of
            a third person. May also be used as extension in a certificate.
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdmission">
            Attribute to indicate admissions to certain professions. May be used as
            attribute in attribute certificate or as extension in a certificate
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATMonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST
            be used in new certificates in place of the extension/attribute
            MonetaryLimit since January 1, 2004. For the sake of backward
            compatibility with certificates already in use, SigG conforming
            components MUST support MonetaryLimit (as well as QcEuLimitValue).
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDeclarationOfMajority">
            A declaration of majority. May be used as attribute in attribute
            certificate or as extension in a certificate
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATIccsn">
             
             Serial number of the smart card containing the corresponding private key
             
             <pre>
            		ICCSNSyntax ::= OCTET STRING (SIZE(8..20))
             </pre>
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATPKReference">
             
             Reference for a file of a smartcard that stores the public key of this
             certificate and that is used as �security anchor�.
             
             <pre>
            		PKReferenceSyntax ::= OCTET STRING (SIZE(20))
             </pre>
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRestriction">
             Some other restriction regarding the usage of this certificate. May be
             used as attribute in attribute certificate or as extension in a
             certificate.
             
             <pre>
            		RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
             
             @see Spire.Security.Asn1.IsisMtt.X509.Restriction
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRetrieveIfAllowed">
             
             (Single)Request extension: Clients may include this extension in a
             (single) Request to request the responder to send the certificate in the
             response message along with the status information. Besides the LDAP
             service, this extension provides another mechanism for the distribution
             of certificates, which MAY optionally be provided by certificate
             repositories.
             
             <pre>
            		RetrieveIfAllowed ::= BOOLEAN
             </pre>
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRequestedCertificate">
            SingleOCSPResponse extension: The certificate requested by the client by
            inserting the RetrieveIfAllowed extension in the request, will be
            returned in this extension.
            
            @see Spire.Security.Asn1.IsisMtt.Ocsp.RequestedCertificate
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNamingAuthorities">
            Base ObjectIdentifier for naming authorities
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertInDirSince">
             SingleOCSPResponse extension: Date, when certificate has been published
             in the directory and status information has become available. Currently,
             accrediting authorities enforce that SigG-conforming OCSP servers include
             this extension in the responses.
             
             <pre>
            		CertInDirSince ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertHash">
             Hash of a certificate in OCSP.
            
             @see Spire.Security.Asn1.IsisMtt.Ocsp.CertHash
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNameAtBirth">
             <pre>
            		NameAtBirth ::= DirectoryString(SIZE(1..64)
             </pre>
             
             Used in
             {@link Spire.Security.Asn1.X509.SubjectDirectoryAttributes SubjectDirectoryAttributes}
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdditionalInformation">
            Some other information of non-restrictive nature regarding the usage of
            this certificate. May be used as attribute in atribute certificate or as
            extension in a certificate.
            
            <pre>
                          AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
            
            @see Spire.Security.Asn1.IsisMtt.X509.AdditionalInformationSyntax
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATLiabilityLimitationFlag">
             Indicates that an attribute certificate exists, which limits the
             usability of this public key certificate. Whenever verifying a signature
             with the help of this certificate, the content of the corresponding
             attribute certificate should be concerned. This extension MUST be
             included in a PKC, if a corresponding attribute certificate (having the
             PKC as base certificate) contains some attribute that restricts the
             usability of the PKC too. Attribute certificates with restricting content
             MUST always be included in the signed document.
             
             <pre>
            		LiabilityLimitationFlagSyntax ::= BOOLEAN
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.Ocsp.CertHash">
            ISIS-MTT PROFILE: The responder may include this extension in a response to
            send the hash of the requested certificate to the responder. This hash is
            cryptographically bound to the certificate and serves as evidence that the
            certificate is known to the responder (i.e. it has been issued and is present
            in the directory). Hence, this extension is a means to provide a positive
            statement of availability as described in T8.[8]. As explained in T13.[1],
            clients may rely on this information to be able to validate signatures after
            the expiry of the corresponding certificate. Hence, clients MUST support this
            extension. If a positive statement of availability is to be delivered, this
            extension syntax and OID MUST be used.
            <p/>
            <p/>
            <pre>
                CertHash ::= SEQUENCE {
                  hashAlgorithm AlgorithmIdentifier,
                  certificateHash OCTET STRING
                }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.Ocsp.CertHash.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertHash:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.Ocsp.CertHash.#ctor(Spire.Security.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
             Constructor from a given details.
            
             @param hashAlgorithm   The hash algorithm identifier.
             @param certificateHash The hash of the whole DER encoding of the certificate.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.Ocsp.CertHash.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.Ocsp.RequestedCertificate">
            ISIS-MTT-Optional: The certificate requested by the client by inserting the
            RetrieveIfAllowed extension in the request, will be returned in this
            extension.
            <p/>
            ISIS-MTT-SigG: The signature act allows publishing certificates only then,
            when the certificate owner gives his isExplicit permission. Accordingly, there
            may be �nondownloadable� certificates, about which the responder must provide
            status information, but MUST NOT include them in the response. Clients may
            get therefore the following three kind of answers on a single request
            including the RetrieveIfAllowed extension:
            <ul>
            <li> a) the responder supports the extension and is allowed to publish the
            certificate: RequestedCertificate returned including the requested
            certificate</li>
            <li>b) the responder supports the extension but is NOT allowed to publish
            the certificate: RequestedCertificate returned including an empty OCTET
            STRING</li>
            <li>c) the responder does not support the extension: RequestedCertificate is
            not included in the response</li>
            </ul>
            Clients requesting RetrieveIfAllowed MUST be able to handle these cases. If
            any of the OCTET STRING options is used, it MUST contain the DER encoding of
            the requested certificate.
            <p/>
            <pre>
                       RequestedCertificate ::= CHOICE {
                         Certificate Certificate,
                         publicKeyCertificate [0] EXPLICIT OCTET STRING,
                         attributeCertificate [1] EXPLICIT OCTET STRING
                       }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.Ocsp.RequestedCertificate.#ctor(Spire.Security.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
             <p/>
             Only one parameter can be given. All other must be <code>null</code>.
            
             @param certificate Given as Certificate
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.Ocsp.RequestedCertificate.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                        RequestedCertificate ::= CHOICE {
                          Certificate Certificate,
                          publicKeyCertificate [0] EXPLICIT OCTET STRING,
                          attributeCertificate [1] EXPLICIT OCTET STRING
                        }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.AdditionalInformationSyntax">
            Some other information of non-restrictive nature regarding the usage of this
            certificate.
            
            <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.AdditionalInformationSyntax.#ctor(System.String)">
             Constructor from a given details.
            
             @param information The describtion of the information.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.AdditionalInformationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.Admissions">
             An Admissions structure.
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             <p/>
             </pre>
            
             @see Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax
             @see Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo
             @see Spire.Security.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.Admissions.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.Admissions.#ctor(Spire.Security.Asn1.X509.GeneralName,Spire.Security.Asn1.IsisMtt.X509.NamingAuthority,Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo[])">
             Constructor from a given details.
             <p/>
             Parameter <code>professionInfos</code> is mandatory.
            
             @param admissionAuthority The admission authority.
             @param namingAuthority    The naming authority.
             @param professionInfos    The profession infos.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.Admissions.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   Admissions ::= SEQUENCE
                   {
                     admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                     namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                     professionInfos SEQUENCE OF ProfessionInfo
                   }
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax">
             Attribute to indicate admissions to certain professions.
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
             <p/>
             <p/>
             ISIS-MTT PROFILE: The relatively complex structure of AdmissionSyntax
             supports the following concepts and requirements:
             <ul>
             <li> External institutions (e.g. professional associations, chambers, unions,
             administrative bodies, companies, etc.), which are responsible for granting
             and verifying professional admissions, are indicated by means of the data
             field admissionAuthority. An admission authority is indicated by a
             GeneralName object. Here an X.501 directory name (distinguished name) can be
             indicated in the field directoryName, a URL address can be indicated in the
             field uniformResourceIdentifier, and an object identifier can be indicated in
             the field registeredId.</li>
             <li> The names of authorities which are responsible for the administration of
             title registers are indicated in the data field namingAuthority. The name of
             the authority can be identified by an object identifier in the field
             namingAuthorityId, by means of a text string in the field
             namingAuthorityText, by means of a URL address in the field
             namingAuthorityUrl, or by a combination of them. For example, the text string
             can contain the name of the authority, the country and the name of the title
             register. The URL-option refers to a web page which contains lists with
             officially registered professions (text and possibly OID) as well as
             further information on these professions. Object identifiers for the
             component namingAuthorityId are grouped under the OID-branch
             id-isis-at-namingAuthorities and must be applied for.</li>
             <li>See http://www.teletrust.de/anwend.asp?Id=30200&amp;Sprache=E_&amp;HomePG=0
             for an application form and http://www.teletrust.de/links.asp?id=30220,11
             for an overview of registered naming authorities.</li>
             <li> By means of the data type ProfessionInfo certain professions,
             specializations, disciplines, fields of activity, etc. are identified. A
             profession is represented by one or more text strings, resp. profession OIDs
             in the fields professionItems and professionOIDs and by a registration number
             in the field registrationNumber. An indication in text form must always be
             present, whereas the other indications are optional. The component
             addProfessionInfo may contain additional applicationspecific information in
             DER-encoded form.</li>
             </ul>
             <p/>
             By means of different namingAuthority-OIDs or profession OIDs hierarchies of
             professions, specializations, disciplines, fields of activity, etc. can be
             expressed. The issuing admission authority should always be indicated (field
             admissionAuthority), whenever a registration number is presented. Still,
             information on admissions can be given without indicating an admission or a
             naming authority by the exclusive use of the component professionItems. In
             this case the certification authority is responsible for the verification of
             the admission information.
             <p/>
             <p/>
             <p/>
             This attribute is single-valued. Still, several admissions can be captured in
             the sequence structure of the component contentsOfAdmissions of
             AdmissionSyntax or in the component professionInfos of Admissions. The
             component admissionAuthority of AdmissionSyntax serves as default value for
             the component admissionAuthority of Admissions. Within the latter component
             the default value can be overwritten, in case that another authority is
             responsible. The component namingAuthority of Admissions serves as a default
             value for the component namingAuthority of ProfessionInfo. Within the latter
             component the default value can be overwritten, in case that another naming
             authority needs to be recorded.
             <p/>
             The length of the string objects is limited to 128 characters. It is
             recommended to indicate a namingAuthorityURL in all issued attribute
             certificates. If a namingAuthorityURL is indicated, the field professionItems
             of ProfessionInfo should contain only registered titles. If the field
             professionOIDs exists, it has to contain the OIDs of the professions listed
             in professionItems in the same order. In general, the field professionInfos
             should contain only one entry, unless the admissions that are to be listed
             are logically connected (e.g. they have been issued under the same admission
             number).
            
             @see Spire.Security.Asn1.IsisMtt.X509.Admissions
             @see Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo
             @see Spire.Security.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(Spire.Security.Asn1.X509.GeneralName,Spire.Security.Asn1.Asn1Sequence)">
             Constructor from given details.
            
             @param admissionAuthority   The admission authority.
             @param contentsOfAdmissions The admissions.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax.AdmissionAuthority">
            @return Returns the admissionAuthority if present, null otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax.GetContentsOfAdmissions">
            @return Returns the contentsOfAdmissions.
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.DeclarationOfMajority">
            A declaration of majority.
            <p/>
            <pre>
                      DeclarationOfMajoritySyntax ::= CHOICE
                      {
                        notYoungerThan [0] IMPLICIT INTEGER,
                        fullAgeAtCountry [1] IMPLICIT SEQUENCE
                        {
                          fullAge BOOLEAN DEFAULT TRUE,
                          country PrintableString (SIZE(2))
                        }
                        dateOfBirth [2] IMPLICIT GeneralizedTime
                      }
            </pre>
            <p/>
            fullAgeAtCountry indicates the majority of the owner with respect to the laws
            of a specific country.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.DeclarationOfMajority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                       DeclarationOfMajoritySyntax ::= CHOICE
                       {
                         notYoungerThan [0] IMPLICIT INTEGER,
                         fullAgeAtCountry [1] IMPLICIT SEQUENCE
                         {
                           fullAge BOOLEAN DEFAULT TRUE,
                           country PrintableString (SIZE(2))
                         }
                         dateOfBirth [2] IMPLICIT GeneralizedTime
                       }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.DeclarationOfMajority.NotYoungerThan">
            @return notYoungerThan if that's what we are, -1 otherwise
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.MonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST be
            used in new certificates in place of the extension/attribute MonetaryLimit
            since January 1, 2004. For the sake of backward compatibility with
            certificates already in use, components SHOULD support MonetaryLimit (as well
            as QcEuLimitValue).
            <p/>
            Indicates a monetary limit within which the certificate holder is authorized
            to act. (This value DOES NOT express a limit on the liability of the
            certification authority).
            <p/>
            <pre>
               MonetaryLimitSyntax ::= SEQUENCE
               {
                 currency PrintableString (SIZE(3)),
                 amount INTEGER,
                 exponent INTEGER
               }
            </pre>
            <p/>
            currency must be the ISO code.
            <p/>
            value = amount�10*exponent
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.MonetaryLimit.#ctor(System.String,System.Int32,System.Int32)">
             Constructor from a given details.
             <p/>
             <p/>
             value = amount�10^exponent
            
             @param currency The currency. Must be the ISO code.
             @param amount   The amount
             @param exponent The exponent
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.MonetaryLimit.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                MonetaryLimitSyntax ::= SEQUENCE
                {
                  currency PrintableString (SIZE(3)),
                  amount INTEGER,
                  exponent INTEGER
                }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority">
            Names of authorities which are responsible for the administration of title
            registers.
            
            <pre>
                        NamingAuthority ::= SEQUENCE 
                        {
                          namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                          namingAuthorityUrl IA5String OPTIONAL,
                          namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                        }
            </pre>
            @see Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax
            
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.IdIsisMttATNamingAuthoritiesRechtWirtschaftSteuern">
            Profession OIDs should always be defined under the OID branch of the
            responsible naming authority. At the time of this writing, the work group
            �Recht, Wirtschaft, Steuern� (�Law, Economy, Taxes�) is registered as the
            first naming authority under the OID id-isismtt-at-namingAuthorities.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityID">
            @return Returns the namingAuthorityID.
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityText">
            @return Returns the namingAuthorityText.
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityUrl">
            @return Returns the namingAuthorityUrl.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.#ctor(Spire.Security.Asn1.DerObjectIdentifier,System.String,Spire.Security.Asn1.X500.DirectoryString)">
             Constructor from given details.
             <p/>
             All parameters can be combined.
            
             @param namingAuthorityID   ObjectIdentifier for naming authority.
             @param namingAuthorityUrl  URL for naming authority.
             @param namingAuthorityText Textual representation of naming authority.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.NamingAuthority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.ProcurationSyntax">
            Attribute to indicate that the certificate holder may sign in the name of a
            third person.
            <p>
            ISIS-MTT PROFILE: The corresponding ProcurationSyntax contains either the
            name of the person who is represented (subcomponent thirdPerson) or a
            reference to his/her base certificate (in the component signingFor,
            subcomponent certRef), furthermore the optional components country and
            typeSubstitution to indicate the country whose laws apply, and respectively
            the type of procuration (e.g. manager, procuration, custody).
            </p>
            <p>
            ISIS-MTT PROFILE: The GeneralName MUST be of type directoryName and MAY only
            contain: - RFC3039 attributes, except pseudonym (countryName, commonName,
            surname, givenName, serialNumber, organizationName, organizationalUnitName,
            stateOrProvincename, localityName, postalAddress) and - SubjectDirectoryName
            attributes (title, dateOfBirth, placeOfBirth, gender, countryOfCitizenship,
            countryOfResidence and NameAtBirth).
            </p>
            <pre>
                          ProcurationSyntax ::= SEQUENCE {
                            country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                            typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                            signingFor [3] EXPLICIT SigningFor 
                          }
                          
                          SigningFor ::= CHOICE 
                          { 
                            thirdPerson GeneralName,
                            certRef IssuerSerial 
                          }
            </pre>
            
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Spire.Security.Asn1.X500.DirectoryString,Spire.Security.Asn1.X509.IssuerSerial)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param certRef            Reference to certificate of the person who is represented.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Spire.Security.Asn1.X500.DirectoryString,Spire.Security.Asn1.X509.GeneralName)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param thirdPerson        The GeneralName of the person who is represented.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProcurationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo">
            Professions, specializations, disciplines, fields of activity, etc.
            
            <pre>
                          ProfessionInfo ::= SEQUENCE 
                          {
                            namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                            professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                            professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                            registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                            addProfessionInfo OCTET STRING OPTIONAL 
                          }
            </pre>
            
            @see Spire.Security.Asn1.IsisMtt.X509.AdmissionSyntax
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwltin">
            Rechtsanw�ltin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwalt">
            Rechtsanwalt
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsbeistand">
            Rechtsbeistand
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberaterin">
            Steuerberaterin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberater">
            Steuerberater
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigte">
            Steuerbevollm�chtigte
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigter">
            Steuerbevollm�chtigter
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Notarin">
            Notarin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Notar">
            Notar
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreterin">
            Notarvertreterin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreter">
            Notarvertreter
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalterin">
            Notariatsverwalterin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalter">
            Notariatsverwalter
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprferin">
            Wirtschaftspr�ferin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprfer">
            Wirtschaftspr�fer
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.VereidigteBuchprferin">
            Vereidigte Buchpr�ferin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.VereidigterBuchprfer">
            Vereidigter Buchpr�fer
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwltin">
            Patentanw�ltin
        </member>
        <member name="F:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwalt">
            Patentanwalt
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(Spire.Security.Asn1.IsisMtt.X509.NamingAuthority,Spire.Security.Asn1.X500.DirectoryString[],Spire.Security.Asn1.DerObjectIdentifier[],System.String,Spire.Security.Asn1.Asn1OctetString)">
             Constructor from given details.
             <p/>
             <code>professionItems</code> is mandatory, all other parameters are
             optional.
            
             @param namingAuthority    The naming authority.
             @param professionItems    Directory strings of the profession.
             @param professionOids     DERObjectIdentfier objects for the
                                       profession.
             @param registrationNumber Registration number.
             @param addProfessionInfo  Additional infos in encoded form.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.AddProfessionInfo">
            @return Returns the addProfessionInfo.
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.NamingAuthority">
            @return Returns the namingAuthority.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionItems">
            @return Returns the professionItems.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionOids">
            @return Returns the professionOids.
        </member>
        <member name="P:Spire.Security.Asn1.IsisMtt.X509.ProfessionInfo.RegistrationNumber">
            @return Returns the registrationNumber.
        </member>
        <member name="T:Spire.Security.Asn1.IsisMtt.X509.Restriction">
            Some other restriction regarding the usage of this certificate.
            <p/>
            <pre>
             RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.Restriction.#ctor(Spire.Security.Asn1.X500.DirectoryString)">
             Constructor from DirectoryString.
             <p/>
             The DirectoryString is of type RestrictionSyntax:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
            
             @param restriction A IAsn1String.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.Restriction.#ctor(System.String)">
             Constructor from a given details.
            
             @param restriction The description of the restriction.
        </member>
        <member name="M:Spire.Security.Asn1.IsisMtt.X509.Restriction.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:Spire.Security.Asn1.Misc.Cast5CbcParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            cast5CBCParameters ::= Sequence {
                                      iv         OCTET STRING DEFAULT 0,
                                             -- Initialization vector
                                      keyLength  Integer
                                             -- Key length, in bits
                                 }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Misc.IdeaCbcPar.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            IDEA-CBCPar ::= Sequence {
                                 iv    OCTET STRING OPTIONAL -- exactly 8 octets
                             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Misc.NetscapeCertType">
            The NetscapeCertType object.
            <pre>
               NetscapeCertType ::= BIT STRING {
                    SSLClient               (0),
                    SSLServer               (1),
                    S/MIME                  (2),
                    Object Signing          (3),
                    Reserved                (4),
                    SSL CA                  (5),
                    S/MIME CA               (6),
                    Object Signing CA       (7) }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Misc.NetscapeCertType.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509NetscapeCertType.sslCA | X509NetscapeCertType.smimeCA)
        </member>
        <member name="T:Spire.Security.Asn1.Mozilla.PublicKeyAndChallenge">
             This is designed to parse
             the PublicKeyAndChallenge created by the KEYGEN tag included by
             Mozilla based browsers.
              <pre>
              PublicKeyAndChallenge ::= SEQUENCE {
                spki SubjectPublicKeyInfo,
                challenge IA5STRING
              }
            
              </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Nist.NistNamedCurves">
            Utility class for fetching curves using their NIST names as published in FIPS-PUB 186-3
        </member>
        <member name="M:Spire.Security.Asn1.Nist.NistNamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Asn1.Nist.NistNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.Nist.NistNamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Asn1.Nist.NistNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="T:Spire.Security.Asn1.Ntt.NttObjectIdentifiers">
            <summary>From RFC 3657</summary>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.BasicOcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicOcspResponse       ::= Sequence {
                 tbsResponseData      ResponseData,
                 signatureAlgorithm   AlgorithmIdentifier,
                 signature            BIT STRING,
                 certs                [0] EXPLICIT Sequence OF Certificate OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.CertID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CertID          ::=     Sequence {
                hashAlgorithm       AlgorithmIdentifier,
                issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                serialNumber        CertificateSerialNumber }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.CertStatus.#ctor">
            create a CertStatus object with a tag of zero.
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.CertStatus.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             CertStatus ::= CHOICE {
                             good        [0]     IMPLICIT Null,
                             revoked     [1]     IMPLICIT RevokedInfo,
                             unknown     [2]     IMPLICIT UnknownInfo }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.CrlID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlID ::= Sequence {
                crlUrl               [0]     EXPLICIT IA5String OPTIONAL,
                crlNum               [1]     EXPLICIT Integer OPTIONAL,
                crlTime              [2]     EXPLICIT GeneralizedTime OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.OcspRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspRequest     ::=     Sequence {
                tbsRequest                  TBSRequest,
                optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.OcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspResponse ::= Sequence {
                responseStatus         OcspResponseStatus,
                responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.OcspResponseStatus.#ctor(System.Int32)">
            The OcspResponseStatus enumeration.
            <pre>
            OcspResponseStatus ::= Enumerated {
                successful            (0),  --Response has valid confirmations
                malformedRequest      (1),  --Illegal confirmation request
                internalError         (2),  --Internal error in issuer
                tryLater              (3),  --Try again later
                                            --(4) is not used
                sigRequired           (5),  --Must sign the request
                unauthorized          (6)   --Request unauthorized
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.Request.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Request         ::=     Sequence {
                reqCert                     CertID,
                singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.ResponderID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponderID ::= CHOICE {
                 byName          [1] Name,
                 byKey           [2] KeyHash }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.ResponseBytes.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseBytes ::=       Sequence {
                responseType   OBJECT IDENTIFIER,
                response       OCTET STRING }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.ResponseData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseData ::= Sequence {
                version              [0] EXPLICIT Version DEFAULT v1,
                responderID              ResponderID,
                producedAt               GeneralizedTime,
                responses                Sequence OF SingleResponse,
                responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.RevokedInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RevokedInfo ::= Sequence {
                 revocationTime              GeneralizedTime,
                 revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.ServiceLocator.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ServiceLocator ::= Sequence {
                issuer    Name,
                locator   AuthorityInfoAccessSyntax OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.Signature.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Signature       ::=     Sequence {
                signatureAlgorithm      AlgorithmIdentifier,
                signature               BIT STRING,
                certs               [0] EXPLICIT Sequence OF Certificate OPTIONAL}
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.SingleResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SingleResponse ::= Sequence {
                     certID                       CertID,
                     certStatus                   CertStatus,
                     thisUpdate                   GeneralizedTime,
                     nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
                     singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Ocsp.TbsRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            TBSRequest      ::=     Sequence {
                version             [0]     EXPLICIT Version DEFAULT v1,
                requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                requestList                 Sequence OF Request,
                requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.OidTokenizer">
            class for breaking up an Oid into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.AttributePkcs.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.AttributePkcs.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Pkcs.CertificationRequest">
            Pkcs10 Certfication request object.
            <pre>
            CertificationRequest ::= Sequence {
              certificationRequestInfo  CertificationRequestInfo,
              signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
              signature                 BIT STRING
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Pkcs.CertificationRequestInfo">
             Pkcs10 CertificationRequestInfo object.
             <pre>
              CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Pkcs.EncryptedData">
             The EncryptedData object.
             <pre>
                  EncryptedData ::= Sequence {
                       version Version,
                       encryptedContentInfo EncryptedContentInfo
                  }
            
            
                  EncryptedContentInfo ::= Sequence {
                      contentType ContentType,
                      contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
                      encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
                }
            
                EncryptedContent ::= OCTET STRING
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.EncryptedPrivateKeyInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             EncryptedPrivateKeyInfo ::= Sequence {
                  encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
                  encryptedData EncryptedData
             }
            
             EncryptedData ::= OCTET STRING
            
             KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= {
                      ... -- For local profiles
             }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.MacData.ToAsn1Object">
            <pre>
            MacData ::= SEQUENCE {
                mac      DigestInfo,
                macSalt  OCTET STRING,
                iterations INTEGER DEFAULT 1
                -- Note: The default is for historic reasons and its use is deprecated. A
                -- higher value, like 1024 is recommended.
            </pre>
            @return the basic DERObject construction.
        </member>
        <member name="T:Spire.Security.Asn1.Pkcs.Pfx">
            the infamous Pfx from Pkcs12
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512_224WithRSAEncryption">
            PKCS#1: 1.2.840.113549.1.1.15 
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.Sha512_256WithRSAEncryption">
            PKCS#1: 1.2.840.113549.1.1.16 
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.IdAADecryptKeyID">
            PKCS#9: 1.2.840.113549.1.9.16.6.2.37 - <a href="https://tools.ietf.org/html/rfc4108#section-2.2.5">RFC 4108</a> 
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAImplCryptoAlgs">
            PKCS#9: 1.2.840.113549.1.9.16.6.2.38 - <a href="https://tools.ietf.org/html/rfc4108#section-2.2.6">RFC 4108</a> 
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAAsymmDecryptKeyID">
            PKCS#9: 1.2.840.113549.1.9.16.2.54 <a href="https://tools.ietf.org/html/rfc7030">RFC7030</a>
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.IdAAImplCompressAlgs">
            PKCS#9: 1.2.840.113549.1.9.16.2.43   <a href="https://tools.ietf.org/html/rfc7030">RFC7030</a>
        </member>
        <member name="F:Spire.Security.Asn1.Pkcs.PkcsObjectIdentifiers.IdAACommunityIdentifiers">
            PKCS#9: 1.2.840.113549.1.9.16.2.40   <a href="https://tools.ietf.org/html/rfc7030">RFC7030</a>
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.PrivateKeyInfo.ToAsn1Object">
             write out an RSA private key with its associated information
             as described in Pkcs8.
             <pre>
                  PrivateKeyInfo ::= Sequence {
                                          version Version,
                                          privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
                                          privateKey PrivateKey,
                                          attributes [0] IMPLICIT Attributes OPTIONAL
                                      }
                  Version ::= Integer {v1(0)} (v1,...)
            
                  PrivateKey ::= OCTET STRING
            
                  Attributes ::= Set OF Attr
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.RsaesOaepParameters.#ctor">
            The default version
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.RsaesOaepParameters.ToAsn1Object">
             <pre>
              RSAES-OAEP-params ::= SEQUENCE {
                 hashAlgorithm      [0] OAEP-PSSDigestAlgorithms     DEFAULT sha1,
                 maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                 pSourceAlgorithm   [2] PKCS1PSourceAlgorithms  DEFAULT pSpecifiedEmpty
               }
            
               OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-sha1 PARAMETERS NULL   }|
                 { OID id-sha256 PARAMETERS NULL }|
                 { OID id-sha384 PARAMETERS NULL }|
                 { OID id-sha512 PARAMETERS NULL },
                 ...  -- Allows for future expansion --
               }
               PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
               }
               PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-pSpecified PARAMETERS OCTET STRING },
                 ...  -- Allows for future expansion --
              }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.RsaPrivateKeyStructure.ToAsn1Object">
             This outputs the key in Pkcs1v2 format.
             <pre>
                  RsaPrivateKey ::= Sequence {
                                      version Version,
                                      modulus Integer, -- n
                                      publicExponent Integer, -- e
                                      privateExponent Integer, -- d
                                      prime1 Integer, -- p
                                      prime2 Integer, -- q
                                      exponent1 Integer, -- d mod (p-1)
                                      exponent2 Integer, -- d mod (q-1)
                                      coefficient Integer -- (inverse of q) mod p
                                  }
            
                  Version ::= Integer
             </pre>
             <p>This routine is written to output Pkcs1 version 0, private keys.</p>
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.RsassaPssParameters.#ctor">
            The default version
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.RsassaPssParameters.ToAsn1Object">
             <pre>
             RSASSA-PSS-params ::= SEQUENCE {
               hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,
                maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                saltLength         [2] INTEGER  DEFAULT 20,
                trailerField       [3] TrailerField  DEFAULT trailerFieldBC
              }
            
             OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                { OID id-sha1 PARAMETERS NULL   }|
                { OID id-sha256 PARAMETERS NULL }|
                { OID id-sha384 PARAMETERS NULL }|
                { OID id-sha512 PARAMETERS NULL },
                ...  -- Allows for future expansion --
             }
            
             PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
               { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
             }
            
             TrailerField ::= INTEGER { trailerFieldBC(1) }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="T:Spire.Security.Asn1.Pkcs.SignedData">
            a Pkcs#7 signed data object.
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SignedData ::= Sequence {
                 version Version,
                 digestAlgorithms DigestAlgorithmIdentifiers,
                 contentInfo ContentInfo,
                 certificates
                     [0] IMPLICIT ExtendedCertificatesAndCertificates
                              OPTIONAL,
                 crls
                     [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                 signerInfos SignerInfos }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Pkcs.SignerInfo">
            a Pkcs#7 signer info object.
        </member>
        <member name="M:Spire.Security.Asn1.Pkcs.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  issuerAndSerialNumber IssuerAndSerialNumber,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Sec.ECPrivateKeyStructure">
            the elliptic curve private key object from SEC 1
        </member>
        <member name="M:Spire.Security.Asn1.Sec.ECPrivateKeyStructure.ToAsn1Object">
            ECPrivateKey ::= SEQUENCE {
                version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
                privateKey OCTET STRING,
                parameters [0] Parameters OPTIONAL,
                publicKey [1] BIT STRING OPTIONAL }
        </member>
        <member name="M:Spire.Security.Asn1.Sec.SecNamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Asn1.Sec.SecNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.Sec.SecNamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Asn1.Sec.SecNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:Spire.Security.Asn1.Sec.SecObjectIdentifiers.EllipticCurve">
            EllipticCurve OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3) certicom(132) curve(0)
            }
        </member>
        <member name="T:Spire.Security.Asn1.Smime.SmimeCapabilities">
            Handler class for dealing with S/MIME Capabilities
        </member>
        <member name="F:Spire.Security.Asn1.Smime.SmimeCapabilities.PreferSignedData">
            general preferences
        </member>
        <member name="F:Spire.Security.Asn1.Smime.SmimeCapabilities.Aes256Cbc">
            encryption algorithms preferences
        </member>
        <member name="M:Spire.Security.Asn1.Smime.SmimeCapabilities.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.Smime.SmimeCapabilities.GetCapabilitiesForOid(Spire.Security.Asn1.DerObjectIdentifier)">
            returns an ArrayList with 0 or more objects of all the capabilities
            matching the passed in capability Oid. If the Oid passed is null the
            entire set is returned.
        </member>
        <member name="M:Spire.Security.Asn1.Smime.SmimeCapabilities.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapabilities ::= Sequence OF SMIMECapability
            </pre>
        </member>
        <member name="F:Spire.Security.Asn1.Smime.SmimeCapability.PreferSignedData">
            general preferences
        </member>
        <member name="F:Spire.Security.Asn1.Smime.SmimeCapability.DesCbc">
            encryption algorithms preferences
        </member>
        <member name="M:Spire.Security.Asn1.Smime.SmimeCapability.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapability ::= Sequence {
                capabilityID OBJECT IDENTIFIER,
                parameters ANY DEFINED BY capabilityID OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.Smime.SmimeCapabilityVector">
            Handler for creating a vector S/MIME Capabilities
        </member>
        <member name="T:Spire.Security.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute">
            The SmimeEncryptionKeyPreference object.
            <pre>
            SmimeEncryptionKeyPreference ::= CHOICE {
                issuerAndSerialNumber   [0] IssuerAndSerialNumber,
                receipentKeyId          [1] RecipientKeyIdentifier,
                subjectAltKeyIdentifier [2] SubjectKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute.#ctor(Spire.Security.Asn1.Asn1OctetString)">
            @param sKeyId the subjectKeyIdentifier value (normally the X.509 one)
        </member>
        <member name="T:Spire.Security.Asn1.TeleTrust.TeleTrusTNamedCurves">
            elliptic curves defined in "ECC Brainpool Standard Curves and Curve Generation"
            http://www.ecc-brainpool.org/download/draft_pkix_additional_ecc_dp.txt
        </member>
        <member name="M:Spire.Security.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Asn1.TeleTrust.TeleTrusTNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.TeleTrust.TeleTrusTNamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Asn1.TeleTrust.TeleTrusTNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Spire.Security.Asn1.Tsp.Accuracy.ToAsn1Object">
            <pre>
            Accuracy ::= SEQUENCE {
                        seconds        INTEGER              OPTIONAL,
                        millis     [0] INTEGER  (1..999)    OPTIONAL,
                        micros     [1] INTEGER  (1..999)    OPTIONAL
                        }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Tsp.MessageImprint.GetInstance(System.Object)">
            @param o
            @return a MessageImprint object.
        </member>
        <member name="M:Spire.Security.Asn1.Tsp.MessageImprint.ToAsn1Object">
            <pre>
               MessageImprint ::= SEQUENCE  {
                  hashAlgorithm                AlgorithmIdentifier,
                  hashedMessage                OCTET STRING  }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Tsp.TimeStampReq.ToAsn1Object">
            <pre>
            TimeStampReq ::= SEQUENCE  {
             version                      INTEGER  { v1(1) },
             messageImprint               MessageImprint,
               --a hash algorithm OID and the hash value of the data to be
               --time-stamped
             reqPolicy             TSAPolicyId              OPTIONAL,
             nonce                 INTEGER                  OPTIONAL,
             certReq               BOOLEAN                  DEFAULT FALSE,
             extensions            [0] IMPLICIT Extensions  OPTIONAL
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Tsp.TimeStampResp.ToAsn1Object">
            <pre>
            TimeStampResp ::= SEQUENCE  {
              status                  PkiStatusInfo,
              timeStampToken          TimeStampToken     OPTIONAL  }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.Tsp.TstInfo.ToAsn1Object">
             <pre>
            
                 TstInfo ::= SEQUENCE  {
                    version                      INTEGER  { v1(1) },
                    policy                       TSAPolicyId,
                    messageImprint               MessageImprint,
                      -- MUST have the same value as the similar field in
                      -- TimeStampReq
                    serialNumber                 INTEGER,
                     -- Time-Stamping users MUST be ready to accommodate integers
                     -- up to 160 bits.
                    genTime                      GeneralizedTime,
                    accuracy                     Accuracy                 OPTIONAL,
                    ordering                     BOOLEAN             DEFAULT FALSE,
                    nonce                        INTEGER                  OPTIONAL,
                      -- MUST be present if the similar field was present
                      -- in TimeStampReq.  In that case it MUST have the same value.
                    tsa                          [0] GeneralName          OPTIONAL,
                    extensions                   [1] IMPLICIT Extensions   OPTIONAL  }
            
             </pre>
        </member>
        <!-- 对于成员“T:Spire.Security.Asn1.UA.UAObjectIdentifiers”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.UaOid">
            Base OID: 1.2.804.2.1.1.1 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu4145le">
            DSTU4145 Little Endian presentation.  OID: 1.2.804.2.1.1.1.1.3.1.1 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu4145be">
            DSTU4145 Big Endian presentation.  OID: 1.2.804.2.1.1.1.1.3.1.1.1 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7564digest_256">
            DSTU7564 256-bit digest presentation. 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7564digest_384">
            DSTU7564 384-bit digest presentation. 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7564digest_512">
            DSTU7564 512-bit digest presentation. 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7564mac_256">
            DSTU7564 256-bit mac presentation. 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7564mac_384">
            DSTU7564 384-bit mac presentation. 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7564mac_512">
            DSTU7564 512-bit mac presentation. 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_128">
            DSTU7624 in ECB mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_256">
            DSTU7624 in ECB mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ecb_512">
            DSTU7624 in ECB mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_128">
            DSTU7624 in CTR mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_256">
            DSTU7624 in CTR mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ctr_512">
            DSTU7624 in CTR mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_128">
            DSTU7624 in CFB mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_256">
            DSTU7624 in CFB mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cfb_512">
            DSTU7624 in CFB mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_128">
            DSTU7624 in MAC mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_256">
            DSTU7624 in MAC mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cmac_512">
            DSTU7624 in MAC mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_128">
            DSTU7624 in CBC mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_256">
            DSTU7624 in CBC mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624cbc_512">
            DSTU7624 in CBC mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_128">
            DSTU7624 in OFB mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_256">
            DSTU7624 in OFB mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ofb_512">
            DSTU7624 in OFB mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_128">
            DSTU7624 in GMAC (GCM witout encryption) mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_256">
            DSTU7624 in GMAC (GCM witout encryption) mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624gmac_512">
            DSTU7624 in GMAC (GCM witout encryption) mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_128">
            DSTU7624 in CCM mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_256">
            DSTU7624 in CCM mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624ccm_512">
            DSTU7624 in CCM mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624xts_128">
            DSTU7624 in XTS mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624xts_256">
            DSTU7624 in XTS mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624xts_512">
            DSTU7624 in XTS mode with 512 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624kw_128">
            DSTU7624 in key wrap (KW) mode with 128 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624kw_256">
            DSTU7624 in key wrap (KW) mode with 256 bit block/key presentation 
        </member>
        <member name="F:Spire.Security.Asn1.UA.UAObjectIdentifiers.dstu7624kw_512">
            DSTU7624 in key wrap (KW) mode with 512 bit block/key presentation 
        </member>
        <member name="M:Spire.Security.Asn1.Utilities.Asn1Dump.AsString(System.String,System.Boolean,Spire.Security.Asn1.Asn1Object,System.Text.StringBuilder)">
             dump a Der object as a formatted string with indentation
            
             @param obj the Asn1Object to be dumped out.
        </member>
        <member name="M:Spire.Security.Asn1.Utilities.Asn1Dump.DumpAsString(Spire.Security.Asn1.Asn1Encodable)">
             dump out a DER object as a formatted string, in non-verbose mode
            
             @param obj the Asn1Encodable to be dumped out.
             @return  the resulting string.
        </member>
        <member name="M:Spire.Security.Asn1.Utilities.Asn1Dump.DumpAsString(Spire.Security.Asn1.Asn1Encodable,System.Boolean)">
             Dump out the object as a string
            
             @param obj the Asn1Encodable to be dumped out.
             @param verbose  if true, dump out the contents of octet and bit strings.
             @return  the resulting string.
        </member>
        <member name="M:Spire.Security.Asn1.X500.DirectoryString.ToAsn1Object">
            <pre>
             DirectoryString ::= CHOICE {
               teletexString               TeletexString (SIZE (1..MAX)),
               printableString             PrintableString (SIZE (1..MAX)),
               universalString             UniversalString (SIZE (1..MAX)),
               utf8String                  UTF8String (SIZE (1..MAX)),
               bmpString                   BMPString (SIZE (1..MAX))  }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.AccessDescription">
            The AccessDescription object.
            <pre>
            AccessDescription  ::=  SEQUENCE {
                  accessMethod          OBJECT IDENTIFIER,
                  accessLocation        GeneralName  }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AccessDescription.#ctor(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.X509.GeneralName)">
            create an AccessDescription with the oid and location provided.
        </member>
        <member name="P:Spire.Security.Asn1.X509.AccessDescription.AccessMethod">
            
             @return the access method.
        </member>
        <member name="P:Spire.Security.Asn1.X509.AccessDescription.AccessLocation">
            
             @return the access location
        </member>
        <member name="P:Spire.Security.Asn1.X509.AlgorithmIdentifier.Algorithm">
            <summary>
            Return the OID in the Algorithm entry of this identifier.
            </summary>
        </member>
        <member name="P:Spire.Security.Asn1.X509.AlgorithmIdentifier.Parameters">
            <summary>
            Return the parameters structure in the Parameters entry of this identifier.
            </summary>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AlgorithmIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
                 AlgorithmIdentifier ::= Sequence {
                                       algorithm OBJECT IDENTIFIER,
                                       parameters ANY DEFINED BY algorithm OPTIONAL }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttCertIssuer.#ctor(Spire.Security.Asn1.X509.GeneralNames)">
            <summary>
            Don't use this one if you are trying to be RFC 3281 compliant.
            Use it for v1 attribute certificates only.
            </summary>
            <param name="names">Our GeneralNames structure</param>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttCertIssuer.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertIssuer ::= CHOICE {
                  v1Form   GeneralNames,  -- MUST NOT be used in this
                                          -- profile
                  v2Form   [0] V2Form     -- v2 only
             }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttCertValidityPeriod.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertValidityPeriod  ::= Sequence {
                  notBeforeTime  GeneralizedTime,
                  notAfterTime   GeneralizedTime
             }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttributeX509.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttributeX509.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttributeCertificate.GetInstance(System.Object)">
            @param obj
            @return
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttributeCertificate.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttributeCertificate ::= Sequence {
                  acinfo               AttributeCertificateInfo,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING
             }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AttributeCertificateInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
              }
            
              AttCertVersion ::= Integer { v2(1) }
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.AuthorityInformationAccess">
             The AuthorityInformationAccess object.
             <pre>
             id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
            
             AuthorityInfoAccessSyntax  ::=
                  Sequence SIZE (1..MAX) OF AccessDescription
             AccessDescription  ::=  Sequence {
                   accessMethod          OBJECT IDENTIFIER,
                   accessLocation        GeneralName  }
            
             id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
             id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }
             id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityInformationAccess.#ctor(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.X509.GeneralName)">
            create an AuthorityInformationAccess with the oid and location provided.
        </member>
        <member name="T:Spire.Security.Asn1.X509.AuthorityKeyIdentifier">
             The AuthorityKeyIdentifier object.
             <pre>
             id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
            
               AuthorityKeyIdentifier ::= Sequence {
                  keyIdentifier             [0] IMPLICIT KeyIdentifier           OPTIONAL,
                  authorityCertIssuer       [1] IMPLICIT GeneralNames            OPTIONAL,
                  authorityCertSerialNumber [2] IMPLICIT CertificateSerialNumber OPTIONAL  }
            
               KeyIdentifier ::= OCTET STRING
             </pre>
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityKeyIdentifier.#ctor(Spire.Security.Asn1.X509.SubjectPublicKeyInfo)">
                     *
                     * Calulates the keyidentifier using a SHA1 hash over the BIT STRING
                     * from SubjectPublicKeyInfo as defined in RFC2459.
                     *
                     * Example of making a AuthorityKeyIdentifier:
                     * <pre>
            	     *   SubjectPublicKeyInfo apki = new SubjectPublicKeyInfo((ASN1Sequence)new ASN1InputStream(
            		 *       publicKey.getEncoded()).readObject());
                     *   AuthorityKeyIdentifier aki = new AuthorityKeyIdentifier(apki);
                     * </pre>
                     *
                     *
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityKeyIdentifier.#ctor(Spire.Security.Asn1.X509.SubjectPublicKeyInfo,Spire.Security.Asn1.X509.GeneralNames,Spire.Security.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided as well.
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityKeyIdentifier.#ctor(Spire.Security.Asn1.X509.GeneralNames,Spire.Security.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided.
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[])">
            create an AuthorityKeyIdentifier with a precomputed key identifier
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[],Spire.Security.Asn1.X509.GeneralNames,Spire.Security.Math.BigInteger)">
            create an AuthorityKeyIdentifier with a precomupted key identifier
            and the GeneralNames tag and the serial number provided as well.
        </member>
        <member name="M:Spire.Security.Asn1.X509.AuthorityKeyIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
        </member>
        <member name="M:Spire.Security.Asn1.X509.BasicConstraints.#ctor(System.Int32)">
             create a cA=true object for the given path length constraint.
            
             @param pathLenConstraint
        </member>
        <member name="M:Spire.Security.Asn1.X509.BasicConstraints.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicConstraints := Sequence {
               cA                  Boolean DEFAULT FALSE,
               pathLenConstraint   Integer (0..MAX) OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.CertificateList">
             PKIX RFC-2459
            
             The X.509 v2 CRL syntax is as follows.  For signature calculation,
             the data that is to be signed is ASN.1 Der encoded.
            
             <pre>
             CertificateList  ::=  Sequence  {
                  tbsCertList          TbsCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING  }
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.CertificatePair">
             This class helps to support crossCerfificatePairs in a LDAP directory
             according RFC 2587
            
             <pre>
                 crossCertificatePairATTRIBUTE::={
                   WITH SYNTAX   CertificatePair
                   EQUALITY MATCHING RULE certificatePairExactMatch
                   ID joint-iso-ccitt(2) ds(5) attributeType(4) crossCertificatePair(40)}
             </pre>
            
             <blockquote> The forward elements of the crossCertificatePair attribute of a
             CA's directory entry shall be used to store all, except self-issued
             certificates issued to this CA. Optionally, the reverse elements of the
             crossCertificatePair attribute, of a CA's directory entry may contain a
             subset of certificates issued by this CA to other CAs. When both the forward
             and the reverse elements are present in a single attribute value, issuer name
             in one certificate shall match the subject name in the other and vice versa,
             and the subject public key in one certificate shall be capable of verifying
             the digital signature on the other certificate and vice versa.
            
             When a reverse element is present, the forward element value and the reverse
             element value need not be stored in the same attribute value; in other words,
             they can be stored in either a single attribute value or two attribute
             values. </blockquote>
            
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.CertificatePair.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertificatePair:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.X509.CertificatePair.#ctor(Spire.Security.Asn1.X509.X509CertificateStructure,Spire.Security.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
            
             @param forward Certificates issued to this CA.
             @param reverse Certificates issued by this CA to other CAs.
        </member>
        <member name="M:Spire.Security.Asn1.X509.CertificatePair.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:Spire.Security.Asn1.X509.CertificatePair.Forward">
            @return Returns the forward.
        </member>
        <member name="P:Spire.Security.Asn1.X509.CertificatePair.Reverse">
            @return Returns the reverse.
        </member>
        <member name="M:Spire.Security.Asn1.X509.CertificatePolicies.#ctor(Spire.Security.Asn1.X509.PolicyInformation)">
            Construct a CertificatePolicies object containing one PolicyInformation.
            
            @param name the name to be contained.
        </member>
        <member name="M:Spire.Security.Asn1.X509.CertificatePolicies.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CertificatePolicies ::= SEQUENCE SIZE {1..MAX} OF PolicyInformation
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.CertPolicyID">
             CertPolicyId, used in the CertificatePolicies and PolicyMappings
             X509V3 Extensions.
            
             <pre>
                 CertPolicyId ::= OBJECT IDENTIFIER
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.CrlDistPoint.GetDistributionPoints">
             Return the distribution points making up the sequence.
            
             @return DistributionPoint[]
        </member>
        <member name="M:Spire.Security.Asn1.X509.CrlDistPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlDistPoint ::= Sequence SIZE {1..MAX} OF DistributionPoint
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.CrlNumber">
            The CRLNumber object.
            <pre>
            CRLNumber::= Integer(0..MAX)
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.CrlReason">
            The CRLReason enumeration.
            <pre>
            CRLReason ::= Enumerated {
             unspecified             (0),
             keyCompromise           (1),
             cACompromise            (2),
             affiliationChanged      (3),
             superseded              (4),
             cessationOfOperation    (5),
             certificateHold         (6),
             removeFromCRL           (8),
             privilegeWithdrawn      (9),
             aACompromise           (10)
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.DigestInfo">
            The DigestInfo object.
            <pre>
            DigestInfo::=Sequence{
                     digestAlgorithm  AlgorithmIdentifier,
                     digest OCTET STRING }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.DisplayText">
             <code>DisplayText</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions (in policy qualifiers).
            
             <p>It stores a string in a chosen encoding.
             <pre>
             DisplayText ::= CHOICE {
                  ia5String        IA5String      (SIZE (1..200)),
                  visibleString    VisibleString  (SIZE (1..200)),
                  bmpString        BMPString      (SIZE (1..200)),
                  utf8String       UTF8String     (SIZE (1..200)) }
             </pre></p>
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="F:Spire.Security.Asn1.X509.DisplayText.ContentTypeIA5String">
             Constant corresponding to ia5String encoding.
            
        </member>
        <member name="F:Spire.Security.Asn1.X509.DisplayText.ContentTypeBmpString">
             Constant corresponding to bmpString encoding.
            
        </member>
        <member name="F:Spire.Security.Asn1.X509.DisplayText.ContentTypeUtf8String">
             Constant corresponding to utf8String encoding.
            
        </member>
        <member name="F:Spire.Security.Asn1.X509.DisplayText.ContentTypeVisibleString">
             Constant corresponding to visibleString encoding.
            
        </member>
        <member name="F:Spire.Security.Asn1.X509.DisplayText.DisplayTextMaximumSize">
             Describe constant <code>DisplayTextMaximumSize</code> here.
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.DisplayText.#ctor(System.Int32,System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param type the desired encoding type for the text.
             @param text the text to store. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:Spire.Security.Asn1.X509.DisplayText.#ctor(System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param text the text to encapsulate. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:Spire.Security.Asn1.X509.DisplayText.#ctor(Spire.Security.Asn1.IAsn1String)">
             Creates a new <code>DisplayText</code> instance.
             <p>Useful when reading back a <code>DisplayText</code> class
             from it's Asn1Encodable form.</p>
            
             @param contents an <code>Asn1Encodable</code> instance.
        </member>
        <member name="M:Spire.Security.Asn1.X509.DisplayText.GetString">
             Returns the stored <code>string</code> object.
            
             @return the stored text as a <code>string</code>.
        </member>
        <member name="T:Spire.Security.Asn1.X509.DistributionPoint">
            The DistributionPoint object.
            <pre>
            DistributionPoint ::= Sequence {
                 distributionPoint [0] DistributionPointName OPTIONAL,
                 reasons           [1] ReasonFlags OPTIONAL,
                 cRLIssuer         [2] GeneralNames OPTIONAL
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.DistributionPointName">
            The DistributionPointName object.
            <pre>
            DistributionPointName ::= CHOICE {
                fullName                 [0] GeneralNames,
                nameRelativeToCRLIssuer  [1] RDN
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.ExtendedKeyUsage">
            The extendedKeyUsage object.
            <pre>
                 extendedKeyUsage ::= Sequence SIZE (1..MAX) OF KeyPurposeId
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.ExtendedKeyUsage.GetAllUsages">
            Returns all extended key usages.
            The returned ArrayList contains DerObjectIdentifier instances.
            @return An ArrayList with all key purposes.
        </member>
        <member name="T:Spire.Security.Asn1.X509.GeneralName">
             The GeneralName object.
             <pre>
             GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
            
             OtherName ::= Sequence {
                  type-id    OBJECT IDENTIFIER,
                  value      [0] EXPLICIT ANY DEFINED BY type-id }
            
             EDIPartyName ::= Sequence {
                  nameAssigner            [0]     DirectoryString OPTIONAL,
                  partyName               [1]     DirectoryString }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.GeneralName.#ctor(Spire.Security.Asn1.Asn1Object,System.Int32)">
             When the subjectAltName extension contains an Internet mail address,
             the address MUST be included as an rfc822Name. The format of an
             rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822].
            
             When the subjectAltName extension contains a domain name service
             label, the domain name MUST be stored in the dNSName (an IA5String).
             The name MUST be in the "preferred name syntax," as specified by RFC
             1034 [RFC 1034].
            
             When the subjectAltName extension contains a URI, the name MUST be
             stored in the uniformResourceIdentifier (an IA5String). The name MUST
             be a non-relative URL, and MUST follow the URL syntax and encoding
             rules specified in [RFC 1738].  The name must include both a scheme
             (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme-
             specific-part must include a fully qualified domain name or IP
             address as the host.
            
             When the subjectAltName extension contains a iPAddress, the address
             MUST be stored in the octet string in "network byte order," as
             specified in RFC 791 [RFC 791]. The least significant bit (LSB) of
             each octet is the LSB of the corresponding byte in the network
             address. For IP Version 4, as specified in RFC 791, the octet string
             MUST contain exactly four octets.  For IP Version 6, as specified in
             RFC 1883, the octet string MUST contain exactly sixteen octets [RFC
             1883].
        </member>
        <member name="M:Spire.Security.Asn1.X509.GeneralName.#ctor(System.Int32,System.String)">
             Create a GeneralName for the given tag from the passed in string.
             <p>
             This constructor can handle:
             <ul>
             <li>rfc822Name</li>
             <li>iPAddress</li>
             <li>directoryName</li>
             <li>dNSName</li>
             <li>uniformResourceIdentifier</li>
             <li>registeredID</li>
             </ul>
             For x400Address, otherName and ediPartyName there is no common string
             format defined.
             </p><p>
             Note: A directory name can be encoded in different ways into a byte
             representation. Be aware of this if the byte representation is used for
             comparing results.
             </p>
            
             @param tag tag number
             @param name string representation of name
             @throws ArgumentException if the string encoding is not correct or
                         not supported.
        </member>
        <member name="M:Spire.Security.Asn1.X509.GeneralNames.#ctor(Spire.Security.Asn1.X509.GeneralName)">
            <summary>Construct a GeneralNames object containing one GeneralName.</summary>
            <param name="name">The name to be contained.</param>
        </member>
        <member name="M:Spire.Security.Asn1.X509.GeneralNames.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            GeneralNames ::= Sequence SIZE {1..MAX} OF GeneralName
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.GeneralSubtree">
             Class for containing a restriction object subtrees in NameConstraints. See
             RFC 3280.
            
             <pre>
            
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @see org.bouncycastle.asn1.x509.NameConstraints
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.GeneralSubtree.#ctor(Spire.Security.Asn1.X509.GeneralName,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
             Constructor from a given details.
            
             According RFC 3280, the minimum and maximum fields are not used with any
             name forms, thus minimum MUST be zero, and maximum MUST be absent.
             <p>
             If minimum is <code>null</code>, zero is assumed, if
             maximum is <code>null</code>, maximum is absent.</p>
            
             @param baseName
                        A restriction.
             @param minimum
                        Minimum
            
             @param maximum
                        Maximum
        </member>
        <member name="M:Spire.Security.Asn1.X509.GeneralSubtree.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @return a DERObject
        </member>
        <member name="T:Spire.Security.Asn1.X509.Holder">
            The Holder object.
            <p>
            For an v2 attribute certificate this is:
            
            <pre>
                       Holder ::= SEQUENCE {
                             baseCertificateID   [0] IssuerSerial OPTIONAL,
                                      -- the issuer and serial number of
                                      -- the holder's Public Key Certificate
                             entityName          [1] GeneralNames OPTIONAL,
                                      -- the name of the claimant or role
                             objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                                      -- used to directly authenticate the holder,
                                      -- for example, an executable
                       }
            </pre>
            </p>
            <p>
            For an v1 attribute certificate this is:
            
            <pre>
                    subject CHOICE {
                     baseCertificateID [0] IssuerSerial,
                     -- associated with a Public Key Certificate
                     subjectName [1] GeneralNames },
                     -- associated with a name
            </pre>
            </p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.#ctor(Spire.Security.Asn1.Asn1TaggedObject)">
            Constructor for a holder for an v1 attribute certificate.
            
            @param tagObj The ASN.1 tagged holder object.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            Constructor for a holder for an v2 attribute certificate. *
            
            @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.#ctor(Spire.Security.Asn1.X509.IssuerSerial,System.Int32)">
            Constructs a holder from a IssuerSerial.
            @param baseCertificateID The IssuerSerial.
            @param version The version of the attribute certificate. 
        </member>
        <member name="P:Spire.Security.Asn1.X509.Holder.Version">
            Returns 1 for v2 attribute certificates or 0 for v1 attribute
            certificates. 
            @return The version of the attribute certificate.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.#ctor(Spire.Security.Asn1.X509.GeneralNames)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.#ctor(Spire.Security.Asn1.X509.GeneralNames,System.Int32)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
            @param version The version of the attribute certificate. 
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.#ctor(Spire.Security.Asn1.X509.ObjectDigestInfo)">
            Constructs a holder from an object digest info.
            
            @param objectDigestInfo The object digest info object.
        </member>
        <member name="P:Spire.Security.Asn1.X509.Holder.EntityName">
            Returns the entityName for an v2 attribute certificate or the subjectName
            for an v1 attribute certificate.
            
            @return The entityname or subjectname.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Holder.ToAsn1Object">
            The Holder object.
            <pre>
             Holder ::= Sequence {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.IetfAttrSyntax">
            Implementation of <code>IetfAttrSyntax</code> as specified by RFC3281.
        </member>
        <member name="M:Spire.Security.Asn1.X509.IetfAttrSyntax.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.IetfAttrSyntax.ToAsn1Object">
            
             <pre>
            
              IetfAttrSyntax ::= Sequence {
                policyAuthority [0] GeneralNames OPTIONAL,
                values Sequence OF CHOICE {
                  octets OCTET STRING,
                  oid OBJECT IDENTIFIER,
                  string UTF8String
                }
              }
            
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.IssuerSerial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             IssuerSerial  ::=  Sequence {
                  issuer         GeneralNames,
                  serial         CertificateSerialNumber,
                  issuerUid      UniqueIdentifier OPTIONAL
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.IssuingDistributionPoint">
            <pre>
            IssuingDistributionPoint ::= SEQUENCE { 
              distributionPoint          [0] DistributionPointName OPTIONAL, 
              onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE, 
              onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE, 
              onlySomeReasons            [3] ReasonFlags OPTIONAL, 
              indirectCRL                [4] BOOLEAN DEFAULT FALSE,
              onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.IssuingDistributionPoint.#ctor(Spire.Security.Asn1.X509.DistributionPointName,System.Boolean,System.Boolean,Spire.Security.Asn1.X509.ReasonFlags,System.Boolean,System.Boolean)">
            Constructor from given details.
            
            @param distributionPoint
                       May contain an URI as pointer to most current CRL.
            @param onlyContainsUserCerts Covers revocation information for end certificates.
            @param onlyContainsCACerts Covers revocation information for CA certificates.
            
            @param onlySomeReasons
                       Which revocation reasons does this point cover.
            @param indirectCRL
                       If <code>true</code> then the CRL contains revocation
                       information about certificates ssued by other CAs.
            @param onlyContainsAttributeCerts Covers revocation information for attribute certificates.
        </member>
        <member name="M:Spire.Security.Asn1.X509.IssuingDistributionPoint.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence
        </member>
        <member name="P:Spire.Security.Asn1.X509.IssuingDistributionPoint.DistributionPoint">
            @return Returns the distributionPoint.
        </member>
        <member name="P:Spire.Security.Asn1.X509.IssuingDistributionPoint.OnlySomeReasons">
            @return Returns the onlySomeReasons.
        </member>
        <member name="T:Spire.Security.Asn1.X509.KeyPurposeID">
            The KeyPurposeID object.
            <pre>
                KeyPurposeID ::= OBJECT IDENTIFIER
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.KeyUsage">
             The KeyUsage object.
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
        </member>
        <member name="M:Spire.Security.Asn1.X509.NameConstraints.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from a given details.
            
             <p>permitted and excluded are Vectors of GeneralSubtree objects.</p>
            
             @param permitted Permitted subtrees
             @param excluded Excluded subtrees
        </member>
        <member name="T:Spire.Security.Asn1.X509.NoticeReference">
             <code>NoticeReference</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions
             (in policy qualifiers).
            
             <pre>
              NoticeReference ::= Sequence {
                  organization     DisplayText,
                  noticeNumbers    Sequence OF Integer }
            
             </pre>
            
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="M:Spire.Security.Asn1.X509.NoticeReference.#ctor(System.String,System.Collections.IList)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization a <code>String</code> value
             @param numbers a <code>Vector</code> value
        </member>
        <member name="M:Spire.Security.Asn1.X509.NoticeReference.#ctor(System.String,Spire.Security.Asn1.Asn1EncodableVector)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization a <code>String</code> value
             @param noticeNumbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:Spire.Security.Asn1.X509.NoticeReference.#ctor(Spire.Security.Asn1.X509.DisplayText,Spire.Security.Asn1.Asn1EncodableVector)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization displayText
             @param noticeNumbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:Spire.Security.Asn1.X509.NoticeReference.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
             <p>Useful for reconstructing a <code>NoticeReference</code>
             instance from its encodable/encoded form.</p>
            
             @param as an <code>Asn1Sequence</code> value obtained from either
             calling @{link ToAsn1Object()} for a <code>NoticeReference</code>
             instance or from parsing it from a Der-encoded stream.
        </member>
        <member name="M:Spire.Security.Asn1.X509.NoticeReference.ToAsn1Object">
             Describe <code>ToAsn1Object</code> method here.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:Spire.Security.Asn1.X509.ObjectDigestInfo">
            ObjectDigestInfo ASN.1 structure used in v2 attribute certificates.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
            
        </member>
        <member name="F:Spire.Security.Asn1.X509.ObjectDigestInfo.PublicKey">
            The public key is hashed.
        </member>
        <member name="F:Spire.Security.Asn1.X509.ObjectDigestInfo.PublicKeyCert">
            The public key certificate is hashed.
        </member>
        <member name="F:Spire.Security.Asn1.X509.ObjectDigestInfo.OtherObjectDigest">
            An other object is hashed.
        </member>
        <member name="M:Spire.Security.Asn1.X509.ObjectDigestInfo.#ctor(System.Int32,System.String,Spire.Security.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
            Constructor from given details.
            <p>
            If <code>digestedObjectType</code> is not {@link #publicKeyCert} or
            {@link #publicKey} <code>otherObjectTypeID</code> must be given,
            otherwise it is ignored.</p>
            
            @param digestedObjectType The digest object type.
            @param otherObjectTypeID The object type ID for
                       <code>otherObjectDigest</code>.
            @param digestAlgorithm The algorithm identifier for the hash.
            @param objectDigest The hash value.
        </member>
        <member name="M:Spire.Security.Asn1.X509.ObjectDigestInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.PolicyMappings">
             PolicyMappings V3 extension, described in RFC3280.
             <pre>
                PolicyMappings ::= Sequence SIZE (1..MAX) OF Sequence {
                  issuerDomainPolicy      CertPolicyId,
                  subjectDomainPolicy     CertPolicyId }
             </pre>
            
             @see <a href="http://www.faqs.org/rfc/rfc3280.txt">RFC 3280, section 4.2.1.6</a>
        </member>
        <member name="M:Spire.Security.Asn1.X509.PolicyMappings.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param seq an <code>Asn1Sequence</code> constructed as specified
             in RFC 3280
        </member>
        <member name="M:Spire.Security.Asn1.X509.PolicyMappings.#ctor(System.Collections.IDictionary)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param mappings a <code>HashMap</code> value that maps
             <code>string</code> oids
             to other <code>string</code> oids.
        </member>
        <member name="T:Spire.Security.Asn1.X509.PolicyQualifierID">
             PolicyQualifierId, used in the CertificatePolicies
             X509V3 extension.
            
             <pre>
                id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
                id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
                id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
              PolicyQualifierId ::=
                   OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.PolicyQualifierInfo">
             Policy qualifiers, used in the X509V3 CertificatePolicies
             extension.
            
             <pre>
               PolicyQualifierInfo ::= Sequence {
                   policyQualifierId  PolicyQualifierId,
                   qualifier          ANY DEFINED BY policyQualifierId }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.PolicyQualifierInfo.#ctor(Spire.Security.Asn1.DerObjectIdentifier,Spire.Security.Asn1.Asn1Encodable)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param policyQualifierId a <code>PolicyQualifierId</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:Spire.Security.Asn1.X509.PolicyQualifierInfo.#ctor(System.String)">
             Creates a new <code>PolicyQualifierInfo</code> containing a
             cPSuri qualifier.
            
             @param cps the CPS (certification practice statement) uri as a
             <code>string</code>.
        </member>
        <member name="M:Spire.Security.Asn1.X509.PolicyQualifierInfo.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param as <code>PolicyQualifierInfo</code> X509 structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:Spire.Security.Asn1.X509.PolicyQualifierInfo.ToAsn1Object">
             Returns a Der-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:Spire.Security.Asn1.X509.PrivateKeyUsagePeriod">
            <remarks>
            <pre>
            PrivateKeyUsagePeriod ::= SEQUENCE
            {
            notBefore       [0]     GeneralizedTime OPTIONAL,
            notAfter        [1]     GeneralizedTime OPTIONAL }
            </pre>
            </remarks>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Qualified.BiometricData">
            The BiometricData object.
            <pre>
            BiometricData  ::=  SEQUENCE {
                  typeOfBiometricData  TypeOfBiometricData,
                  hashAlgorithm        AlgorithmIdentifier,
                  biometricDataHash    OCTET STRING,
                  sourceDataUri        IA5String OPTIONAL  }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Qualified.Iso4217CurrencyCode">
            The Iso4217CurrencyCode object.
            <pre>
            Iso4217CurrencyCode  ::=  CHOICE {
                  alphabetic              PrintableString (SIZE 3), --Recommended
                  numeric              INTEGER (1..999) }
            -- Alphabetic or numeric currency code as defined in ISO 4217
            -- It is recommended that the Alphabetic form is used
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Qualified.MonetaryValue">
            The MonetaryValue object.
            <pre>
            MonetaryValue  ::=  SEQUENCE {
                  currency              Iso4217CurrencyCode,
                  amount               INTEGER,
                  exponent             INTEGER }
            -- value = amount * 10^exponent
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Qualified.QCStatement">
            The QCStatement object.
            <pre>
            QCStatement ::= SEQUENCE {
              statementId        OBJECT IDENTIFIER,
              statementInfo      ANY DEFINED BY statementId OPTIONAL}
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Qualified.SemanticsInformation">
             The SemanticsInformation object.
             <pre>
                   SemanticsInformation ::= SEQUENCE {
                     semanticsIdentifier        OBJECT IDENTIFIER   OPTIONAL,
                     nameRegistrationAuthorities NameRegistrationAuthorities
                                                                     OPTIONAL }
                     (WITH COMPONENTS {..., semanticsIdentifier PRESENT}|
                      WITH COMPONENTS {..., nameRegistrationAuthorities PRESENT})
            
                 NameRegistrationAuthorities ::=  SEQUENCE SIZE (1..MAX) OF
                     GeneralName
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Qualified.TypeOfBiometricData">
             The TypeOfBiometricData object.
             <pre>
             TypeOfBiometricData ::= CHOICE {
               predefinedBiometricType   PredefinedBiometricType,
               biometricDataOid          OBJECT IDENTIFIER }
            
             PredefinedBiometricType ::= INTEGER {
               picture(0),handwritten-signature(1)}
               (picture|handwritten-signature)
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.ReasonFlags">
            The ReasonFlags object.
            <pre>
            ReasonFlags ::= BIT STRING {
               unused(0),
               keyCompromise(1),
               cACompromise(2),
               affiliationChanged(3),
               superseded(4),
               cessationOfOperation(5),
               certficateHold(6)
            }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.ReasonFlags.#ctor(System.Int32)">
            @param reasons - the bitwise OR of the Key Reason flags giving the
            allowed uses for the key.
        </member>
        <member name="T:Spire.Security.Asn1.X509.RoleSyntax">
             Implementation of the RoleSyntax object as specified by the RFC3281.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.GetInstance(System.Object)">
            RoleSyntax factory method.
            @param obj the object used to construct an instance of <code>
            RoleSyntax</code>. It must be an instance of <code>RoleSyntax
            </code> or <code>Asn1Sequence</code>.
            @return the instance of <code>RoleSyntax</code> built from the
            supplied object.
            @throws java.lang.ArgumentException if the object passed
            to the factory is not an instance of <code>RoleSyntax</code> or
            <code>Asn1Sequence</code>.
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.#ctor(Spire.Security.Asn1.X509.GeneralNames,Spire.Security.Asn1.X509.GeneralName)">
            Constructor.
            @param roleAuthority the role authority of this RoleSyntax.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.#ctor(Spire.Security.Asn1.X509.GeneralName)">
            Constructor. Invoking this constructor is the same as invoking
            <code>new RoleSyntax(null, roleName)</code>.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.#ctor(System.String)">
            Utility constructor. Takes a <code>string</code> argument representing
            the role name, builds a <code>GeneralName</code> to hold the role name
            and calls the constructor that takes a <code>GeneralName</code>.
            @param roleName
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            Constructor that builds an instance of <code>RoleSyntax</code> by
            extracting the encoded elements from the <code>Asn1Sequence</code>
            object supplied.
            @param seq    an instance of <code>Asn1Sequence</code> that holds
            the encoded elements used to build this <code>RoleSyntax</code>.
        </member>
        <member name="P:Spire.Security.Asn1.X509.RoleSyntax.RoleAuthority">
            Gets the role authority of this RoleSyntax.
            @return    an instance of <code>GeneralNames</code> holding the
            role authority of this RoleSyntax.
        </member>
        <member name="P:Spire.Security.Asn1.X509.RoleSyntax.RoleName">
            Gets the role name of this RoleSyntax.
            @return    an instance of <code>GeneralName</code> holding the
            role name of this RoleSyntax.
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.GetRoleNameAsString">
            Gets the role name as a <code>java.lang.string</code> object.
            @return    the role name of this RoleSyntax represented as a
            <code>string</code> object.
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.GetRoleAuthorityAsString">
            Gets the role authority as a <code>string[]</code> object.
            @return the role authority of this RoleSyntax represented as a
            <code>string[]</code> array.
        </member>
        <member name="M:Spire.Security.Asn1.X509.RoleSyntax.ToAsn1Object">
             Implementation of the method <code>ToAsn1Object</code> as
             required by the superclass <code>ASN1Encodable</code>.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.RsaPublicKeyStructure.ToAsn1Object">
            This outputs the key in Pkcs1v2 format.
            <pre>
                 RSAPublicKey ::= Sequence {
                                     modulus Integer, -- n
                                     publicExponent Integer, -- e
                                 }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.SigI.NameOrPseudonym">
            Structure for a name or pseudonym.
            
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString 
                    },
                	   pseudonym DirectoryString 
                  }
            </pre>
            
            @see org.bouncycastle.asn1.x509.sigi.PersonalData
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.NameOrPseudonym.#ctor(Spire.Security.Asn1.X500.DirectoryString)">
            Constructor from DERString.
            <p/>
            The sequence is of type NameOrPseudonym:
            <p/>
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString
                    },
                	   pseudonym DirectoryString
                  }
            </pre>
            @param pseudonym pseudonym value to use.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.NameOrPseudonym.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.NameOrPseudonym.#ctor(System.String)">
             Constructor from a given details.
            
             @param pseudonym The pseudonym.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.NameOrPseudonym.#ctor(Spire.Security.Asn1.X500.DirectoryString,Spire.Security.Asn1.Asn1Sequence)">
             Constructor from a given details.
            
             @param surname   The surname.
             @param givenName A sequence of directory strings making up the givenName
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.NameOrPseudonym.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.X509.SigI.PersonalData">
             Contains personal data for the otherName field in the subjectAltNames
             extension.
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @see org.bouncycastle.asn1.x509.sigi.NameOrPseudonym
             @see org.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.PersonalData.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.PersonalData.#ctor(Spire.Security.Asn1.X509.SigI.NameOrPseudonym,Spire.Security.Math.BigInteger,Spire.Security.Asn1.DerGeneralizedTime,Spire.Security.Asn1.X500.DirectoryString,System.String,Spire.Security.Asn1.X500.DirectoryString)">
             Constructor from a given details.
            
             @param nameOrPseudonym  Name or pseudonym.
             @param nameDistinguisher Name distinguisher.
             @param dateOfBirth      Date of birth.
             @param placeOfBirth     Place of birth.
             @param gender           Gender.
             @param postalAddress    Postal Address.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SigI.PersonalData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers">
            Object Identifiers of SigI specifciation (German Signature Law
            Interoperability specification).
        </member>
        <member name="F:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKP">
            Key purpose IDs for German SigI (Signature Interoperability
            Specification)
        </member>
        <member name="F:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICP">
            Certificate policy IDs for German SigI (Signature Interoperability
            Specification)
        </member>
        <member name="F:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigION">
            Other Name IDs for German SigI (Signature Interoperability Specification)
        </member>
        <member name="F:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKPDirectoryService">
            To be used for for the generation of directory service certificates.
        </member>
        <member name="F:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIONPersonalData">
            ID for PersonalData
        </member>
        <member name="F:Spire.Security.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICPSigConform">
            Certificate is conform to german signature law.
        </member>
        <member name="T:Spire.Security.Asn1.X509.SubjectDirectoryAttributes">
             This extension may contain further X.500 attributes of the subject. See also
             RFC 3039.
            
             <pre>
                 SubjectDirectoryAttributes ::= Attributes
                 Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                 Attribute ::= SEQUENCE
                 {
                   type AttributeType
                   values SET OF AttributeValue
                 }
            
                 AttributeType ::= OBJECT IDENTIFIER
                 AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @see org.bouncycastle.asn1.x509.X509Name for AttributeType ObjectIdentifiers.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectDirectoryAttributes.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             The sequence is of type SubjectDirectoryAttributes:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @param seq
                        The ASN.1 sequence.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectDirectoryAttributes.#ctor(System.Collections.IList)">
             Constructor from an ArrayList of attributes.
            
             The ArrayList consists of attributes of type {@link Attribute Attribute}
            
             @param attributes The attributes.
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectDirectoryAttributes.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:Spire.Security.Asn1.X509.SubjectDirectoryAttributes.Attributes">
            @return Returns the attributes.
        </member>
        <member name="T:Spire.Security.Asn1.X509.SubjectKeyIdentifier">
            The SubjectKeyIdentifier object.
            <pre>
            SubjectKeyIdentifier::= OCTET STRING
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectKeyIdentifier.#ctor(Spire.Security.Asn1.X509.SubjectPublicKeyInfo)">
             Calculates the keyIdentifier using a SHA1 hash over the BIT STRING
             from SubjectPublicKeyInfo as defined in RFC3280.
            
             @param spki the subject public key info.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectKeyIdentifier.CreateSha1KeyIdentifier(Spire.Security.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 1 key identifier. As in:
            <pre>
            (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
            value of the BIT STRING subjectPublicKey (excluding the tag,
            length, and number of unused bits).
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectKeyIdentifier.CreateTruncatedSha1KeyIdentifier(Spire.Security.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 2 key identifier. As in:
            <pre>
            (2) The keyIdentifier is composed of a four bit type field with
            the value 0100 followed by the least significant 60 bits of the
            SHA-1 hash of the value of the BIT STRING subjectPublicKey.
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="T:Spire.Security.Asn1.X509.SubjectPublicKeyInfo">
            The object that contains the public key stored in a certficate.
            <p>
            The GetEncoded() method in the public keys in the JCE produces a DER
            encoded one of these.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectPublicKeyInfo.GetPublicKey">
             for when the public key is an encoded object - if the bitstring
             can't be decoded this routine raises an IOException.
            
             @exception IOException - if the bit string doesn't represent a Der
             encoded object.
        </member>
        <member name="P:Spire.Security.Asn1.X509.SubjectPublicKeyInfo.PublicKeyData">
            for when the public key is raw bits...
        </member>
        <member name="M:Spire.Security.Asn1.X509.SubjectPublicKeyInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SubjectPublicKeyInfo ::= Sequence {
                                     algorithm AlgorithmIdentifier,
                                     publicKey BIT STRING }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.Target">
            Target structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            <p>
            The targetCert field is currently not supported and must not be used
            according to RFC 3281.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.Target.GetInstance(System.Object)">
            Creates an instance of a Target from the given object.
            <p>
            <code>obj</code> can be a Target or a {@link Asn1TaggedObject}</p>
            
            @param obj The object.
            @return A Target instance.
            @throws ArgumentException if the given object cannot be
                        interpreted as Target.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Target.#ctor(Spire.Security.Asn1.Asn1TaggedObject)">
            Constructor from Asn1TaggedObject.
            
            @param tagObj The tagged object.
            @throws ArgumentException if the encoding is wrong.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Target.#ctor(Spire.Security.Asn1.X509.Target.Choice,Spire.Security.Asn1.X509.GeneralName)">
             Constructor from given details.
             <p>
             Exactly one of the parameters must be not <code>null</code>.</p>
            
             @param type the choice type to apply to the name.
             @param name the general name.
             @throws ArgumentException if type is invalid.
        </member>
        <member name="P:Spire.Security.Asn1.X509.Target.TargetGroup">
            @return Returns the targetGroup.
        </member>
        <member name="P:Spire.Security.Asn1.X509.Target.TargetName">
            @return Returns the targetName.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Target.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.X509.TargetInformation">
            Target information extension for attributes certificates according to RFC
            3281.
            
            <pre>
                      SEQUENCE OF Targets
            </pre>
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.TargetInformation.GetInstance(System.Object)">
            Creates an instance of a TargetInformation from the given object.
            <p>
            <code>obj</code> can be a TargetInformation or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A TargetInformation instance.
            @throws ArgumentException if the given object cannot be interpreted as TargetInformation.
        </member>
        <member name="M:Spire.Security.Asn1.X509.TargetInformation.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            Constructor from a Asn1Sequence.
            
            @param seq The Asn1Sequence.
            @throws ArgumentException if the sequence does not contain
                        correctly encoded Targets elements.
        </member>
        <member name="M:Spire.Security.Asn1.X509.TargetInformation.GetTargetsObjects">
            Returns the targets in this target information extension.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:Spire.Security.Asn1.X509.TargetInformation.#ctor(Spire.Security.Asn1.X509.Targets)">
            Constructs a target information from a single targets element. 
            According to RFC 3281 only one targets element must be produced.
            
            @param targets A Targets instance.
        </member>
        <member name="M:Spire.Security.Asn1.X509.TargetInformation.#ctor(Spire.Security.Asn1.X509.Target[])">
             According to RFC 3281 only one targets element must be produced. If
             multiple targets are given they must be merged in
             into one targets element.
            
             @param targets An array with {@link Targets}.
        </member>
        <member name="M:Spire.Security.Asn1.X509.TargetInformation.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                     SEQUENCE OF Targets
            </pre>
            
            <p>
            According to RFC 3281 only one targets element must be produced. If
            multiple targets are given in the constructor they are merged into one
            targets element. If this was produced from a
            {@link Spire.Security.Asn1.Asn1Sequence} the encoding is kept.</p>
            
            @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.X509.Targets">
            Targets structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                       Targets ::= SEQUENCE OF Target
                      
                       Target  ::= CHOICE {
                         targetName          [0] GeneralName,
                         targetGroup         [1] GeneralName,
                         targetCert          [2] TargetCert
                       }
                      
                       TargetCert  ::= SEQUENCE {
                         targetCertificate    IssuerSerial,
                         targetName           GeneralName OPTIONAL,
                         certDigestInfo       ObjectDigestInfo OPTIONAL
                       }
            </pre>
            
            @see org.bouncycastle.asn1.x509.Target
            @see org.bouncycastle.asn1.x509.TargetInformation
        </member>
        <member name="M:Spire.Security.Asn1.X509.Targets.GetInstance(System.Object)">
            Creates an instance of a Targets from the given object.
            <p>
            <code>obj</code> can be a Targets or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A Targets instance.
            @throws ArgumentException if the given object cannot be interpreted as Target.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Targets.#ctor(Spire.Security.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence.
            
            @param targets The ASN.1 SEQUENCE.
            @throws ArgumentException if the contents of the sequence are
                        invalid.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Targets.#ctor(Spire.Security.Asn1.X509.Target[])">
            Constructor from given targets.
            <p>
            The ArrayList is copied.</p>
            
            @param targets An <code>ArrayList</code> of {@link Target}s.
            @see Target
            @throws ArgumentException if the ArrayList contains not only Targets.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Targets.GetTargets">
            Returns the targets in an <code>ArrayList</code>.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Targets.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                       Targets ::= SEQUENCE OF Target
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="T:Spire.Security.Asn1.X509.TbsCertificateStructure">
            The TbsCertificate object.
            <pre>
            TbsCertificate ::= Sequence {
                 version          [ 0 ]  Version DEFAULT v1(0),
                 serialNumber            CertificateSerialNumber,
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 validity                Validity,
                 subject                 Name,
                 subjectPublicKeyInfo    SubjectPublicKeyInfo,
                 issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 extensions        [ 3 ] Extensions OPTIONAL
                 }
            </pre>
            <p>
            Note: issuerUniqueID and subjectUniqueID are both deprecated by the IETF. This class
            will parse them, but you really shouldn't be creating new ones.</p>
        </member>
        <member name="T:Spire.Security.Asn1.X509.TbsCertificateList">
            PKIX RFC-2459 - TbsCertList object.
            <pre>
            TbsCertList  ::=  Sequence  {
                 version                 Version OPTIONAL,
                                              -- if present, shall be v2
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 thisUpdate              Time,
                 nextUpdate              Time OPTIONAL,
                 revokedCertificates     Sequence OF Sequence  {
                      userCertificate         CertificateSerialNumber,
                      revocationDate          Time,
                      crlEntryExtensions      Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }  OPTIONAL,
                 crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }
            </pre>
        </member>
        <member name="M:Spire.Security.Asn1.X509.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:Spire.Security.Asn1.X509.Time.ToDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <returns>A date time.</returns>
        </member>
        <member name="M:Spire.Security.Asn1.X509.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.UserNotice">
             <code>UserNotice</code> class, used in
             <code>CertificatePolicies</code> X509 extensions (in policy
             qualifiers).
             <pre>
             UserNotice ::= Sequence {
                  noticeRef        NoticeReference OPTIONAL,
                  explicitText     DisplayText OPTIONAL}
            
             </pre>
            
             @see PolicyQualifierId
             @see PolicyInformation
        </member>
        <member name="M:Spire.Security.Asn1.X509.UserNotice.#ctor(Spire.Security.Asn1.X509.NoticeReference,Spire.Security.Asn1.X509.DisplayText)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param explicitText a <code>DisplayText</code> value
        </member>
        <member name="M:Spire.Security.Asn1.X509.UserNotice.#ctor(Spire.Security.Asn1.X509.NoticeReference,System.String)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param str the explicitText field as a string.
        </member>
        <member name="M:Spire.Security.Asn1.X509.UserNotice.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Creates a new <code>UserNotice</code> instance.
             <p>Useful from reconstructing a <code>UserNotice</code> instance
             from its encodable/encoded form.
            
             @param as an <code>ASN1Sequence</code> value obtained from either
             calling @{link toASN1Object()} for a <code>UserNotice</code>
             instance or from parsing it from a DER-encoded stream.</p>
        </member>
        <member name="T:Spire.Security.Asn1.X509.V1TbsCertificateGenerator">
             Generator for Version 1 TbsCertificateStructures.
             <pre>
             TbsCertificate ::= Sequence {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  }
             </pre>
            
        </member>
        <member name="T:Spire.Security.Asn1.X509.V2AttributeCertificateInfoGenerator">
             Generator for Version 2 AttributeCertificateInfo
             <pre>
             AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
             }
             </pre>
            
        </member>
        <member name="M:Spire.Security.Asn1.X509.V2AttributeCertificateInfoGenerator.AddAttribute(Spire.Security.Asn1.X509.AttributeX509)">
            @param attribute
        </member>
        <member name="M:Spire.Security.Asn1.X509.V2Form.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             V2Form ::= Sequence {
                  issuerName            GeneralNames  OPTIONAL,
                  baseCertificateID     [0] IssuerSerial  OPTIONAL,
                  objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                    -- issuerName MUST be present in this profile
                    -- baseCertificateID and objectDigestInfo MUST NOT
                    -- be present in this profile
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.V2TbsCertListGenerator">
             Generator for Version 2 TbsCertList structures.
             <pre>
              TbsCertList  ::=  Sequence  {
                   version                 Version OPTIONAL,
                                                -- if present, shall be v2
                   signature               AlgorithmIdentifier,
                   issuer                  Name,
                   thisUpdate              Time,
                   nextUpdate              Time OPTIONAL,
                   revokedCertificates     Sequence OF Sequence  {
                        userCertificate         CertificateSerialNumber,
                        revocationDate          Time,
                        crlEntryExtensions      Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }  OPTIONAL,
                   crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }
             </pre>
            
             <b>Note: This class may be subject to change</b>
        </member>
        <member name="T:Spire.Security.Asn1.X509.V3TbsCertificateGenerator">
             Generator for Version 3 TbsCertificateStructures.
             <pre>
             TbsCertificate ::= Sequence {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  extensions        [ 3 ] Extensions OPTIONAL
                  }
             </pre>
            
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509CertificateStructure">
            an X509Certificate structure.
            <pre>
             Certificate ::= Sequence {
                 tbsCertificate          TbsCertificate,
                 signatureAlgorithm      AlgorithmIdentifier,
                 signature               BIT STRING
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509DefaultEntryConverter">
            The default converter for X509 DN entries when going from their
            string value to ASN.1 strings.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509DefaultEntryConverter.GetConvertedValue(Spire.Security.Asn1.DerObjectIdentifier,System.String)">
             Apply default conversion for the given value depending on the oid
             and the character range of the value.
            
             @param oid the object identifier for the DN entry
             @param value the value associated with it
             @return the ASN.1 equivalent for the string value.
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509Extension">
            an object for the elements in the X.509 V3 extension block.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extension.ConvertValueToObject(Spire.Security.Asn1.X509.X509Extension)">
            <sumary>Convert the value of the passed in extension to an object.</sumary>
            <param name="ext">The extension to parse.</param>
            <returns>The object the value string contains.</returns>
            <exception cref="T:System.ArgumentException">If conversion is not possible.</exception>
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.SubjectDirectoryAttributes">
            Subject Directory Attributes
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.SubjectKeyIdentifier">
            Subject Key Identifier
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.KeyUsage">
            Key Usage
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.PrivateKeyUsagePeriod">
            Private Key Usage Period
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.SubjectAlternativeName">
            Subject Alternative Name
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.IssuerAlternativeName">
            Issuer Alternative Name
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.BasicConstraints">
            Basic Constraints
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.CrlNumber">
            CRL Number
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.ReasonCode">
            Reason code
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.InstructionCode">
            Hold Instruction Code
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.InvalidityDate">
            Invalidity Date
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.DeltaCrlIndicator">
            Delta CRL indicator
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.IssuingDistributionPoint">
            Issuing Distribution Point
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.CertificateIssuer">
            Certificate Issuer
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.NameConstraints">
            Name Constraints
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.CrlDistributionPoints">
            CRL Distribution Points
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.CertificatePolicies">
            Certificate Policies
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.PolicyMappings">
            Policy Mappings
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.AuthorityKeyIdentifier">
            Authority Key Identifier
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.PolicyConstraints">
            Policy Constraints
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.ExtendedKeyUsage">
            Extended Key Usage
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.FreshestCrl">
            Freshest CRL
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.InhibitAnyPolicy">
            Inhibit Any Policy
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.AuthorityInfoAccess">
            Authority Info Access
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.SubjectInfoAccess">
            Subject Info Access
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.LogoType">
            Logo Type
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.BiometricInfo">
            BiometricInfo
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.QCStatements">
            QCStatements
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.AuditIdentity">
            Audit identity extension in attribute certificates.
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.NoRevAvail">
            NoRevAvail extension in attribute certificates.
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.TargetInformation">
            TargetInformation extension in attribute certificates.
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Extensions.ExpiredCertsOnCrl">
            Expired Certificates on CRL extension
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             the extensions are a list of constructed sequences, either with (Oid, OctetString) or (Oid, Boolean, OctetString)
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(System.Collections.IDictionary)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(System.Collections.Hashtable)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.Hashtable)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="P:Spire.Security.Asn1.X509.X509Extensions.ExtensionOids">
            return an Enumeration of the extension field's object ids.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.GetExtension(Spire.Security.Asn1.DerObjectIdentifier)">
             return the extension represented by the object identifier
             passed in.
            
             @return the extension if it's present, null otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Extensions.ToAsn1Object">
             <pre>
                 Extensions        ::=   SEQUENCE SIZE (1..MAX) OF Extension
            
                 Extension         ::=   SEQUENCE {
                    extnId            EXTENSION.&amp;id ({ExtensionSet}),
                    critical          BOOLEAN DEFAULT FALSE,
                    extnValue         OCTET STRING }
             </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509ExtensionsGenerator">
            <remarks>Generator for X.509 extensions</remarks>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509ExtensionsGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509ExtensionsGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            <summary>
            Add an extension with the given oid and the passed in value to be included
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The ASN.1 object to be included in the extension.</param>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509ExtensionsGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension with the given oid and the passed in byte array to be wrapped
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The byte array to be wrapped.</param>
        </member>
        <member name="P:Spire.Security.Asn1.X509.X509ExtensionsGenerator.IsEmpty">
            <summary>Return true if there are no extension present in this generator.</summary>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509ExtensionsGenerator.Generate">
            <summary>Generate an X509Extensions object based on the current state of the generator.</summary>
            <returns>An <c>X509Extensions</c> object</returns>
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509Name">
             <pre>
                 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
            
                 RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue
            
                 AttributeTypeAndValue ::= SEQUENCE {
                                               type  OBJECT IDENTIFIER,
                                               value ANY }
             </pre>
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.T">
            Title
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.Street">
            street - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.SerialNumber">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.Surname">
            Naming attributes of type X520name
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.BusinessCategory">
            businessCategory - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.PostalCode">
            postalCode - DirectoryString(SIZE(1..40)
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.DnQualifier">
            dnQualifier - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.Pseudonym">
            RFC 3039 Pseudonym - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.DateOfBirth">
            RFC 3039 DateOfBirth - GeneralizedTime - YYYYMMDD000000Z
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.PlaceOfBirth">
            RFC 3039 PlaceOfBirth - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.Gender">
            RFC 3039 DateOfBirth - PrintableString (SIZE(1)) -- "M", "F", "m" or "f"
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.CountryOfCitizenship">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.CountryOfResidence">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.NameAtBirth">
            ISIS-MTT NameAtBirth - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.PostalAddress">
            RFC 3039 PostalAddress - SEQUENCE SIZE (1..6) OF
            DirectoryString(SIZE(1..30))
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.DmdName">
            RFC 2256 dmdName
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.TelephoneNumber">
            id-at-telephoneNumber
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.OrganizationIdentifier">
            id-at-organizationIdentifier
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.Name">
            id-at-name
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.EmailAddress">
            Email address (RSA PKCS#9 extension) - IA5String.
            <p>Note: if you're trying to be ultra orthodox, don't use this! It shouldn't be in here.</p>
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.UnstructuredName">
            more from PKCS#9
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.UID">
            LDAP User id.
        </member>
        <member name="P:Spire.Security.Asn1.X509.X509Name.DefaultReverse">
            determines whether or not strings should be processed and printed
            from back to front.
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.DefaultSymbols">
            default look up table translating OID values into their common symbols following
            the convention in RFC 2253 with a few extras
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.RFC2253Symbols">
            look up table translating OID values into their common symbols following the convention in RFC 2253
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.RFC1779Symbols">
             look up table translating OID values into their common symbols following the convention in RFC 1779
            
        </member>
        <member name="F:Spire.Security.Asn1.X509.X509Name.DefaultLookup">
            look up table translating common symbols into their OIDS.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.GetInstance(Spire.Security.Asn1.Asn1TaggedObject,System.Boolean)">
             Return a X509Name based on the passed in tagged object.
            
             @param obj tag object holding name.
             @param explicitly true if explicitly tagged false otherwise.
             @return the X509Name
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(Spire.Security.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence
            
             the principal will be a list of constructed sets, each containing an (OID, string) pair.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary,Spire.Security.Asn1.X509.X509NameEntryConverter)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList)">
            Takes two vectors one of the oids and the other of the values.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList,Spire.Security.Asn1.X509.X509NameEntryConverter)">
            Takes two vectors one of the oids and the other of the values.
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.String,Spire.Security.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Boolean,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. If reverse
            is true, create the encoded version of the sequence starting from the
            last element in the string.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Boolean,System.String,Spire.Security.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter. If reverse is true the ASN.1 sequence representing the DN will
            be built by starting at the end of the string, rather than the start.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically.
            <br/>
            If reverse is true, create the encoded version of the sequence
            starting from the last element in the string.
            @param reverse true if we should start scanning from the end (RFC 2553).
            @param lookUp table of names and their oids.
            @param dirName the X.500 string to be parsed.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String,Spire.Security.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically. The passed in converter is used to convert the
            string values to the right of each equals sign to their ASN.1 counterparts.
            <br/>
            @param reverse true if we should start scanning from the end, false otherwise.
            @param lookUp table of names and oids.
            @param dirName the string dirName
            @param converter the converter to convert string values into their ASN.1 equivalents
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.GetOidList">
            return an IList of the oids in the name, in the order they were found.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.GetValueList">
            return an IList of the values found in the name, in the order they
            were found.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.GetValueList(Spire.Security.Asn1.DerObjectIdentifier)">
            return an IList of the values found in the name, in the order they
            were found, with the DN label corresponding to passed in oid.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.Equivalent(Spire.Security.Asn1.X509.X509Name,System.Boolean)">
            <param name="other">The X509Name object to test equivalency against.</param>
            <param name="inOrder">If true, the order of elements must be the same,
            as well as the values associated with each element.</param>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.Equivalent(Spire.Security.Asn1.X509.X509Name)">
            test for equivalence - note: case is ignored.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509Name.ToString(System.Boolean,System.Collections.IDictionary)">
             convert the structure to a string - if reverse is true the
             oids and values are listed out starting with the last element
             in the sequence (ala RFC 2253), otherwise the string will begin
             with the first element of the structure. If no string definition
             for the oid is found in oidSymbols the string value of the oid is
             added. Two standard symbol tables are provided DefaultSymbols, and
             RFC2253Symbols as part of this class.
            
             @param reverse if true start at the end of the sequence and work back.
             @param oidSymbols look up table strings for oids.
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509NameEntryConverter">
                 * It turns out that the number of standard ways the fields in a DN should be
                 * encoded into their ASN.1 counterparts is rapidly approaching the
                 * number of machines on the internet. By default the X509Name class
                 * will produce UTF8Strings in line with the current recommendations (RFC 3280).
                 * <p>
                 * An example of an encoder look like below:
                 * <pre>
                 * internal class X509DirEntryConverter
                 *     : X509NameEntryConverter
                 * {
                 *     public Asn1Object GetConvertedValue(
                 *         DerObjectIdentifier  oid,
                 *         string               value)
                 *     {
                 *         if (str.Length() != 0 &amp;&amp; str.charAt(0) == '#')
                 *         {
                 *             return ConvertHexEncoded(str, 1);
                 *         }
                 *         if (oid.Equals(EmailAddress))
                 *         {
                 *             return new DerIA5String(str);
                 *         }
                 *         else if (CanBePrintable(str))
                 *         {
                 *             return new DerPrintableString(str);
                 *         }
                 *         else if (CanBeUTF8(str))
                 *         {
                 *             return new DerUtf8String(str);
                 *         }
                 *         else
                 *         {
                 *             return new DerBmpString(str);
                 *         }
                 *     }
                 * }
            	 * </pre>
            	 * </p>
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509NameEntryConverter.ConvertHexEncoded(System.String,System.Int32)">
             Convert an inline encoded hex string rendition of an ASN.1
             object back into its corresponding ASN.1 object.
            
             @param str the hex encoded object
             @param off the index at which the encoding starts
             @return the decoded object
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509NameEntryConverter.CanBePrintable(System.String)">
            return true if the passed in string can be represented without
            loss as a PrintableString, false otherwise.
        </member>
        <member name="M:Spire.Security.Asn1.X509.X509NameEntryConverter.GetConvertedValue(Spire.Security.Asn1.DerObjectIdentifier,System.String)">
             Convert the passed in string value into the appropriate ASN.1
             encoded object.
            
             @param oid the oid associated with the value in the DN.
             @param value the value of the particular DN component.
             @return the ASN.1 equivalent for the value.
        </member>
        <member name="T:Spire.Security.Asn1.X509.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:Spire.Security.Asn1.X9.ECNamedCurveTable">
            A general class that reads all X9.62 style EC curve tables.
        </member>
        <member name="M:Spire.Security.Asn1.X9.ECNamedCurveTable.GetByName(System.String)">
             return a X9ECParameters object representing the passed in named
             curve. The routine returns null if the curve is not present.
            
             @param name the name of the curve requested
             @return an X9ECParameters object or null if the curve is not available.
        </member>
        <member name="M:Spire.Security.Asn1.X9.ECNamedCurveTable.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.X9.ECNamedCurveTable.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return a X9ECParameters object representing the passed in named
             curve.
            
             @param oid the object id of the curve requested
             @return an X9ECParameters object or null if the curve is not available.
        </member>
        <member name="P:Spire.Security.Asn1.X9.ECNamedCurveTable.Names">
             return an enumeration of the names of the available curves.
            
             @return an enumeration of the names of the available curves.
        </member>
        <member name="T:Spire.Security.Asn1.X9.KeySpecificInfo">
            ASN.1 def for Diffie-Hellman key exchange KeySpecificInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:Spire.Security.Asn1.X9.KeySpecificInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             KeySpecificInfo ::= Sequence {
                 algorithm OBJECT IDENTIFIER,
                 counter OCTET STRING SIZE (4..4)
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X9.OtherInfo">
            ANS.1 def for Diffie-Hellman key exchange OtherInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:Spire.Security.Asn1.X9.OtherInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             OtherInfo ::= Sequence {
                 keyInfo KeySpecificInfo,
                 partyAInfo [0] OCTET STRING OPTIONAL,
                 suppPubInfo [2] OCTET STRING
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X9.X962NamedCurves">
            table of the current named curves defined in X.962 EC-DSA.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X962NamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X962NamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X962NamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Asn1.X9.X962NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X962Parameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Parameters ::= CHOICE {
               ecParameters ECParameters,
               namedCurve   CURVES.&amp;id({CurveNames}),
               implicitlyCA Null
            }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X9.X9Curve">
            ASN.1 def for Elliptic-Curve Curve structure. See
            X9.62, for further details.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9Curve.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             Curve ::= Sequence {
                 a               FieldElement,
                 b               FieldElement,
                 seed            BIT STRING      OPTIONAL
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X9.X9ECParameters">
            ASN.1 def for Elliptic-Curve ECParameters structure. See
            X9.62, for further details.
        </member>
        <member name="P:Spire.Security.Asn1.X9.X9ECParameters.CurveEntry">
             Return the ASN.1 entry representing the Curve.
            
             @return the X9Curve for the curve in these parameters.
        </member>
        <member name="P:Spire.Security.Asn1.X9.X9ECParameters.FieldIDEntry">
             Return the ASN.1 entry representing the FieldID.
            
             @return the X9FieldID for the FieldID in these parameters.
        </member>
        <member name="P:Spire.Security.Asn1.X9.X9ECParameters.BaseEntry">
             Return the ASN.1 entry representing the base point G.
            
             @return the X9ECPoint for the base point in these parameters.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9ECParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECParameters ::= Sequence {
                 version         Integer { ecpVer1(1) } (ecpVer1),
                 fieldID         FieldID {{FieldTypes}},
                 curve           X9Curve,
                 base            X9ECPoint,
                 order           Integer,
                 cofactor        Integer OPTIONAL
             }
            </pre>
        </member>
        <member name="T:Spire.Security.Asn1.X9.X9ECPoint">
            class for describing an ECPoint as a Der object.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9ECPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECPoint ::= OCTET STRING
            </pre>
            <p>
            Octet string produced using ECPoint.GetEncoded().</p>
        </member>
        <member name="T:Spire.Security.Asn1.X9.X9FieldElement">
            Class for processing an ECFieldElement as a DER object.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9FieldElement.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             FieldElement ::= OCTET STRING
            </pre>
            <p>
            <ol>
            <li> if <i>q</i> is an odd prime then the field element is
            processed as an Integer and converted to an octet string
            according to x 9.62 4.3.1.</li>
            <li> if <i>q</i> is 2<sup>m</sup> then the bit string
            contained in the field element is converted into an octet
            string with the same ordering padded at the front if necessary.
            </li>
            </ol>
            </p>
        </member>
        <member name="T:Spire.Security.Asn1.X9.X9FieldID">
            ASN.1 def for Elliptic-Curve Field ID structure. See
            X9.62, for further details.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9FieldID.#ctor(Spire.Security.Math.BigInteger)">
            Constructor for elliptic curves over prime fields
            <code>F<sub>2</sub></code>.
            @param primeP The prime <code>p</code> defining the prime field.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>..
        </member>
        <member name="M:Spire.Security.Asn1.X9.X9FieldID.ToAsn1Object">
            Produce a Der encoding of the following structure.
            <pre>
             FieldID ::= Sequence {
                 fieldType       FIELD-ID.&amp;id({IOSet}),
                 parameters      FIELD-ID.&amp;Type({IOSet}{&#64;fieldType})
             }
            </pre>
        </member>
        <member name="F:Spire.Security.Asn1.X9.X9ObjectIdentifiers.IdDsaWithSha1">
            id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
                  us(840) x9-57 (10040) x9cm(4) 3 }
        </member>
        <member name="F:Spire.Security.Asn1.X9.X9ObjectIdentifiers.X9x63Scheme">
            X9.63
        </member>
        <member name="F:Spire.Security.Asn1.X9.X9ObjectIdentifiers.ansi_x9_42">
            X9.42
        </member>
        <member name="T:Spire.Security.Bcpg.ArmoredInputStream">
            reader for Base64 armored objects - read the headers and then start returning
            bytes when the data is reached. An IOException is thrown if the CRC check
            fails.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.Decode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
             decode the base 64 encoded input data.
            
             @return the offset the data starts in out.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream)">
             Create a stream for reading a PGP armoured message, parsing up to a header
             and then reading the data that follows.
            
             @param input
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream,System.Boolean)">
             Create an armoured input stream which will assume the data starts
             straight away, or parse for headers first depending on the value of
             hasHeaders.
            
             @param input
             @param hasHeaders true if headers are to be looked for, false otherwise.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.IsClearText">
            @return true if we are inside the clear text section of a PGP
            signed message.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.IsEndOfStream">
            @return true if the stream is actually at end of file.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.GetArmorHeaderLine">
            Return the armor header line (if there is one)
            @return the armor header line, null if none present.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredInputStream.GetArmorHeaders">
            Return the armor headers (the lines after the armor header line),
            @return an array of armor headers, null if there aren't any.
        </member>
        <member name="T:Spire.Security.Bcpg.ArmoredOutputStream">
            Basic output stream.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredOutputStream.Encode(System.IO.Stream,System.Int32[],System.Int32)">
            encode the input data producing a base 64 encoded byte array.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredOutputStream.SetHeader(System.String,System.String)">
             Set an additional header entry. A null value will clear the entry for name.
            
             @param name the name of the header entry.
             @param v the value of the header entry.
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredOutputStream.ResetHeaders">
            Reset the headers to only contain a Version string (if one is present).
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredOutputStream.BeginClearText(Spire.Security.Bcpg.HashAlgorithmTag)">
            Start a clear text signed message.
            @param hashAlgorithm
        </member>
        <member name="M:Spire.Security.Bcpg.ArmoredOutputStream.Close">
            <b>Note</b>: Close() does not close the underlying stream. So it is possible to write
            multiple objects using armoring to a single stream.
        </member>
        <member name="T:Spire.Security.Bcpg.Attr.ImageAttrib">
            <remarks>Basic type for a image attribute packet.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.BcpgInputStream">
            <remarks>Reader for PGP objects.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgInputStream.NextPacketTag">
            <summary>Returns the next packet tag in the stream.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.BcpgInputStream.PartialInputStream">
            <summary>
            A stream that overlays our input stream, allowing the user to only read a segment of it.
            NB: dataLength will be negative if the segment length is in the upper range above 2**31.
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.BcpgObject">
            <remarks>Base class for a PGP object.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.BcpgOutputStream">
            <remarks>Basic output stream.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream)">
            <summary>Create a stream representing a general packet.</summary>
            <param name="outStr">Output stream to write to.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Spire.Security.Bcpg.PacketTag)">
            <summary>Create a stream representing an old style partial object.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">The packet tag for the object.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Spire.Security.Bcpg.PacketTag,System.Int64,System.Boolean)">
            <summary>Create a stream representing a general packet.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="length">Size of chunks making up the packet.</param>
            <param name="oldFormat">If true, the header is written out in old format.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Spire.Security.Bcpg.PacketTag,System.Int64)">
            <summary>Create a new style partial input stream buffered into chunks.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="length">Size of chunks making up the packet.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Spire.Security.Bcpg.PacketTag,System.Byte[])">
            <summary>Create a new style partial input stream buffered into chunks.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="buffer">Buffer to use for collecting chunks.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.Flush">
            <summary>Flush the underlying stream.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.BcpgOutputStream.Finish">
            <summary>Finish writing out the current packet without closing the underlying stream.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.CompressedDataPacket">
            <remarks>Generic compressed data object.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.CompressedDataPacket.Algorithm">
            <summary>The algorithm tag value.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.CompressionAlgorithmTag">
            <remarks>Basic tags for compression algorithms.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.ContainedPacket">
            <remarks>Basic type for a PGP packet.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.DsaPublicBcpgKey">
            <remarks>Base class for a DSA public key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.DsaPublicBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="P:Spire.Security.Bcpg.DsaPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.DsaPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.DsaSecretBcpgKey">
            <remarks>Base class for a DSA secret key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.DsaSecretBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            @param in
        </member>
        <member name="P:Spire.Security.Bcpg.DsaSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.DsaSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.DsaSecretBcpgKey.X">
            @return x
        </member>
        <member name="T:Spire.Security.Bcpg.ECDHPublicBcpgKey">
            <remarks>Base class for an ECDH Public Key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.ECDHPublicBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="T:Spire.Security.Bcpg.ECDsaPublicBcpgKey">
            <remarks>Base class for an ECDSA Public Key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.ECDsaPublicBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="T:Spire.Security.Bcpg.ECPublicBcpgKey">
            <remarks>Base class for an EC Public Key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.ECPublicBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="P:Spire.Security.Bcpg.ECPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.ECPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.ECSecretBcpgKey">
            <remarks>Base class for an EC Secret Key.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.ECSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.ECSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.ElGamalPublicBcpgKey">
            <remarks>Base class for an ElGamal public key.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.ElGamalPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.ElGamalPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.ElGamalSecretBcpgKey">
            <remarks>Base class for an ElGamal secret key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.ElGamalSecretBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            @param in
        </member>
        <member name="M:Spire.Security.Bcpg.ElGamalSecretBcpgKey.#ctor(Spire.Security.Math.BigInteger)">
            @param x
        </member>
        <member name="P:Spire.Security.Bcpg.ElGamalSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.ElGamalSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.ExperimentalPacket">
            <remarks>Basic packet for an experimental packet.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.HashAlgorithmTag">
            <remarks>Basic tags for hash algorithms.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.IBcpgKey">
            <remarks>Base interface for a PGP key.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.IBcpgKey.Format">
            <summary>
            The base format for this key - in the case of the symmetric keys it will generally
            be raw indicating that the key is just a straight byte representation, for an asymmetric
            key the format will be PGP, indicating the key is a string of MPIs encoded in PGP format.
            </summary>
            <returns>"RAW" or "PGP".</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.InputStreamPacket.GetInputStream">
            <summary>Note: you can only read from this once...</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.LiteralDataPacket">
            <remarks>Generic literal data packet.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.LiteralDataPacket.Format">
            <summary>The format tag value.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.LiteralDataPacket.ModificationTime">
            <summary>The modification time of the file in milli-seconds (since Jan 1, 1970 UTC)</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.MarkerPacket">
            <remarks>Basic type for a marker packet.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.ModDetectionCodePacket">
            <remarks>Basic packet for a modification detection code packet.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.MPInteger">
            <remarks>A multiple precision integer</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OnePassSignaturePacket">
            <remarks>Generic signature object</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.OnePassSignaturePacket.KeyAlgorithm">
            <summary>The encryption algorithm tag.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OnePassSignaturePacket.HashAlgorithm">
            <summary>The hash algorithm tag.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.PacketTag">
            <remarks>Basic PGP packet tag types.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.PublicKeyAlgorithmTag">
            <remarks>Public Key Algorithm tag numbers.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.PublicKeyEncSessionPacket">
            <remarks>Basic packet for a PGP public key.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.PublicKeyPacket">
            <remarks>Basic packet for a PGP public key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.PublicKeyPacket.#ctor(Spire.Security.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Spire.Security.Bcpg.IBcpgKey)">
            <summary>Construct a version 4 public key packet.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.PublicSubkeyPacket">
            <remarks>Basic packet for a PGP public subkey</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.PublicSubkeyPacket.#ctor(Spire.Security.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Spire.Security.Bcpg.IBcpgKey)">
            <summary>Construct a version 4 public subkey packet.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.RsaPublicBcpgKey">
            <remarks>Base class for an RSA public key.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.RsaPublicBcpgKey.#ctor(Spire.Security.Bcpg.BcpgInputStream)">
            <summary>Construct an RSA public key from the passed in stream.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.RsaPublicBcpgKey.#ctor(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            <param name="n">The modulus.</param>
            <param name="e">The public exponent.</param>
        </member>
        <member name="P:Spire.Security.Bcpg.RsaPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.RsaPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.RsaSecretBcpgKey">
            <remarks>Base class for an RSA secret (or priate) key.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.RsaSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.RsaSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.S2k">
            <remarks>The string to key specifier class.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.S2k.HashAlgorithm">
            <summary>The hash algorithm.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.S2k.GetIV">
            <summary>The IV for the key generation algorithm.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.S2k.IterationCount">
            <summary>The iteration count</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.S2k.ProtectionMode">
            <summary>The protection mode - only if GnuDummyS2K</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.SecretKeyPacket">
            <remarks>Basic packet for a PGP secret key.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.SecretSubkeyPacket">
            <remarks>Basic packet for a PGP secret key.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.SignaturePacket">
            <remarks>Generic signature packet.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int64,Spire.Security.Bcpg.PublicKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,Spire.Security.Bcpg.SignatureSubpacket[],Spire.Security.Bcpg.SignatureSubpacket[],System.Byte[],Spire.Security.Bcpg.MPInteger[])">
             Generate a version 4 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param hashedData
             @param unhashedData
             @param fingerprint
             @param signature
        </member>
        <member name="M:Spire.Security.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int32,System.Int64,Spire.Security.Bcpg.PublicKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Int64,System.Byte[],Spire.Security.Bcpg.MPInteger[])">
             Generate a version 2/3 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param fingerprint
             @param signature
        </member>
        <member name="P:Spire.Security.Bcpg.SignaturePacket.KeyId">
            return the keyId
            @return the keyId that created the signature.
        </member>
        <member name="M:Spire.Security.Bcpg.SignaturePacket.GetSignatureTrailer">
             return the signature trailer that must be included with the data
             to reconstruct the signature
            
             @return byte[]
        </member>
        <member name="M:Spire.Security.Bcpg.SignaturePacket.GetSignature">
            		* return the signature as a set of integers - note this is normalised to be the
                    * ASN.1 encoding of what appears in the signature packet.
        </member>
        <member name="M:Spire.Security.Bcpg.SignaturePacket.GetSignatureBytes">
            Return the byte encoding of the signature section.
            @return uninterpreted signature bytes.
        </member>
        <member name="P:Spire.Security.Bcpg.SignaturePacket.CreationTime">
            <summary>Return the creation time in milliseconds since 1 Jan., 1970 UTC.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.SignatureSubpacket">
            <remarks>Basic type for a PGP Signature sub-packet.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.SignatureSubpacket.GetData">
            <summary>Return the generic data making up the packet.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.SignatureSubpacketsParser">
            reader for signature sub-packets
        </member>
        <member name="T:Spire.Security.Bcpg.SignatureSubpacketTag">
            Basic PGP signature sub-packet tag types.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.EmbeddedSignature">
            Packet embedded signature
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.Exportable">
            packet giving signature creation time.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.Features">
            packet giving signature expiration time.
        </member>
        <member name="F:Spire.Security.Bcpg.Sig.Features.FEATURE_MODIFICATION_DETECTION">
            Identifier for the modification detection feature 
        </member>
        <member name="P:Spire.Security.Bcpg.Sig.Features.SupportsModificationDetection">
            Returns if modification detection is supported.
        </member>
        <member name="M:Spire.Security.Bcpg.Sig.Features.SupportsFeature(System.Byte)">
            Returns if a particular feature is supported.
        </member>
        <member name="M:Spire.Security.Bcpg.Sig.Features.SetSupportsFeature(System.Byte,System.Boolean)">
            Sets support for a particular feature.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.IssuerKeyId">
            packet giving signature creation time.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.KeyExpirationTime">
            packet giving time after creation at which the key expires.
        </member>
        <member name="P:Spire.Security.Bcpg.Sig.KeyExpirationTime.Time">
             Return the number of seconds after creation time a key is valid for.
            
             @return second count for key validity.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.KeyFlags">
            Packet holding the key flag values.
        </member>
        <member name="P:Spire.Security.Bcpg.Sig.KeyFlags.Flags">
            <summary>
            Return the flag values contained in the first 4 octets (note: at the moment
            the standard only uses the first one).
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.NotationData">
            Class provided a NotationData object according to
            RFC2440, Chapter 5.2.3.15. Notation Data
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.PreferredAlgorithms">
            packet giving signature creation time.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.PrimaryUserId">
            packet giving whether or not the signature is signed using the primary user ID for the key.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.Revocable">
            packet giving whether or not is revocable.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.SignatureCreationTime">
            packet giving signature creation time.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.SignatureExpirationTime">
            packet giving signature expiration time.
        </member>
        <member name="P:Spire.Security.Bcpg.Sig.SignatureExpirationTime.Time">
            return time in seconds before signature expires after creation time.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.SignerUserId">
            packet giving the User ID of the signer.
        </member>
        <member name="T:Spire.Security.Bcpg.Sig.TrustSignature">
            packet giving trust.
        </member>
        <member name="T:Spire.Security.Bcpg.RevocationKey">
            <summary>
            Represents revocation key OpenPGP signature sub packet.
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.RevocationReason">
            <summary>
            Represents revocation reason OpenPGP signature sub packet.
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.SymmetricEncDataPacket">
            <remarks>Basic type for a symmetric key encrypted packet.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.SymmetricKeyAlgorithmTag">
            Basic tags for symmetric key algorithms
        </member>
        <member name="T:Spire.Security.Bcpg.SymmetricKeyEncSessionPacket">
            Basic type for a symmetric encrypted session key packet
        </member>
        <member name="P:Spire.Security.Bcpg.SymmetricKeyEncSessionPacket.EncAlgorithm">
            @return int
        </member>
        <member name="P:Spire.Security.Bcpg.SymmetricKeyEncSessionPacket.S2k">
            @return S2k
        </member>
        <member name="M:Spire.Security.Bcpg.SymmetricKeyEncSessionPacket.GetSecKeyData">
            @return byte[]
        </member>
        <member name="P:Spire.Security.Bcpg.SymmetricKeyEncSessionPacket.Version">
            @return int
        </member>
        <member name="T:Spire.Security.Bcpg.TrustPacket">
            <summary>Basic type for a trust packet.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.UserAttributePacket">
            Basic type for a user attribute packet.
        </member>
        <member name="T:Spire.Security.Bcpg.UserAttributeSubpacket">
            Basic type for a user attribute sub-packet.
        </member>
        <member name="M:Spire.Security.Bcpg.UserAttributeSubpacket.GetData">
            return the generic data making up the packet.
        </member>
        <member name="T:Spire.Security.Bcpg.UserAttributeSubpacketsParser">
            reader for user attribute sub-packets
        </member>
        <member name="T:Spire.Security.Bcpg.UserAttributeSubpacketTag">
            Basic PGP user attribute sub-packet tag types.
        </member>
        <member name="T:Spire.Security.Bcpg.UserIdPacket">
            Basic type for a user ID packet.
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpCompressedData">
            <remarks>Compressed data objects</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpCompressedData.Algorithm">
            <summary>The algorithm used for compression</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpCompressedData.GetInputStream">
            <summary>Get the raw input stream contained in the object.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpCompressedData.GetDataStream">
            <summary>Return an uncompressed input stream which allows reading of the compressed data.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpCompressedDataGenerator">
            <remarks>Class for producing compressed data packets.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpCompressedDataGenerator.Open(System.IO.Stream)">
            <summary>
            <p>
            Return an output stream which will save the data being written to
            the compressed object.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">Stream to be used for output.</param>
            <returns>A Stream for output of the compressed data.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpCompressedDataGenerator.Open(System.IO.Stream,System.Byte[])">
            <summary>
            <p>
            Return an output stream which will compress the data as it is written to it.
            The stream will be written out in chunks according to the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.
            </p>
            <p>
            <b>Note</b>: using this may break compatibility with RFC 1991 compliant tools.
            Only recent OpenPGP implementations are capable of accepting these streams.
            </p>
            </summary>
            <param name="outStr">Stream to be used for output.</param>
            <param name="buffer">The buffer to use.</param>
            <returns>A Stream for output of the compressed data.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException"></exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpCompressedDataGenerator.Close">
            <summary>Close the compressed object.</summary>summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpDataValidationException">
            <remarks>
            Thrown if the IV at the start of a data stream indicates the wrong key is being used.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedData.GetInputStream">
            <summary>Return the raw input stream for the data stream.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedData.IsIntegrityProtected">
            <summary>Return true if the message is integrity protected.</summary>
            <returns>True, if there is a modification detection code namespace associated
            with this stream.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedData.Verify">
            <summary>Note: This can only be called after the message has been read.</summary>
            <returns>True, if the message verifies, false otherwise</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator">
            <remarks>Generator for encrypted objects.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Security.SecureRandom)">
            <summary>Existing SecureRandom constructor.</summary>
            <param name="encAlgorithm">The symmetric algorithm to use.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,Spire.Security.Security.SecureRandom)">
            <summary>Creates a cipher stream which will have an integrity packet associated with it.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Security.SecureRandom,System.Boolean)">
            <summary>Base constructor.</summary>
            <param name="encAlgorithm">The symmetric algorithm to use.</param>
            <param name="rand">Source of randomness.</param>
            <param name="oldFormat">PGP 2.6.x compatibility required.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(System.Char[])">
            <summary>
            Add a PBE encryption method to the encrypted object using the default algorithm (S2K_SHA1).
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(System.Char[],Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>Add a PBE encryption method to the encrypted object.</summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethodUtf8(System.Char[],Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>Add a PBE encryption method to the encrypted object.</summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethodRaw(System.Byte[],Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>Add a PBE encryption method to the encrypted object.</summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Add a public key encrypted session key to the encrypted object.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Int64,System.Byte[])">
            <summary>
            <p>
            If buffer is non null stream assumed to be partial, otherwise the length will be used
            to output a fixed length packet.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Int64)">
            <summary>
            <p>
            Return an output stream which will encrypt the data as it is written to it.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Byte[])">
            <summary>
            <p>
            Return an output stream which will encrypt the data as it is written to it.
            The stream will be written out in chunks according to the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.
            </p>
            </summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Close">
            <summary>
            <p>
            Close off the encrypted object - this is equivalent to calling Close() on the stream
            returned by the Open() method.
            </p>
            <p>
            <b>Note</b>: This does not close the underlying output stream, only the stream on top of
            it created by the Open() method.
            </p>
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpEncryptedDataList">
            <remarks>A holder for a list of PGP encryption method packets.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpException">
            <remarks>Generic exception class for PGP encoding/decoding problems.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpKeyFlags">
            <remarks>Key flag values for the KeyFlags subpacket.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpKeyPair">
            <remarks>
            General class to handle JCA key pairs and convert them into OpenPGP ones.
            <p>
            A word for the unwary, the KeyId for an OpenPGP public key is calculated from
            a hash that includes the time of creation, if you pass a different date to the
            constructor below with the same public private key pair the KeyIs will not be the
            same as for previous generations of the key, so ideally you only want to do
            this once.
            </p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyPair.#ctor(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Create a key pair from a PgpPrivateKey and a PgpPublicKey.</summary>
            <param name="pub">The public key.</param>
            <param name="priv">The private key.</param>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpKeyPair.KeyId">
            <summary>The keyId associated with this key pair.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator">
            <remarks>
            Generator for a PGP master and subkey ring.
            This class will generate both the secret and public key rings
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator using old style checksumming. It is recommended to use
            SHA1 checksumming where possible.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="utf8PassPhrase">
            If true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Byte[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="rawPassPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="utf8PassPhrase">
            If true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Byte[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="rawPassPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Spire.Security.Bcpg.OpenPgp.PgpKeyPair)">
            <summary>Add a subkey to the key ring to be generated with default certification.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Spire.Security.Bcpg.OpenPgp.PgpKeyPair,Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>
            Add a subkey to the key ring to be generated with default certification.
            </summary>
            <param name="keyPair">The key pair.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Spire.Security.Bcpg.OpenPgp.PgpKeyPair,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector)">
            <summary>
            Add a subkey with specific hashed and unhashed packets associated with it and
            default certification.
            </summary>
            <param name="keyPair">Public/private key pair.</param>
            <param name="hashedPackets">Hashed packet values to be included in certification.</param>
            <param name="unhashedPackets">Unhashed packets values to be included in certification.</param>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException"></exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(Spire.Security.Bcpg.OpenPgp.PgpKeyPair,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>
            Add a subkey with specific hashed and unhashed packets associated with it and
            default certification.
            </summary>
            <param name="keyPair">Public/private key pair.</param>
            <param name="hashedPackets">Hashed packet values to be included in certification.</param>
            <param name="unhashedPackets">Unhashed packets values to be included in certification.</param>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException">exception adding subkey: </exception>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException"></exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.GenerateSecretKeyRing">
            <summary>Return the secret key ring.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpKeyRingGenerator.GeneratePublicKeyRing">
            <summary>Return the public key ring that corresponds to the secret key ring.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpKeyValidationException">
            <remarks>
            Thrown if the key checksum is invalid.
            </remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpLiteralData">
            <summary>Class for processing literal data objects.</summary>
        </member>
        <member name="F:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.Console">
            <summary>The special name indicating a "for your eyes only" packet.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.Format">
            <summary>The format of the data stream - Binary or Text</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.FileName">
            <summary>The file name that's associated with the data stream.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.GetRawFileName">
            Return the file name as an unintrepreted byte array.
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.ModificationTime">
            <summary>The modification time for the file.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.GetInputStream">
            <summary>The raw input stream for the data stream.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralData.GetDataStream">
            <summary>The input stream representing the data stream.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator">
            <remarks>Class for producing literal data packets.</remarks>
        </member>
        <member name="F:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator.Console">
            <summary>The special name indicating a "for your eyes only" packet.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator.#ctor(System.Boolean)">
            <summary>
            Generates literal data objects in the old format.
            This is important if you need compatibility with PGP 2.6.x.
            </summary>
            <param name="oldFormat">If true, uses old format.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.Int64,System.DateTime)">
            <summary>
            <p>
            Open a literal data packet, returning a stream to store the data inside the packet.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="name">The name of the 'file'.</param>
            <param name="length">The length of the data we will write.</param>
            <param name="modificationTime">The time of last modification we want stored.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.DateTime,System.Byte[])">
            <summary>
            <p>
            Open a literal data packet, returning a stream to store the data inside the packet,
            as an indefinite length stream. The stream is written out as a series of partial
            packets with a chunk size determined by the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.</p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="name">The name of the 'file'.</param>
            <param name="modificationTime">The time of last modification we want stored.</param>
            <param name="buffer">The buffer to use for collecting data to put into chunks.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.IO.FileInfo)">
            <summary>
            <p>
            Open a literal data packet for the passed in <c>FileInfo</c> object, returning
            an output stream for saving the file contents.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="file">The <c>FileInfo</c> object containg the packet details.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpLiteralDataGenerator.Close">
            <summary>
            Close the literal data packet - this is equivalent to calling Close()
            on the stream returned by the Open() method.
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpMarker">
            <remarks>
            A PGP marker packet - in general these should be ignored other than where
            the idea is to preserve the original input stream.
            </remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpObjectFactory">
            <remarks>
            General class for reading a PGP object stream.
            <p>
            Note: if this class finds a PgpPublicKey or a PgpSecretKey it
            will create a PgpPublicKeyRing, or a PgpSecretKeyRing for each
            key found. If all you are trying to do is read a key ring file use
            either PgpPublicKeyRingBundle or PgpSecretKeyRingBundle.</p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpObjectFactory.NextPgpObject">
            <summary>Return the next object in the stream, or null if the end is reached.</summary>
            <exception cref="T:System.IO.IOException">On a parse error</exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpObjectFactory.AllPgpObjects">
            <summary>
            Return all available objects in a list.
            </summary>
            <returns>An <c>IList</c> containing all objects from this factory, in order.</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpOnePassSignature">
            <remarks>A one pass signature object.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpOnePassSignature.InitVerify(Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Initialise the signature object for verification.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpOnePassSignature.Verify(Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Verify the calculated signature against the passed in PgpSignature.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpOnePassSignatureList">
            <remarks>Holder for a list of PgpOnePassSignature objects.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPad">
            <remarks>Padding functions.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPbeEncryptedData">
            <remarks>A password based encryption object.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPbeEncryptedData.GetInputStream">
            <summary>Return the raw input stream for the data stream.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStream(System.Char[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStreamUtf8(System.Char[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStreamRaw(System.Byte[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPrivateKey">
            <remarks>General class to contain a private key for use with other OpenPGP objects.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPrivateKey.#ctor(System.Int64,Spire.Security.Bcpg.PublicKeyPacket,Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Create a PgpPrivateKey from a keyID, the associated public data packet, and a regular private key.
            </summary>
            <param name="keyID">ID of the corresponding public key.</param>
            <param name="publicKeyPacket">the public key data packet to be associated with this private key.</param>
            <param name="privateKey">the private key data packet to be associated with this private key.</param>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPrivateKey.KeyId">
            <summary>The keyId associated with the contained private key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPrivateKey.PublicKeyPacket">
            <summary>The public key packet associated with this private key, if available.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPrivateKey.Key">
            <summary>The contained private key.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPublicKey">
            <remarks>General class to handle a PGP public key object.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.#ctor(Spire.Security.Bcpg.PublicKeyAlgorithmTag,Spire.Security.Crypto.AsymmetricKeyParameter,System.DateTime)">
            <summary>
            Create a PgpPublicKey from the passed in lightweight one.
            </summary>
            <remarks>
            Note: the time passed in affects the value of the key's keyId, so you probably only want
            to do this once for a lightweight key, or make sure you keep track of the time you used.
            </remarks>
            <param name="algorithm">Asymmetric algorithm type representing the public key.</param>
            <param name="pubKey">Actual public key to associate.</param>
            <param name="time">Date of creation.</param>
            <exception cref="T:System.ArgumentException">If <c>pubKey</c> is not public.</exception>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException">On key creation problem.</exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.#ctor(Spire.Security.Bcpg.PublicKeyPacket,Spire.Security.Bcpg.TrustPacket,System.Collections.IList)">
            <summary>Constructor for a sub-key.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.#ctor(Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Copy constructor.</summary>
            <param name="pubKey">The public key to copy.</param>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.Version">
            <summary>The version of this key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.CreationTime">
            <summary>The creation time of this key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.ValidDays">
            <summary>The number of valid days from creation time - zero means no expiry.</summary>
            <remarks>WARNING: This method will return 1 for keys with version > 3 that expire in less than 1 day</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetTrustData">
            <summary>Return the trust data associated with the public key, if present.</summary>
            <returns>A byte array with trust data, null otherwise.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetValidSeconds">
            <summary>The number of valid seconds from creation time - zero means no expiry.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.KeyId">
            <summary>The keyId associated with the public key.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetFingerprint">
            <summary>The fingerprint of the key</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.IsEncryptionKey">
            <summary>
            Check if this key has an algorithm type that makes it suitable to use for encryption.
            </summary>
            <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
            <returns>
            <c>true</c> if this key algorithm is suitable for encryption.
            </returns>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.IsMasterKey">
            <summary>True, if this is a master key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.Algorithm">
            <summary>The algorithm code associated with the public key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.BitStrength">
            <summary>The strength of the key in bits.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetKey">
            <summary>The public key contained in the object.</summary>
            <returns>A lightweight public key.</returns>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException">If the key algorithm is not recognised.</exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetUserIds">
            <summary>Allows enumeration of any user IDs associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetUserAttributes">
            <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpUserAttributeSubpacketVector</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForId(System.String)">
            <summary>Allows enumeration of any signatures associated with the passed in id.</summary>
            <param name="id">The ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForUserAttribute(Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
            <summary>Allows enumeration of signatures associated with the passed in user attributes.</summary>
            <param name="userAttributes">The vector of user attributes to be matched.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesOfType(System.Int32)">
            <summary>Allows enumeration of signatures of the passed in type that are on this key.</summary>
            <param name="signatureType">The type of the signature to be returned.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetSignatures">
            <summary>Allows enumeration of all signatures/certifications associated with this key.</summary>
            <returns>An <c>IEnumerable</c> with all signatures/certifications.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.GetKeySignatures">
             Return all signatures/certifications directly associated with this key (ie, not to a user id).
            
             @return an iterator (possibly empty) with all signatures/certifications.
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.IsRevoked">
            <summary>Check whether this (sub)key has a revocation signature on it.</summary>
            <returns>True, if this (sub)key has been revoked.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,System.String,Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a certification for an id to the given public key.</summary>
            <param name="key">The key the certification is to be added to.</param>
            <param name="id">The ID the certification is associated with.</param>
            <param name="certification">The new certification.</param>
            <returns>The re-certified key.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a certification for the given UserAttributeSubpackets to the given public key.</summary>
            <param name="key">The key the certification is to be added to.</param>
            <param name="userAttributes">The attributes the certification is associated with.</param>
            <param name="certification">The new certification.</param>
            <returns>The re-certified key.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
            <summary>
            Remove any certifications associated with a user attribute subpacket on a key.
            </summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="userAttributes">The attributes to be removed.</param>
            <returns>
            The re-certified key, or null if the user attribute subpacket was not found on the key.
            </returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,System.String)">
            <summary>Remove any certifications associated with a given ID on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="id">The ID that is to be removed.</param>
            <returns>The re-certified key, or null if the ID was not found on the key.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,System.String,Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification associated with a given ID on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="id">The ID that the certfication is to be removed from.</param>
            <param name="certification">The certfication to be removed.</param>
            <returns>The re-certified key, or null if the certification was not found.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification associated with a given user attributes on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="userAttributes">The user attributes that the certfication is to be removed from.</param>
            <param name="certification">The certification to be removed.</param>
            <returns>The re-certified key, or null if the certification was not found.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.AddCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a revocation or some other key certification to a key.</summary>
            <param name="key">The key the revocation is to be added to.</param>
            <param name="certification">The key signature to be added.</param>
            <returns>The new changed public key object.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification from the key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="certification">The certfication to be removed.</param>
            <returns>The modified key, null if the certification was not found.</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyEncryptedData">
            <remarks>A public key encrypted data object.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.KeyId">
            <summary>The key ID for the key used to encrypt the data.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetSymmetricAlgorithm(Spire.Security.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>
            Return the algorithm code for the symmetric algorithm used to encrypt the data.
            </summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetDataStream(Spire.Security.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Return the decrypted data stream for the packet.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing">
            <remarks>
            Class to hold a single master public key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpPublicKeyRingBundle</c> class.
            </p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey">
            <summary>Return the first public key in the ring.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey(System.Int64)">
            <summary>Return the public key referred to by the passed in key ID if it is present.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKeys">
            <summary>Allows enumeration of all the public keys.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpPublicKey</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing.InsertPublicKey(Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Returns a new key ring with the public key passed in either added or
            replacing an existing one.
            </summary>
            <param name="pubRing">The public key ring to be modified.</param>
            <param name="pubKey">The public key to be inserted.</param>
            <returns>A new <c>PgpPublicKeyRing</c></returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing.RemovePublicKey(Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Returns a new key ring with the public key passed in removed from the key ring.</summary>
            <param name="pubRing">The public key ring to be modified.</param>
            <param name="pubKey">The public key to be removed.</param>
            <returns>A new <c>PgpPublicKeyRing</c>, or null if pubKey is not found.</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle">
            <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire public key file in one hit this is the class for you.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.#ctor(System.IO.Stream)">
            <summary>Build a PgpPublicKeyRingBundle from the passed in input stream.</summary>
            <param name="inputStream">Input stream containing data.</param>
            <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpPublicKeyRing.</exception>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Count">
            <summary>Return the number of key rings in this collection.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings">
            <summary>Allow enumeration of the public key rings making up this collection.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKey(System.Int64)">
            <summary>Return the PGP public key associated with the given key id.</summary>
            <param name="keyId">The ID of the public key to return.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKeyRing(System.Int64)">
            <summary>Return the public key ring which contains the key referred to by keyId</summary>
            <param name="keyId">key ID to match against</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Contains(System.Int64)">
            <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
            <param name="keyID">key ID to look for.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.AddPublicKeyRing(Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle,Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in public key ring.
            </summary>
            <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be added to.</param>
            <param name="publicKeyRing">The key ring to be added.</param>
            <returns>A new <c>PgpPublicKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle.RemovePublicKeyRing(Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRingBundle,Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in public key ring removed.
            </summary>
            <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be removed from.</param>
            <param name="publicKeyRing">The key ring to be removed.</param>
            <returns>A new <c>PgpPublicKeyRingBundle</c> not containing the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSecretKey">
            <remarks>General class to handle a PGP secret key object.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            If utf8PassPhrase is true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,System.Byte[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Boolean,System.Char[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            If utf8PassPhrase is true, conversion of the passphrase to bytes uses Encoding.UTF8.GetBytes(), otherwise the conversion
            is performed using Convert.ToByte(), which is the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.#ctor(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpKeyPair,System.String,Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag,System.Byte[],System.Boolean,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector,Spire.Security.Security.SecureRandom)">
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.IsSigningKey">
            <summary>
            Check if this key has an algorithm type that makes it suitable to use for signing.
            </summary>
            <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
            <returns>
            <c>true</c> if this key algorithm is suitable for use with signing.
            </returns>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.IsMasterKey">
            <summary>True, if this is a master key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.IsPrivateKeyEmpty">
            <summary>Detect if the Secret Key's Private Key is empty or not</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.KeyEncryptionAlgorithm">
            <summary>The algorithm the key is encrypted with.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.KeyId">
            <summary>The key ID of the public key associated with this key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.S2kUsage">
            <summary>Return the S2K usage associated with this key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.S2k">
            <summary>Return the S2K used to process this key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.PublicKey">
            <summary>The public key associated with this key.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.UserIds">
            <summary>Allows enumeration of any user IDs associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.UserAttributes">
            <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKey(System.Char[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKeyUtf8(System.Char[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKeyRaw(System.Byte[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPassword(Spire.Security.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="oldPassPhrase">The current password for the key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPasswordUtf8(Spire.Security.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="oldPassPhrase">The current password for the key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPasswordRaw(Spire.Security.Bcpg.OpenPgp.PgpSecretKey,System.Byte[],System.Byte[],Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="rawOldPassPhrase">The current password for the key.</param>
            <param name="rawNewPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ReplacePublicKey(Spire.Security.Bcpg.OpenPgp.PgpSecretKey,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Replace the passed the public key on the passed in secret key.</summary>
            <param name="secretKey">Secret key to change.</param>
            <param name="publicKey">New public key.</param>
            <returns>A new secret key.</returns>
            <exception cref="T:System.ArgumentException">If KeyId's do not match.</exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExpr(System.IO.Stream,System.Char[],Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprUtf8(System.IO.Stream,System.Char[],Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprRaw(System.IO.Stream,System.Byte[],Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Parse a secret key from one of the GPG S expression keys associating it with the passed in public key.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExpr(System.IO.Stream,System.Char[])">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprUtf8(System.IO.Stream,System.Char[])">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.ParseSecretKeyFromSExprRaw(System.IO.Stream,System.Byte[])">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKey.DoParseSecretKeyFromSExpr(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            Parse a secret key from one of the GPG S expression keys.
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing">
            <remarks>
            Class to hold a single master secret key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpSecretKeyRingBundle</c> class.
            </p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.GetPublicKey">
            <summary>Return the public key for the master key.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKey">
            <summary>Return the master private key.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKeys">
            <summary>Allows enumeration of the secret keys.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpSecretKey</c> objects.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.GetExtraPublicKeys">
            <summary>
            Return an iterator of the public keys in the secret key ring that
            have no matching private key. At the moment only personal certificate data
            appears in this fashion.
            </summary>
            <returns>An <c>IEnumerable</c> of unattached, or extra, public keys.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.ReplacePublicKeys(Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing,Spire.Security.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Replace the public key set on the secret ring with the corresponding key off the public ring.
            </summary>
            <param name="secretRing">Secret ring to be changed.</param>
            <param name="publicRing">Public ring containing the new public key set.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.CopyWithNewPassword(Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing,System.Char[],System.Char[],Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key ring, with the master key and sub keys encrypted
            using a new password and the passed in algorithm.
            </summary>
            <param name="ring">The <c>PgpSecretKeyRing</c> to be copied.</param>
            <param name="oldPassPhrase">The current password for key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.InsertSecretKey(Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing,Spire.Security.Bcpg.OpenPgp.PgpSecretKey)">
            <summary>
            Returns a new key ring with the secret key passed in either added or
            replacing an existing one with the same key ID.
            </summary>
            <param name="secRing">The secret key ring to be modified.</param>
            <param name="secKey">The secret key to be inserted.</param>
            <returns>A new <c>PgpSecretKeyRing</c></returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing.RemoveSecretKey(Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing,Spire.Security.Bcpg.OpenPgp.PgpSecretKey)">
            <summary>Returns a new key ring with the secret key passed in removed from the key ring.</summary>
            <param name="secRing">The secret key ring to be modified.</param>
            <param name="secKey">The secret key to be removed.</param>
            <returns>A new <c>PgpSecretKeyRing</c>, or null if secKey is not found.</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle">
            <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire secret key file in one hit this is the class for you.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.#ctor(System.IO.Stream)">
            <summary>Build a PgpSecretKeyRingBundle from the passed in input stream.</summary>
            <param name="inputStream">Input stream containing data.</param>
            <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
            <exception cref="T:Spire.Security.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpSecretKeyRing.</exception>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Count">
            <summary>Return the number of rings in this collection.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings">
            <summary>Allow enumeration of the secret key rings making up this collection.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKey(System.Int64)">
            <summary>Return the PGP secret key associated with the given key id.</summary>
            <param name="keyId">The ID of the secret key to return.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKeyRing(System.Int64)">
            <summary>Return the secret key ring which contains the key referred to by keyId</summary>
            <param name="keyId">The ID of the secret key</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Contains(System.Int64)">
            <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
            <param name="keyID">key ID to look for.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.AddSecretKeyRing(Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle,Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in secret key ring.
            </summary>
            <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be added to.</param>
            <param name="secretKeyRing">The key ring to be added.</param>
            <returns>A new <c>PgpSecretKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle.RemoveSecretKeyRing(Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRingBundle,Spire.Security.Bcpg.OpenPgp.PgpSecretKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in secret key ring removed.
            </summary>
            <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be removed from.</param>
            <param name="secretKeyRing">The key ring to be removed.</param>
            <returns>A new <c>PgpSecretKeyRingBundle</c> not containing the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSignature">
            <remarks>A PGP signature object.</remarks>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignature.Version">
            <summary>The OpenPGP version number for this signature.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignature.KeyAlgorithm">
            <summary>The key algorithm associated with this signature.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignature.HashAlgorithm">
            <summary>The hash algorithm associated with this signature.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignature.IsCertification">
            <summary>Return true if this signature represents a certification.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in user attributes.
            </summary>
            <param name="userAttributes">User attributes the key was stored under.</param>
            <param name="key">The key to be verified.</param>
            <returns>True, if the signature matches, false otherwise.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignature.VerifyCertification(System.String,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in ID.
            </summary>
            <param name="id">ID the key was stored under.</param>
            <param name="key">The key to be verified.</param>
            <returns>True, if the signature matches, false otherwise.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Verify a certification for the passed in key against the passed in master key.</summary>
            <param name="masterKey">The key we are verifying against.</param>
            <param name="pubKey">The key we are verifying.</param>
            <returns>True, if the certification is valid, false otherwise.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignature.VerifyCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Verify a key certification, such as revocation, for the passed in key.</summary>
            <param name="pubKey">The key we are checking.</param>
            <returns>True, if the certification is valid, false otherwise.</returns>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignature.KeyId">
            <summary>The ID of the key that created the signature.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignature.CreationTime">
            <summary>The creation time of this signature.</summary>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignature.HasSubpackets">
            <summary>
            Return true if the signature has either hashed or unhashed subpackets.
            </summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignature.IsCertification(System.Int32)">
            <summary>
            Return true if the passed in signature type represents a certification, false if the signature type is not.
            </summary>
            <param name="signatureType"></param>
            <returns>true if signatureType is a certification, false otherwise.</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator">
            <remarks>Generator for PGP signatures.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.#ctor(Spire.Security.Bcpg.PublicKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpPrivateKey,Spire.Security.Security.SecureRandom)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateOnePassVersion(System.Boolean)">
            <summary>Return the one pass header associated with the current signature.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.Generate">
            <summary>Return a signature object containing the current signature state.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(System.String,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in ID and key.</summary>
            <param name="id">The ID we are certifying against the public key.</param>
            <param name="pubKey">The key we are certifying against the ID.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in userAttributes.</summary>
            <param name="userAttributes">The ID we are certifying against the public key.</param>
            <param name="pubKey">The key we are certifying against the ID.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey,Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in key against the passed in master key.</summary>
            <param name="masterKey">The key we are certifying against.</param>
            <param name="pubKey">The key we are certifying.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(Spire.Security.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification, such as a revocation, for the passed in key.</summary>
            <param name="pubKey">The key we are certifying.</param>
            <returns>The certification.</returns>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSignatureList">
            <remarks>A list of PGP signatures - normally in the signature block after literal data.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator">
            <remarks>Generator for signature subpackets.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetTrust(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Add a TrustSignature packet to the signature. The values for depth and trust are largely
            installation dependent but there are some guidelines in RFC 4880 - 5.2.3.13.
            </summary>
            <param name="isCritical">true if the packet is critical.</param>
            <param name="depth">depth level.</param>
            <param name="trustAmount">trust amount.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetKeyExpirationTime(System.Boolean,System.Int64)">
            <summary>
            Set the number of seconds a key is valid for after the time of its creation.
            A value of zero means the key never expires.
            </summary>
            <param name="isCritical">True, if should be treated as critical, false otherwise.</param>
            <param name="seconds">The number of seconds the key is valid, or zero if no expiry.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureExpirationTime(System.Boolean,System.Int64)">
            <summary>
            Set the number of seconds a signature is valid for after the time of its creation.
            A value of zero means the signature never expires.
            </summary>
            <param name="isCritical">True, if should be treated as critical, false otherwise.</param>
            <param name="seconds">The number of seconds the signature is valid, or zero if no expiry.</param>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureCreationTime(System.Boolean,System.DateTime)">
            <summary>
            Set the creation time for the signature.
            <p>
            Note: this overrides the generation of a creation time when the signature
            is generated.</p>
            </summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocationReason(System.Boolean,Spire.Security.Bcpg.RevocationReasonTag,System.String)">
            <summary>
            Sets revocation reason sub packet
            </summary>	    
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocationKey(System.Boolean,Spire.Security.Bcpg.PublicKeyAlgorithmTag,System.Byte[])">
            <summary>
            Sets revocation key sub packet
            </summary>	
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetIssuerKeyID(System.Boolean,System.Int64)">
            <summary>
            Sets issuer key sub packet
            </summary>	
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector">
            <remarks>Container for a list of signature subpackets.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector.HasSubpacket(Spire.Security.Bcpg.SignatureSubpacketTag)">
             Return true if a particular subpacket type exists.
            
             @param type type to look for.
             @return true if present, false otherwise.
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSubpackets(Spire.Security.Bcpg.SignatureSubpacketTag)">
            Return all signature subpackets of the passed in type.
            @param type subpacket type code
            @return an array of zero or more matching subpackets.
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignatureExpirationTime">
            <summary>
            Return the number of seconds a signature is valid for after its creation date.
            A value of zero means the signature never expires.
            </summary>
            <returns>Seconds a signature is valid for.</returns>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetKeyExpirationTime">
            <summary>
            Return the number of seconds a key is valid for after its creation date.
            A value of zero means the key never expires.
            </summary>
            <returns>Seconds a signature is valid for.</returns>
        </member>
        <member name="P:Spire.Security.Bcpg.OpenPgp.PgpSignatureSubpacketVector.Count">
            <summary>Return the number of packets this vector contains.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector">
            <remarks>Container for a list of user attribute subpackets.</remarks>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpUtilities">
            <remarks>Basic utility class.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhrase(Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.S2k,System.Char[])">
            <remarks>
            Conversion of the passphrase characters to bytes is performed using Convert.ToByte(), which is
            the historical behaviour of the library (1.7 and earlier).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhraseUtf8(Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.S2k,System.Char[])">
            <remarks>
            The passphrase is encoded to bytes using UTF8 (Encoding.UTF8.GetBytes).
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpUtilities.MakeKeyFromPassPhraseRaw(Spire.Security.Bcpg.SymmetricKeyAlgorithmTag,Spire.Security.Bcpg.S2k,System.Byte[])">
            <remarks>
            Allows the caller to handle the encoding of the passphrase to bytes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo)">
            <summary>Write out the passed in file as a literal data packet.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo,System.Byte[])">
            <summary>Write out the passed in file as a literal data packet in partial packet format.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpUtilities.GetDecoderStream(System.IO.Stream)">
            <summary>
            Return either an ArmoredInputStream or a BcpgInputStream based on whether
            the initial characters of the stream are binary PGP encodings or not.
            </summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.PgpV3SignatureGenerator">
            <remarks>Generator for old style PGP V3 Signatures.</remarks>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpV3SignatureGenerator.#ctor(Spire.Security.Bcpg.PublicKeyAlgorithmTag,Spire.Security.Bcpg.HashAlgorithmTag)">
            <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpV3SignatureGenerator.InitSign(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpV3SignatureGenerator.InitSign(System.Int32,Spire.Security.Bcpg.OpenPgp.PgpPrivateKey,Spire.Security.Security.SecureRandom)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpV3SignatureGenerator.GenerateOnePassVersion(System.Boolean)">
            <summary>Return the one pass header associated with the current signature.</summary>
        </member>
        <member name="M:Spire.Security.Bcpg.OpenPgp.PgpV3SignatureGenerator.Generate">
            <summary>Return a V3 signature object containing the current signature state.</summary>
        </member>
        <member name="T:Spire.Security.Bcpg.OpenPgp.SXprUtilities">
            Utility functions for looking a S-expression keys. This class will move when it finds a better home!
            <p>
            Format documented here:
            http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob;f=agent/keyformat.txt;h=42c4b1f06faf1bbe71ffadc2fee0fad6bec91a97;hb=refs/heads/master
            </p>
        </member>
        <member name="T:Spire.Security.Cms.CmsAttributeTableParameter">
            <remarks>
            The 'Signature' parameter is only available when generating unsigned attributes.
            </remarks>
        </member>
        <member name="T:Spire.Security.Cms.CmsAuthenticatedData">
            containing class for an CMS Authenticated Data object
        </member>
        <member name="P:Spire.Security.Cms.CmsAuthenticatedData.MacAlgOid">
            return the object identifier for the content MAC algorithm.
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="P:Spire.Security.Cms.CmsAuthenticatedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedData.GetAuthAttrs">
            return a table of the digested attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedData.GetUnauthAttrs">
            return a table of the undigested attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Spire.Security.Cms.CmsAuthenticatedDataGenerator">
             General class for generating a CMS authenticated-data message.
            
             A simple example of usage.
            
             <pre>
                  CMSAuthenticatedDataGenerator  fact = new CMSAuthenticatedDataGenerator();
            
                  fact.addKeyTransRecipient(cert);
            
                  CMSAuthenticatedData         data = fact.generate(content, algorithm, "BC");
             </pre>
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataGenerator.#ctor">
            base constructor
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            constructor allowing specific source of randomness
            @param rand instance of SecureRandom to use
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.String,Spire.Security.Crypto.CipherKeyGenerator)">
            generate an enveloped object that contains an CMS Enveloped Data
            object using the given provider and the passed in key generator.
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.String)">
            generate an authenticated object that contains an CMS Authenticated Data object
        </member>
        <member name="T:Spire.Security.Cms.CmsAuthenticatedDataParser">
             Parsing class for an CMS Authenticated Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one recipient can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             Example of use - assuming the first recipient matches the private key we have.
             <pre>
                  CMSAuthenticatedDataParser     ad = new CMSAuthenticatedDataParser(inputStream);
            
                  RecipientInformationStore  recipients = ad.getRecipientInfos();
            
                  Collection  c = recipients.getRecipients();
                  Iterator    it = c.iterator();
            
                  if (it.hasNext())
                  {
                      RecipientInformation   recipient = (RecipientInformation)it.next();
            
                      CMSTypedStream recData = recipient.getContentStream(privateKey, "BC");
            
                      processDataStream(recData.getContentStream());
            
                      if (!Arrays.equals(ad.getMac(), recipient.getMac())
                      {
                          System.err.println("Data corrupted!!!!");
                      }
                  }
              </pre>
              Note: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CMSAuthenticatedDataParser     ep = new CMSAuthenticatedDataParser(new BufferedInputStream(inputStream, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
             </p>
        </member>
        <member name="P:Spire.Security.Cms.CmsAuthenticatedDataParser.MacAlgOid">
            return the object identifier for the mac algorithm.
        </member>
        <member name="P:Spire.Security.Cms.CmsAuthenticatedDataParser.MacAlgParams">
            return the ASN.1 encoded encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataParser.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataParser.GetAuthAttrs">
            return a table of the unauthenticated attributes indexed by
            the OID of the attribute.
            @exception java.io.IOException
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataParser.GetUnauthAttrs">
            return a table of the unauthenticated attributes indexed by
            the OID of the attribute.
            @exception java.io.IOException
        </member>
        <member name="T:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator">
             General class for generating a CMS authenticated-data message stream.
             <p>
             A simple example of usage.
             <pre>
                  CMSAuthenticatedDataStreamGenerator edGen = new CMSAuthenticatedDataStreamGenerator();
            
                  edGen.addKeyTransRecipient(cert);
            
                  ByteArrayOutputStream  bOut = new ByteArrayOutputStream();
            
                  OutputStream out = edGen.open(
                                          bOut, CMSAuthenticatedDataGenerator.AES128_CBC, "BC");*
                  out.write(data);
            
                  out.close();
             </pre>
             </p>
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.#ctor">
            base constructor
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            constructor allowing specific source of randomness
            @param rand instance of SecureRandom to use
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
            Use a BER Set to store the recipient information
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,Spire.Security.Crypto.CipherKeyGenerator)">
            generate an enveloped object that contains an CMS Enveloped Data
            object using the given provider and the passed in key generator.
            @throws java.io.IOException
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String)">
            generate an enveloped object that contains an CMS Enveloped Data object
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)">
            generate an enveloped object that contains an CMS Enveloped Data object
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedGenerator.#ctor">
            base constructor
        </member>
        <member name="M:Spire.Security.Cms.CmsAuthenticatedGenerator.#ctor(Spire.Security.Security.SecureRandom)">
             constructor allowing specific source of randomness
            
             @param rand instance of SecureRandom to use
        </member>
        <member name="T:Spire.Security.Cms.CmsAuthEnvelopedData">
            containing class for an CMS AuthEnveloped Data object
        </member>
        <member name="T:Spire.Security.Cms.CmsCompressedData">
            containing class for an CMS Compressed Data object
        </member>
        <member name="M:Spire.Security.Cms.CmsCompressedData.GetContent">
             Return the uncompressed content.
            
             @return the uncompressed content
             @throws CmsException if there is an exception uncompressing the data.
        </member>
        <member name="M:Spire.Security.Cms.CmsCompressedData.GetContent(System.Int32)">
             Return the uncompressed content, throwing an exception if the data size
             is greater than the passed in limit. If the content is exceeded getCause()
             on the CMSException will contain a StreamOverflowException
            
             @param limit maximum number of bytes to read
             @return the content read
             @throws CMSException if there is an exception uncompressing the data.
        </member>
        <member name="P:Spire.Security.Cms.CmsCompressedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="M:Spire.Security.Cms.CmsCompressedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Spire.Security.Cms.CmsCompressedDataGenerator">
                * General class for generating a compressed CMS message.
                * <p>
                * A simple example of usage.</p>
                * <p>
                * <pre>
                *      CMSCompressedDataGenerator fact = new CMSCompressedDataGenerator();
                *      CMSCompressedData data = fact.Generate(content, algorithm);
                * </pre>
            	* </p>
        </member>
        <member name="M:Spire.Security.Cms.CmsCompressedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.String)">
            Generate an object that contains an CMS Compressed Data
        </member>
        <member name="T:Spire.Security.Cms.CmsCompressedDataParser">
             Class for reading a CMS Compressed Data stream.
             <pre>
                 CMSCompressedDataParser cp = new CMSCompressedDataParser(inputStream);
            
                 process(cp.GetContent().GetContentStream());
             </pre>
              Note: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                  CMSCompressedDataParser     ep = new CMSCompressedDataParser(new BufferedInputStream(inputStream, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
        </member>
        <member name="T:Spire.Security.Cms.CmsCompressedDataStreamGenerator">
             General class for generating a compressed CMS message stream.
             <p>
             A simple example of usage.
             </p>
             <pre>
                  CMSCompressedDataStreamGenerator gen = new CMSCompressedDataStreamGenerator();
            
                  Stream cOut = gen.Open(outputStream, CMSCompressedDataStreamGenerator.ZLIB);
            
                  cOut.Write(data);
            
                  cOut.Close();
             </pre>
        </member>
        <member name="M:Spire.Security.Cms.CmsCompressedDataStreamGenerator.#ctor">
            base constructor
        </member>
        <member name="M:Spire.Security.Cms.CmsCompressedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="M:Spire.Security.Cms.CmsContentInfoParser.Close">
            Close the underlying data stream.
            @throws IOException if the close fails.
        </member>
        <member name="T:Spire.Security.Cms.CmsEnvelopedData">
            containing class for an CMS Enveloped Data object
        </member>
        <member name="P:Spire.Security.Cms.CmsEnvelopedData.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="P:Spire.Security.Cms.CmsEnvelopedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedData.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Spire.Security.Cms.CmsEnvelopedDataGenerator">
             <remarks>
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CmsEnvelopedDataGenerator  fact = new CmsEnvelopedDataGenerator();
            
                  fact.AddKeyTransRecipient(cert);
            
                  CmsEnvelopedData         data = fact.Generate(content, algorithm);
             </pre>
             </remarks>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.String,Spire.Security.Crypto.CipherKeyGenerator)">
            <summary>
            Generate an enveloped object that contains a CMS Enveloped Data
            object using the passed in key generator.
            </summary>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.String)">
            <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.String,System.Int32)">
            <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
        </member>
        <member name="T:Spire.Security.Cms.CmsEnvelopedDataParser">
             Parsing class for an CMS Enveloped Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one recipient can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             Example of use - assuming the first recipient matches the private key we have.
             <pre>
                  CmsEnvelopedDataParser     ep = new CmsEnvelopedDataParser(inputStream);
            
                  RecipientInformationStore  recipients = ep.GetRecipientInfos();
            
                  Collection  c = recipients.getRecipients();
                  Iterator    it = c.iterator();
            
                  if (it.hasNext())
                  {
                      RecipientInformation   recipient = (RecipientInformation)it.next();
            
                      CMSTypedStream recData = recipient.getContentStream(privateKey);
            
                      processDataStream(recData.getContentStream());
                  }
              </pre>
              Note: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CmsEnvelopedDataParser     ep = new CmsEnvelopedDataParser(new BufferedInputStream(inputStream, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
             </p>
        </member>
        <member name="P:Spire.Security.Cms.CmsEnvelopedDataParser.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
        <member name="P:Spire.Security.Cms.CmsEnvelopedDataParser.EncryptionAlgParams">
            return the ASN.1 encoded encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataParser.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataParser.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator">
             General class for generating a CMS enveloped-data message stream.
             <p>
             A simple example of usage.
             <pre>
                  CmsEnvelopedDataStreamGenerator edGen = new CmsEnvelopedDataStreamGenerator();
            
                  edGen.AddKeyTransRecipient(cert);
            
                  MemoryStream  bOut = new MemoryStream();
            
                  Stream out = edGen.Open(
                                          bOut, CMSEnvelopedDataGenerator.AES128_CBC);*
                  out.Write(data);
            
                  out.Close();
             </pre>
             </p>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator.SetBufferSize(System.Int32)">
            <summary>Set the underlying string size for encapsulated data.</summary>
            <param name="bufferSize">Length of octet strings to buffer the data.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
            <summary>Use a BER Set to store the recipient information.</summary>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,Spire.Security.Crypto.CipherKeyGenerator)">
            <summary>
            Generate an enveloped object that contains an CMS Enveloped Data
            object using the passed in key generator.
            </summary>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String)">
            generate an enveloped object that contains an CMS Enveloped Data object
            @throws IOException
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)">
            generate an enveloped object that contains an CMS Enveloped Data object
            @throws IOException
        </member>
        <member name="T:Spire.Security.Cms.CmsEnvelopedGenerator">
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CMSEnvelopedDataGenerator  fact = new CMSEnvelopedDataGenerator();
            
                  fact.addKeyTransRecipient(cert);
            
                  CMSEnvelopedData         data = fact.generate(content, algorithm, "BC");
             </pre>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(Spire.Security.X509.X509Certificate)">
             add a recipient.
            
             @param cert recipient's public key certificate
             @exception ArgumentException if there is a problem with the certificate
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[])">
             add a recipient
            
             @param key the public key used by the recipient
             @param subKeyId the identifier for the recipient's public key
             @exception ArgumentException if there is a problem with the key
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,Spire.Security.Crypto.Parameters.KeyParameter,System.Byte[])">
            add a KEK recipient.
            @param key the secret key to use for wrapping
            @param keyIdentifier the byte string that identifies the key
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,Spire.Security.Crypto.Parameters.KeyParameter,Spire.Security.Asn1.Cms.KekIdentifier)">
            add a KEK recipient.
            @param key the secret key to use for wrapping
            @param keyIdentifier the byte string that identifies the key
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipient(System.String,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String)">
             Add a key agreement based recipient.
            
             @param agreementAlgorithm key agreement algorithm to use.
             @param senderPrivateKey private key to initialise sender side of agreement with.
             @param senderPublicKey sender public key to include with message.
             @param recipientCert recipient's public key certificate.
             @param cekWrapAlgorithm OID for key wrapping algorithm to use.
             @exception SecurityUtilityException if the algorithm requested cannot be found
             @exception InvalidKeyException if the keys are inappropriate for the algorithm specified
        </member>
        <member name="M:Spire.Security.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipients(System.String,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Crypto.AsymmetricKeyParameter,System.Collections.ICollection,System.String)">
             Add multiple key agreement based recipients (sharing a single KeyAgreeRecipientInfo structure).
            
             @param agreementAlgorithm key agreement algorithm to use.
             @param senderPrivateKey private key to initialise sender side of agreement with.
             @param senderPublicKey sender public key to include with message.
             @param recipientCerts recipients' public key certificates.
             @param cekWrapAlgorithm OID for key wrapping algorithm to use.
             @exception SecurityUtilityException if the algorithm requested cannot be found
             @exception InvalidKeyException if the keys are inappropriate for the algorithm specified
        </member>
        <member name="M:Spire.Security.Cms.CmsProcessable.Write(System.IO.Stream)">
            <summary>
            Generic routine to copy out the data we want processed.
            </summary>
            <remarks>
            This routine may be called multiple times.
            </remarks>
        </member>
        <member name="T:Spire.Security.Cms.CmsProcessableByteArray">
            a holding class for a byte array of data to be processed.
        </member>
        <member name="M:Spire.Security.Cms.CmsProcessableByteArray.GetContent">
            <returns>A clone of the byte array</returns>
        </member>
        <member name="T:Spire.Security.Cms.CmsProcessableFile">
            a holding class for a file of data to be processed.
        </member>
        <member name="M:Spire.Security.Cms.CmsProcessableFile.GetContent">
            <returns>The file handle</returns>
        </member>
        <member name="T:Spire.Security.Cms.CmsSignedData">
             general class for handling a pkcs7-signature message.
            
             A simple example of usage - note, in the example below the validity of
             the certificate isn't verified, just the fact that one of the certs
             matches the given signer...
            
             <pre>
              IX509Store              certs = s.GetCertificates();
              SignerInformationStore  signers = s.GetSignerInfos();
            
              foreach (SignerInformation signer in signers.GetSigners())
              {
                  ArrayList       certList = new ArrayList(certs.GetMatches(signer.SignerID));
                  X509Certificate cert = (X509Certificate) certList[0];
            
                  if (signer.Verify(cert.GetPublicKey()))
                  {
                      verified++;
                  }
              }
             </pre>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.#ctor(System.Collections.IDictionary,System.Byte[])">
             Content with detached signature, digests precomputed
            
             @param hashes a map of precomputed digests for content indexed by name of hash.
             @param sigBlock the signature object.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.#ctor(Spire.Security.Cms.CmsProcessable,System.IO.Stream)">
             base constructor - content with detached signature.
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
        <member name="P:Spire.Security.Cms.CmsSignedData.Version">
            <summary>Return the version number for this object.</summary>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="P:Spire.Security.Cms.CmsSignedData.SignedContentType">
            <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
        </member>
        <member name="P:Spire.Security.Cms.CmsSignedData.ContentInfo">
            return the ContentInfo
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.ReplaceSigners(Spire.Security.Cms.CmsSignedData,Spire.Security.Cms.SignerInformationStore)">
             Replace the signerinformation store associated with this
             CmsSignedData object with the new one passed in. You would
             probably only want to do this if you wanted to change the unsigned
             attributes associated with a signer, or perhaps delete one.
            
             @param signedData the signed data object to be used as a base.
             @param signerInformationStore the new signer information store to use.
             @return a new signed data object.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedData.ReplaceCertificatesAndCrls(Spire.Security.Cms.CmsSignedData,Spire.Security.X509.Store.IX509Store,Spire.Security.X509.Store.IX509Store,Spire.Security.X509.Store.IX509Store)">
             Replace the certificate and CRL information associated with this
             CmsSignedData object with the new one passed in.
            
             @param signedData the signed data object to be used as a base.
             @param x509Certs the new certificates to be used.
             @param x509Crls the new CRLs to be used.
             @return a new signed data object.
             @exception CmsException if there is an error processing the stores
        </member>
        <member name="T:Spire.Security.Cms.CmsSignedDataGenerator">
                 * general class for generating a pkcs7-signature message.
                 * <p>
                 * A simple example of usage.
                 *
                 * <pre>
                 *      IX509Store certs...
                 *      IX509Store crls...
                 *      CmsSignedDataGenerator gen = new CmsSignedDataGenerator();
                 *
                 *      gen.AddSigner(privKey, cert, CmsSignedGenerator.DigestSha1);
                 *      gen.AddCertificates(certs);
                 *      gen.AddCrls(crls);
                 *
                 *      CmsSignedData data = gen.Generate(content);
                 * </pre>
            	 * </p>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String)">
                    * add a signer - no attributes other than the default ones will be
                    * provided here.
            		*
            		* @param key signing key to use
            		* @param cert certificate containing corresponding public key
            		* @param digestOID digest algorithm OID
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String)">
             add a signer, specifying the digest encryption algorithm to use - no attributes other than the default ones will be
             provided here.
            
             @param key signing key to use
             @param cert certificate containing corresponding public key
             @param encryptionOID digest encryption algorithm OID
             @param digestOID digest algorithm OID
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)">
            add a signer, specifying the digest encryption algorithm to use - no attributes other than the default ones will be
            provided here.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
                    * add a signer with extra signed/unsigned attributes.
            		*
            		* @param key signing key to use
            		* @param cert certificate containing corresponding public key
            		* @param digestOID digest algorithm OID
            		* @param signedAttr table of attributes to be included in signature
            		* @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
             add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes.
            
             @param key signing key to use
             @param cert certificate containing corresponding public key
             @param encryptionOID digest encryption algorithm OID
             @param digestOID digest algorithm OID
             @param signedAttr table of attributes to be included in signature
             @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
            	     * add a signer with extra signed/unsigned attributes.
            		 *
            		 * @param key signing key to use
            		 * @param subjectKeyID subjectKeyID of corresponding public key
            		 * @param digestOID digest algorithm OID
            		 * @param signedAttr table of attributes to be included in signature
            		 * @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
             add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes.
            
             @param key signing key to use
             @param subjectKeyID subjectKeyID of corresponding public key
             @param encryptionOID digest encryption algorithm OID
             @param digestOID digest algorithm OID
             @param signedAttr table of attributes to be included in signature
             @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,Spire.Security.Cms.CmsAttributeTableGenerator,Spire.Security.Cms.CmsAttributeTableGenerator)">
            add a signer with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String,Spire.Security.Cms.CmsAttributeTableGenerator,Spire.Security.Cms.CmsAttributeTableGenerator)">
            add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Spire.Security.Cms.CmsAttributeTableGenerator,Spire.Security.Cms.CmsAttributeTableGenerator)">
            add a signer with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,Spire.Security.Cms.CmsAttributeTableGenerator,Spire.Security.Cms.CmsAttributeTableGenerator)">
            add a signer, including digest encryption algorithm, with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable)">
            generate a signed object that for a CMS Signed Data object
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.Generate(System.String,Spire.Security.Cms.CmsProcessable,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object  - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.Generate(Spire.Security.Cms.CmsProcessable,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataGenerator.GenerateCounterSigners(Spire.Security.Cms.SignerInformation)">
             generate a set of one or more SignerInformation objects representing counter signatures on
             the passed in SignerInformation object.
            
             @param signer the signer to be countersigned
             @param sigProvider the provider to be used for counter signing.
             @return a store containing the signers.
        </member>
        <member name="T:Spire.Security.Cms.CmsSignedDataParser">
             Parsing class for an CMS Signed Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one signer can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             A simple example of usage for an encapsulated signature.
             </p>
             <p>
             Two notes: first, in the example below the validity of
             the certificate isn't verified, just the fact that one of the certs
             matches the given signer, and, second, because we are in a streaming
             mode the order of the operations is important.
             </p>
             <pre>
                  CmsSignedDataParser     sp = new CmsSignedDataParser(encapSigData);
            
                  sp.GetSignedContent().Drain();
            
                  IX509Store              certs = sp.GetCertificates();
                  SignerInformationStore  signers = sp.GetSignerInfos();
            
                  foreach (SignerInformation signer in signers.GetSigners())
                  {
                      ArrayList       certList = new ArrayList(certs.GetMatches(signer.SignerID));
                      X509Certificate cert = (X509Certificate) certList[0];
            
                      Console.WriteLine("verify returns: " + signer.Verify(cert));
                  }
             </pre>
              Note also: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CmsSignedDataParser     ep = new CmsSignedDataParser(new BufferedInputStream(encapSigData, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.#ctor(Spire.Security.Cms.CmsTypedStream,System.IO.Stream)">
             base constructor
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
        <member name="P:Spire.Security.Cms.CmsSignedDataParser.Version">
             Return the version number for the SignedData object
            
             @return the version number
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
            @throws CmsException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception org.bouncycastle.x509.NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="P:Spire.Security.Cms.CmsSignedDataParser.SignedContentType">
            <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.ReplaceSigners(System.IO.Stream,Spire.Security.Cms.SignerInformationStore,System.IO.Stream)">
            Replace the signerinformation store associated with the passed
            in message contained in the stream original with the new one passed in.
            You would probably only want to do this if you wanted to change the unsigned
            attributes associated with a signer, or perhaps delete one.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param signerInformationStore the new signer information store to use.
            @param out the stream to Write the new signed data object to.
            @return out.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataParser.ReplaceCertificatesAndCrls(System.IO.Stream,Spire.Security.X509.Store.IX509Store,Spire.Security.X509.Store.IX509Store,Spire.Security.X509.Store.IX509Store,System.IO.Stream)">
            Replace the certificate and CRL information associated with this
            CMSSignedData object with the new one passed in.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param certsAndCrls the new certificates and CRLs to be used.
            @param out the stream to Write the new signed data object to.
            @return out.
            @exception CmsException if there is an error processing the CertStore
        </member>
        <member name="T:Spire.Security.Cms.CmsSignedDataStreamGenerator">
             General class for generating a pkcs7-signature message stream.
             <p>
             A simple example of usage.
             </p>
             <pre>
                  IX509Store                   certs...
                  CmsSignedDataStreamGenerator gen = new CmsSignedDataStreamGenerator();
            
                  gen.AddSigner(privateKey, cert, CmsSignedDataStreamGenerator.DIGEST_SHA1);
            
                  gen.AddCertificates(certs);
            
                  Stream sigOut = gen.Open(bOut);
            
                  sigOut.Write(Encoding.UTF8.GetBytes("Hello World!"));
            
                  sigOut.Close();
             </pre>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String)">
            add a signer, specifying the digest encryption algorithm - no attributes other than the default ones will be
            provided here.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes - specifying digest
            encryption algorithm.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.AddSigner(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream)">
            generate a signed object that for a CMS Signed Data object
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data". If dataOutputStream is non null the data
            being signed will be written to the stream as it is processed.
            @param out stream the CMS object is to be written to.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
            @param out stream the CMS object is to be written to.
            @param signedContentType OID for data to be signed.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
        <member name="F:Spire.Security.Cms.CmsSignedGenerator.Data">
            Default type for the signed data.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedGenerator.#ctor(Spire.Security.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedGenerator.AddAttributeCertificates(Spire.Security.X509.Store.IX509Store)">
             Add the attribute certificates contained in the passed in store to the
             generator.
            
             @param store a store of Version 2 attribute certificates
             @throws CmsException if an error occurse processing the store.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedGenerator.AddSigners(Spire.Security.Cms.SignerInformationStore)">
             Add a store of precalculated signers to the generator.
            
             @param signerStore store of signers
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedGenerator.GetGeneratedDigests">
             Return a map of oids and byte arrays representing the digests calculated on the content during
             the last generate.
            
             @return a map of oids (as String objects) and byte[] representing digests.
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedHelper.GetDigestAlgName(System.String)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="M:Spire.Security.Cms.CmsSignedHelper.GetEncryptionAlgName(System.String)">
            Return the digest encryption algorithm using one of the standard
            JCA string representations rather than the algorithm identifier (if
            possible).
        </member>
        <member name="T:Spire.Security.Cms.DefaultAuthenticatedAttributeTableGenerator">
            Default authenticated attributes generator.
        </member>
        <member name="M:Spire.Security.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
        <member name="M:Spire.Security.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor(Spire.Security.Asn1.Cms.AttributeTable)">
             Initialise with some extra attributes or overrides.
            
             @param attributeTable initial attribute table to use.
        </member>
        <member name="M:Spire.Security.Cms.DefaultAuthenticatedAttributeTableGenerator.CreateStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in IDictionary of attributes.
        </member>
        <member name="M:Spire.Security.Cms.DefaultAuthenticatedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
        <member name="T:Spire.Security.Cms.DefaultSignedAttributeTableGenerator">
            Default signed attributes generator.
        </member>
        <member name="M:Spire.Security.Cms.DefaultSignedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
        <member name="M:Spire.Security.Cms.DefaultSignedAttributeTableGenerator.#ctor(Spire.Security.Asn1.Cms.AttributeTable)">
             Initialise with some extra attributes or overrides.
            
             @param attributeTable initial attribute table to use.
        </member>
        <member name="M:Spire.Security.Cms.DefaultSignedAttributeTableGenerator.createStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType, signingTime, and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType, signingTime, and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in Hashtable of attributes.
        </member>
        <member name="M:Spire.Security.Cms.DefaultSignedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
        <member name="T:Spire.Security.Cms.KekRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using a secret key known to the other side.
        </member>
        <member name="M:Spire.Security.Cms.KekRecipientInformation.GetContentStream(Spire.Security.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:Spire.Security.Cms.KeyAgreeRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using key agreement.
        </member>
        <member name="M:Spire.Security.Cms.KeyAgreeRecipientInformation.GetContentStream(Spire.Security.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:Spire.Security.Cms.KeyTransRecipientInformation">
            the KeyTransRecipientInformation class for a recipient who has been sent a secret
            key encrypted using their public key that needs to be used to
            extract the message.
        </member>
        <member name="M:Spire.Security.Cms.KeyTransRecipientInformation.GetContentStream(Spire.Security.Crypto.ICipherParameters)">
            decrypt the content and return it as a byte array.
        </member>
        <member name="T:Spire.Security.Cms.OriginatorID">
            a basic index for an originator.
        </member>
        <member name="M:Spire.Security.Cms.OriginatorInformation.GetCertificates">
             Return the certificates stored in the underlying OriginatorInfo object.
            
             @return a Store of X509CertificateHolder objects.
        </member>
        <member name="M:Spire.Security.Cms.OriginatorInformation.GetCrls">
             Return the CRLs stored in the underlying OriginatorInfo object.
            
             @return a Store of X509CRLHolder objects.
        </member>
        <member name="M:Spire.Security.Cms.OriginatorInformation.ToAsn1Structure">
             Return the underlying ASN.1 object defining this SignerInformation object.
            
             @return a OriginatorInfo.
        </member>
        <member name="T:Spire.Security.Cms.PasswordRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using a password.
        </member>
        <member name="P:Spire.Security.Cms.PasswordRecipientInformation.KeyDerivationAlgorithm">
             return the object identifier for the key derivation algorithm, or null
             if there is none present.
            
             @return OID for key derivation algorithm, if present.
        </member>
        <member name="M:Spire.Security.Cms.PasswordRecipientInformation.GetContentStream(Spire.Security.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:Spire.Security.Cms.Pkcs5Scheme2PbeKey">
            <summary>
            PKCS5 scheme-2 - password converted to bytes assuming ASCII.
            </summary>
        </member>
        <member name="T:Spire.Security.Cms.Pkcs5Scheme2Utf8PbeKey">
            PKCS5 scheme-2 - password converted to bytes using UTF-8.
        </member>
        <member name="M:Spire.Security.Cms.RecipientInfoGenerator.Generate(Spire.Security.Crypto.Parameters.KeyParameter,Spire.Security.Security.SecureRandom)">
            <summary>
            Generate a RecipientInfo object for the given key.
            </summary>
            <param name="contentEncryptionKey">
            A <see cref="T:Spire.Security.Crypto.Parameters.KeyParameter"/>
            </param>
            <param name="random">
            A <see cref="T:Spire.Security.Security.SecureRandom"/>
            </param>
            <returns>
            A <see cref="T:Spire.Security.Asn1.Cms.RecipientInfo"/>
            </returns>
            <exception cref="T:Spire.Security.Security.GeneralSecurityException"></exception>
        </member>
        <member name="P:Spire.Security.Cms.RecipientInformation.KeyEncryptionAlgOid">
                    * return the object identifier for the key encryption algorithm.
                    * 
            		* @return OID for key encryption algorithm.
        </member>
        <member name="P:Spire.Security.Cms.RecipientInformation.KeyEncryptionAlgParams">
                    * return the ASN.1 encoded key encryption algorithm parameters, or null if
                    * there aren't any.
                    * 
            		* @return ASN.1 encoding of key encryption algorithm parameters.
        </member>
        <member name="M:Spire.Security.Cms.RecipientInformation.GetMac">
             Return the MAC calculated for the content stream. Note: this call is only meaningful once all
             the content has been read.
            
             @return  byte array containing the mac.
        </member>
        <member name="M:Spire.Security.Cms.RecipientInformationStore.GetFirstRecipient(Spire.Security.Cms.RecipientID)">
             Return the first RecipientInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a recipient
             @return a single RecipientInformation object. Null if none matches.
        </member>
        <member name="P:Spire.Security.Cms.RecipientInformationStore.Count">
             Return the number of recipients in the collection.
            
             @return number of recipients identified.
        </member>
        <member name="M:Spire.Security.Cms.RecipientInformationStore.GetRecipients">
             Return all recipients in the collection
            
             @return a collection of recipients.
        </member>
        <member name="M:Spire.Security.Cms.RecipientInformationStore.GetRecipients(Spire.Security.Cms.RecipientID)">
             Return possible empty collection with recipients matching the passed in RecipientID
            
             @param selector a recipient id to select against.
             @return a collection of RecipientInformation objects.
        </member>
        <member name="T:Spire.Security.Cms.SignerID">
            a basic index for a signer.
        </member>
        <member name="M:Spire.Security.Cms.SignerInfoGeneratorBuilder.SetDirectSignature(System.Boolean)">
             If the passed in flag is true, the signer signature will be based on the data, not
             a collection of signed attributes, and no signed attributes will be included.
            
             @return the builder object
        </member>
        <member name="M:Spire.Security.Cms.SignerInfoGeneratorBuilder.WithSignedAttributeGenerator(Spire.Security.Cms.CmsAttributeTableGenerator)">
              Provide a custom signed attribute generator.
            
             @param signedGen a generator of signed attributes.
             @return the builder object
        </member>
        <member name="M:Spire.Security.Cms.SignerInfoGeneratorBuilder.WithUnsignedAttributeGenerator(Spire.Security.Cms.CmsAttributeTableGenerator)">
             Provide a generator of unsigned attributes.
            
             @param unsignedGen  a generator for signed attributes.
             @return the builder object
        </member>
        <member name="M:Spire.Security.Cms.SignerInfoGeneratorBuilder.Build(Spire.Security.Crypto.ISignatureFactory,Spire.Security.X509.X509Certificate)">
             Build a generator with the passed in certHolder issuer and serial number as the signerIdentifier.
            
             @param contentSigner  operator for generating the final signature in the SignerInfo with.
             @param certHolder  carrier for the X.509 certificate related to the contentSigner.
             @return  a SignerInfoGenerator
             @throws OperatorCreationException   if the generator cannot be built.
        </member>
        <member name="M:Spire.Security.Cms.SignerInfoGeneratorBuilder.Build(Spire.Security.Crypto.ISignatureFactory,System.Byte[])">
             Build a generator with the passed in subjectKeyIdentifier as the signerIdentifier. If used  you should
             try to follow the calculation described in RFC 5280 section 4.2.1.2.
            
             @param signerFactory  operator factory for generating the final signature in the SignerInfo with.
             @param subjectKeyIdentifier    key identifier to identify the public key for verifying the signature.
             @return  a SignerInfoGenerator
        </member>
        <member name="T:Spire.Security.Cms.SignerInformation">
            an expanded SignerInfo block from a CMS Signed message
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.Version">
            return the version number for this objects underlying SignerInfo structure.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.DigestAlgOid">
            return the object identifier for the signature.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.DigestAlgParams">
            return the signature parameters, or null if there aren't any.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.GetContentDigest">
            return the content digest that was calculated during verification.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.EncryptionAlgOid">
            return the object identifier for the signature.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.EncryptionAlgParams">
            return the signature/encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.SignedAttributes">
            return a table of the signed attributes - indexed by
            the OID of the attribute.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformation.UnsignedAttributes">
            return a table of the unsigned attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.GetSignature">
            return the encoded signature
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.GetCounterSignatures">
            Return a SignerInformationStore containing the counter signatures attached to this
            signer. If no counter signatures are present an empty store is returned.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.GetEncodedSignedAttributes">
            return the DER encoding of the signed attributes.
            @throws IOException if an encoding error occurs.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.Verify(Spire.Security.Crypto.AsymmetricKeyParameter)">
            verify that the given public key successfully handles and confirms the
            signature associated with this signer.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.Verify(Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[])">
            verify that the given public key successfully handles and confirms the
            signature associated with this signer.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.Verify(Spire.Security.X509.X509Certificate)">
            verify that the given certificate successfully handles and confirms
            the signature associated with this signer and, if a signingTime
            attribute is available, that the certificate was valid at the time the
            signature was generated.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.Verify(Spire.Security.X509.X509Certificate,System.Byte[])">
            verify that the given certificate successfully handles and confirms
            the signature associated with this signer and, if a signingTime
            attribute is available, that the certificate was valid at the time the
            signature was generated.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.ToSignerInfo">
             Return the base ASN.1 CMS structure that this object contains.
            
             @return an object containing a CMS SignerInfo structure.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.ReplaceUnsignedAttributes(Spire.Security.Cms.SignerInformation,Spire.Security.Asn1.Cms.AttributeTable)">
             Return a signer information object with the passed in unsigned
             attributes replacing the ones that are current associated with
             the object passed in.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param unsignedAttributes the unsigned attributes to add.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformation.AddCounterSigners(Spire.Security.Cms.SignerInformation,Spire.Security.Cms.SignerInformationStore)">
             Return a signer information object with passed in SignerInformationStore representing counter
             signatures attached as an unsigned attribute.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param counterSigners signer info objects carrying counter signature.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformationStore.#ctor(Spire.Security.Cms.SignerInformation)">
             Create a store containing a single SignerInformation object.
            
             @param signerInfo the signer information to contain.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformationStore.#ctor(System.Collections.ICollection)">
             Create a store containing a collection of SignerInformation objects.
            
             @param signerInfos a collection signer information objects to contain.
        </member>
        <member name="M:Spire.Security.Cms.SignerInformationStore.GetFirstSigner(Spire.Security.Cms.SignerID)">
             Return the first SignerInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a signer
             @return a single SignerInformation object. Null if none matches.
        </member>
        <member name="P:Spire.Security.Cms.SignerInformationStore.Count">
            <summary>The number of signers in the collection.</summary>
        </member>
        <member name="M:Spire.Security.Cms.SignerInformationStore.GetSigners">
            <returns>An ICollection of all signers in the collection</returns>
        </member>
        <member name="M:Spire.Security.Cms.SignerInformationStore.GetSigners(Spire.Security.Cms.SignerID)">
             Return possible empty collection with signers matching the passed in SignerID
            
             @param selector a signer id to select against.
             @return a collection of SignerInformation objects.
        </member>
        <member name="T:Spire.Security.Cms.SimpleAttributeTableGenerator">
            Basic generator that just returns a preconstructed attribute table
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.DHAgreement">
            a Diffie-Hellman key exchange engine.
            <p>
            note: This uses MTI/A0 key agreement in order to make the key agreement
            secure against passive attacks. If you're doing Diffie-Hellman and both
            parties have long term public keys you should look at using this. For
            further information have a look at RFC 2631.</p>
            <p>
            It's possible to extend this to more than two parties as well, for the moment
            that is left as an exercise for the reader.</p>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.DHAgreement.CalculateMessage">
            calculate our initial message.
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.DHAgreement.CalculateAgreement(Spire.Security.Crypto.Parameters.DHPublicKeyParameters,Spire.Security.Math.BigInteger)">
            given a message from a given party and the corresponding public key
            calculate the next message in the agreement sequence. In this case
            this will represent the shared secret.
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.DHBasicAgreement">
            a Diffie-Hellman key agreement class.
            <p>
            note: This is only the basic algorithm, it doesn't take advantage of
            long term public keys if they are available. See the DHAgreement class
            for a "better" implementation.</p>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.DHBasicAgreement.CalculateAgreement(Spire.Security.Crypto.ICipherParameters)">
            given a short term public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.DHStandardGroups">
            <summary>Standard Diffie-Hellman groups from various IETF specifications.</summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.DHStandardGroups.rfc5114_1024_160">
            <remarks>
            Existence of a "hidden SNFS" backdoor cannot be ruled out. see https://eprint.iacr.org/2016/961.pdf .
            </remarks>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.DHStandardGroups.rfc5114_2048_224">
            <remarks>
            Existence of a "hidden SNFS" backdoor cannot be ruled out. see https://eprint.iacr.org/2016/961.pdf .
            </remarks>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.DHStandardGroups.rfc5114_2048_256">
            <remarks>
            Existence of a "hidden SNFS" backdoor cannot be ruled out. see https://eprint.iacr.org/2016/961.pdf .
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.ECDHBasicAgreement">
             P1363 7.2.1 ECSVDP-DH
            
             ECSVDP-DH is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version. It is based on the work of [DH76], [Mil86],
             and [Kob87]. This primitive derives a shared secret value from one
             party's private key and another party's public key, where both have
             the same set of EC domain parameters. If two parties correctly
             execute this primitive, they will produce the same output. This
             primitive can be invoked by a scheme to derive a shared secret key;
             specifically, it may be used with the schemes ECKAS-DH1 and
             DL/ECKAS-DH2. It assumes that the input keys are valid (see also
             Section 7.2.2).
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.ECDHCBasicAgreement">
             P1363 7.2.2 ECSVDP-DHC
            
             ECSVDP-DHC is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version with cofactor multiplication. It is based on
             the work of [DH76], [Mil86], [Kob87], [LMQ98] and [Kal98a]. This
             primitive derives a shared secret value from one party's private key
             and another party's public key, where both have the same set of EC
             domain parameters. If two parties correctly execute this primitive,
             they will produce the same output. This primitive can be invoked by a
             scheme to derive a shared secret key; specifically, it may be used
             with the schemes ECKAS-DH1 and DL/ECKAS-DH2. It does not assume the
             validity of the input public key (see also Section 7.2.1).
             <p>
             Note: As stated P1363 compatibility mode with ECDH can be preset, and
             in this case the implementation doesn't have a ECDH compatibility mode
             (if you want that just use ECDHBasicAgreement and note they both implement
             BasicAgreement!).</p>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant">
             <summary>
             A participant in a Password Authenticated Key Exchange by Juggling (J-PAKE) exchange.
            
             The J-PAKE exchange is defined by Feng Hao and Peter Ryan in the paper
             <a href="http://grouper.ieee.org/groups/1363/Research/contributions/hao-ryan-2008.pdf">
             "Password Authenticated Key Exchange by Juggling, 2008."</a>
            
             The J-PAKE protocol is symmetric.
             There is no notion of a <i>client</i> or <i>server</i>, but rather just two <i>participants</i>.
             An instance of JPakeParticipant represents one participant, and
             is the primary interface for executing the exchange.
            
             To execute an exchange, construct a JPakeParticipant on each end,
             and call the following 7 methods
             (once and only once, in the given order, for each participant, sending messages between them as described):
            
             CreateRound1PayloadToSend() - and send the payload to the other participant
             ValidateRound1PayloadReceived(JPakeRound1Payload) - use the payload received from the other participant
             CreateRound2PayloadToSend() - and send the payload to the other participant
             ValidateRound2PayloadReceived(JPakeRound2Payload) - use the payload received from the other participant
             CalculateKeyingMaterial()
             CreateRound3PayloadToSend(BigInteger) - and send the payload to the other participant
             ValidateRound3PayloadReceived(JPakeRound3Payload, BigInteger) - use the payload received from the other participant
            
             Each side should derive a session key from the keying material returned by CalculateKeyingMaterial().
             The caller is responsible for deriving the session key using a secure key derivation function (KDF).
            
             Round 3 is an optional key confirmation process.
             If you do not execute round 3, then there is no assurance that both participants are using the same key.
             (i.e. if the participants used different passwords, then their session keys will differ.)
            
             If the round 3 validation succeeds, then the keys are guaranteed to be the same on both sides.
            
             The symmetric design can easily support the asymmetric cases when one party initiates the communication.
             e.g. Sometimes the round1 payload and round2 payload may be sent in one pass.
             Also, in some cases, the key confirmation payload can be sent together with the round2 payload.
             These are the trivial techniques to optimize the communication.
            
             The key confirmation process is implemented as specified in
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             This class is stateful and NOT threadsafe.
             Each instance should only be used for ONE complete J-PAKE exchange
             (i.e. a new JPakeParticipant should be constructed for each new J-PAKE exchange).
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[])">
             <summary>
             Convenience constructor for a new JPakeParticipant that uses
             the JPakePrimeOrderGroups#NIST_3072 prime order group,
             a SHA-256 digest, and a default SecureRandom implementation.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
             <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
             <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[],Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroup)">
             <summary>
             Convenience constructor for a new JPakeParticipant that uses
             a SHA-256 digest, and a default SecureRandom implementation.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
             <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
             <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
             <param name="group">Prime order group. See JPakePrimeOrderGroups for standard groups.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[],Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroup,Spire.Security.Crypto.IDigest,Spire.Security.Security.SecureRandom)">
             <summary>
             Constructor for a new JPakeParticipant.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
             <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
             <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
             <param name="group">Prime order group. See JPakePrimeOrderGroups for standard groups.</param>
             <param name="digest">Digest to use during zero knowledge proofs and key confirmation
                 (SHA-256 or stronger preferred).</param>
             <param name="random">Source of secure random data for x1 and x2, and for the zero knowledge proofs.</param>
        </member>
        <member name="P:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.State">
            <summary>
            Gets the current state of this participant.
            See the <tt>STATE_*</tt> constants for possible values.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.CreateRound1PayloadToSend">
             <summary>
             Creates and returns the payload to send to the other participant during round 1.
            
             After execution, the State state} will be STATE_ROUND_1_CREATED}.
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound1PayloadReceived(Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload)">
             <summary>
             Validates the payload received from the other participant during round 1.
            
             Must be called prior to CreateRound2PayloadToSend().
            
             After execution, the State state will be  STATE_ROUND_1_VALIDATED.
             
             Throws CryptoException if validation fails. Throws InvalidOperationException
             if called multiple times.
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.CreateRound2PayloadToSend">
             <summary>
             Creates and returns the payload to send to the other participant during round 2.
            
             ValidateRound1PayloadReceived(JPakeRound1Payload) must be called prior to this method.
            
             After execution, the State state will be  STATE_ROUND_2_CREATED.
            
             Throws InvalidOperationException if called prior to ValidateRound1PayloadReceived(JPakeRound1Payload), or multiple times
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound2PayloadReceived(Spire.Security.Crypto.Agreement.JPake.JPakeRound2Payload)">
             <summary>
             Validates the payload received from the other participant during round 2.
             Note that this DOES NOT detect a non-common password.
             The only indication of a non-common password is through derivation
             of different keys (which can be detected explicitly by executing round 3 and round 4)
            
             Must be called prior to CalculateKeyingMaterial().
            
             After execution, the State state will be STATE_ROUND_2_VALIDATED.
            
             Throws CryptoException if validation fails. Throws
             InvalidOperationException if called prior to ValidateRound1PayloadReceived(JPakeRound1Payload), or multiple times
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.CalculateKeyingMaterial">
             <summary>
             Calculates and returns the key material.
             A session key must be derived from this key material using a secure key derivation function (KDF).
             The KDF used to derive the key is handled externally (i.e. not by JPakeParticipant).
            
             The keying material will be identical for each participant if and only if
             each participant's password is the same.  i.e. If the participants do not
             share the same password, then each participant will derive a different key.
             Therefore, if you immediately start using a key derived from
             the keying material, then you must handle detection of incorrect keys.
             If you want to handle this detection explicitly, you can optionally perform
             rounds 3 and 4.  See JPakeParticipant for details on how to execute
             rounds 3 and 4.
            
             The keying material will be in the range <tt>[0, p-1]</tt>.
            
             ValidateRound2PayloadReceived(JPakeRound2Payload) must be called prior to this method.
             
             As a side effect, the internal password array is cleared, since it is no longer needed.
            
             After execution, the State state will be STATE_KEY_CALCULATED.
            
             Throws InvalidOperationException if called prior to ValidateRound2PayloadReceived(JPakeRound2Payload),
             or if called multiple times.
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.CreateRound3PayloadToSend(Spire.Security.Math.BigInteger)">
             <summary>
             Creates and returns the payload to send to the other participant during round 3.
            
             See JPakeParticipant for more details on round 3.
            
             After execution, the State state} will be  STATE_ROUND_3_CREATED.
             Throws InvalidOperationException if called prior to CalculateKeyingMaterial, or multiple
             times.
             </summary>
             <param name="keyingMaterial">The keying material as returned from CalculateKeyingMaterial().</param> 
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound3PayloadReceived(Spire.Security.Crypto.Agreement.JPake.JPakeRound3Payload,Spire.Security.Math.BigInteger)">
             <summary>
             Validates the payload received from the other participant during round 3.
            
             See JPakeParticipant for more details on round 3.
            
             After execution, the State state will be STATE_ROUND_3_VALIDATED.
             
             Throws CryptoException if validation fails. Throws InvalidOperationException if called prior to
             CalculateKeyingMaterial or multiple times
             </summary>
             <param name="round3PayloadReceived">The round 3 payload received from the other participant.</param> 
             <param name="keyingMaterial">The keying material as returned from CalculateKeyingMaterial().</param> 
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroup">
             <summary>
             A pre-computed prime order group for use during a J-PAKE exchange.
            
             Typically a Schnorr group is used.  In general, J-PAKE can use any prime order group
             that is suitable for public key cryptography, including elliptic curve cryptography.
            
             See JPakePrimeOrderGroups for convenient standard groups.
            
             NIST <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/DSA2_All.pdf">publishes</a>
             many groups that can be used for the desired level of security.
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroup.#ctor(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
             <summary>
             Constructs a new JPakePrimeOrderGroup.
            
             In general, you should use one of the pre-approved groups from
             JPakePrimeOrderGroups, rather than manually constructing one.
            
             The following basic checks are performed:
            
             p-1 must be evenly divisible by q
             g must be in [2, p-1]
             g^q mod p must equal 1
             p must be prime (within reasonably certainty)
             q must be prime (within reasonably certainty)
            
             The prime checks are performed using BigInteger#isProbablePrime(int),
             and are therefore subject to the same probability guarantees.
            
             These checks prevent trivial mistakes.
             However, due to the small uncertainties if p and q are not prime,
             advanced attacks are not prevented.
             Use it at your own risk.
             
             Throws NullReferenceException if any argument is null. Throws
             InvalidOperationException is any of the above validations fail.
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroup.#ctor(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,System.Boolean)">
            <summary>
            Constructor used by the pre-approved groups in JPakePrimeOrderGroups.
            These pre-approved groups can avoid the expensive checks.
            User-specified groups should not use this constructor.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroups">
            <summary>
            Standard pre-computed prime order groups for use by J-PAKE.
            (J-PAKE can use pre-computed prime order groups, same as DSA and Diffie-Hellman.)
            <p/>
            This class contains some convenient constants for use as input for
            constructing {@link JPAKEParticipant}s.
            <p/>
            The prime order groups below are taken from Sun's JDK JavaDoc (docs/guide/security/CryptoSpec.html#AppB),
            and from the prime order groups
            <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/DSA2_All.pdf">published by NIST</a>.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroups.SUN_JCE_1024">
            <summary>
            From Sun's JDK JavaDoc (docs/guide/security/CryptoSpec.html#AppB)
            1024-bit p, 160-bit q and 1024-bit g for 80-bit security.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroups.NIST_2048">
            <summary>
            From NIST.
            2048-bit p, 224-bit q and 2048-bit g for 112-bit security.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakePrimeOrderGroups.NIST_3072">
            <summary>
            From NIST.
            3072-bit p, 256-bit q and 3072-bit g for 128-bit security.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload">
            <summary>
            The payload sent/received during the first round of a J-PAKE exchange.
            
            Each JPAKEParticipant creates and sends an instance of this payload to
            the other. The payload to send should be created via 
            JPAKEParticipant.CreateRound1PayloadToSend().
            
            Each participant must also validate the payload received from the other.
            The received payload should be validated via 
            JPAKEParticipant.ValidateRound1PayloadReceived(JPakeRound1Payload).
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload.participantId">
            <summary>
            The id of the JPAKEParticipant who created/sent this payload.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload.gx1">
            <summary>
            The value of g^x1
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload.gx2">
            <summary>
            The value of g^x2
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload.knowledgeProofForX1">
            <summary>
            The zero knowledge proof for x1.
            
            This is a two element array, containing {g^v, r} for x1.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound1Payload.knowledgeProofForX2">
            <summary>
            The zero knowledge proof for x2.
            
            This is a two element array, containing {g^v, r} for x2.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakeRound2Payload">
            <summary>
            The payload sent/received during the second round of a J-PAKE exchange.
            
            Each JPAKEParticipant creates and sends an instance
            of this payload to the other JPAKEParticipant.
            The payload to send should be created via
            JPAKEParticipant#createRound2PayloadToSend()
            
            Each JPAKEParticipant must also validate the payload
            received from the other JPAKEParticipant.
            The received payload should be validated via
            JPAKEParticipant#validateRound2PayloadReceived(JPakeRound2Payload)
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound2Payload.participantId">
            <summary>
            The id of the JPAKEParticipant who created/sent this payload.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound2Payload.a">
            <summary>
            The value of A, as computed during round 2.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound2Payload.knowledgeProofForX2s">
            <summary>
            The zero knowledge proof for x2 * s.
            
            This is a two element array, containing {g^v, r} for x2 * s.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakeRound3Payload">
             <summary>
             The payload sent/received during the optional third round of a J-PAKE exchange,
             which is for explicit key confirmation.
            
             Each JPAKEParticipant creates and sends an instance
             of this payload to the other JPAKEParticipant.
             The payload to send should be created via
             JPAKEParticipant#createRound3PayloadToSend(BigInteger)
            
             Eeach JPAKEParticipant must also validate the payload
             received from the other JPAKEParticipant.
             The received payload should be validated via
             JPAKEParticipant#validateRound3PayloadReceived(JPakeRound3Payload, BigInteger)
             </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound3Payload.participantId">
            <summary>
            The id of the {@link JPAKEParticipant} who created/sent this payload.
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Agreement.JPake.JPakeRound3Payload.macTag">
            <summary>
            The value of MacTag, as computed by round 3.
            
            See JPAKEUtil#calculateMacTag(string, string, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, org.bouncycastle.crypto.Digest)
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities">
            <summary>
            Primitives needed for a J-PAKE exchange.
            
            The recommended way to perform a J-PAKE exchange is by using
            two JPAKEParticipants.  Internally, those participants
            call these primitive operations in JPakeUtilities.
            
            The primitives, however, can be used without a JPAKEParticipant if needed.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.GenerateX1(Spire.Security.Math.BigInteger,Spire.Security.Security.SecureRandom)">
            <summary>
            Return a value that can be used as x1 or x3 during round 1.
            The returned value is a random value in the range [0, q-1].
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.GenerateX2(Spire.Security.Math.BigInteger,Spire.Security.Security.SecureRandom)">
            <summary>
            Return a value that can be used as x2 or x4 during round 1.
            The returned value is a random value in the range [1, q-1].
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(System.Char[])">
            <summary>
            Converts the given password to a BigInteger
            for use in arithmetic calculations.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateGx(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            <summary>
            Calculate g^x mod p as done in round 1.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateGA(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            <summary>
            Calculate ga as done in round 2.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateX2s(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            <summary>
            Calculate x2 * s as done in round 2.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateA(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            <summary>
            Calculate A as done in round 2. 
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateZeroKnowledgeProof(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,System.String,Spire.Security.Crypto.IDigest,Spire.Security.Security.SecureRandom)">
            <summary>
            Calculate a zero knowledge proof of x using Schnorr's signature.
            The returned array has two elements {g^v, r = v-x*h} for x.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateGx4(Spire.Security.Math.BigInteger)">
            <summary>
            Validates that g^x4 is not 1.
            throws CryptoException if g^x4 is 1
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateGa(Spire.Security.Math.BigInteger)">
            <summary>
            Validates that ga is not 1.
            
            As described by Feng Hao...
            Alice could simply check ga != 1 to ensure it is a generator.
            In fact, as we will explain in Section 3, (x1 + x3 + x4 ) is random over Zq even in the face of active attacks.
            Hence, the probability for ga = 1 is extremely small - on the order of 2^160 for 160-bit q.
            
            throws CryptoException if ga is 1
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateZeroKnowledgeProof(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger[],System.String,Spire.Security.Crypto.IDigest)">
            <summary>
            Validates the zero knowledge proof (generated by
            calculateZeroKnowledgeProof(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, string, Digest, SecureRandom)
            is correct.
            
            throws CryptoException if the zero knowledge proof is not correct
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateKeyingMaterial(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            <summary>
            Calculates the keying material, which can be done after round 2 has completed.
            A session key must be derived from this key material using a secure key derivation function (KDF).
            The KDF used to derive the key is handled externally (i.e. not by JPAKEParticipant).
            
            KeyingMaterial = (B/g^{x2*x4*s})^x2
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsDiffer(System.String,System.String)">
             <summary>
             Validates that the given participant ids are not equal.
             (For the J-PAKE exchange, each participant must use a unique id.)
            
             Throws CryptoException if the participantId strings are equal.
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsEqual(System.String,System.String)">
            <summary>
            Validates that the given participant ids are equal.
            This is used to ensure that the payloads received from
            each round all come from the same participant.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateNotNull(System.Object,System.String)">
            <summary>
            Validates that the given object is not null.
            throws NullReferenceException if the object is null.
            </summary>
            <param name="obj">object in question</param>
            <param name="description">name of the object (to be used in exception message)</param>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacTag(System.String,System.String,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Crypto.IDigest)">
             <summary>
             Calculates the MacTag (to be used for key confirmation), as defined by
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             MacTag = HMAC(MacKey, MacLen, MacData)
             MacKey = H(K || "JPAKE_KC")
             MacData = "KC_1_U" || participantId || partnerParticipantId || gx1 || gx2 || gx3 || gx4
            
             Note that both participants use "KC_1_U" because the sender of the round 3 message
             is always the initiator for key confirmation.
            
             HMAC = {@link HMac} used with the given {@link Digest}
             H = The given {@link Digest}
             MacLen = length of MacTag
             </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacKey(Spire.Security.Math.BigInteger,Spire.Security.Crypto.IDigest)">
            <summary>
            Calculates the MacKey (i.e. the key to use when calculating the MagTag for key confirmation).
            
            MacKey = H(K || "JPAKE_KC")
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.JPake.JPakeUtilities.ValidateMacTag(System.String,System.String,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Crypto.IDigest,Spire.Security.Math.BigInteger)">
            <summary>
            Validates the MacTag received from the partner participant.
            
            throws CryptoException if the participantId strings are equal.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.Kdf.ConcatenationKdfGenerator">
            Generator for Concatenation Key Derivation Function defined in NIST SP 800-56A, Sect 5.8.1
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.#ctor(Spire.Security.Crypto.IDigest)">
            @param digest the digest to be used as the source of generated bytes
        </member>
        <member name="P:Spire.Security.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Kdf.ConcatenationKdfGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.Kdf.DHKekGenerator">
            RFC 2631 Diffie-hellman KEK derivation function.
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.Kdf.ECDHKekGenerator">
            X9.63 based key derivation function for ECDH CMS.
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.SM2KeyExchange">
            <summary>
            SM2 Key Exchange protocol - based on https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.Srp.Srp6Client">
            Implements the client side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Client.Init(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Crypto.IDigest,Spire.Security.Security.SecureRandom)">
            Initialises the client to begin new authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
            Generates client's credentials given the client's salt, identity and password
            @param salt The salt used in the client's verifier.
            @param identity The user's identity (eg. username)
            @param password The user's password
            @return Client's public value to send to server
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Client.CalculateSecret(Spire.Security.Math.BigInteger)">
            Generates client's verification message given the server's credentials
            @param serverB The server's credentials
            @return Client's verification message for the server
            @throws CryptoException If server's credentials are invalid
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Client.CalculateClientEvidenceMessage">
            Computes the client evidence message M1 using the previously received values.
            To be called after calculating the secret S.
            @return M1: the client side generated evidence message
            @throws CryptoException
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Client.VerifyServerEvidenceMessage(Spire.Security.Math.BigInteger)">
            Authenticates the server evidence message M2 received and saves it only if correct.
            @param M2: the server side generated evidence message
            @return A boolean indicating if the server message M2 was the expected one.
            @throws CryptoException
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Client.CalculateSessionKey">
            Computes the final session key as a result of the SRP successful mutual authentication
            To be called after verifying the server evidence message M2.
            @return Key: the mutually authenticated symmetric session key
            @throws CryptoException
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.Srp.Srp6Server">
            Implements the server side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Server.Init(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Crypto.IDigest,Spire.Security.Security.SecureRandom)">
            Initialises the server to accept a new client authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param v The client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Server.GenerateServerCredentials">
            Generates the server's credentials that are to be sent to the client.
            @return The server's public value to the client
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Server.CalculateSecret(Spire.Security.Math.BigInteger)">
            Processes the client's credentials. If valid the shared secret is generated and returned.
            @param clientA The client's credentials
            @return A shared secret BigInteger
            @throws CryptoException If client's credentials are invalid
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Server.VerifyClientEvidenceMessage(Spire.Security.Math.BigInteger)">
            Authenticates the received client evidence message M1 and saves it only if correct.
            To be called after calculating the secret S.
            @param M1: the client side generated evidence message
            @return A boolean indicating if the client message M1 was the expected one.
            @throws CryptoException 
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Server.CalculateServerEvidenceMessage">
            Computes the server evidence message M2 using the previously verified values.
            To be called after successfully verifying the client evidence message M1.
            @return M2: the server side generated evidence message
            @throws CryptoException
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Server.CalculateSessionKey">
            Computes the final session key as a result of the SRP successful mutual authentication
            To be called after calculating the server evidence message M2.
            @return Key: the mutual authenticated symmetric session key
            @throws CryptoException
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Utilities.CalculateM1(Spire.Security.Crypto.IDigest,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Computes the client evidence message (M1) according to the standard routine:
            M1 = H( A | B | S )
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param A The public client value
            @param B The public server value
            @param S The secret calculated by both sides
            @return M1 The calculated client evidence message
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Utilities.CalculateM2(Spire.Security.Crypto.IDigest,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Computes the server evidence message (M2) according to the standard routine:
            M2 = H( A | M1 | S )
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param A The public client value
            @param M1 The client evidence message
            @param S The secret calculated by both sides
            @return M2 The calculated server evidence message
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6Utilities.CalculateKey(Spire.Security.Crypto.IDigest,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Computes the final Key according to the standard routine: Key = H(S)
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param S The secret calculated by both sides
            @return
        </member>
        <member name="T:Spire.Security.Crypto.Agreement.Srp.Srp6VerifierGenerator">
            Generates new SRP verifier for user
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6VerifierGenerator.Init(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Crypto.IDigest)">
            Initialises generator to create new verifiers
            @param N The safe prime to use (see DHParametersGenerator)
            @param g The group parameter to use (see DHParametersGenerator)
            @param digest The digest to use. The same digest type will need to be used later for the actual authentication
            attempt. Also note that the final session key size is dependent on the chosen digest.
        </member>
        <member name="M:Spire.Security.Crypto.Agreement.Srp.Srp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
            Creates a new SRP verifier
            @param salt The salt to use, generally should be large and random
            @param identity The user's identifying information (eg. username)
            @param password The user's password
            @return A new verifier for use in future SRP authentication
        </member>
        <member name="T:Spire.Security.Crypto.AsymmetricCipherKeyPair">
            a holding class for public/private parameter pairs.
        </member>
        <member name="M:Spire.Security.Crypto.AsymmetricCipherKeyPair.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Crypto.AsymmetricKeyParameter)">
             basic constructor.
            
             @param publicParam a public key parameters object.
             @param privateParam the corresponding private key parameters.
        </member>
        <member name="P:Spire.Security.Crypto.AsymmetricCipherKeyPair.Public">
             return the public key parameters.
            
             @return the public key parameters.
        </member>
        <member name="P:Spire.Security.Crypto.AsymmetricCipherKeyPair.Private">
             return the private key parameters.
            
             @return the private key parameters.
        </member>
        <member name="T:Spire.Security.Crypto.BufferedAeadBlockCipher">
            The AEAD block ciphers already handle buffering internally, so this class
            just takes care of implementing IBufferedCipher methods.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAeadBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:Spire.Security.Crypto.BufferedAsymmetricBlockCipher">
            a buffer wrapper for an asymmetric block cipher, allowing input
            to be accumulated in a piecemeal fashion until final processing.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAsymmetricBlockCipher.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher)">
             base constructor.
            
             @param cipher the cipher this buffering object wraps.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAsymmetricBlockCipher.GetBufferPosition">
             return the amount of data sitting in the buffer.
            
             @return the amount of data sitting in the buffer.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAsymmetricBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the buffer and the underlying cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAsymmetricBlockCipher.DoFinal">
             process the contents of the buffer using the underlying
             cipher.
            
             @return the result of the encryption/decryption process on the
             buffer.
             @exception InvalidCipherTextException if we are given a garbage block.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedAsymmetricBlockCipher.Reset">
            <summary>Reset the buffer</summary>
        </member>
        <member name="T:Spire.Security.Crypto.BufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion. The BufferedBlockCipher outputs a block only when the
            buffer is full and more data is being added, or on a doFinal.
            <p>
            Note: in the case where the underlying cipher is either a CFB cipher or an
            OFB one the last block may not be a multiple of the block size.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.#ctor">
            constructor for subclasses
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Create a buffered block cipher without padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             false otherwise.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:Spire.Security.Crypto.BufferedBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:Spire.Security.Crypto.CipherKeyGenerator">
            The base class for symmetric, or secret, cipher key generators.
        </member>
        <member name="M:Spire.Security.Crypto.CipherKeyGenerator.Init(Spire.Security.Crypto.KeyGenerationParameters)">
             initialise the key generator.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:Spire.Security.Crypto.CipherKeyGenerator.GenerateKey">
             Generate a secret key.
            
             @return a byte array containing the key value.
        </member>
        <member name="T:Spire.Security.Crypto.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given
            insufficient input. In general this exception will Get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="M:Spire.Security.Crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:Spire.Security.Crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <!-- 对于成员“T:Spire.Security.Crypto.Digests.Blake2bDigest”忽略有格式错误的 XML 注释 -->
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.#ctor(System.Int32)">
             Basic sized constructor - size in bits.
            
             @param digestSize size of the digest in bits
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.#ctor(System.Byte[])">
             Blake2b for authentication ("Prefix-MAC mode").
             After calling the doFinal() method, the key will
             remain to be used for further computations of
             this instance.
             The key can be overwritten using the clearKey() method.
            
             @param key A key up to 64 bytes or null
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.#ctor(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
             Blake2b with key, required digest length (in bytes), salt and personalization.
             After calling the doFinal() method, the key, the salt and the personal string
             will remain and might be used for further computations with this instance.
             The key can be overwritten using the clearKey() method, the salt (pepper)
             can be overwritten using the clearSalt() method.
            
             @param key             A key up to 64 bytes or null
             @param digestLength    from 1 up to 64 bytes
             @param salt            16 bytes or null
             @param personalization 16 bytes or null
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param b the input byte to be entered.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param message the byte array containing the data.
             @param offset  the offset into the byte array where the data starts.
             @param len     the length of the data.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.DoFinal(System.Byte[],System.Int32)">
             close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
             Key, salt and personal string remain.
            
             @param out       the array the digest is to be copied into.
             @param outOffset the offset into the out array the digest is to start at.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.Reset">
            Reset the digest back to it's initial state.
            The key, the salt and the personal string will
            remain for further computations.
        </member>
        <member name="P:Spire.Security.Crypto.Digests.Blake2bDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.GetByteLength">
             Return the size in bytes of the internal buffer the digest applies it's compression
             function to.
            
             @return byte length of the digests internal buffer.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.ClearKey">
            Overwrite the key
            if it is no longer used (zeroization)
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2bDigest.ClearSalt">
            Overwrite the salt (pepper) if it
            is secret and no longer used (zeroization)
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Blake2sDigest">
            Implementation of the cryptographic hash function BLAKE2s.
            <p/>
            BLAKE2s offers a built-in keying mechanism to be used directly
            for authentication ("Prefix-MAC") rather than a HMAC construction.
            <p/>
            BLAKE2s offers a built-in support for a salt for randomized hashing
            and a personal string for defining a unique hash function for each application.
            <p/>
            BLAKE2s is optimized for 32-bit platforms and produces digests of any size
            between 1 and 32 bytes.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.blake2s_IV">
             BLAKE2s Initialization Vector
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.blake2s_sigma">
             Message word permutations
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.buffer">
            Whenever this buffer overflows, it will be processed in the Compress()
            function. For performance issues, long messages will not use this buffer.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.bufferPos">
             Position of last inserted byte
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.internalState">
             Internal state, in the BLAKE2 paper it is called v
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.chainValue">
             State vector, in the BLAKE2 paper it is called h
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.t0">
             holds least significant bits of counter
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.t1">
             holds most significant bits of counter
            
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Blake2sDigest.f0">
             finalization flag, for last block: ~0
            
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.#ctor">
            BLAKE2s-256 for hashing.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.#ctor(System.Int32)">
             BLAKE2s for hashing.
            
             @param digestBits the desired digest length in bits. Must be one of
                               [128, 160, 224, 256].
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.#ctor(System.Byte[])">
             BLAKE2s for authentication ("Prefix-MAC mode").
             <p/>
             After calling the doFinal() method, the key will remain to be used for
             further computations of this instance. The key can be overwritten using
             the clearKey() method.
            
             @param key a key up to 32 bytes or null
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.#ctor(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
             BLAKE2s with key, required digest length, salt and personalization.
             <p/>
             After calling the doFinal() method, the key, the salt and the personal
             string will remain and might be used for further computations with this
             instance. The key can be overwritten using the clearKey() method, the
             salt (pepper) can be overwritten using the clearSalt() method.
            
             @param key             a key up to 32 bytes or null
             @param digestBytes     from 1 up to 32 bytes
             @param salt            8 bytes or null
             @param personalization 8 bytes or null
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.Update(System.Byte)">
             Update the message digest with a single byte.
            
             @param b the input byte to be entered.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             Update the message digest with a block of bytes.
            
             @param message the byte array containing the data.
             @param offset  the offset into the byte array where the data starts.
             @param len     the length of the data.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal() call
             leaves the digest reset. Key, salt and personal string remain.
            
             @param out       the array the digest is to be copied into.
             @param outOffset the offset into the out array the digest is to start at.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.Reset">
            Reset the digest back to its initial state. The key, the salt and the
            personal string will remain for further computations.
        </member>
        <member name="P:Spire.Security.Crypto.Digests.Blake2sDigest.AlgorithmName">
             Return the algorithm name.
            
             @return the algorithm name
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.GetDigestSize">
             Return the size in bytes of the digest produced by this message digest.
            
             @return the size in bytes of the digest produced by this message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.GetByteLength">
             Return the size in bytes of the internal buffer the digest applies its
             compression function to.
            
             @return byte length of the digest's internal buffer.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.ClearKey">
            Overwrite the key if it is no longer used (zeroization).
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Blake2sDigest.ClearSalt">
            Overwrite the salt (pepper) if it is secret and no longer used
            (zeroization).
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Dstu7564Digest">
            implementation of Ukrainian DSTU 7564 hash function
        </member>
        <member name="T:Spire.Security.Crypto.Digests.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Gost3411Digest">
            implementation of GOST R 34.11-94
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Gost3411Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Gost3411Digest.#ctor(System.Byte[])">
            Constructor to allow use of a particular sbox with GOST28147
            @see GOST28147Engine#getSBox(String)
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Gost3411Digest.#ctor(Spire.Security.Crypto.Digests.Gost3411Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.Gost3411Digest.C2">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.KeccakDigest">
            <summary>
            Implementation of Keccak based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.KeccakDigest.GetByteLength">
             Return the size of block that the compression function is applied to in bytes.
            
             @return internal byte length of a block.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:Spire.Security.Crypto.Digests.LongDigest.#ctor(Spire.Security.Crypto.Digests.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.MD2Digest">
            implementation of MD2
            as outlined in RFC1319 by B.Kaliski from RSA Laboratories April 1992
        </member>
        <member name="P:Spire.Security.Crypto.Digests.MD2Digest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD2Digest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD2Digest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD2Digest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.MD4Digest">
            implementation of MD4 as RFC 1320 by R. Rivest, MIT Laboratory for
            Computer Science and RSA Data Security, Inc.
            <p>
            <b>NOTE</b>: This algorithm is only included for backwards compatibility
            with legacy applications, it's not secure, don't use it for anything new!</p>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD4Digest.#ctor(Spire.Security.Crypto.Digests.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD4Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD5Digest.#ctor(Spire.Security.Crypto.Digests.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.NonMemoableDigest">
            Wrapper removes exposure to the IMemoable interface on an IDigest implementation.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.NonMemoableDigest.#ctor(Spire.Security.Crypto.IDigest)">
             Base constructor.
            
             @param baseDigest underlying digest to use.
             @exception IllegalArgumentException if baseDigest is null
        </member>
        <member name="T:Spire.Security.Crypto.Digests.RipeMD128Digest">
            implementation of RipeMD128
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD128Digest.#ctor(Spire.Security.Crypto.Digests.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.RipeMD160Digest">
            implementation of RipeMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD160Digest.#ctor(Spire.Security.Crypto.Digests.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.RipeMD256Digest">
            <remarks>
            <p>Implementation of RipeMD256.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD256Digest.#ctor(Spire.Security.Crypto.Digests.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.RipeMD320Digest">
            <remarks>
            <p>Implementation of RipeMD 320.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD320Digest.#ctor(Spire.Security.Crypto.Digests.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endianness" of the word processing!
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha1Digest.#ctor(Spire.Security.Crypto.Digests.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha224Digest">
            SHA-224 as described in RFC 3874
            <pre>
                    block  word  digest
            SHA-1   512    32    160
            SHA-224 512    32    224
            SHA-256 512    32    256
            SHA-384 1024   64    384
            SHA-512 1024   64    512
            </pre>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha224Digest.#ctor(Spire.Security.Crypto.Digests.Sha224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha224Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha256Digest.#ctor(Spire.Security.Crypto.Digests.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha384Digest">
             Draft FIPS 180-2 implementation of SHA-384. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha384Digest.#ctor(Spire.Security.Crypto.Digests.Sha384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha384Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha3Digest">
            <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha512Digest.#ctor(Spire.Security.Crypto.Digests.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.Sha512tDigest">
            FIPS 180-4 implementation of SHA-512/t
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha512tDigest.#ctor(System.Int32)">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha512tDigest.#ctor(Spire.Security.Crypto.Digests.Sha512tDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.Sha512tDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.ShakeDigest">
            <summary>
            Implementation of SHAKE based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.ShortenedDigest">
            Wrapper class that reduces the output length of a particular digest to
            only the first n bytes of the digest function.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.ShortenedDigest.#ctor(Spire.Security.Crypto.IDigest,System.Int32)">
             Base constructor.
            
             @param baseDigest underlying digest to use.
             @param length length in bytes of the output of doFinal.
             @exception ArgumentException if baseDigest is null, or length is greater than baseDigest.GetDigestSize().
        </member>
        <member name="T:Spire.Security.Crypto.Digests.SkeinDigest">
            <summary>
            Implementation of the Skein parameterised hash function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:Spire.Security.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
            <seealso cref="T:Spire.Security.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinDigest.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinDigest.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinDigest.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinDigest.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
            <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:Spire.Security.Crypto.Digests.SkeinDigest.SKEIN_256"/> <see cref="F:Spire.Security.Crypto.Digests.SkeinDigest.SKEIN_512"/> or
                                  <see cref="F:Spire.Security.Crypto.Digests.SkeinDigest.SKEIN_1024"/>.</param>
            <param name="digestSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinDigest.Init(Spire.Security.Crypto.Parameters.SkeinParameters)">
            <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
            See <see cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"></see> for details on the parameterisation of the Skein hash function.
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.SkeinEngine">
            <summary>
            Implementation of the Skein family of parameterised hash functions in 256, 512 and 1024 bit block
            sizes, based on the <see cref="T:Spire.Security.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p/>
            This implementation is the basis for <see cref="T:Spire.Security.Crypto.Digests.SkeinDigest"/> and <see cref="T:Spire.Security.Crypto.Macs.SkeinMac"/>, implementing the
            parameter based configuration system that allows Skein to be adapted to multiple applications. <br/>
            Initialising the engine with <see cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/> allows standard and arbitrary parameters to
            be applied during the Skein hash function.
            <p/>
            Implemented:
            <ul>
            <li>256, 512 and 1024 bit internal states.</li>
            <li>Full 96 bit input length.</li>
            <li>Parameters defined in the Skein specification, and arbitrary other pre and post message
            parameters.</li>
            <li>Arbitrary output size in 1 byte intervals.</li>
            </ul>
            <p/>
            Not implemented:
            <ul>
            <li>Sub-byte length input (bit padding).</li>
            <li>Tree hashing.</li>
            </ul>
            </remarks>
            <seealso cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.PARAM_TYPE_KEY">
            The parameter type for the Skein key.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.PARAM_TYPE_CONFIG">
            The parameter type for the Skein configuration block.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.PARAM_TYPE_MESSAGE">
            The parameter type for the message.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.PARAM_TYPE_OUTPUT">
            The parameter type for the output transformation.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.INITIAL_STATES">
            Precalculated UBI(CFG) states for common state/output combinations without key or other
            pre-message params.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UbiTweak.LOW_RANGE">
            Point at which position might overflow long, so switch to add with carry logic
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UbiTweak.T1_FINAL">
            Bit 127 = final
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UbiTweak.T1_FIRST">
            Bit 126 = first
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UbiTweak.tweak">
            UBI uses a 128 bit tweak
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UbiTweak.extendedPosition">
            Whether 64 bit position exceeded
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinEngine.UbiTweak.AdvancePosition(System.Int32)">
            Advances the position in the tweak by the specified value.
        </member>
        <member name="T:Spire.Security.Crypto.Digests.SkeinEngine.UBI">
            The Unique Block Iteration chaining mode.
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UBI.currentBlock">
            Buffer for the current block of message data
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UBI.currentOffset">
            Offset into the current message block
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.UBI.message">
            Buffer for message words for feedback into encrypted block
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.threefish">
            Underlying Threefish tweakable block cipher
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.outputSizeBytes">
            Size of the digest output, in bytes
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.chain">
            The current chaining/state value
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.initialState">
            The initial state value
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.key">
            The (optional) key parameter
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.preMessageParameters">
            Parameters to apply prior to the message
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.postMessageParameters">
            Parameters to apply after the message, but prior to output
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.ubi">
            The current UBI operation
        </member>
        <member name="F:Spire.Security.Crypto.Digests.SkeinEngine.singleByte">
            Buffer for single byte update method
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinEngine.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
            <param name="blockSizeBits">the internal state size in bits - one of <see cref="F:Spire.Security.Crypto.Digests.SkeinEngine.SKEIN_256"/> <see cref="F:Spire.Security.Crypto.Digests.SkeinEngine.SKEIN_512"/> or
                                  <see cref="F:Spire.Security.Crypto.Digests.SkeinEngine.SKEIN_1024"/>.</param>
            <param name="outputSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinEngine.#ctor(Spire.Security.Crypto.Digests.SkeinEngine)">
            <summary>
            Creates a SkeinEngine as an exact copy of an existing instance.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinEngine.Init(Spire.Security.Crypto.Parameters.SkeinParameters)">
            <summary>
            Initialises the Skein engine with the provided parameters. See <see cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/> for
            details on the parameterisation of the Skein hash function.
            </summary>
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinEngine.CreateInitialState">
            Calculate the initial (pre message block) chaining state.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SkeinEngine.Reset">
            <summary>
            Reset the engine to the initial state (with the key and any pre-message parameters , ready to
            accept message input.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.SM3Digest">
            <summary>
            Implementation of Chinese SM3 digest as described at
            http://tools.ietf.org/html/draft-shen-sm3-hash-00
            and at .... ( Chinese PDF )
            </summary>
            <remarks>
            The specification says "process a bit stream",
            but this is written to process bytes in blocks of 4,
            meaning this will process 32-bit word groups.
            But so do also most other digest specifications,
            including the SHA-256 which was a origin for
            this specification.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SM3Digest.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SM3Digest.#ctor(Spire.Security.Crypto.Digests.SM3Digest)">
            <summary>
            Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.SM3Digest.Reset">
            <summary>
            reset the chaining variables
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Digests.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:Spire.Security.Crypto.Digests.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:Spire.Security.Crypto.Digests.TigerDigest.#ctor(Spire.Security.Crypto.Digests.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Spire.Security.Crypto.Digests.WhirlpoolDigest">
             Implementation of WhirlpoolDigest, based on Java source published by Barreto
             and Rijmen.
            
        </member>
        <member name="M:Spire.Security.Crypto.Digests.WhirlpoolDigest.#ctor(Spire.Security.Crypto.Digests.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:Spire.Security.Crypto.Digests.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="M:Spire.Security.Crypto.EC.CustomNamedCurves.GetByOid(Spire.Security.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Spire.Security.Crypto.EC.CustomNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Spire.Security.Crypto.EC.CustomNamedCurves.GetName(Spire.Security.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Spire.Security.Crypto.EC.CustomNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="T:Spire.Security.Crypto.Encodings.ISO9796d1Encoding">
            ISO 9796-1 padding. Note in the light of recent results you should
            only use this with RSA (rather than the "simpler" Rabin keys) and you
            should never use it with anything other than a hash (ie. even if the
            message is small don't sign the message, sign it's hash) or some "random"
            value. See your favorite search engine for details.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.ISO9796d1Encoding.GetInputBlockSize">
            return the input block size. The largest message we can process
            is (key_size_in_bits + 3)/16, which in our world comes to
            key_size_in_bytes / 2.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.ISO9796d1Encoding.GetOutputBlockSize">
            return the maximum possible size for the output.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.ISO9796d1Encoding.SetPadBits(System.Int32)">
            set the number of bits in the next message to be treated as
            pad bits.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.ISO9796d1Encoding.GetPadBits">
            retrieve the number of pad bits in the last decoded message.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.ISO9796d1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not a valid ISO 9796 bit string
        </member>
        <member name="T:Spire.Security.Crypto.Encodings.OaepEncoding">
            Optimal Asymmetric Encryption Padding (OAEP) - see PKCS 1 V 2.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.OaepEncoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block turns out to
            be badly formatted.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.OaepEncoding.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.OaepEncoding.maskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            mask generator function, as described in PKCS1v2.
        </member>
        <member name="T:Spire.Security.Crypto.Encodings.Pkcs1Encoding">
            this does your basic Pkcs 1 v1.5 padding - whether or not you should be using this
            depends on your application - see Pkcs1 Version 2 for details.
        </member>
        <member name="F:Spire.Security.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabledProperty">
            some providers fail to include the leading zero in PKCS1 encoded blocks. If you need to
            work with one of these set the system property Spire.Security.Pkcs1.Strict to false.
        </member>
        <member name="P:Spire.Security.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabled">
            The same effect can be achieved by setting the static property directly
            <p>
            The static property is checked during construction of the encoding object, it is set to
            true by default.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.Pkcs1Encoding.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher)">
             Basic constructor.
            
             @param cipher
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.Pkcs1Encoding.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,System.Int32)">
            Constructor for decryption with a fixed plaintext length.
            
            @param cipher The cipher to use for cryptographic operation.
            @param pLen Length of the expected plaintext.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.Pkcs1Encoding.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,System.Byte[])">
            Constructor for decryption with a fixed plaintext length and a fallback
            value that is returned, if the padding is incorrect.
            
            @param cipher
                       The cipher to use for cryptographic operation.
            @param fallback
                       The fallback value, we don't to a arraycopy here.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.Pkcs1Encoding.CheckPkcs1Encoding(System.Byte[],System.Int32)">
            Checks if the argument is a correctly PKCS#1.5 encoded Plaintext
            for encryption.
            
            @param encoded The Plaintext.
            @param pLen Expected length of the plaintext.
            @return Either 0, if the encoding is correct, or -1, if it is incorrect.
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.Pkcs1Encoding.DecodeBlockOrRandom(System.Byte[],System.Int32,System.Int32)">
            Decode PKCS#1.5 encoding, and return a random value if the padding is not correct.
            
            @param in The encrypted block.
            @param inOff Offset in the encrypted block.
            @param inLen Length of the encrypted block.
            @param pLen Length of the desired output.
            @return The plaintext without padding, or a random value if the padding was incorrect.
            @throws InvalidCipherTextException
        </member>
        <member name="M:Spire.Security.Crypto.Encodings.Pkcs1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in Pkcs1 format.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.AesEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first.
            
             The slowest version uses no static tables at all and computes the values in each round.
             </p>
             <p>
             This file contains the middle performance version with 2Kbytes of static tables for round precomputation.
             </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.AesFastEngine">
             an implementation of the AES (Rijndael)), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor), they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations), 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each), for a total of 2Kbytes),
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values in each round
             </p>
             <p>
             This file contains the fast version with 8Kbytes of static tables for round precomputation
             </p>
            <remarks>
            Unfortunately this class has a few side channel issues.
            In an environment where encryption/decryption may be closely observed it should not be used.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesFastEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesFastEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesFastEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.AesLightEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values
             in each round.
             </p>
             <p>
             This file contains the slowest performance version with no static tables
             for round precomputation, but it has the smallest foot print.
             </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesLightEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesLightEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.AesLightEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.AesWrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap Specification.
            <p/>
            For further details see: <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.BlowfishEngine">
            A class that provides Blowfish key encryption operations,
            such as encoding data and generating keys.
            All the algorithms herein are from Applied Cryptography
            and implement a simplified cryptography interface.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.BlowfishEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a Blowfish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.BlowfishEngine.ProcessTable(System.UInt32,System.UInt32,System.UInt32[])">
            apply the encryption cycle to each value pair in the table.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.BlowfishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Encrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.BlowfishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.CamelliaEngine">
            Camellia - based on RFC 3713.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.CamelliaLightEngine">
            Camellia - based on RFC 3713, smaller implementation, about half the size of CamelliaEngine.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.CamelliaWrapEngine">
            <remarks>
            An implementation of the Camellia key wrapper based on RFC 3657/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3657.txt">http://www.ietf.org/rfc/rfc3657.txt</a>.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Cast5Engine">
             A class that provides CAST key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC's
            
             RFC2144 - Cast5 (64bit block, 40-128bit key)
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a CAST cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.F1(System.UInt32,System.UInt32,System.Int32)">
             The first of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.F2(System.UInt32,System.UInt32,System.Int32)">
             The second of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.F3(System.UInt32,System.UInt32,System.Int32)">
             The third of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast5Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32[])">
             Does the 16 rounds to encrypt the block.
            
             @param L0    the LH-32bits of the plaintext block
             @param R0    the RH-32bits of the plaintext block
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Cast6Engine">
             A class that provides CAST6 key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC
            
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast6Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast6Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast6Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to encrypt the block.
            
             @param A    the 00-31  bits of the plaintext block
             @param B    the 32-63  bits of the plaintext block
             @param C    the 64-95  bits of the plaintext block
             @param D    the 96-127 bits of the plaintext block
             @param result the resulting ciphertext
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Cast6Engine.CAST_Decipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to decrypt the block.
            
             @param A    the 00-31  bits of the ciphertext block
             @param B    the 32-63  bits of the ciphertext block
             @param C    the 64-95  bits of the ciphertext block
             @param D    the 96-127 bits of the ciphertext block
             @param result the resulting plaintext
        </member>
        <member name="T:Spire.Security.Crypto.Engines.ChaCha7539Engine">
            <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ChaCha7539Engine.#ctor">
            <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.ChaChaEngine">
            <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ChaChaEngine.#ctor">
            <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ChaChaEngine.#ctor(System.Int32)">
            <summary>
            Creates a ChaCha engine with a specific number of rounds.
            </summary>
            <param name="rounds">the number of rounds (must be an even number).</param>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ChaChaEngine.ChachaCore(System.Int32,System.UInt32[],System.UInt32[])">
            <summary>
            ChaCha function.
            </summary>
            <param name="rounds">The number of ChaCha rounds to execute</param>
            <param name="input">The input words.</param>
            <param name="x">The ChaCha state to modify.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.DesEdeEngine">
            <remarks>A class that provides a basic DESede (or Triple DES) engine.</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEdeEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a DESede cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.DesEdeWrapEngine">
                * Wrap keys according to
                * <a href="http://www.ietf.org/internet-drafts/draft-ietf-smime-key-wrap-01.txt">
                * draft-ietf-smime-key-wrap-01.txt</a>.
                * <p>
                * Note:
                * <ul>
                * <li>this is based on a draft, and as such is subject to change - don't use this class for anything requiring long term storage.</li>
                * <li>if you are using this to wrap triple-des keys you need to set the
                * parity bits on the key and, if it's a two-key triple-des key, pad it
                * yourself.</li>
                * </ul>
            	* </p>
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEdeWrapEngine.engine">
            Field engine 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEdeWrapEngine.param">
            Field param 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEdeWrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEdeWrapEngine.iv">
            Field iv 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEdeWrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEdeWrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEdeWrapEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="P:Spire.Security.Crypto.Engines.DesEdeWrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEdeWrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEdeWrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEdeWrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEdeWrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="T:Spire.Security.Crypto.Engines.DesEngine">
            <remarks>A class that provides a basic DES engine.</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a DES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="F:Spire.Security.Crypto.Engines.DesEngine.bytebit">
            what follows is mainly taken from "Applied Cryptography", by
            Bruce Schneier, however it also bears great resemblance to Richard
            Outerbridge's D3DES...
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEngine.GenerateWorkingKey(System.Boolean,System.Byte[])">
             Generate an integer based working key based on our secret key
             and what we processing we are planning to do.
            
             Acknowledgements for this routine go to James Gillogly and Phil Karn.
                     (whoever, and wherever they are!).
        </member>
        <member name="M:Spire.Security.Crypto.Engines.DesEngine.DesFunc(System.Int32[],System.Byte[],System.Int32,System.Byte[],System.Int32)">
            the DES engine.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Dstu7624Engine">
            implementation of DSTU 7624 (Kalyna)
        </member>
        <member name="T:Spire.Security.Crypto.Engines.ElGamalEngine">
            this does your basic ElGamal algorithm.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ElGamalEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the ElGamal engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary ElGamal key parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ElGamalEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For ElGamal this is always one byte less than the size of P on
             encryption, and twice the length as the size of P on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ElGamalEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For ElGamal this is always one byte less than the size of P on
             decryption, and twice the length as the size of P on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ElGamalEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic ElGamal algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param length the length of the data to be processed.
             @return the result of the ElGamal process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Gost28147Engine">
            implementation of GOST 28147-89
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Gost28147Engine.#ctor">
            standard constructor.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Gost28147Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise an Gost28147 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Gost28147Engine.GetSBox(System.String)">
            Return the S-Box associated with SBoxName
            @param sBoxName name of the S-Box
            @return byte array representing the S-Box
        </member>
        <member name="T:Spire.Security.Crypto.Engines.HC128Engine">
             HC-128 is a software-efficient stream cipher created by Hongjun Wu. It
             generates keystream from a 128-bit secret key and a 128-bit initialization
             vector.
             <p>
             http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc128_p3.pdf
             </p><p>
             It is a third phase candidate in the eStream contest, and is patent-free.
             No attacks are known as of today (April 2007). See
            
             http://www.ecrypt.eu.org/stream/hcp3.html
             </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.HC128Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise a HC-128 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 128 bit long).
        </member>
        <member name="T:Spire.Security.Crypto.Engines.HC256Engine">
            HC-256 is a software-efficient stream cipher created by Hongjun Wu. It 
            generates keystream from a 256-bit secret key and a 256-bit initialization 
            vector.
            <p>
            http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc256_p3.pdf
            </p><p>
            Its brother, HC-128, is a third phase candidate in the eStream contest.
            The algorithm is patent-free. No attacks are known as of today (April 2007). 
            See
            
            http://www.ecrypt.eu.org/stream/hcp3.html
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.HC256Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise a HC-256 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 256 bit long).
        </member>
        <member name="T:Spire.Security.Crypto.Engines.IdeaEngine">
            A class that provides a basic International Data Encryption Algorithm (IDEA) engine.
            <p>
            This implementation is based on the "HOWTO: INTERNATIONAL DATA ENCRYPTION ALGORITHM"
            implementation summary by Fauzan Mirza (F.U.Mirza@sheffield.ac.uk). (baring 1 typo at the
            end of the mulinv function!).
            </p>
            <p>
            It can be found at ftp://ftp.funet.fi/pub/crypt/cryptography/symmetric/idea/
            </p>
            <p>
            Note 1: This algorithm is patented in the USA, Japan, and Europe including
            at least Austria, France, Germany, Italy, Netherlands, Spain, Sweden, Switzerland
            and the United Kingdom. Non-commercial use is free, however any commercial
            products are liable for royalties. Please see
            <a href="http://www.mediacrypt.com">www.mediacrypt.com</a> for
            further details. This announcement has been included at the request of
            the patent holders.
            </p>
            <p>
            Note 2: Due to the requests concerning the above, this algorithm is now only
            included in the extended assembly. It is not included in the default distributions.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.#ctor">
            standard constructor.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise an IDEA cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.Mul(System.Int32,System.Int32)">
             return x = x * y where the multiplication is done modulo
             65537 (0x10001) (as defined in the IDEA specification) and
             a zero input is taken to be 65536 (0x10000).
            
             @param x the x value
             @param y the y value
             @return x = x * y
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.ExpandKey(System.Byte[])">
            The following function is used to expand the user key to the encryption
            subkey. The first 16 bytes are the user key, and the rest of the subkey
            is calculated by rotating the previous 16 bytes by 25 bits to the left,
            and so on until the subkey is completed.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.MulInv(System.Int32)">
            This function computes multiplicative inverse using Euclid's Greatest
            Common Divisor algorithm. Zero and one are self inverse.
            <p>
            i.e. x * MulInv(x) == 1 (modulo BASE)
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.AddInv(System.Int32)">
            Return the additive inverse of x.
            <p>
            i.e. x + AddInv(x) == 0
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IdeaEngine.InvertKey(System.Int32[])">
            The function to invert the encryption subkey to the decryption subkey.
            It also involves the multiplicative inverse and the additive inverse functions.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.IesEngine">
            support class for constructing intergrated encryption ciphers
            for doing basic message exchanges on top of key agreement ciphers
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IesEngine.#ctor(Spire.Security.Crypto.IBasicAgreement,Spire.Security.Crypto.IDerivationFunction,Spire.Security.Crypto.IMac)">
             set up for use with stream mode, where the key derivation function
             is used to provide a stream of bytes to xor with the message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IesEngine.#ctor(Spire.Security.Crypto.IBasicAgreement,Spire.Security.Crypto.IDerivationFunction,Spire.Security.Crypto.IMac,Spire.Security.Crypto.BufferedBlockCipher)">
             set up for use in conjunction with a block cipher to handle the
             message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
             @param cipher the cipher to used for encrypting the message
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IesEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters,Spire.Security.Crypto.ICipherParameters,Spire.Security.Crypto.ICipherParameters)">
             Initialise the encryptor.
            
             @param forEncryption whether or not this is encryption/decryption.
             @param privParam our private key parameters
             @param pubParam the recipient's/sender's public key parameters
             @param param encoding and derivation parameters.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.IsaacEngine">
            Implementation of Bob Jenkin's ISAAC (Indirection Shift Accumulate Add and Count).
            see: http://www.burtleburtle.net/bob/rand/isaacafa.html
        </member>
        <member name="M:Spire.Security.Crypto.Engines.IsaacEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise an ISAAC cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.NaccacheSternEngine">
            NaccacheStern Engine. For details on this cipher, please see
            http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initializes this algorithm. Must be called before all other Functions.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#init(bool,
                  org.bouncycastle.crypto.CipherParameters)
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.GetInputBlockSize">
             Returns the input block size of this algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#GetInputBlockSize()
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.GetOutputBlockSize">
             Returns the output block size of this algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#GetOutputBlockSize()
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single Block using the Naccache-Stern algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#ProcessBlock(byte[],
                  int, int)
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.Encrypt(Spire.Security.Math.BigInteger)">
             Encrypts a BigInteger aka Plaintext with the public key.
            
             @param plain
                        The BigInteger to encrypt
             @return The byte[] representation of the encrypted BigInteger (i.e.
                     crypted.toByteArray())
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.AddCryptedBlocks(System.Byte[],System.Byte[])">
             Adds the contents of two encrypted blocks mod sigma
            
             @param block1
                        the first encrypted block
             @param block2
                        the second encrypted block
             @return encrypt((block1 + block2) mod sigma)
             @throws InvalidCipherTextException
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.ProcessData(System.Byte[])">
             Convenience Method for data exchange with the cipher.
            
             Determines blocksize and splits data to blocksize.
            
             @param data the data to be processed
             @return the data after it went through the NaccacheSternEngine.
             @throws InvalidCipherTextException
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NaccacheSternEngine.chineseRemainder(System.Collections.IList,System.Collections.IList)">
             Computes the integer x that is expressed through the given primes and the
             congruences with the chinese remainder theorem (CRT).
            
             @param congruences
                        the congruences c_i
             @param primes
                        the primes p_i
             @return an integer x for that x % p_i == c_i
        </member>
        <member name="T:Spire.Security.Crypto.Engines.NoekeonEngine">
            A Noekeon engine, using direct-key mode.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NoekeonEngine.#ctor">
            Create an instance of the Noekeon encryption algorithm
            and set some defaults
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NoekeonEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.NoekeonEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:Spire.Security.Crypto.Engines.NullEngine">
            The no-op engine that just copies bytes through, irrespective of whether encrypting and decrypting.
            Provided for the sake of completeness.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RC2Engine">
            an implementation of RC2 as described in RFC 2268
                 "A Description of the RC2(r) Encryption Algorithm" R. Rivest.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a RC2 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2Engine.RotateWordLeft(System.Int32,System.Int32)">
            return the result rotating the 16 bit number in x left by y
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RC2WrapEngine">
            Wrap keys according to RFC 3217 - RC2 mechanism
        </member>
        <member name="F:Spire.Security.Crypto.Engines.RC2WrapEngine.engine">
            Field engine 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.RC2WrapEngine.parameters">
            Field param 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.RC2WrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.RC2WrapEngine.iv">
            Field iv 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.RC2WrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:Spire.Security.Crypto.Engines.RC2WrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2WrapEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="P:Spire.Security.Crypto.Engines.RC2WrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2WrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC2WrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC4Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a RC4 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RC532Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation has a word size of 32 bits.</p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC532Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC532Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC532Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC532Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in     in byte buffer containing data to encrypt
             @param  inOff  offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC532Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC532Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RC564Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation is set to work with a 64 bit word size.</p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC564Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC564Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a RC5-64 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC564Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC564Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in      in byte buffer containing data to encrypt
             @param  inOff   offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC564Engine.RotateLeft(System.Int64,System.Int64)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % wordSize
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC564Engine.RotateRight(System.Int64,System.Int64)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RC6Engine">
            An RC6 engine.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC6Engine.#ctor">
            Create an instance of the RC6 encryption algorithm
            and set some defaults
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC6Engine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC6Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param inKey the key to be used
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC6Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RC6Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Rfc3211WrapEngine">
            an implementation of the RFC 3211 Key Wrap
            Specification.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Rfc3394WrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap
            Specification as described in RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3394.txt">http://www.ietf.org/rfc/rfc3394.txt</a>
            and  <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RijndaelEngine">
            an implementation of Rijndael, based on the documentation and reference implementation
            by Paulo Barreto, Vincent Rijmen, for v2.0 August '99.
            <p>
            Note: this implementation is based on information prior to readonly NIST publication.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.Mul0x2(System.Int32)">
            multiply two elements of GF(2^m)
            needed for MixColumn and InvMixColumn
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.KeyAddition(System.Int64[])">
            xor corresponding text input and round key input bytes
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.ShiftRow(System.Byte[])">
            Row 0 remains unchanged
            The other three rows are shifted a variable amount
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.Substitution(System.Byte[])">
            Replace every byte of the input by the byte at that place
            in the nonlinear S-box
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.MixColumn">
            Mix the bytes of every column in a linear way
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.InvMixColumn">
            Mix the bytes of every column in a linear way
            This is the opposite operation of Mixcolumn
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.GenerateWorkingKey(System.Byte[])">
            Calculate the necessary round keys
            The number of calculations depends on keyBits and blockBits
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.#ctor(System.Int32)">
             basic constructor - set the cipher up for a given blocksize
            
             @param blocksize the blocksize in bits, must be 128, 192, or 256.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RijndaelEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a Rijndael cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RsaBlindedEngine">
            this does your basic RSA algorithm with blinding
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindedEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindedEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindedEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindedEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RsaBlindingEngine">
            This does your basic RSA Chaum's blinding and unblinding as outlined in
            "Handbook of Applied Cryptography", page 475. You need to use this if you are
            trying to get another party to generate signatures without them being aware
            of the message they are signing.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindingEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the blinding engine.
            
             @param forEncryption true if we are encrypting (blinding), false otherwise.
             @param param         the necessary RSA key parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindingEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindingEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaBlindingEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the RSA blinding algorithm.
            
             @param in    the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @throws DataLengthException the input block is too large.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RsaCoreEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaCoreEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaCoreEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaCoreEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.RsaEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.Salsa20Engine">
            <summary>
            Implementation of Daniel J. Bernstein's Salsa20 stream cipher, Snuffle 2005
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Engines.Salsa20Engine.StateSize">
            Constants 
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Salsa20Engine.#ctor">
            <summary>
            Creates a 20 round Salsa20 engine.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Salsa20Engine.#ctor(System.Int32)">
            <summary>
            Creates a Salsa20 engine with a specific number of rounds.
            </summary>
            <param name="rounds">the number of rounds (must be an even number).</param>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.Salsa20Engine.R(System.UInt32,System.Int32)">
             Rotate left
            
             @param   x   value to rotate
             @param   y   amount to rotate x
            
             @return  rotated x
        </member>
        <member name="T:Spire.Security.Crypto.Engines.SeedEngine">
            Implementation of the SEED algorithm as described in RFC 4009
        </member>
        <member name="T:Spire.Security.Crypto.Engines.SeedWrapEngine">
            <remarks>
            An implementation of the SEED key wrapper based on RFC 4010/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc4010.txt">http://www.ietf.org/rfc/rfc4010.txt</a>.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.SerpentEngine">
                 * Serpent is a 128-bit 32-round block cipher with variable key lengths,
                 * including 128, 192 and 256 bit keys conjectured to be at least as
                 * secure as three-key triple-DES.
                 * <p>
                 * Serpent was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
                 * candidate algorithm for the NIST AES Quest.
            	 * </p>
                 * <p>
                 * For full details see <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            	 * </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a Serpent cipher.
            
             @param encrypting whether or not we are for encryption.
             @param params     the parameters required to set up the cipher.
             @throws IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in     the array containing the input data.
             @param inOff  offset into the in array the data starts at.
             @param out    the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @return the number of bytes processed and produced.
             @throws DataLengthException if there isn't enough data in in, or
             space in out.
             @throws IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib0(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvSO - {13, 3,11, 0,10, 6, 5,12, 1,14, 4, 7,15, 9, 8, 2 } - 15 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb1(System.Int32,System.Int32,System.Int32,System.Int32)">
            S1 - {15,12, 2, 7, 9, 0, 5,10, 1,11,14, 8, 6,13, 3, 4 } - 14 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib1(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS1 - { 5, 8, 2,14,15, 6,12, 3,11, 4, 7, 9, 1,13,10, 0 } - 14 steps.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb2(System.Int32,System.Int32,System.Int32,System.Int32)">
            S2 - { 8, 6, 7, 9, 3,12,10,15,13, 1,14, 4, 0,11, 5, 2 } - 16 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib2(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS2 - {12, 9,15, 4,11,14, 1, 2, 0, 3, 6,13, 5, 8,10, 7 } - 16 steps.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb3(System.Int32,System.Int32,System.Int32,System.Int32)">
            S3 - { 0,15,11, 8,12, 9, 6, 3,13, 1, 2, 4,10, 7, 5,14 } - 16 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib3(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS3 - { 0, 9,10, 7,11,14, 6,13, 3, 5,12, 2, 4, 8,15, 1 } - 15 terms
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb4(System.Int32,System.Int32,System.Int32,System.Int32)">
            S4 - { 1,15, 8, 3,12, 0,11, 6, 2, 5, 4,10, 9,14, 7,13 } - 15 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib4(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS4 - { 5, 0, 8, 3,10, 9, 7,14, 2,12,11, 6, 4,15,13, 1 } - 15 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb5(System.Int32,System.Int32,System.Int32,System.Int32)">
            S5 - {15, 5, 2,11, 4,10, 9,12, 0, 3,14, 8,13, 6, 7, 1 } - 16 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib5(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS5 - { 8,15, 2, 9, 4, 1,13,14,11, 6, 5, 3, 7,12,10, 0 } - 16 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb6(System.Int32,System.Int32,System.Int32,System.Int32)">
            S6 - { 7, 2,12, 5, 8, 4, 6,11,14, 9, 1,15,13, 3,10, 0 } - 15 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib6(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS6 - {15,10, 1,13, 5, 3, 6, 0, 4, 9,14, 7, 2,12, 8,11 } - 15 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Sb7(System.Int32,System.Int32,System.Int32,System.Int32)">
            S7 - { 1,13,15, 0,14, 8, 2,11, 7, 4,12,10, 9, 3, 5, 6 } - 16 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.Ib7(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS7 - { 3, 0, 6,13, 9,14,15, 8, 5,12,11, 7,10, 1, 4, 2 } - 17 terms.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.LT">
            Apply the linear transformation to the register set.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SerpentEngineBase.InverseLT">
            Apply the inverse of the linear transformation to the register set.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.SkipjackEngine">
            a class that provides a basic SKIPJACK engine.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SkipjackEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a SKIPJACK cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SkipjackEngine.G(System.Int32,System.Int32)">
            The G permutation
        </member>
        <member name="M:Spire.Security.Crypto.Engines.SkipjackEngine.H(System.Int32,System.Int32)">
            the inverse of the G permutation.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.SM2Engine">
            <summary>
            SM2 public key encryption engine - based on https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.TeaEngine">
            An TEA engine.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TeaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TeaEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TeaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:Spire.Security.Crypto.Engines.ThreefishEngine">
            <summary>
            Implementation of the Threefish tweakable large block cipher in 256, 512 and 1024 bit block
            sizes.
            </summary>
            <remarks>
            This is the 1.3 version of Threefish defined in the Skein hash function submission to the NIST
            SHA-3 competition in October 2010.
            <p/>
            Threefish was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p/>
            This implementation inlines all round functions, unrolls 8 rounds, and uses 1.2k of static tables
            to speed up key schedule injection. <br/>
            2 x block size state is retained by each cipher instance.
            </remarks>
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256">
            <summary>
            256 bit block size - Threefish-256
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512">
            <summary>
            512 bit block size - Threefish-512
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024">
            <summary>
            1024 bit block size - Threefish-1024
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.TWEAK_SIZE_BYTES">
            Size of the tweak in bytes (always 128 bit/16 bytes)
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.ROUNDS_256">
            Rounds in Threefish-256
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.ROUNDS_512">
            Rounds in Threefish-512
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.ROUNDS_1024">
            Rounds in Threefish-1024
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.MAX_ROUNDS">
            Max rounds of any of the variants
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.C_240">
            Key schedule parity constant
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.blocksizeBytes">
            Block size in bytes
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.blocksizeWords">
            Block size in 64 bit words
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.currentBlock">
            Buffer for byte oriented processBytes to call internal word API
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.t">
            Tweak bytes (2 byte t1,t2, calculated t3 and repeat of t1,t2 for modulo free lookup
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.kw">
            Key schedule words
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.cipher">
            The internal cipher implementation (varies by blocksize)
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.#ctor(System.Int32)">
            <summary>
            Constructs a new Threefish cipher, with a specified block size.
            </summary>
            <param name="blocksizeBits">the block size in bits, one of <see cref="F:Spire.Security.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256"/>, <see cref="F:Spire.Security.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512"/>,
                                 <see cref="F:Spire.Security.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024"/> .</param>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>
            Initialise the engine.
            </summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">an instance of <see cref="T:Spire.Security.Crypto.Parameters.TweakableBlockCipherParameters"/> or <see cref="T:Spire.Security.Crypto.Parameters.KeyParameter"/> (to
                          use a 0 tweak)</param>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.Init(System.Boolean,System.UInt64[],System.UInt64[])">
            <summary>
            Initialise the engine, specifying the key and tweak directly.
            </summary>
            <param name="forEncryption">the cipher mode.</param>
            <param name="key">the words of the key, or <code>null</code> to use the current key.</param>
            <param name="tweak">the 2 word (128 bit) tweak, or <code>null</code> to use the current tweak.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.ProcessBlock(System.UInt64[],System.UInt64[])">
            <summary>
            Process a block of data represented as 64 bit words.
            </summary>
            <returns>the number of 8 byte words processed (which will be the same as the block size).</returns>
            <param name="inWords">a block sized buffer of words to process.</param>
            <param name="outWords">a block sized buffer of words to receive the output of the operation.</param>
            <exception cref="T:Spire.Security.Crypto.DataLengthException">if either the input or output is not block sized</exception>
            <exception cref="T:System.InvalidOperationException">if this engine is not initialised</exception>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.BytesToWord(System.Byte[],System.Int32)">
            <summary>
            Read a single 64 bit word from input in LSB first order.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.WordToBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Write a 64 bit word to output in LSB first order.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.RotlXor(System.UInt64,System.Int32,System.UInt64)">
            Rotate left + xor part of the mix operation.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.ThreefishEngine.XorRotr(System.UInt64,System.Int32,System.UInt64)">
            Rotate xor + rotate right part of the unmix operation.
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.ThreefishCipher.t">
            The extended + repeated tweak words
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.ThreefishCipher.kw">
            The extended + repeated key words
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish256Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish256Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_2">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_3">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_2">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:Spire.Security.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_3">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="T:Spire.Security.Crypto.Engines.TnepresEngine">
            Tnepres is a 128-bit 32-round block cipher with variable key lengths,
            including 128, 192 and 256 bit keys conjectured to be at least as
            secure as three-key triple-DES.
            <p>
            Tnepres is based on Serpent which was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
            candidate algorithm for the NIST AES Quest. Unfortunately there was an endianness issue
            with test vectors in the AES submission and the resulting confusion lead to the Tnepres cipher
            as well, which is a byte swapped version of Serpent.
            </p>
            <p>
            For full details see <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TnepresEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TnepresEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TnepresEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.TwofishEngine">
             A class that provides Twofish encryption operations.
            
             This Java implementation is based on the Java reference
             implementation provided by Bruce Schneier and developed
             by Raif S. Naffah.
        </member>
        <member name="F:Spire.Security.Crypto.Engines.TwofishEngine.P_00">
            Define the fixed p0/p1 permutations used in keyed S-box lookup.
            By changing the following constant definitions, the S-boxes will
            automatically Get changed in the Twofish engine.
        </member>
        <member name="F:Spire.Security.Crypto.Engines.TwofishEngine.gSubKeys">
            gSubKeys[] and gSBox[] are eventually used in the
            encryption and decryption methods.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TwofishEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise a Twofish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TwofishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
             The input will be an exact multiple of our blocksize.
            
             encryptBlock uses the pre-calculated gSBox[] and subKey[]
             arrays.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TwofishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TwofishEngine.RS_MDS_Encode(System.Int32,System.Int32)">
             Use (12, 8) Reed-Solomon code over GF(256) to produce
             a key S-box 32-bit entity from 2 key material 32-bit
             entities.
            
             @param    k0 first 32-bit entity
             @param    k1 second 32-bit entity
             @return     Remainder polynomial Generated using RS code
        </member>
        <member name="M:Spire.Security.Crypto.Engines.TwofishEngine.RS_rem(System.Int32)">
                    * Reed-Solomon code parameters: (12,8) reversible code:
            		* <p>
                    * <pre>
                    * G(x) = x^4 + (a+1/a)x^3 + ax^2 + (a+1/a)x + 1
                    * </pre>
                    * where a = primitive root of field generator 0x14D
            		* </p>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.VmpcEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            initialise a VMPC cipher.
            
            @param forEncryption
               whether or not we are for encryption.
            @param params
               the parameters required to set up the cipher.
            @exception ArgumentException
               if the params argument is inappropriate.
        </member>
        <member name="T:Spire.Security.Crypto.Engines.XSalsa20Engine">
            <summary>
            Implementation of Daniel J. Bernstein's XSalsa20 stream cipher - Salsa20 with an extended nonce.
            </summary>
            <remarks>
            XSalsa20 requires a 256 bit key, and a 192 bit nonce.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Engines.XSalsa20Engine.SetKey(System.Byte[],System.Byte[])">
            <summary>
            XSalsa20 key generation: process 256 bit input key and 128 bits of the input nonce
            using a core Salsa20 function without input addition to produce 256 bit working key
            and use that with the remaining 64 bits of nonce to initialize a standard Salsa20 engine state.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Engines.XteaEngine">
            An XTEA engine.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.XteaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:Spire.Security.Crypto.Engines.XteaEngine.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Engines.XteaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:Spire.Security.Crypto.Generators.BaseKdfBytesGenerator">
            Basic KDF generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on ISO 18033/P1363a.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.BaseKdfBytesGenerator.#ctor(System.Int32,Spire.Security.Crypto.IDigest)">
             Construct a KDF Parameters generator.
            
             @param counterStart value of counter.
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="P:Spire.Security.Crypto.Generators.BaseKdfBytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.BaseKdfBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws ArgumentException if the size of the request will cause an overflow.
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.BCrypt">
            Core of password hashing scheme Bcrypt,
            designed by Niels Provos and David Mazières,
            corresponds to the C reference implementation.
            <p>
            This implementation does not correspondent to the 1999 published paper
            "A Future-Adaptable Password Scheme" of Niels Provos and David Mazières,
            see: https://www.usenix.org/legacy/events/usenix99/provos/provos_html/node1.html.
            In contrast to the paper, the order of key setup and salt setup is reversed:
            state &lt;- ExpandKey(state, 0, key)
            state %lt;- ExpandKey(state, 0, salt)
            This corresponds to the OpenBSD reference implementation of Bcrypt. 
            </p><p>
            Note: 
            There is no successful cryptanalysis (status 2015), but
            the amount of memory and the band width of Bcrypt
            may be insufficient to effectively prevent attacks 
            with custom hardware like FPGAs, ASICs
            </p><p>
            This implementation uses some parts of Bouncy Castle's BlowfishEngine.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.BCrypt.DeriveRawKey(System.Int32,System.Byte[],System.Byte[])">
             Derives a raw 192 bit Bcrypt key
            
             @param cost the cost factor, treated as an exponent of 2
             @param salt a 16 byte salt
             @param psw  the password
             @return a 192 bit key
        </member>
        <member name="F:Spire.Security.Crypto.Generators.BCrypt.SALT_SIZE_BYTES">
            Size of the salt parameter in bytes
        </member>
        <member name="F:Spire.Security.Crypto.Generators.BCrypt.MIN_COST">
            Minimum value of cost parameter, equal to log2(bytes of salt)
        </member>
        <member name="F:Spire.Security.Crypto.Generators.BCrypt.MAX_COST">
            Maximum value of cost parameter (31 == 2,147,483,648)
        </member>
        <member name="F:Spire.Security.Crypto.Generators.BCrypt.MAX_PASSWORD_BYTES">
            Maximum size of password == max (unrestricted) size of Blowfish key
        </member>
        <member name="M:Spire.Security.Crypto.Generators.BCrypt.Generate(System.Byte[],System.Byte[],System.Int32)">
            Calculates the <b>bcrypt</b> hash of a password.
            <p>
            This implements the raw <b>bcrypt</b> function as defined in the bcrypt specification, not
            the crypt encoded version implemented in OpenBSD.
            </p>
            @param password the password bytes (up to 72 bytes) to use for this invocation.
            @param salt     the 128 bit salt to use for this invocation.
            @param cost     the bcrypt cost parameter. The cost of the bcrypt function grows as
                            <code>2^cost</code>. Legal values are 4..31 inclusive.
            @return the output of the raw bcrypt operation: a 192 bit (24 byte) hash.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DesEdeKeyGenerator.engineInit(Spire.Security.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key Generated will be 192 bits in size, otherwise
             strength can be 128 or 192 (or 112 or 168 if you don't count
             parity bits), depending on whether you wish to do 2-key or 3-key
             triple DES.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DesKeyGenerator.engineInit(Spire.Security.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key generated will be 64 bits in size, otherwise
             strength can be 64 or 56 bits (if you don't count the parity bits).
            
             @param param the parameters to be used for key generation
        </member>
        <member name="T:Spire.Security.Crypto.Generators.DHBasicKeyPairGenerator">
             a basic Diffie-Hellman key pair generator.
            
             This generates keys consistent for use with the basic algorithm for
             Diffie-Hellman.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.DHKeyPairGenerator">
             a Diffie-Hellman key pair generator.
            
             This generates keys consistent for use in the MTI/A0 key agreement protocol
             as described in "Handbook of Applied Cryptography", Pages 516-519.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DHParametersGenerator.GenerateParameters">
            which Generates the p and g values from the given parameters,
            returning the DHParameters object.
            <p>
            Note: can take a while...</p>
        </member>
        <member name="T:Spire.Security.Crypto.Generators.DsaKeyPairGenerator">
             a DSA key pair generator.
            
             This Generates DSA keys in line with the method described
             in <i>FIPS 186-3 B.1 FFC Key Pair Generation</i>.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.DsaParametersGenerator">
            Generate suitable parameters for DSA, in line with FIPS 186-2, or FIPS 186-3.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DsaParametersGenerator.Init(System.Int32,System.Int32,Spire.Security.Security.SecureRandom)">
            <summary>Initialise the generator</summary>
            <remarks>This form can only be used for older DSA (pre-DSA2) parameters</remarks>
            <param name="size">the size of keys in bits (from 512 up to 1024, and a multiple of 64)</param>
            <param name="certainty">measure of robustness of primes (at least 80 for FIPS 186-2 compliance)</param>
            <param name="random">the source of randomness to use</param>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DsaParametersGenerator.Init(Spire.Security.Crypto.Parameters.DsaParameterGenerationParameters)">
            <summary>Initialise the generator for DSA 2</summary>
            <remarks>You must use this Init method if you need to generate parameters for DSA 2 keys</remarks>
            <param name="parameters">An instance of <c>DsaParameterGenerationParameters</c> used to configure this generator</param>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DsaParametersGenerator.GenerateParameters">
            <summary>Generates a set of <c>DsaParameters</c></summary>
            <remarks>Can take a while...</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.DsaParametersGenerator.GenerateParameters_FIPS186_3">
            generate suitable parameters for DSA, in line with
            <i>FIPS 186-3 A.1 Generation of the FFC Primes p and q</i>.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.ECKeyPairGenerator.GenerateKeyPair">
            Given the domain parameters this routine generates an EC key
            pair in accordance with X9.62 section 5.2.1 pages 26, 27.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.ElGamalKeyPairGenerator">
            a ElGamal key pair generator.
            <p>
            This Generates keys consistent for use with ElGamal as described in
            page 164 of "Handbook of Applied Cryptography".</p>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.ElGamalParametersGenerator.GenerateParameters">
                     * which Generates the p and g values from the given parameters,
                     * returning the ElGamalParameters object.
                     * <p>
                     * Note: can take a while...
            		 * </p>
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Gost3410KeyPairGenerator">
            a GOST3410 key pair generator.
            This generates GOST3410 keys in line with the method described
            in GOST R 34.10-94.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Gost3410ParametersGenerator">
            generate suitable parameters for GOST3410.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Gost3410ParametersGenerator.Init(System.Int32,System.Int32,Spire.Security.Security.SecureRandom)">
             initialise the key generator.
            
             @param size size of the key
             @param typeProcedure type procedure A,B = 1;  A',B' - else
             @param random random byte source.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Gost3410ParametersGenerator.procedure_C(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Procedure C
            procedure generates the a value from the given p,q,
            returning the a value.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Gost3410ParametersGenerator.GenerateParameters">
            which generates the p , q and a values from the given parameters,
            returning the Gost3410Parameters object.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.HkdfBytesGenerator">
            HMAC-based Extract-and-Expand Key Derivation Function (HKDF) implemented
            according to IETF RFC 5869, May 2010 as specified by H. Krawczyk, IBM
            Research &amp; P. Eronen, Nokia. It uses a HMac internally to compute de OKM
            (output keying material) and is likely to have better security properties
            than KDF's based on just a hash function.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.HkdfBytesGenerator.#ctor(Spire.Security.Crypto.IDigest)">
             Creates a HKDFBytesGenerator based on the given hash function.
            
             @param hash the digest to be used as the source of generatedBytes bytes
        </member>
        <member name="M:Spire.Security.Crypto.Generators.HkdfBytesGenerator.Extract(System.Byte[],System.Byte[])">
             Performs the extract part of the key derivation function.
            
             @param salt the salt to use
             @param ikm  the input keying material
             @return the PRK as KeyParameter
        </member>
        <member name="M:Spire.Security.Crypto.Generators.HkdfBytesGenerator.ExpandNext">
             Performs the expand part of the key derivation function, using currentT
             as input and output buffer.
            
             @throws DataLengthException if the total number of bytes generated is larger than the one
             specified by RFC 5869 (255 * HashLen)
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Kdf1BytesGenerator">
            KFD2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Kdf1BytesGenerator.#ctor(Spire.Security.Crypto.IDigest)">
             Construct a KDF1 byte generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Kdf2BytesGenerator">
            KDF2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Kdf2BytesGenerator.#ctor(Spire.Security.Crypto.IDigest)">
             Construct a KDF2 bytes generator. Generates key material
             according to IEEE P1363 or ISO 18033 depending on the initialisation.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Mgf1BytesGenerator">
            Generator for MGF1 as defined in Pkcs 1v2
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Mgf1BytesGenerator.#ctor(Spire.Security.Crypto.IDigest)">
            @param digest the digest to be used as the source of Generated bytes
        </member>
        <member name="P:Spire.Security.Crypto.Generators.Mgf1BytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Mgf1BytesGenerator.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Mgf1BytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes Generated from
             the derivation function.
            
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.NaccacheSternKeyPairGenerator">
             Key generation parameters for NaccacheStern cipher. For details on this cipher, please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:Spire.Security.Crypto.Generators.NaccacheSternKeyPairGenerator.permuteList(System.Collections.IList,Spire.Security.Security.SecureRandom)">
             Generates a permuted ArrayList from the original one. The original List
             is not modified
            
             @param arr
                        the ArrayList to be permuted
             @param rand
                        the source of Randomness for permutation
             @return a new IList with the permuted elements.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.NaccacheSternKeyPairGenerator.findFirstPrimes(System.Int32)">
             Finds the first 'count' primes starting with 3
            
             @param count
                        the number of primes to find
             @return a vector containing the found primes as Integer
        </member>
        <member name="T:Spire.Security.Crypto.Generators.OpenBsdBCrypt">
            Password hashing scheme BCrypt,
            designed by Niels Provos and David Mazières, using the
            String format and the Base64 encoding
            of the reference implementation on OpenBSD
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenBsdBCrypt.CreateBcryptString(System.Byte[],System.Byte[],System.Int32)">
             Creates a 60 character Bcrypt String, including
             version, cost factor, salt and hash, separated by '$'
            
             @param cost     the cost factor, treated as an exponent of 2
             @param salt     a 16 byte salt
             @param password the password
             @return a 60 character Bcrypt String
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenBsdBCrypt.Generate(System.Char[],System.Byte[],System.Int32)">
             Creates a 60 character Bcrypt String, including
             version, cost factor, salt and hash, separated by '$'
            
             @param cost     the cost factor, treated as an exponent of 2
             @param salt     a 16 byte salt
             @param password the password
             @return a 60 character Bcrypt String
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenBsdBCrypt.CheckPassword(System.String,System.Char[])">
             Checks if a password corresponds to a 60 character Bcrypt String
            
             @param bcryptString a 60 character Bcrypt String, including
                                 version, cost factor, salt and hash,
                                 separated by '$'
             @param password     the password as an array of chars
             @return true if the password corresponds to the
             Bcrypt String, otherwise false
        </member>
        <member name="T:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator">
            Generator for PBE derived keys and ivs as usd by OpenSSL.
            <p>
            The scheme is a simple extension of PKCS 5 V2.0 Scheme 1 using MD5 with an
            iteration count of 1.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor">
            Construct a OpenSSL Parameters generator. 
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.Byte[],System.Byte[])">
            Initialise - note the iteration count for this algorithm is fixed at 1.
            
            @param password password to use.
            @param salt salt to use.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedKey(System.Int32)">
            the derived key function, the ith hash of the password and the salt.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 12 V1.0.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-12/index.html">
            RSA's Pkcs12 Page</a>
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator.#ctor(Spire.Security.Crypto.IDigest)">
             Construct a Pkcs 12 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
             @exception ArgumentException if an unknown digest is passed in.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator.Adjust(System.Byte[],System.Int32,System.Byte[])">
            add a + b + 1, returning the result in a. The a value is treated
            as a BigInteger of length (b.Length * 8) bits. The result is
            modulo 2^b.Length in case of overflow.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedKey(System.Int32,System.Int32)">
            generation of a derived key ala Pkcs12 V1.0.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Pkcs5S1ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 1.
            Note this generator is limited to the size of the hash produced by the
            digest used to drive it.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a>
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S1ParametersGenerator.#ctor(Spire.Security.Crypto.IDigest)">
             Construct a Pkcs 5 Scheme 1 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedKey">
            the derived key function, the ith hash of the mPassword and the mSalt.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the mPassword, mSalt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the mPassword, mSalt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the mPassword,
             mSalt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Pkcs5S2ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 2.
            This generator uses a SHA-1 HMac as the calculation function.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a></p>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S2ParametersGenerator.#ctor">
            construct a Pkcs5 Scheme 2 Parameters generator.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:Spire.Security.Crypto.Generators.Poly1305KeyGenerator">
            <summary>
            Generates keys for the Poly1305 MAC.
            </summary>
            <remarks>
            Poly1305 keys are 256 bit keys consisting of a 128 bit secret key used for the underlying block
            cipher followed by a 128 bit {@code r} value used for the polynomial portion of the Mac. <br/>
            The {@code r} value has a specific format with some bits required to be cleared, resulting in an
            effective 106 bit key. <br/>
            A separately generated 256 bit key can be modified to fit the Poly1305 key format by using the
            {@link #clamp(byte[])} method to clear the required bits.
            </remarks>
            <seealso cref="T:Spire.Security.Crypto.Macs.Poly1305"/>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Poly1305KeyGenerator.engineInit(Spire.Security.Crypto.KeyGenerationParameters)">
            <summary>
            Initialises the key generator.
            </summary>
            <remarks>
            Poly1305 keys are always 256 bits, so the key length in the provided parameters is ignored.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Poly1305KeyGenerator.engineGenerateKey">
            <summary>
            Generates a 256 bit key in the format required for Poly1305 - e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:Spire.Security.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])">
            <summary>
            Modifies an existing 32 byte key value to comply with the requirements of the Poly1305 key by
            clearing required bits in the <code>r</code> (second 16 bytes) portion of the key.<br/>
            Specifically:
            <ul>
            <li>r[3], r[7], r[11], r[15] have top four bits clear (i.e., are {0, 1, . . . , 15})</li>
            <li>r[4], r[8], r[12] have bottom two bits clear (i.e., are in {0, 4, 8, . . . , 252})</li>
            </ul>
            </summary>
            <param name="key">a 32 byte key value <code>k[0] ... k[15], r[0] ... r[15]</code></param>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.Poly1305KeyGenerator.CheckKey(System.Byte[])">
            <summary>
            Checks a 32 byte key for compliance with the Poly1305 key requirements, e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:Spire.Security.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])"/>.
            </summary>
            <param name="key">Key.</param>
            <exception cref="T:System.ArgumentException">if the key is of the wrong length, or has invalid bits set
                      in the <code>r</code> portion of the key.</exception>
        </member>
        <member name="T:Spire.Security.Crypto.Generators.RsaBlindingFactorGenerator">
            Generate a random factor suitable for use with RSA blind signatures
            as outlined in Chaum's blinding and unblinding as outlined in
            "Handbook of Applied Cryptography", page 475.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.RsaBlindingFactorGenerator.Init(Spire.Security.Crypto.ICipherParameters)">
             Initialise the factor generator
            
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.RsaBlindingFactorGenerator.GenerateBlindingFactor">
             Generate a suitable blind factor for the public key the generator was initialised with.
            
             @return a random blind factor
        </member>
        <member name="T:Spire.Security.Crypto.Generators.RsaKeyPairGenerator">
            an RSA key pair generator.
        </member>
        <member name="M:Spire.Security.Crypto.Generators.RsaKeyPairGenerator.ChooseRandomPrime(System.Int32,Spire.Security.Math.BigInteger)">
            <summary>Choose a random prime value for use with RSA</summary>
            <param name="bitlength">the bit-length of the returned prime</param>
            <param name="e">the RSA public exponent</param>
            <returns>a prime p, with (p-1) relatively prime to e</returns>
        </member>
        <member name="T:Spire.Security.Crypto.Generators.SCrypt">
            <summary>Implementation of the scrypt a password-based key derivation function.</summary>
            <remarks>
            Scrypt was created by Colin Percival and is specified in
            <a href="http://tools.ietf.org/html/draft-josefsson-scrypt-kdf-01">draft-josefsson-scrypt-kd</a>.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Generators.SCrypt.Generate(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Generate a key using the scrypt key derivation function.</summary>
            <param name="P">the bytes of the pass phrase.</param>
            <param name="S">the salt to use for this invocation.</param>
            <param name="N">CPU/Memory cost parameter. Must be larger than 1, a power of 2 and less than
                <code>2^(128 * r / 8)</code>.</param>
            <param name="r">the block size, must be >= 1.</param>
            <param name="p">Parallelization parameter. Must be a positive integer less than or equal to
                <code>Int32.MaxValue / (128 * r * 8)</code>.</param>
            <param name="dkLen">the length of the key to generate.</param>
            <returns>the generated key.</returns>
        </member>
        <member name="T:Spire.Security.Crypto.IAsymmetricBlockCipher">
            <remarks>Base interface for a public/private key block cipher.</remarks>
        </member>
        <member name="P:Spire.Security.Crypto.IAsymmetricBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.IAsymmetricBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Spire.Security.Crypto.IAsymmetricBlockCipher.GetInputBlockSize">
            <returns>The maximum size, in bytes, an input block may be.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IAsymmetricBlockCipher.GetOutputBlockSize">
            <returns>The maximum size, in bytes, an output block will be.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IAsymmetricBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="inLen">The length of the input block.</param>
            <exception cref="T:Spire.Security.Crypto.InvalidCipherTextException">Input decrypts improperly.</exception>
            <exception cref="T:Spire.Security.Crypto.DataLengthException">Input is too large for the cipher.</exception>
        </member>
        <member name="T:Spire.Security.Crypto.IAsymmetricCipherKeyPairGenerator">
            interface that a public/private key pair generator should conform to.
        </member>
        <member name="M:Spire.Security.Crypto.IAsymmetricCipherKeyPairGenerator.Init(Spire.Security.Crypto.KeyGenerationParameters)">
             intialise the key pair generator.
            
             @param the parameters the key pair is to be initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.IAsymmetricCipherKeyPairGenerator.GenerateKeyPair">
             return an AsymmetricCipherKeyPair containing the Generated keys.
            
             @return an AsymmetricCipherKeyPair containing the Generated keys.
        </member>
        <member name="T:Spire.Security.Crypto.IBasicAgreement">
            The basic interface that basic Diffie-Hellman implementations
            conforms to.
        </member>
        <member name="M:Spire.Security.Crypto.IBasicAgreement.Init(Spire.Security.Crypto.ICipherParameters)">
            initialise the agreement engine.
        </member>
        <member name="M:Spire.Security.Crypto.IBasicAgreement.GetFieldSize">
            return the field size for the agreement algorithm in bytes.
        </member>
        <member name="M:Spire.Security.Crypto.IBasicAgreement.CalculateAgreement(Spire.Security.Crypto.ICipherParameters)">
            given a public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:Spire.Security.Crypto.IBlockCipher">
            <remarks>Base interface for a symmetric key block cipher.</remarks>
        </member>
        <member name="P:Spire.Security.Crypto.IBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.IBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Spire.Security.Crypto.IBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="P:Spire.Security.Crypto.IBlockCipher.IsPartialBlockOkay">
            <summary>Indicates whether this cipher can handle partial blocks.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="outBuf">The output buffer.</param>
            <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
            <exception cref="T:Spire.Security.Crypto.DataLengthException">If input block is wrong size, or outBuf too small.</exception>
            <returns>The number of bytes processed and produced.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.IBlockResult">
            <summary>
            Operators that reduce their input to a single block return an object
            of this type.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.IBlockResult.Collect">
            <summary>
            Return the final result of the operation.
            </summary>
            <returns>A block of bytes, representing the result of an operation.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IBlockResult.Collect(System.Byte[],System.Int32)">
            <summary>
            Store the final result of the operation by copying it into the destination array.
            </summary>
            <returns>The number of bytes copied into destination.</returns>
            <param name="destination">The byte array to copy the result into.</param>
            <param name="offset">The offset into destination to start copying the result at.</param>
        </member>
        <member name="T:Spire.Security.Crypto.IBufferedCipher">
            <remarks>Block cipher engines are expected to conform to this interface.</remarks>
        </member>
        <member name="P:Spire.Security.Crypto.IBufferedCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.IBufferedCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
        </member>
        <member name="M:Spire.Security.Crypto.IBufferedCipher.Reset">
            <summary>
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.ICipherParameters">
            all parameter classes implement this.
        </member>
        <member name="T:Spire.Security.Crypto.IDerivationFunction">
            base interface for general purpose byte derivation functions.
        </member>
        <member name="P:Spire.Security.Crypto.IDerivationFunction.Digest">
            return the message digest used as the basis for the function
        </member>
        <member name="T:Spire.Security.Crypto.IDerivationParameters">
            Parameters for key/byte stream derivation classes
        </member>
        <member name="T:Spire.Security.Crypto.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="P:Spire.Security.Crypto.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Spire.Security.Crypto.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Spire.Security.Crypto.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:Spire.Security.Crypto.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:Spire.Security.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:Spire.Security.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Spire.Security.Crypto.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="T:Spire.Security.Crypto.IDsa">
            interface for classes implementing the Digital Signature Algorithm
        </member>
        <member name="M:Spire.Security.Crypto.IDsa.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the signer for signature generation or signature
             verification.
            
             @param forSigning true if we are generating a signature, false
             otherwise.
             @param param key parameters for signature generation.
        </member>
        <member name="M:Spire.Security.Crypto.IDsa.GenerateSignature(System.Byte[])">
             sign the passed in message (usually the output of a hash function).
            
             @param message the message to be signed.
             @return two big integers representing the r and s values respectively.
        </member>
        <member name="M:Spire.Security.Crypto.IDsa.VerifySignature(System.Byte[],Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
             verify the message message against the signature values r and s.
            
             @param message the message that was supposed to have been signed.
             @param r the r signature value.
             @param s the s signature value.
        </member>
        <member name="T:Spire.Security.Crypto.IEntropySource">
            <summary>
            Base interface describing an entropy source for a DRBG.
            </summary>
        </member>
        <member name="P:Spire.Security.Crypto.IEntropySource.IsPredictionResistant">
            <summary>
            Return whether or not this entropy source is regarded as prediction resistant.
            </summary>
            <value><c>true</c> if this instance is prediction resistant; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spire.Security.Crypto.IEntropySource.GetEntropy">
            <summary>
            Return a byte array of entropy.
            </summary>
            <returns>The entropy bytes.</returns>
        </member>
        <member name="P:Spire.Security.Crypto.IEntropySource.EntropySize">
            <summary>
            Return the number of bits of entropy this source can produce.
            </summary>
            <value>The size, in bits, of the return value of getEntropy.</value>
        </member>
        <member name="T:Spire.Security.Crypto.IEntropySourceProvider">
            <summary>
            Base interface describing a provider of entropy sources.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.IEntropySourceProvider.Get(System.Int32)">
            <summary>
            Return an entropy source providing a block of entropy.
            </summary>
            <param name="bitsRequired">The size of the block of entropy required.</param>
            <returns>An entropy source providing bitsRequired blocks of entropy.</returns>
        </member>
        <member name="T:Spire.Security.Crypto.IMac">
            The base interface for implementations of message authentication codes (MACs).
        </member>
        <member name="M:Spire.Security.Crypto.IMac.Init(Spire.Security.Crypto.ICipherParameters)">
             Initialise the MAC.
            
             @param param the key and other data required by the MAC.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.IMac.AlgorithmName">
             Return the name of the algorithm the MAC implements.
            
             @return the name of the algorithm the MAC implements.
        </member>
        <member name="M:Spire.Security.Crypto.IMac.GetMacSize">
             Return the block size for this MAC (in bytes).
            
             @return the block size for this MAC in bytes.
        </member>
        <member name="M:Spire.Security.Crypto.IMac.Update(System.Byte)">
             add a single byte to the mac for processing.
            
             @param in the byte to be processed.
             @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:Spire.Security.Crypto.IMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @param in the array containing the input.
            @param inOff the index in the array the data begins at.
            @param len the length of the input starting at inOff.
            @exception InvalidOperationException if the MAC is not initialised.
            @exception DataLengthException if there isn't enough data in in.
        </member>
        <member name="M:Spire.Security.Crypto.IMac.DoFinal(System.Byte[],System.Int32)">
            Compute the final stage of the MAC writing the output to the out
            parameter.
            <p>
            doFinal leaves the MAC in the same state it was after the last init.
            </p>
            @param out the array the MAC is to be output to.
            @param outOff the offset into the out buffer the output is to start at.
            @exception DataLengthException if there isn't enough space in out.
            @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:Spire.Security.Crypto.IMac.Reset">
            Reset the MAC. At the end of resetting the MAC should be in the
            in the same state it was after the last init (if there was one).
        </member>
        <member name="T:Spire.Security.Crypto.InvalidCipherTextException">
            this exception is thrown whenever we find something we don't expect in a
            message.
        </member>
        <member name="M:Spire.Security.Crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:Spire.Security.Crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Spire.Security.Crypto.ISignatureFactory">
            <summary>
            Base interface for operators that serve as stream-based signature calculators.
            </summary>
        </member>
        <member name="P:Spire.Security.Crypto.ISignatureFactory.AlgorithmDetails">
            <summary>The algorithm details object for this calculator.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.ISignatureFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this signature calculator. The stream
            calculator is used for the actual operation of entering the data to be signed
            and producing the signature block.
            </summary>
            <returns>A calculator producing an IBlockResult with a signature in it.</returns>
        </member>
        <member name="P:Spire.Security.Crypto.ISigner.AlgorithmName">
             Return the name of the algorithm the signer implements.
            
             @return the name of the algorithm the signer implements.
        </member>
        <member name="M:Spire.Security.Crypto.ISigner.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:Spire.Security.Crypto.ISigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Spire.Security.Crypto.ISigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Spire.Security.Crypto.ISigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.ISigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:Spire.Security.Crypto.ISigner.Reset">
            reset the internal state
        </member>
        <member name="T:Spire.Security.Crypto.ISignerWithRecovery">
            Signer with message recovery.
        </member>
        <member name="M:Spire.Security.Crypto.ISignerWithRecovery.HasFullMessage">
             Returns true if the signer has recovered the full message as
             part of signature verification.
            
             @return true if full message recovered.
        </member>
        <member name="M:Spire.Security.Crypto.ISignerWithRecovery.GetRecoveredMessage">
             Returns a reference to what message was recovered (if any).
            
             @return full/partial message, null if nothing.
        </member>
        <member name="M:Spire.Security.Crypto.ISignerWithRecovery.UpdateWithRecoveredMessage(System.Byte[])">
             Perform an update with the recovered message before adding any other data. This must
             be the first update method called, and calling it will result in the signer assuming
             that further calls to update will include message content past what is recoverable.
            
             @param signature the signature that we are in the process of verifying.
             @throws IllegalStateException
        </member>
        <member name="T:Spire.Security.Crypto.IStreamCalculator">
            <summary>
            Base interface for cryptographic operations such as Hashes, MACs, and Signatures which reduce a stream of data
            to a single value.
            </summary>
        </member>
        <member name="P:Spire.Security.Crypto.IStreamCalculator.Stream">
            <summary>Return a "sink" stream which only exists to update the implementing object.</summary>
            <returns>A stream to write to in order to update the implementing object.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IStreamCalculator.GetResult">
            <summary>
            Return the result of processing the stream. This value is only available once the stream
            has been closed.
            </summary>
            <returns>The result of processing the stream.</returns>
        </member>
        <member name="T:Spire.Security.Crypto.IStreamCipher">
            <summary>The interface stream ciphers conform to.</summary>
        </member>
        <member name="P:Spire.Security.Crypto.IStreamCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.IStreamCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
            <exception cref="T:System.ArgumentException">
            If the parameters argument is inappropriate.
            </exception>
        </member>
        <member name="M:Spire.Security.Crypto.IStreamCipher.ReturnByte(System.Byte)">
            <summary>encrypt/decrypt a single byte returning the result.</summary>
            <param name="input">the byte to be processed.</param>
            <returns>the result of processing the input byte.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process a block of bytes from <c>input</c> putting the result into <c>output</c>.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inOff">
            The offset into <c>input</c> where the data to be processed starts.
            </param>
            <param name="length">The number of bytes to be processed.</param>
            <param name="output">The output buffer the processed bytes go into.</param>
            <param name="outOff">
            The offset into <c>output</c> the processed data starts at.
            </param>
            <exception cref="T:Spire.Security.Crypto.DataLengthException">If the output buffer is too small.</exception>
        </member>
        <member name="M:Spire.Security.Crypto.IStreamCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.IVerifier">
            <summary>
            Operators that reduce their input to the validation of a signature produce this type.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.IVerifier.IsVerified(System.Byte[])">
            <summary>
            Return true if the passed in data matches what is expected by the verification result.
            </summary>
            <param name="data">The bytes representing the signature.</param>
            <returns>true if the signature verifies, false otherwise.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IVerifier.IsVerified(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Return true if the length bytes from off in the source array match the signature
            expected by the verification result.
            </summary>
            <param name="source">Byte array containing the signature.</param>
            <param name="off">The offset into the source array where the signature starts.</param>
            <param name="length">The number of bytes in source making up the signature.</param>
            <returns>true if the signature verifies, false otherwise.</returns>
        </member>
        <member name="T:Spire.Security.Crypto.IVerifierFactory">
            <summary>
            Base interface for operators that serve as stream-based signature verifiers.
            </summary>
        </member>
        <member name="P:Spire.Security.Crypto.IVerifierFactory.AlgorithmDetails">
            <summary>The algorithm details object for this verifier.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.IVerifierFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this verifier. The stream
            calculator is used for the actual operation of entering the data to be verified
            and producing a result which can be used to verify the original signature.
            </summary>
            <returns>A calculator producing an IVerifier which can verify the signature.</returns>
        </member>
        <member name="T:Spire.Security.Crypto.IVerifierFactoryProvider">
            <summary>
            Base interface for a provider to support the dynamic creation of signature verifiers.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.IVerifierFactoryProvider.CreateVerifierFactory(System.Object)">
            <summary>
            Return a signature verfier for signature algorithm described in the passed in algorithm details object.
            </summary>
            <param name="algorithmDetails">The details of the signature algorithm verification is required for.</param>
            <returns>A new signature verifier.</returns>
        </member>
        <member name="P:Spire.Security.Crypto.IWrapper.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.IXof">
            <remarks>
            With FIPS PUB 202 a new kind of message digest was announced which supported extendable output, or variable digest sizes.
            This interface provides the extra method required to support variable output on a digest implementation.
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.IXof.DoFinal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Output the results of the final calculation for this digest to outLen number of bytes.
            </summary>
            <param name="output">output array to write the output bytes to.</param>
            <param name="outOff">offset to start writing the bytes at.</param>
            <param name="outLen">the number of output bytes requested.</param>
            <returns>the number of bytes written</returns>
        </member>
        <member name="M:Spire.Security.Crypto.IXof.DoOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Start outputting the results of the final calculation for this digest. Unlike DoFinal, this method
            will continue producing output until the Xof is explicitly reset, or signals otherwise.
            </summary>
            <param name="output">output array to write the output bytes to.</param>
            <param name="outOff">offset to start writing the bytes at.</param>
            <param name="outLen">the number of output bytes requested.</param>
            <returns>the number of bytes written</returns>
        </member>
        <member name="T:Spire.Security.Crypto.KeyGenerationParameters">
            The base class for parameters to key generators.
        </member>
        <member name="M:Spire.Security.Crypto.KeyGenerationParameters.#ctor(Spire.Security.Security.SecureRandom,System.Int32)">
             initialise the generator with a source of randomness
             and a strength (in bits).
            
             @param random the random byte source.
             @param strength the size, in bits, of the keys we want to produce.
        </member>
        <member name="P:Spire.Security.Crypto.KeyGenerationParameters.Random">
             return the random source associated with this
             generator.
            
             @return the generators random source.
        </member>
        <member name="P:Spire.Security.Crypto.KeyGenerationParameters.Strength">
             return the bit strength for keys produced by this generator,
            
             @return the strength of the keys this generator produces (in bits).
        </member>
        <member name="T:Spire.Security.Crypto.Macs.CbcBlockCipherMac">
            standard CBC Block Cipher MAC - if no padding is specified the default of
            pad of zeroes is used.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CbcBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CbcBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CbcBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CbcBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CbcBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Spire.Security.Crypto.Macs.MacCFBBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.MacCFBBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:Spire.Security.Crypto.Macs.MacCFBBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.Macs.MacCFBBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.MacCFBBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Spire.Security.Crypto.Macs.MacCFBBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.MacCFBBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CfbBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CfbBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CfbBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CfbBlockCipherMac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32,System.Int32,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding a padding to be used.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CfbBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Spire.Security.Crypto.Macs.CMac">
            CMAC - as specified at www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html
            <p>
            CMAC is analogous to OMAC1 - see also en.wikipedia.org/wiki/CMAC
            </p><p>
            CMAC is a NIST recomendation - see 
            csrc.nist.gov/CryptoToolkit/modes/800-38_Series_Publications/SP800-38B.pdf
            </p><p>
            CMAC/OMAC1 is a blockcipher-based message authentication code designed and
            analyzed by Tetsu Iwata and Kaoru Kurosawa.
            </p><p>
            CMAC/OMAC1 is a simple variant of the CBC MAC (Cipher Block Chaining Message 
            Authentication Code). OMAC stands for One-Key CBC MAC.
            </p><p>
            It supports 128- or 64-bits block ciphers, with any key size, and returns
            a MAC with dimension less or equal to the block size of the underlying 
            cipher.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CMac.#ctor(Spire.Security.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher (64 or 128 bit block).
             This will produce an authentication code the length of the block size
             of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CMac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
             create a standard MAC based on a block cipher with the size of the
             MAC been given in bits.
             <p/>
             Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
             or 16 bits if being used as a data authenticator (FIPS Publication 113),
             and in general should be less than the size of the block cipher as it reduces
             the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            
             @param cipher        the cipher to be used as the basis of the MAC generation.
             @param macSizeInBits the size of the MAC in bits, must be a multiple of 8 and @lt;= 128.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.CMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Spire.Security.Crypto.Macs.Dstu7564Mac">
            <summary>
            Implementation of DSTU7564 mac mode
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Macs.Dstu7624Mac">
            implementation of DSTU 7624 MAC
        </member>
        <member name="T:Spire.Security.Crypto.Macs.GMac">
            <summary>
            The GMAC specialisation of Galois/Counter mode (GCM) detailed in NIST Special Publication
            800-38D.
            </summary>
            <remarks>
            GMac is an invocation of the GCM mode where no data is encrypted (i.e. all input data to the Mac
            is processed as additional authenticated data with the underlying GCM block cipher).
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.GMac.#ctor(Spire.Security.Crypto.Modes.GcmBlockCipher)">
            <summary>
            Creates a GMAC based on the operation of a block cipher in GCM mode.
            </summary>
            <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
            <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.GMac.#ctor(Spire.Security.Crypto.Modes.GcmBlockCipher,System.Int32)">
            <summary>
            Creates a GMAC based on the operation of a 128 bit block cipher in GCM mode.
            </summary>
            <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
            <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
            <param name="macSizeBits">the mac size to generate, in bits. Must be a multiple of 8, between 32 and 128 (inclusive).
            Sizes less than 96 are not recommended, but are supported for specialized applications.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.GMac.Init(Spire.Security.Crypto.ICipherParameters)">
            <summary>
            Initialises the GMAC - requires a <see cref="T:Spire.Security.Crypto.Parameters.ParametersWithIV"/> 
            providing a <see cref="T:Spire.Security.Crypto.Parameters.KeyParameter"/> and a nonce.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Macs.Gost28147Mac">
            implementation of GOST 28147-89 MAC
        </member>
        <member name="T:Spire.Security.Crypto.Macs.HMac">
             HMAC implementation based on RFC2104
            
             H(K XOR opad, H(K XOR ipad, text))
        </member>
        <member name="M:Spire.Security.Crypto.Macs.HMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Spire.Security.Crypto.Macs.ISO9797Alg3Mac">
             DES based CBC Block Cipher MAC according to ISO9797, algorithm 3 (ANSI X9.19 Retail MAC)
            
             This could as well be derived from CBCBlockCipherMac, but then the property mac in the base
             class must be changed to protected
        </member>
        <member name="M:Spire.Security.Crypto.Macs.ISO9797Alg3Mac.#ctor(Spire.Security.Crypto.IBlockCipher)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation. This must
             be DESEngine.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.ISO9797Alg3Mac.#ctor(Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.ISO9797Alg3Mac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
            create a Retail-MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.ISO9797Alg3Mac.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation. The final block is decrypted and then encrypted using the
            middle and right part of the key.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.ISO9797Alg3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Spire.Security.Crypto.Macs.Poly1305">
            <summary>
            Poly1305 message authentication code, designed by D. J. Bernstein.
            </summary>
            <remarks>
            Poly1305 computes a 128-bit (16 bytes) authenticator, using a 128 bit nonce and a 256 bit key
            consisting of a 128 bit key applied to an underlying cipher, and a 128 bit key (with 106
            effective key bits) used in the authenticator.
            
            The polynomial calculation in this implementation is adapted from the public domain <a
            href="https://github.com/floodyberry/poly1305-donna">poly1305-donna-unrolled</a> C implementation
            by Andrew M (@floodyberry).
            </remarks>
            <seealso cref="T:Spire.Security.Crypto.Generators.Poly1305KeyGenerator"/>
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.r0">
            Polynomial key 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.r1">
            Polynomial key 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.r2">
            Polynomial key 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.r3">
            Polynomial key 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.r4">
            Polynomial key 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.s1">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.s2">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.s3">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.s4">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.k0">
            Encrypted nonce 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.k1">
            Encrypted nonce 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.k2">
            Encrypted nonce 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.k3">
            Encrypted nonce 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.currentBlock">
            Current block of buffered input 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.currentBlockOffset">
            Current offset in input buffer 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.h0">
            Polynomial accumulator 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.h1">
            Polynomial accumulator 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.h2">
            Polynomial accumulator 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.h3">
            Polynomial accumulator 
        </member>
        <member name="F:Spire.Security.Crypto.Macs.Poly1305.h4">
            Polynomial accumulator 
        </member>
        <member name="M:Spire.Security.Crypto.Macs.Poly1305.#ctor">
            Constructs a Poly1305 MAC, where the key passed to init() will be used directly.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.Poly1305.#ctor(Spire.Security.Crypto.IBlockCipher)">
            Constructs a Poly1305 MAC, using a 128 bit block cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Macs.Poly1305.Init(Spire.Security.Crypto.ICipherParameters)">
            <summary>
            Initialises the Poly1305 MAC.
            </summary>
            <param name="parameters">a {@link ParametersWithIV} containing a 128 bit nonce and a {@link KeyParameter} with
                     a 256 bit key complying to the {@link Poly1305KeyGenerator Poly1305 key format}.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Macs.SipHash">
            <summary>
            Implementation of SipHash as specified in "SipHash: a fast short-input PRF", by Jean-Philippe
            Aumasson and Daniel J. Bernstein (https://131002.net/siphash/siphash.pdf).
            </summary>
            <remarks>
            "SipHash is a family of PRFs SipHash-c-d where the integer parameters c and d are the number of
            compression rounds and the number of finalization rounds. A compression round is identical to a
            finalization round and this round function is called SipRound. Given a 128-bit key k and a
            (possibly empty) byte string m, SipHash-c-d returns a 64-bit value..."
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.SipHash.#ctor">
            <summary>SipHash-2-4</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.SipHash.#ctor(System.Int32,System.Int32)">
            <summary>SipHash-c-d</summary>
            <param name="c">the number of compression rounds</param>
            <param name="d">the number of finalization rounds</param>
        </member>
        <member name="T:Spire.Security.Crypto.Macs.SkeinMac">
            <summary>
            Implementation of the Skein parameterised MAC function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:Spire.Security.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
            <seealso cref="T:Spire.Security.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:Spire.Security.Crypto.Macs.SkeinMac.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Macs.SkeinMac.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Macs.SkeinMac.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.SkeinMac.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein MAC with an internal state size and output size.
            </summary>
            <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:Spire.Security.Crypto.Macs.SkeinMac.SKEIN_256"/> <see cref="F:Spire.Security.Crypto.Macs.SkeinMac.SKEIN_512"/> or
                                  <see cref="F:Spire.Security.Crypto.Macs.SkeinMac.SKEIN_1024"/>.</param>
            <param name="digestSizeBits">the output/MAC size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Macs.SkeinMac.Init(Spire.Security.Crypto.ICipherParameters)">
            <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
            See <see cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"></see> for details on the parameterisation of the Skein hash function.
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="T:Spire.Security.Crypto.MaxBytesExceededException">
            <summary>
            This exception is thrown whenever a cipher requires a change of key, iv
            or similar after x amount of bytes enciphered
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Modes.CbcBlockCipher">
            implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of chaining.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.Modes.CbcBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CBC".
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.GetBlockSize">
             return the block size of the underlying cipher.
            
             @return the block size of the underlying cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CbcBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the decrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.CcmBlockCipher">
            Implements the Counter with Cipher Block Chaining mode (CCM) detailed in
            NIST Special Publication 800-38C.
            <p>
            <b>Note</b>: this mode is a packet mode - it needs all the data up front.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CcmBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CcmBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CcmBlockCipher.GetMac">
             Returns a byte array containing the mac calculated as part of the
             last encrypt or decrypt operation.
            
             @return the last mac calculated.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32)">
             Process a packet of data for either CCM decryption or encryption.
            
             @param in data for processing.
             @param inOff offset at which data starts in the input array.
             @param inLen length of the data in the input array.
             @return a byte array containing the processed input..
             @throws IllegalStateException if the cipher is not appropriately set up.
             @throws InvalidCipherTextException if the input data is truncated or the mac check fails.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a packet of data for either CCM decryption or encryption.
            
             @param in data for processing.
             @param inOff offset at which data starts in the input array.
             @param inLen length of the data in the input array.
             @param output output array.
             @param outOff offset into output array to start putting processed bytes.
             @return the number of bytes added to output.
             @throws IllegalStateException if the cipher is not appropriately set up.
             @throws InvalidCipherTextException if the input data is truncated or the mac check fails.
             @throws DataLengthException if output buffer too short.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.CfbBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.Modes.CfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.CtsBlockCipher">
            A Cipher Text Stealing (CTS) mode cipher. CTS allows block ciphers to
            be used to produce cipher text which is the same outLength as the plain text.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CtsBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Create a buffered block cipher that uses Cipher Text Stealing
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CtsBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update of 'length' bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update
             with length bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CtsBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of length bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update and doFinal
             with length bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CtsBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CtsBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param length the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.CtsBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if cipher text decrypts wrongly (in
             case the exception will never Get thrown).
        </member>
        <member name="T:Spire.Security.Crypto.Modes.EaxBlockCipher">
            A Two-Pass Authenticated-Encryption Scheme Optimized for Simplicity and 
            Efficiency - by M. Bellare, P. Rogaway, D. Wagner.
            
            http://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf
            
            EAX is an AEAD scheme based on CTR and OMAC1/CMAC, that uses a single block 
            cipher to encrypt and authenticate data. It's on-line (the length of a 
            message isn't needed to begin processing it), has good performances, it's
            simple and provably secure (provided the underlying block cipher is secure).
            
            Of course, this implementations is NOT thread-safe.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.EaxBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Constructor that accepts an instance of a block cipher engine.
            
             @param cipher the engine to use
        </member>
        <member name="T:Spire.Security.Crypto.Modes.GcmBlockCipher">
            <summary>
            Implements the Galois/Counter mode (GCM) detailed in
            NIST Special Publication 800-38D.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GcmBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <remarks>
            MAC sizes from 32 bits to 128 bits (must be a multiple of 8) are supported. The default is 128 bits.
            Sizes less than 96 are not recommended, but are supported for specialized applications.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Modes.GOfbBlockCipher">
            implements the GOST 28147 OFB counter mode (GCTR).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GOfbBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             counter mode (must have a 64 bit block size).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GOfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GOfbBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param encrypting if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.Modes.GOfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/GCTR"
             and the block size in bits
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GOfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GOfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.GOfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.IAeadBlockCipher">
            <summary>
            A block cipher mode that includes authenticated encryption with a streaming mode
            and optional associated data.</summary>
            <see cref="T:Spire.Security.Crypto.Parameters.AeadParameters"/>
        </member>
        <member name="P:Spire.Security.Crypto.Modes.IAeadBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.GetUnderlyingCipher">
            <summary>The block cipher underlying this algorithm.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <remarks>Parameter can either be an AeadParameters or a ParametersWithIV object.</remarks>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.ProcessAadByte(System.Byte)">
            <summary>Add a single byte to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="input">The byte to be processed.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Add a sequence of bytes to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="inBytes">The input byte array.</param>
            <param name="inOff">The offset into the input array where the data to be processed starts.</param>
            <param name="len">The number of bytes to be processed.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             Encrypt/decrypt a single byte.
            
             @param input the byte to be processed.
             @param outBytes the output buffer the processed byte goes into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a block of bytes from in putting the result into out.
            
             @param inBytes the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param outBytes the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Finish the operation either appending or verifying the MAC at the end of the data.
            
             @param outBytes space for any resulting output data.
             @param outOff offset into out to start copying the data at.
             @return number of bytes written into out.
             @throws InvalidOperationException if the cipher is in an inappropriate state.
             @throws InvalidCipherTextException if the MAC fails to match.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.GetMac">
             Return the value of the MAC associated with the last stream processed.
            
             @return MAC for plaintext data.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.GetOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes plus a
             DoFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes and DoFinal
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.IAeadBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCcmBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
            <summary>
            Base constructor. Nb value is set to 4.
            </summary>
            <param name="engine">base cipher to use under CCM.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCcmBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
            <summary>
            Constructor allowing Nb configuration.
            
            Nb is a parameter specified in CCM mode of DSTU7624 standard.
            This parameter specifies maximum possible length of input.It should
            be calculated as follows: Nb = 1 / 8 * (-3 + log[2]Nmax) + 1,
            where Nmax - length of input message in bits.For practical reasons
            Nmax usually less than 4Gb, e.g. for Nmax = 2^32 - 1, Nb = 4.
            </summary>
            <param name="engine">base cipher to use under CCM.</param>
            <param name="Nb">Nb value to use.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Modes.KCtrBlockCipher">
            Implements a Gamming or Counter (CTR) mode on top of a DSTU 7624 block cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCtrBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCtrBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCtrBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.Modes.KCtrBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/KCTR"
             and the block size in bits.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCtrBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCtrBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.KCtrBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.OcbBlockCipher">
            An implementation of <a href="http://tools.ietf.org/html/rfc7253">RFC 7253 on The OCB
            Authenticated-Encryption Algorithm</a>, licensed per:
            
            <blockquote><p><a href="http://www.cs.ucdavis.edu/~rogaway/ocb/license1.pdf">License for
            Open-Source Software Implementations of OCB</a> (Jan 9, 2013) - 'License 1'<br/>
            Under this license, you are authorized to make, use, and distribute open-source software
            implementations of OCB. This license terminates for you if you sue someone over their open-source
            software implementation of OCB claiming that you have a patent covering their implementation.
            </p><p>
            This is a non-binding summary of a legal document (the link above). The parameters of the license
            are specified in the license document and that document is controlling.</p></blockquote>
        </member>
        <member name="T:Spire.Security.Crypto.Modes.OfbBlockCipher">
            implements a Output-FeedBack (OFB) mode on top of a simple cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OfbBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OfbBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Spire.Security.Crypto.Modes.OfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/OFB"
             and the block size in bits
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher">
                * Implements OpenPGP's rather strange version of Cipher-FeedBack (CFB) mode
                * on top of a simple cipher. This class assumes the IV has been prepended
                * to the data stream already, and just accomodates the reset after
                * (blockSize + 2) bytes have been read.
                * <p>
                * For further info see <a href="http://www.ietf.org/rfc/rfc2440.html">RFC 2440</a>.
            	* </p>
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="P:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/PGPCFB"
             and the block size in bits.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptByte(System.Byte,System.Int32)">
            Encrypt one byte of data according to CFB mode.
            @param data the byte to encrypt
            @param blockOff offset in the current block
            @returns the encrypted byte
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.OpenPgpCfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="T:Spire.Security.Crypto.Modes.SicBlockCipher">
            Implements the Segmented Integer Counter (SIC) mode on top of a simple
            block cipher.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.SicBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param c the block cipher to be used.
        </member>
        <member name="M:Spire.Security.Crypto.Modes.SicBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.Operators.X509Utilities.GetDigestAlgName(Spire.Security.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:Spire.Security.Crypto.Operators.Asn1SignatureFactory">
            <summary>
            Calculator factory class for signature generation in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="privateKey">The private key to be used in the signing operation.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Security.SecureRandom)">
            <summary>
            Constructor which also specifies a source of randomness to be used if one is required.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="privateKey">The private key to be used in the signing operation.</param>
            <param name="random">The source of randomness to be used in signature calculation.</param>
        </member>
        <member name="P:Spire.Security.Crypto.Operators.Asn1SignatureFactory.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Operators.Asn1VerifierFactory">
            <summary>
            Verifier class for signature verification in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Operators.Asn1VerifierFactory.#ctor(System.String,Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="publicKey">The public key to be used in the verification operation.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Operators.Asn1VerifierFactoryProvider">
            <summary>
            Provider class which supports dynamic creation of signature verifiers.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Operators.Asn1VerifierFactoryProvider.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor - specify the public key to be used in verification.
            </summary>
            <param name="publicKey">The public key to be used in creating verifiers provided by this object.</param>
        </member>
        <member name="P:Spire.Security.Crypto.Operators.Asn1VerifierFactoryProvider.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.IBlockCipherPadding">
            Block cipher padders are expected to conform to this interface
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.IBlockCipherPadding.Init(Spire.Security.Security.SecureRandom)">
             Initialise the padder.
            
             @param param parameters, if any required.
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.IBlockCipherPadding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.IBlockCipherPadding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.IBlockCipherPadding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
            @exception InvalidCipherTextException if the padding is badly formed
            or invalid.
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.ISO10126d2Padding">
            A padder that adds ISO10126-2 padding to a block.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ISO10126d2Padding.Init(Spire.Security.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if available.
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.ISO10126d2Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ISO10126d2Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ISO10126d2Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.ISO7816d4Padding">
            A padder that adds the padding according to the scheme referenced in
            ISO 7814-4 - scheme 2 from ISO 9797-1. The first byte is 0x80, rest is 0x00
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ISO7816d4Padding.Init(Spire.Security.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.ISO7816d4Padding.PaddingName">
             Return the name of the algorithm the padder implements.
            
             @return the name of the algorithm the padder implements.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ISO7816d4Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ISO7816d4Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion with padding. The PaddedBufferedBlockCipher
            outputs a block only when the buffer is full and more data is being added,
            or on a doFinal (unless the current block in the buffer is a pad block).
            The default padding mechanism used is the one outlined in Pkcs5/Pkcs7.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.Paddings.IBlockCipherPadding)">
             Create a buffered block cipher with the desired padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padding the padding type.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             Create a buffered block cipher Pkcs7 padding
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.GetOutputSize(System.Int32)">
             return the minimum size of the output buffer required for an update
             plus a doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.PaddedBufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer. If the buffer is currently
             full and padding needs to be added a call to doFinal will produce
             2 * GetBlockSize() bytes.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output or we are decrypting and the input is not block size aligned.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.Pkcs7Padding">
            A padder that adds Pkcs7/Pkcs5 padding to a block.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.Pkcs7Padding.Init(Spire.Security.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.Pkcs7Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.Pkcs7Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.Pkcs7Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.TbcPadding">
            <summary> A padder that adds Trailing-Bit-Compliment padding to a block.
            <p>
            This padding pads the block out compliment of the last bit
            of the plain text.
            </p>
            </summary>
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.TbcPadding.PaddingName">
            <summary> Return the name of the algorithm the cipher implements.</summary>
            <returns> the name of the algorithm the cipher implements.
            </returns>
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.TbcPadding.Init(Spire.Security.Security.SecureRandom)">
            <summary> Initialise the padder.</summary>
            <param name="random">- a SecureRandom if available.
            </param>
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.TbcPadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            <p>
            Note: this assumes that the last block of plain text is always
            passed to it inside in. i.e. if inOff is zero, indicating the
            entire block is to be overwritten with padding the value of in
            should be the same as the last block of plain text.
            </p>
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.TbcPadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.X923Padding">
            A padder that adds X9.23 padding to a block - if a SecureRandom is
            passed in random padding is assumed, otherwise padding with zeros is used.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.X923Padding.Init(Spire.Security.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if one is available.
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.X923Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.X923Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.X923Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:Spire.Security.Crypto.Paddings.ZeroBytePadding">
            <summary> A padder that adds Null byte padding to a block.</summary>
        </member>
        <member name="P:Spire.Security.Crypto.Paddings.ZeroBytePadding.PaddingName">
             <summary> Return the name of the algorithm the cipher implements.
            
             </summary>
             <returns> the name of the algorithm the cipher implements.
             </returns>
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ZeroBytePadding.Init(Spire.Security.Security.SecureRandom)">
             <summary> Initialise the padder.
            
             </summary>
             <param name="random">- a SecureRandom if available.
             </param>
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ZeroBytePadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Paddings.ZeroBytePadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.AeadParameters.#ctor(Spire.Security.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.AeadParameters.#ctor(Spire.Security.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
             @param associatedText associated text, if any
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.CcmParameters.#ctor(Spire.Security.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
            Base constructor.
            
            @param key key to be used by underlying cipher
            @param macSize macSize in bits
            @param nonce nonce to be used
            @param associatedText associated text, if any
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32,System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
             @param length number of bytes making up the key
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesEdeParameters.IsRealEdeKey(System.Byte[],System.Int32)">
             return true if the passed in key is a real 2/3 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesEdeParameters.IsReal2Key(System.Byte[],System.Int32)">
             return true if the passed in key is a real 2 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesEdeParameters.IsReal3Key(System.Byte[],System.Int32)">
             return true if the passed in key is a real 3 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesParameters.IsWeakKey(System.Byte[],System.Int32)">
            DES has 16 weak keys.  This method will check
            if the given DES key material is weak or semi-weak.
            Key material that is too short is regarded as weak.
            <p>
            See <a href="http://www.counterpane.com/applied.html">"Applied
            Cryptography"</a> by Bruce Schneier for more information.
            </p>
            @return true if the given DES key material is weak or semi-weak,
                false otherwise.
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DesParameters.SetOddParity(System.Byte[])">
             DES Keys use the LSB as the odd parity bit.  This can
             be used to check for corrupt keys.
            
             @param bytes the byte array to set the parity on.
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.DHParameters.M">
            <summary>The minimum bitlength of the private value.</summary>
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.DHParameters.L">
            <summary>The bitlength of the private value.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,Spire.Security.Security.SecureRandom)">
             Construct without a usage index, this will do a random construction of G.
            
             @param L desired length of prime P in bits (the effective key size).
             @param N desired length of prime Q in bits.
             @param certainty certainty level for prime number generation.
             @param random the source of randomness to use.
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,Spire.Security.Security.SecureRandom,System.Int32)">
             Construct for a specific usage index - this has the effect of using verifiable canonical generation of G.
            
             @param L desired length of prime P in bits (the effective key size).
             @param N desired length of prime Q in bits.
             @param certainty certainty level for prime number generation.
             @param random the source of randomness to use.
             @param usageIndex a valid usage index.
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.ElGamalParameters.G">
            return the generator - g
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.ElGamalParameters.L">
            return private value limit - l
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.HkdfParameters">
            Parameter class for the HkdfBytesGenerator class.
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.HkdfParameters.#ctor(System.Byte[],System.Byte[],System.Byte[])">
             Generates parameters for HKDF, specifying both the optional salt and
             optional info. Step 1: Extract won't be skipped.
            
             @param ikm  the input keying material or seed
             @param salt the salt to use, may be null for a salt for hashLen zeros
             @param info the info to use, may be null for an info field of zero bytes
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.HkdfParameters.SkipExtractParameters(System.Byte[],System.Byte[])">
             Factory method that makes the HKDF skip the extract part of the key
             derivation function.
            
             @param ikm  the input keying material or seed, directly used for step 2:
                         Expand
             @param info the info to use, may be null for an info field of zero bytes
             @return HKDFParameters that makes the implementation skip step 1
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.HkdfParameters.GetIkm">
             Returns the input keying material or seed.
            
             @return the keying material
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.HkdfParameters.SkipExtract">
             Returns if step 1: extract has to be skipped or not
            
             @return true for skipping, false for no skipping of step 1
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.HkdfParameters.GetSalt">
             Returns the salt, or null if the salt should be generated as a byte array
             of HashLen zeros.
            
             @return the salt, or null
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.HkdfParameters.GetInfo">
             Returns the info field, which may be empty (null is converted to empty).
            
             @return the info field, never null
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.IesParameters">
            parameters for using an integrated cipher in stream mode.
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.IesParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.IesWithCipherParameters.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
            @param cipherKeySize the size of the associated Cipher key (in bits).
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.Iso18033KdfParameters">
            parameters for Key derivation functions for ISO-18033
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.KdfParameters">
            parameters for Key derivation functions for IEEE P1363a
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.MgfParameters">
            <remarks>Parameters for mask derivation functions.</remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.NaccacheSternKeyGenerationParameters">
             Parameters for NaccacheStern public private key generation. For details on
             this cipher, please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(Spire.Security.Security.SecureRandom,System.Int32,System.Int32,System.Int32)">
             Parameters for generating a NaccacheStern KeyPair.
            
             @param random
                        The source of randomness
             @param strength
                        The desired strength of the Key in Bits
             @param certainty
                        the probability that the generated primes are not really prime
                        as integer: 2^(-certainty) is then the probability
             @param countSmallPrimes
                        How many small key factors are desired
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(Spire.Security.Security.SecureRandom,System.Int32,System.Int32,System.Int32,System.Boolean)">
            		 * Parameters for a NaccacheStern KeyPair.
            		 *
            		 * @param random
            		 *            The source of randomness
            		 * @param strength
            		 *            The desired strength of the Key in Bits
            		 * @param certainty
            		 *            the probability that the generated primes are not really prime
            		 *            as integer: 2^(-certainty) is then the probability
            		 * @param cntSmallPrimes
            		 *            How many small key factors are desired
            		 * @param debug
                     *            Ignored
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.NaccacheSternKeyGenerationParameters.Certainty">
            @return Returns the certainty.
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.NaccacheSternKeyGenerationParameters.CountSmallPrimes">
            @return Returns the countSmallPrimes.
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.NaccacheSternKeyParameters">
             Public key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.NaccacheSternKeyParameters.#ctor(System.Boolean,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,System.Int32)">
            @param privateKey
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.NaccacheSternKeyParameters.G">
            @return Returns the g.
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.NaccacheSternKeyParameters.LowerSigmaBound">
            @return Returns the lowerSigmaBound.
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.NaccacheSternKeyParameters.Modulus">
            @return Returns the n.
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.NaccacheSternPrivateKeyParameters">
             Private key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.NaccacheSternPrivateKeyParameters.#ctor(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,System.Int32,System.Collections.IList,Spire.Security.Math.BigInteger)">
             Constructs a NaccacheSternPrivateKey
            
             @param g
                        the public enryption parameter g
             @param n
                        the public modulus n = p*q
             @param lowerSigmaBound
                        the public lower sigma bound up to which data can be encrypted
             @param smallPrimes
                        the small primes, of which sigma is constructed in the right
                        order
             @param phi_n
                        the private modulus phi(n) = (p-1)(q-1)
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.ParametersWithSalt">
            <summary> Cipher parameters with a fixed salt value associated with them.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.SkeinParameters">
            <summary>
            Parameters for the Skein hash function - a series of byte[] strings identified by integer tags.
            </summary>
            <remarks>
            Parameterised Skein can be used for:
            <ul> 
            <li>MAC generation, by providing a <see cref="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">key</see>.</li>
            <li>Randomised hashing, by providing a <see cref="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">nonce</see>.</li>
            <li>A hash function for digital signatures, associating a
            <see cref="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">public key</see> with the message digest.</li>
            <li>A key derivation function, by providing a
            <see cref="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">key identifier</see>.</li>
            <li>Personalised hashing, by providing a
            <see cref="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">recommended format</see> or
            <see cref="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">arbitrary</see> personalisation string.</li>
            </ul>
            </remarks>
            <seealso cref="T:Spire.Security.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:Spire.Security.Crypto.Digests.SkeinDigest"/>
            <seealso cref="T:Spire.Security.Crypto.Macs.SkeinMac"/>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">
            <summary>
            The parameter type for a secret key, supporting MAC or KDF functions: 0
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_CONFIG">
            <summary>
            The parameter type for the Skein configuration block: 4
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">
            <summary>
            The parameter type for a personalisation string: 8
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">
            <summary>
            The parameter type for a public key: 12
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">
            <summary>
            The parameter type for a key identifier string: 16
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">
            <summary>
            The parameter type for a nonce: 20
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_MESSAGE">
            <summary>
            The parameter type for the message: 48
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_OUTPUT">
            <summary>
            The parameter type for the output transformation: 63
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.GetParameters">
            <summary>
            Obtains a map of type (int) to value (byte[]) for the parameters tracked in this object.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.GetKey">
            <summary>
            Obtains the value of the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">key parameter</see>, or <code>null</code> if not
            set.
            </summary>
            <returns>The key.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.GetPersonalisation">
            <summary>
            Obtains the value of the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">personalisation parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.GetPublicKey">
            <summary>
            Obtains the value of the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">public key parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.GetKeyIdentifier">
            <summary>
            Obtains the value of the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">key identifier parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.GetNonce">
            <summary>
            Obtains the value of the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">nonce parameter</see>, or <code>null</code> if
            not set.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.SkeinParameters.Builder">
            <summary>
            A builder for <see cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/>.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.Set(System.Int32,System.Byte[])">
            <summary>
            Sets a parameters to apply to the Skein hash function.
            </summary>
            <remarks>
            Parameter types must be in the range 0,5..62, and cannot use the value 48
            (reserved for message body).
            <p/>
            Parameters with type &lt; 48 are processed before
            the message content, parameters with type &gt; 48
            are processed after the message and prior to output.
            </remarks>
            <param name="type">the type of the parameter, in the range 5..62.</param>
            <param name="value">the byte sequence of the parameter.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">
            <summary>
            Sets the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY"/> parameter.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">
            <summary>
            Sets the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION"/> parameter.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">
            <summary>
            Implements the recommended personalisation format for Skein defined in Section 4.11 of
            the Skein 1.3 specification.
            </summary>
            <remarks>
            The format is <code>YYYYMMDD email@address distinguisher</code>, encoded to a byte
            sequence using UTF-8 encoding.
            </remarks>
            <param name="date">the date the personalised application of the Skein was defined.</param>
            <param name="emailAddress">the email address of the creation of the personalised application.</param>
            <param name="distinguisher">an arbitrary personalisation string distinguishing the application.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">
            <summary>
            Sets the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER"/> parameter.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">
            <summary>
            Sets the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER"/> parameter.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">
            <summary>
            Sets the <see cref="F:Spire.Security.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE"/> parameter.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Parameters.SkeinParameters.Builder.Build">
            <summary>
            Constructs a new <see cref="T:Spire.Security.Crypto.Parameters.SkeinParameters"/> instance with the parameters provided to this
            builder.
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.SM2KeyExchangePrivateParameters">
            <summary>Private parameters for an SM2 key exchange.</summary>
            <remarks>The ephemeralPrivateKey is used to calculate the random point used in the algorithm.</remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.SM2KeyExchangePublicParameters">
            <summary>Public parameters for an SM2 key exchange.</summary>
            <remarks>In this case the ephemeralPublicKey provides the random point used in the algorithm.</remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Parameters.TweakableBlockCipherParameters">
            <summary>
            Parameters for tweakable block ciphers.
            </summary>
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.TweakableBlockCipherParameters.Key">
            <summary>
            Gets the key.
            </summary>
            <value>the key to use, or <code>null</code> to use the current key.</value>
        </member>
        <member name="P:Spire.Security.Crypto.Parameters.TweakableBlockCipherParameters.Tweak">
            <summary>
            Gets the tweak value.
            </summary>
            <value>The tweak to use, or <code>null</code> to use the current tweak.</value>
        </member>
        <member name="T:Spire.Security.Crypto.PbeParametersGenerator">
            super class for all Password Based Encyrption (Pbe) parameter generator classes.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.#ctor">
            base constructor.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.Init(System.Byte[],System.Byte[],System.Int32)">
             initialise the Pbe generator.
            
             @param password the password converted into bytes (see below).
             @param salt the salt to be mixed with the password.
             @param iterationCount the number of iterations the "mixing" function
             is to be applied for.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.GetPassword">
             return the password byte array.
            
             @return the password byte array.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.GetSalt">
             return the salt byte array.
            
             @return the salt byte array.
        </member>
        <member name="P:Spire.Security.Crypto.PbeParametersGenerator.IterationCount">
             return the iteration count.
            
             @return the iteration count.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate derived parameters for a key of length keySize.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate derived parameters for a key of length keySize, and
             an initialisation vector (IV) of length ivSize.
            
             @param keySize the length, in bits, of the key required.
             @param ivSize the length, in bits, of the iv required.
             @return a parameters object representing a key and an IV.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate derived parameters for a key of length keySize, specifically
             for use with a MAC.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.Pkcs5PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs5 (ascii, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             PKCS5 (UTF-8, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:Spire.Security.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs12 (unicode, big endian, 2 zero pad bytes at the end).
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.BasicEntropySourceProvider">
            An EntropySourceProvider where entropy generation is based on a SecureRandom output using SecureRandom.generateSeed().
        </member>
        <member name="M:Spire.Security.Crypto.Prng.BasicEntropySourceProvider.#ctor(Spire.Security.Security.SecureRandom,System.Boolean)">
             Create a entropy source provider based on the passed in SecureRandom.
            
             @param secureRandom the SecureRandom to base EntropySource construction on.
             @param isPredictionResistant boolean indicating if the SecureRandom is based on prediction resistant entropy or not (true if it is).
        </member>
        <member name="M:Spire.Security.Crypto.Prng.BasicEntropySourceProvider.Get(System.Int32)">
             Return an entropy source that will create bitsRequired bits of entropy on
             each invocation of getEntropy().
            
             @param bitsRequired size (in bits) of entropy to be created by the provided source.
             @return an EntropySource that generates bitsRequired bits of entropy on each call to its getEntropy() method.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.CryptoApiRandomGenerator">
            <summary>
            Uses RandomNumberGenerator.Create() to get randomness generator
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Prng.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="T:Spire.Security.Crypto.Prng.Drbg.CtrSP800Drbg">
            A SP800-90A CTR DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.CtrSP800Drbg.#ctor(Spire.Security.Crypto.IBlockCipher,System.Int32,System.Int32,Spire.Security.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A CTR DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param engine underlying block cipher to use to support DRBG
            @param keySizeInBits size of the key to use with the block cipher.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="P:Spire.Security.Crypto.Prng.Drbg.CtrSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each internal round of the DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.CtrSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.CtrSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.CtrSP800Drbg.PadKey(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Pad out a key for TDEA, setting odd parity for each byte.
            
             @param keyMaster
             @param keyOff
             @param tmp
             @param tmpOff
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.DrbgUtilities.HashDF(Spire.Security.Crypto.IDigest,System.Byte[],System.Int32)">
            Used by both Dual EC and Hash.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.Drbg.HashSP800Drbg">
            A SP800-90A Hash DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.HashSP800Drbg.#ctor(Spire.Security.Crypto.IDigest,System.Int32,Spire.Security.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A Hash DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param digest  source digest to use for DRB stream.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="P:Spire.Security.Crypto.Prng.Drbg.HashSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each internal round of the DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.HashSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.HashSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.Drbg.HMacSP800Drbg">
            A SP800-90A HMAC DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.HMacSP800Drbg.#ctor(Spire.Security.Crypto.IMac,System.Int32,Spire.Security.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A Hash DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param hMac Hash MAC to base the DRBG on.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="P:Spire.Security.Crypto.Prng.Drbg.HMacSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each round of the DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.HMacSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.HMacSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.Drbg.ISP80090Drbg">
            Interface to SP800-90A deterministic random bit generators.
        </member>
        <member name="P:Spire.Security.Crypto.Prng.Drbg.ISP80090Drbg.BlockSize">
             Return the block size of the DRBG.
            
             @return the block size (in bits) produced by each round of the DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.ISP80090Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.Drbg.ISP80090Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.EntropyUtilities.GenerateSeed(Spire.Security.Crypto.IEntropySource,System.Int32)">
             Generate numBytes worth of entropy from the passed in entropy source.
            
             @param entropySource the entropy source to request the data from.
             @param numBytes the number of bytes of entropy requested.
             @return a byte array populated with the random data.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.IRandomGenerator">
            <remarks>Generic interface for objects generating random bytes.</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Prng.ReversedWindowGenerator">
            <remarks>
            Takes bytes generated by an underling RandomGenerator and reverses the order in
            each small window (of configurable size).
            <p>
            Access to internals is synchronized so a single one of these can be shared.
            </p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.ReversedWindowGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.ReversedWindowGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.ReversedWindowGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.ReversedWindowGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandom.Reseed(System.Byte[])">
            <summary>Force a reseed of the DRBG.</summary>
            <param name="additionalInput">optional additional input</param>
        </member>
        <member name="T:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder">
            Builder class for making SecureRandom objects based on SP 800-90A Deterministic Random Bit Generators (DRBG).
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.#ctor">
            Basic constructor, creates a builder using an EntropySourceProvider based on the default SecureRandom with
            predictionResistant set to false.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the default SecureRandom does for its generateSeed() call.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.#ctor(Spire.Security.Security.SecureRandom,System.Boolean)">
            Construct a builder with an EntropySourceProvider based on the passed in SecureRandom and the passed in value
            for prediction resistance.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the passed in SecureRandom does for its generateSeed() call.
            </p>
            @param entropySource
            @param predictionResistant
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.#ctor(Spire.Security.Crypto.IEntropySourceProvider)">
            Create a builder which makes creates the SecureRandom objects from a specified entropy source provider.
            <p>
            <b>Note:</b> If this constructor is used any calls to setSeed() in the resulting SecureRandom will be ignored.
            </p>
            @param entropySourceProvider a provider of EntropySource objects.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.SetPersonalizationString(System.Byte[])">
            Set the personalization string for DRBG SecureRandoms created by this builder
            @param personalizationString  the personalisation string for the underlying DRBG.
            @return the current builder.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.SetSecurityStrength(System.Int32)">
             Set the security strength required for DRBGs used in building SecureRandom objects.
            
             @param securityStrength the security strength (in bits)
             @return the current builder.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.SetEntropyBitsRequired(System.Int32)">
             Set the amount of entropy bits required for seeding and reseeding DRBGs used in building SecureRandom objects.
            
             @param entropyBitsRequired the number of bits of entropy to be requested from the entropy source on each seed/reseed.
             @return the current builder.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.BuildHash(Spire.Security.Crypto.IDigest,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A Hash DRBG.
            
             @param digest digest algorithm to use in the DRBG underneath the SecureRandom.
             @param nonce  nonce value to use in DRBG construction.
             @param predictionResistant specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return a SecureRandom supported by a Hash DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.BuildCtr(Spire.Security.Crypto.IBlockCipher,System.Int32,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A CTR DRBG.
            
             @param cipher the block cipher to base the DRBG on.
             @param keySizeInBits key size in bits to be used with the block cipher.
             @param nonce nonce value to use in DRBG construction.
             @param predictionResistant  specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return  a SecureRandom supported by a CTR DRBG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.SP800SecureRandomBuilder.BuildHMac(Spire.Security.Crypto.IMac,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A HMAC DRBG.
            
             @param hMac HMAC algorithm to use in the DRBG underneath the SecureRandom.
             @param nonce  nonce value to use in DRBG construction.
             @param predictionResistant specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return a SecureRandom supported by a HMAC DRBG.
        </member>
        <member name="T:Spire.Security.Crypto.Prng.ThreadedSeedGenerator">
            A thread based seed generator - one source of randomness.
            <p>
            Based on an idea from Marcus Lippert.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.ThreadedSeedGenerator.GenerateSeed(System.Int32,System.Boolean)">
            Generate seed bytes. Set fast to false for best quality.
            <p>
            If fast is set to true, the code should be round about 8 times faster when
            generating a long sequence of random bytes. 20 bytes of random values using
            the fast mode take less than half a second on a Nokia e70. If fast is set to false,
            it takes round about 2500 ms.
            </p>
            @param numBytes the number of bytes to generate
            @param fast true if fast mode should be used
        </member>
        <member name="F:Spire.Security.Crypto.Prng.VmpcRandomGenerator.P">
            <remarks>
            Permutation generated by code:
            <code>
            // First 1850 fractional digit of Pi number. 
            byte[] key = new BigInteger("14159265358979323846...5068006422512520511").ToByteArray();
            s = 0;
            P = new byte[256];
            for (int i = 0; i &lt; 256; i++) 
            {
                P[i] = (byte) i;
            }
            for (int m = 0; m &lt; 768; m++) 
            {
                s = P[(s + P[m &amp; 0xff] + key[m % key.length]) &amp; 0xff];
                byte temp = P[m &amp; 0xff];
                P[m &amp; 0xff] = P[s &amp; 0xff];
                P[s &amp; 0xff] = temp;
            } </code>
            </remarks>
        </member>
        <member name="F:Spire.Security.Crypto.Prng.VmpcRandomGenerator.s">
            <remarks>Value generated in the same way as <c>P</c>.</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931Rng.#ctor(Spire.Security.Crypto.IBlockCipher,System.Byte[],Spire.Security.Crypto.IEntropySource)">
            
             @param engine
             @param entropySource
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931Rng.Generate(System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931Rng.Reseed">
            Reseed the RNG.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931SecureRandomBuilder.#ctor">
            Basic constructor, creates a builder using an EntropySourceProvider based on the default SecureRandom with
            predictionResistant set to false.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the default SecureRandom does for its generateSeed() call.
            </p>
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931SecureRandomBuilder.#ctor(Spire.Security.Security.SecureRandom,System.Boolean)">
            Construct a builder with an EntropySourceProvider based on the passed in SecureRandom and the passed in value
            for prediction resistance.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the passed in SecureRandom does for its generateSeed() call.
            </p>
            @param entropySource
            @param predictionResistant
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931SecureRandomBuilder.#ctor(Spire.Security.Crypto.IEntropySourceProvider)">
            Create a builder which makes creates the SecureRandom objects from a specified entropy source provider.
            <p>
            <b>Note:</b> If this constructor is used any calls to setSeed() in the resulting SecureRandom will be ignored.
            </p>
            @param entropySourceProvider a provider of EntropySource objects.
        </member>
        <member name="M:Spire.Security.Crypto.Prng.X931SecureRandomBuilder.Build(Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.Parameters.KeyParameter,System.Boolean)">
             Construct a X9.31 secure random generator using the passed in engine and key. If predictionResistant is true the
             generator will be reseeded on each request.
            
             @param engine a block cipher to use as the operator.
             @param key the block cipher key to initialise engine with.
             @param predictionResistant true if engine to be reseeded on each use, false otherwise.
             @return a SecureRandom.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaDigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaDigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Signers.DsaSigner">
            The Digital Signature Algorithm - as described in "Handbook of Applied
            Cryptography", pages 452 - 453.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaSigner.#ctor">
            Default configuration, random K values.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaSigner.#ctor(Spire.Security.Crypto.Signers.IDsaKCalculator)">
             Configuration with an alternate, possibly deterministic calculator of K.
            
             @param kCalculator a K value calculator.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.DsaSigner.VerifySignature(System.Byte[],Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message for standard DSA the message should be a
            SHA-1 hash of the real message to be verified.
        </member>
        <member name="T:Spire.Security.Crypto.Signers.ECDsaSigner">
            EC-DSA as described in X9.62
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECDsaSigner.#ctor">
            Default configuration, random K values.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECDsaSigner.#ctor(Spire.Security.Crypto.Signers.IDsaKCalculator)">
             Configuration with an alternate, possibly deterministic calculator of K.
            
             @param kCalculator a K value calculator.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECDsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECDsaSigner.VerifySignature(System.Byte[],Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message (for standard DSA the message should be
            a SHA-1 hash of the real message to be verified).
        </member>
        <member name="T:Spire.Security.Crypto.Signers.ECGost3410Signer">
            GOST R 34.10-2001 Signature Algorithm
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECGost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional GOST3410 the message should be a GOST3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECGost3410Signer.VerifySignature(System.Byte[],Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            return true if the value r and s represent a GOST3410 signature for
            the passed in message (for standard GOST3410 the message should be
            a GOST3411 hash of the real message to be verified).
        </member>
        <member name="T:Spire.Security.Crypto.Signers.ECNRSigner">
            EC-NR as described in IEEE 1363-2000
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECNRSigner.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with.  Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR it *must* be at least as long.
            
             @param digest  the digest to be signed.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:Spire.Security.Crypto.Signers.ECNRSigner.VerifySignature(System.Byte[],Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
             return true if the value r and s represent a signature for the
             message passed in. Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR, it *must* be at least as long.  But just in case the signer
             applied mod(n) to the longer digest, this implementation will
             apply mod(n) during verification.
            
             @param digest  the digest to be verified.
             @param r       the r value of the signature.
             @param s       the s value of the signature.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:Spire.Security.Crypto.Signers.GenericSigner.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the signer for signing or verification.
            
             @param forSigning
                        true if for signing, false otherwise
             @param parameters
                        necessary parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.GenericSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Spire.Security.Crypto.Signers.GenericSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Spire.Security.Crypto.Signers.GenericSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using the key
            we were initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.GenericSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described in
            the passed in array.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410DigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410DigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410DigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410DigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410DigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Signers.Gost3410Signer">
            Gost R 34.10-94 Signature Algorithm
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional Gost3410 the message should be a Gost3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Gost3410Signer.VerifySignature(System.Byte[],Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            return true if the value r and s represent a Gost3410 signature for
            the passed in message for standard Gost3410 the message should be a
            Gost3411 hash of the real message to be verified.
        </member>
        <member name="T:Spire.Security.Crypto.Signers.HMacDsaKCalculator">
            A deterministic K calculator based on the algorithm in section 3.2 of RFC 6979.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.HMacDsaKCalculator.#ctor(Spire.Security.Crypto.IDigest)">
             Base constructor.
            
             @param digest digest to build the HMAC on.
        </member>
        <member name="T:Spire.Security.Crypto.Signers.IDsaKCalculator">
            Interface define calculators of K values for DSA/ECDSA.
        </member>
        <member name="P:Spire.Security.Crypto.Signers.IDsaKCalculator.IsDeterministic">
             Return true if this calculator is deterministic, false otherwise.
            
             @return true if deterministic, otherwise false.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.IDsaKCalculator.Init(Spire.Security.Math.BigInteger,Spire.Security.Security.SecureRandom)">
             Non-deterministic initialiser.
            
             @param n the order of the DSA group.
             @param random a source of randomness.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.IDsaKCalculator.Init(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,System.Byte[])">
             Deterministic initialiser.
            
             @param n the order of the DSA group.
             @param d the DSA private value.
             @param message the message being signed.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.IDsaKCalculator.NextK">
             Return the next valid value of K.
            
             @return a K value.
        </member>
        <member name="T:Spire.Security.Crypto.Signers.Iso9796d2PssSigner">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 2 and 3).
            <p>
            Note: the usual length for the salt is the length of the hash
            function used in bytes.</p>
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:Spire.Security.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest,System.Int32,System.Boolean)">
            <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2, scheme 2 or 3.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="saltLength">length of salt in bytes.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest,System.Int32)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
             <param name="saltLength">length of salt in bytes.
             </param>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
            <summary>Initialise the signer.</summary>
            <param name="forSigning">true if for signing, false if for verification.</param>
            <param name="parameters">parameters for signature generation/verification. If the
            parameters are for generation they should be a ParametersWithRandom,
            a ParametersWithSalt, or just an RsaKeyParameters object. If RsaKeyParameters
            are passed in a SecureRandom will be created.
            </param>
            <exception cref="T:System.ArgumentException">if wrong parameter type or a fixed
            salt is passed in which is the wrong length.
            </exception>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns>true on full message recovery, false otherwise, or if not sure.</returns>
            <seealso cref="M:Spire.Security.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
            <summary> int to octet string.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.LtoOSP(System.Int64,System.Byte[])">
            <summary> long to octet string.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Signers.Iso9796d2Signer">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 1)</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:Spire.Security.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest,System.Boolean)">
            <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.Iso9796d2Signer.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns> true on full message recovery, false otherwise.</returns>
            <seealso cref="M:Spire.Security.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="T:Spire.Security.Crypto.Signers.PssSigner">
            <summary> RSA-PSS as described in Pkcs# 1 v 2.1.
            <p>
            Note: the usual value for the salt length is the number of
            bytes in the hash function.</p>
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest,System.Int32)">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="saltLen">the length of the salt to use (in bytes).</param>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest,System.Byte[])">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="salt">the fixed salt to be used.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.GenerateSignature">
            <summary> Generate a signature for the message we've been loaded with using
            the key we were initialised with.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the internal state represents the signature described
            in the passed in array.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.RsaDigestSigner.#cctor">
            <summary>
            Load oid table.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.RsaDigestSigner.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.RsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Spire.Security.Crypto.Signers.RsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Spire.Security.Crypto.Signers.RsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.RsaDigestSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="T:Spire.Security.Crypto.Signers.SM2Signer">
            <summary>The SM2 Digital Signature algorithm.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Signers.X931Signer">
            X9.31-1998 - signing using a hash.
            <p>
            The message digest hash, H, is encapsulated to form a byte string as follows
            </p>
            <pre>
            EB = 06 || PS || 0xBA || H || TRAILER
            </pre>
            where PS is a string of bytes all of value 0xBB of length such that |EB|=|n|, and TRAILER is the ISO/IEC 10118 part numberâ€  for the digest. The byte string, EB, is converted to an integer value, the message representative, f.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest,System.Boolean)">
             Generate a signer with either implicit or explicit trailers for X9.31.
            
             @param cipher base cipher to use for signature creation/verification
             @param digest digest to use.
             @param implicit whether or not the trailer is implicit or gives the hash.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.#ctor(Spire.Security.Crypto.IAsymmetricBlockCipher,Spire.Security.Crypto.IDigest)">
             Constructor for a signer with an explicit digest trailer.
            
             @param cipher cipher to use.
             @param digest digest to sign with.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.Reset">
            reset the internal state
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.GenerateSignature">
            generate a signature for the loaded message using the key we were
            initialised with.
        </member>
        <member name="M:Spire.Security.Crypto.Signers.X931Signer.VerifySignature(System.Byte[])">
            return true if the signature represents a ISO9796-2 signature
            for the passed in message.
        </member>
        <member name="T:Spire.Security.Crypto.StreamBlockCipher">
            a wrapper for block ciphers with a single byte block size, so that they
            can be treated like stream ciphers.
        </member>
        <member name="M:Spire.Security.Crypto.StreamBlockCipher.#ctor(Spire.Security.Crypto.IBlockCipher)">
             basic constructor.
            
             @param cipher the block cipher to be wrapped.
             @exception ArgumentException if the cipher has a block size other than
             one.
        </member>
        <member name="M:Spire.Security.Crypto.StreamBlockCipher.Init(System.Boolean,Spire.Security.Crypto.ICipherParameters)">
             initialise the underlying cipher.
            
             @param forEncryption true if we are setting up for encryption, false otherwise.
             @param param the necessary parameters for the underlying cipher to be initialised.
        </member>
        <member name="P:Spire.Security.Crypto.StreamBlockCipher.AlgorithmName">
             return the name of the algorithm we are wrapping.
            
             @return the name of the algorithm we are wrapping.
        </member>
        <member name="M:Spire.Security.Crypto.StreamBlockCipher.ReturnByte(System.Byte)">
             encrypt/decrypt a single byte returning the result.
            
             @param in the byte to be processed.
             @return the result of processing the input byte.
        </member>
        <member name="M:Spire.Security.Crypto.StreamBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process a block of bytes from in putting the result into out.
            
             @param in the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param out the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data stars at.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:Spire.Security.Crypto.StreamBlockCipher.Reset">
            reset the underlying cipher. This leaves it in the same state
            it was at after the last init (if there was one).
        </member>
        <member name="M:Spire.Security.Crypto.Tls.AbstractTlsAgreementCredentials.GenerateAgreement(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.AbstractTlsCipherFactory.CreateCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.AbstractTlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.AbstractTlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.AlertDescription">
            <summary>
            RFC 5246 7.2
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.close_notify">
            This message notifies the recipient that the sender will not send any more messages on this
            connection. Note that as of TLS 1.1, failure to properly close a connection no longer
            requires that a session not be resumed. This is a change from TLS 1.0 ("The session becomes
            unresumable if any connection is terminated without proper close_notify messages with level
            equal to warning.") to conform with widespread implementation practice.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.unexpected_message">
            An inappropriate message was received. This alert is always fatal and should never be
            observed in communication between proper implementations.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.bad_record_mac">
            This alert is returned if a record is received with an incorrect MAC. This alert also MUST be
            returned if an alert is sent because a TLSCiphertext decrypted in an invalid way: either it
            wasn't an even multiple of the block length, or its padding values, when checked, weren't
            correct. This message is always fatal and should never be observed in communication between
            proper implementations (except when messages were corrupted in the network).
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.decryption_failed">
            This alert was used in some earlier versions of TLS, and may have permitted certain attacks
            against the CBC mode [CBCATT]. It MUST NOT be sent by compliant implementations.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.record_overflow">
            A TLSCiphertext record was received that had a length more than 2^14+2048 bytes, or a record
            decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always
            fatal and should never be observed in communication between proper implementations (except
            when messages were corrupted in the network).
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.decompression_failure">
            The decompression function received improper input (e.g., data that would expand to excessive
            length). This message is always fatal and should never be observed in communication between
            proper implementations.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.handshake_failure">
            Reception of a handshake_failure alert message indicates that the sender was unable to
            negotiate an acceptable set of security parameters given the options available. This is a
            fatal error.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.no_certificate">
            This alert was used in SSLv3 but not any version of TLS. It MUST NOT be sent by compliant
            implementations.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.bad_certificate">
            A certificate was corrupt, contained signatures that did not verify correctly, etc.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.unsupported_certificate">
            A certificate was of an unsupported type.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.certificate_revoked">
            A certificate was revoked by its signer.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.certificate_expired">
            A certificate has expired or is not currently valid.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.certificate_unknown">
            Some other (unspecified) issue arose in processing the certificate, rendering it
            unacceptable.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.illegal_parameter">
            A field in the handshake was out of range or inconsistent with other fields. This message is
            always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.unknown_ca">
            A valid certificate chain or partial chain was received, but the certificate was not accepted
            because the CA certificate could not be located or couldn't be matched with a known, trusted
            CA. This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.access_denied">
            A valid certificate was received, but when access control was applied, the sender decided not
            to proceed with negotiation. This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.decode_error">
            A message could not be decoded because some field was out of the specified range or the
            length of the message was incorrect. This message is always fatal and should never be
            observed in communication between proper implementations (except when messages were corrupted
            in the network).
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.decrypt_error">
            A handshake cryptographic operation failed, including being unable to correctly verify a
            signature or validate a Finished message. This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.export_restriction">
            This alert was used in some earlier versions of TLS. It MUST NOT be sent by compliant
            implementations.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.protocol_version">
            The protocol version the client has attempted to negotiate is recognized but not supported.
            (For example, old protocol versions might be avoided for security reasons.) This message is
            always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.insufficient_security">
            Returned instead of handshake_failure when a negotiation has failed specifically because the
            server requires ciphers more secure than those supported by the client. This message is
            always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.internal_error">
            An internal error unrelated to the peer or the correctness of the protocol (such as a memory
            allocation failure) makes it impossible to continue. This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.user_canceled">
            This handshake is being canceled for some reason unrelated to a protocol failure. If the user
            cancels an operation after the handshake is complete, just closing the connection by sending
            a close_notify is more appropriate. This alert should be followed by a close_notify. This
            message is generally a warning.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.no_renegotiation">
            Sent by the client in response to a hello request or by the server in response to a client
            hello after initial handshaking. Either of these would normally lead to renegotiation; when
            that is not appropriate, the recipient should respond with this alert. At that point, the
            original requester can decide whether to proceed with the connection. One case where this
            would be appropriate is where a server has spawned a process to satisfy a request; the
            process might receive security parameters (key length, authentication, etc.) at startup, and
            it might be difficult to communicate changes to these parameters after that point. This
            message is always a warning.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.unsupported_extension">
            Sent by clients that receive an extended server hello containing an extension that they did
            not put in the corresponding client hello. This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.certificate_unobtainable">
            This alert is sent by servers who are unable to retrieve a certificate chain from the URL
            supplied by the client (see Section 3.3). This message MAY be fatal - for example if client
            authentication is required by the server for the handshake to continue and the server is
            unable to retrieve the certificate chain, it may send a fatal alert.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.unrecognized_name">
            This alert is sent by servers that receive a server_name extension request, but do not
            recognize the server name. This message MAY be fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.bad_certificate_status_response">
            This alert is sent by clients that receive an invalid certificate status response (see
            Section 3.6). This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.bad_certificate_hash_value">
            This alert is sent by servers when a certificate hash does not match a client provided
            certificate_hash. This message is always fatal.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.unknown_psk_identity">
            If the server does not recognize the PSK identity, it MAY respond with an
            "unknown_psk_identity" alert message.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.AlertDescription.inappropriate_fallback">
            If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version
            supported by the server is higher than the version indicated in ClientHello.client_version,
            the server MUST respond with a fatal inappropriate_fallback alert [..].
        </member>
        <member name="T:Spire.Security.Crypto.Tls.AlertLevel">
            <summary>
            RFC 5246 7.2
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.BulkCipherAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ByteQueue">
            <remarks>
            A queue for bytes.
            <p>
            This file could be more optimized.
            </p>
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ByteQueue.NextTwoPow(System.Int32)">
            <returns>The smallest number which can be written as 2^x which is bigger than i.</returns>
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ByteQueue.DefaultCapacity">
            The initial size for our buffer.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ByteQueue.databuf">
            The buffer where we store our data.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ByteQueue.skipped">
            How many bytes at the beginning of the buffer are skipped.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ByteQueue.available">
            How many bytes in the buffer are valid data.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
            <summary>Add some data to our buffer.</summary>
            <param name="data">A byte-array to read data from.</param>
            <param name="offset">How many bytes to skip at the beginning of the array.</param>
            <param name="len">How many bytes to read from the array.</param>
        </member>
        <member name="P:Spire.Security.Crypto.Tls.ByteQueue.Available">
            <summary>The number of bytes which are available in this buffer.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ByteQueue.CopyTo(System.IO.Stream,System.Int32)">
            <summary>Copy some bytes from the beginning of the data to the provided <c cref="T:System.IO.Stream">Stream</c>.</summary>
            <param name="output">The <c cref="T:System.IO.Stream">Stream</c> to copy the bytes to.</param>
            <param name="length">How many bytes to copy.</param>
            <exception cref="T:System.InvalidOperationException">If insufficient data is available.</exception>
            <exception cref="T:System.IO.IOException">If there is a problem copying the data.</exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Read data from the buffer.</summary>
            <param name="buf">The buffer where the read data will be copied to.</param>
            <param name="offset">How many bytes to skip at the beginning of buf.</param>
            <param name="len">How many bytes to read at all.</param>
            <param name="skip">How many bytes from our data to skip.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ByteQueue.ReadFrom(System.Int32)">
            <summary>Return a <c cref="T:System.IO.MemoryStream">MemoryStream</c> over some bytes at the beginning of the data.</summary>
            <param name="length">How many bytes will be readable.</param>
            <returns>A <c cref="T:System.IO.MemoryStream">MemoryStream</c> over the data.</returns>
            <exception cref="T:System.InvalidOperationException">If insufficient data is available.</exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ByteQueue.RemoveData(System.Int32)">
            <summary>Remove some bytes from our data from the beginning.</summary>
            <param name="i">How many bytes to remove.</param>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.Certificate">
             Parsing and encoding of a <i>Certificate</i> struct from RFC 4346.
             <p/>
             <pre>
             opaque ASN.1Cert&lt;2^24-1&gt;;
            
             struct {
                 ASN.1Cert certificate_list&lt;0..2^24-1&gt;;
             } Certificate;
             </pre>
            
             @see Spire.Security.Asn1.X509.X509CertificateStructure
        </member>
        <member name="F:Spire.Security.Crypto.Tls.Certificate.mCertificateList">
            The certificates.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Certificate.GetCertificateList">
            @return an array of {@link org.bouncycastle.asn1.x509.Certificate} representing a certificate
                    chain.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.Certificate.IsEmpty">
            @return <code>true</code> if this certificate chain contains no certificates, or
                    <code>false</code> otherwise.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Certificate.Encode(System.IO.Stream)">
             Encode this {@link Certificate} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Certificate.Parse(System.IO.Stream)">
             Parse a {@link Certificate} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link Certificate} object.
             @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.CertificateRequest">
             Parsing and encoding of a <i>CertificateRequest</i> struct from RFC 4346.
             <p/>
             <pre>
             struct {
                 ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
                 DistinguishedName certificate_authorities&lt;3..2^16-1&gt;
             } CertificateRequest;
             </pre>
            
             @see ClientCertificateType
             @see X509Name
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateRequest.#ctor(System.Byte[],System.Collections.IList,System.Collections.IList)">
            @param certificateTypes       see {@link ClientCertificateType} for valid constants.
            @param certificateAuthorities an {@link IList} of {@link X509Name}.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.CertificateRequest.CertificateTypes">
            @return an array of certificate types
            @see {@link ClientCertificateType}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.CertificateRequest.SupportedSignatureAlgorithms">
            @return an {@link IList} of {@link SignatureAndHashAlgorithm} (or null before TLS 1.2).
        </member>
        <member name="P:Spire.Security.Crypto.Tls.CertificateRequest.CertificateAuthorities">
            @return an {@link IList} of {@link X509Name}
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateRequest.Encode(System.IO.Stream)">
             Encode this {@link CertificateRequest} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateRequest.Parse(Spire.Security.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link CertificateRequest} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateRequest} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateStatus.Encode(System.IO.Stream)">
            Encode this {@link CertificateStatus} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateStatus.Parse(System.IO.Stream)">
            Parse a {@link CertificateStatus} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateStatus} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateStatusRequest.Encode(System.IO.Stream)">
            Encode this {@link CertificateStatusRequest} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateStatusRequest.Parse(System.IO.Stream)">
            Parse a {@link CertificateStatusRequest} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateStatusRequest} object.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.CertificateType">
            RFC 6091 
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateUrl.#ctor(System.Byte,System.Collections.IList)">
            @param type
                       see {@link CertChainType} for valid constants.
            @param urlAndHashList
                       a {@link IList} of {@link UrlAndHash}.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.CertificateUrl.Type">
            @return {@link CertChainType}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.CertificateUrl.UrlAndHashList">
            @return an {@link IList} of {@link UrlAndHash} 
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateUrl.Encode(System.IO.Stream)">
             Encode this {@link CertificateUrl} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CertificateUrl.parse(Spire.Security.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link CertificateUrl} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateUrl} object.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.Chacha20Poly1305">
            draft-ietf-tls-chacha20-poly1305-04
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Chacha20Poly1305.#ctor(Spire.Security.Crypto.Tls.TlsContext)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Chacha20Poly1305.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Chacha20Poly1305.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Chacha20Poly1305.GetAdditionalData(System.Int64,System.Byte,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.CipherSuite">
            <summary>
            RFC 2246 A.5
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.CipherType">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.CombinedHash">
            A combined hash, which implements md5(m) || sha1(m).
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CombinedHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @see org.bouncycastle.crypto.Digest#update(byte[], int, int)
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CombinedHash.DoFinal(System.Byte[],System.Int32)">
            @see org.bouncycastle.crypto.Digest#doFinal(byte[], int)
        </member>
        <member name="M:Spire.Security.Crypto.Tls.CombinedHash.Reset">
            @see org.bouncycastle.crypto.Digest#reset()
        </member>
        <member name="T:Spire.Security.Crypto.Tls.CompressionMethod">
            <summary>
            RFC 2246 6.1
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ConnectionEnd">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ContentType">
            RFC 2246 6.2.1
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DatagramTransport.GetReceiveLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DatagramTransport.GetSendLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DatagramTransport.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DatagramTransport.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DatagramTransport.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsAgreementCredentials.GenerateAgreement(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateAESCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateCamelliaCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateChaCha20Poly1305(Spire.Security.Crypto.Tls.TlsContext)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Ccm(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Gcm(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Ocb(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Camellia_Gcm(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateDesEdeCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateNullCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateRC4Cipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateSeedCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsCipherFactory.CreateHMacDigest(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsSrpGroupVerifier.#ctor">
            Accept only the group parameters specified in RFC 5054 Appendix A.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DefaultTlsSrpGroupVerifier.#ctor(System.Collections.IList)">
            Specify a custom set of acceptable group parameters.
            
            @param groups a {@link Vector} of acceptable {@link SRP6GroupParameters}
        </member>
        <member name="T:Spire.Security.Crypto.Tls.DeferredHash">
            Buffers input until the hash algorithm is determined.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.DigitallySigned.Algorithm">
            @return a {@link SignatureAndHashAlgorithm} (or null before TLS 1.2).
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DigitallySigned.Encode(System.IO.Stream)">
            Encode this {@link DigitallySigned} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DigitallySigned.Parse(Spire.Security.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link DigitallySigned} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link DigitallySigned} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsHandshakeRetransmit.ReceivedHandshakeRecord(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsProtocol.ProcessFinished(System.Byte[],System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsProtocol.ApplyMaxFragmentLengthExtension(Spire.Security.Crypto.Tls.DtlsRecordLayer,System.Int16)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsProtocol.EvaluateMaxFragmentLengthExtension(System.Boolean,System.Collections.IDictionary,System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsProtocol.GenerateCertificate(Spire.Security.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsProtocol.GenerateSupplementalData(System.Collections.IList)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsProtocol.ValidateSelectedCipherSuite(System.Int32,System.Byte)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsRecordLayer.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsReliableHandshake.CheckInboundFlight">
            Check that there are no "extra" messages left in the current inbound flight
        </member>
        <member name="T:Spire.Security.Crypto.Tls.DtlsReplayWindow">
            RFC 4347 4.1.2.5 Anti-replay
            <p/>
            Support fast rejection of duplicate records by maintaining a sliding receive window
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsReplayWindow.ShouldDiscard(System.Int64)">
             Check whether a received record with the given sequence number should be rejected as a duplicate.
            
             @param seq the 48-bit DTLSPlainText.sequence_number field of a received record.
             @return true if the record should be discarded without further processing.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsReplayWindow.ReportAuthenticated(System.Int64)">
             Report that a received record with the given sequence number passed authentication checks.
            
             @param seq the 48-bit DTLSPlainText.sequence_number field of an authenticated record.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.DtlsReplayWindow.Reset">
            When a new epoch begins, sequence numbers begin again at 0
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ECBasisType">
            <summary>RFC 4492 5.4. (Errata ID: 2389)</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ECCurveType">
            <summary>
            RFC 4492 5.4
            </summary>
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ECCurveType.explicit_prime">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a prime field.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ECCurveType.explicit_char2">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a characteristic-2 field.
        </member>
        <member name="F:Spire.Security.Crypto.Tls.ECCurveType.named_curve">
            Indicates that a named curve is used. This option SHOULD be used when applicable.
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ECPointFormat">
            <summary>
            RFC 4492 5.1.2
            </summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.EncryptionAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.ExporterLabel">
            <summary>RFC 5705</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.HashAlgorithm">
            <summary>RFC 5246 7.4.1.4.1</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.HeartbeatExtension.Encode(System.IO.Stream)">
            Encode this {@link HeartbeatExtension} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.HeartbeatExtension.Parse(System.IO.Stream)">
            Parse a {@link HeartbeatExtension} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link HeartbeatExtension} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.HeartbeatMessage.Encode(Spire.Security.Crypto.Tls.TlsContext,System.IO.Stream)">
            Encode this {@link HeartbeatMessage} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.HeartbeatMessage.Parse(System.IO.Stream)">
            Parse a {@link HeartbeatMessage} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link HeartbeatMessage} object.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.KeyExchangeAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.MacAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.NamedCurve">
            <summary>
            RFC 4492 5.1.1
            The named curves defined here are those specified in SEC 2 [13]. Note that many of
            these curves are also recommended in ANSI X9.62 [7] and FIPS 186-2 [11]. Values 0xFE00
            through 0xFEFF are reserved for private use. Values 0xFF01 and 0xFF02 indicate that the
            client supports arbitrary prime and characteristic-2 curves, respectively (the curve
            parameters must be encoded explicitly in ECParameters).
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.NewSessionTicket.Encode(System.IO.Stream)">
             Encode this {@link NewSessionTicket} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.NewSessionTicket.Parse(System.IO.Stream)">
             Parse a {@link NewSessionTicket} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link NewSessionTicket} object.
             @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.OcspStatusRequest">
            RFC 3546 3.6
        </member>
        <member name="M:Spire.Security.Crypto.Tls.OcspStatusRequest.#ctor(System.Collections.IList,Spire.Security.Asn1.X509.X509Extensions)">
            @param responderIDList
                       an {@link IList} of {@link ResponderID}, specifying the list of trusted OCSP
                       responders. An empty list has the special meaning that the responders are
                       implicitly known to the server - e.g., by prior arrangement.
            @param requestExtensions
                       OCSP request extensions. A null value means that there are no extensions.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.OcspStatusRequest.ResponderIDList">
            @return an {@link IList} of {@link ResponderID}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.OcspStatusRequest.RequestExtensions">
            @return OCSP request extensions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.OcspStatusRequest.Encode(System.IO.Stream)">
            Encode this {@link OcspStatusRequest} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.OcspStatusRequest.Parse(System.IO.Stream)">
            Parse a {@link OcspStatusRequest} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return an {@link OcspStatusRequest} object.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.PrfAlgorithm">
            <summary>RFC 5246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ProtocolVersion.Get(System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.RecordStream">
            <summary>An implementation of the TLS 1.0/1.1/1.2 record layer, allowing downgrade to SSLv3.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.RecordStream.SetRestrictReadVersion(System.Boolean)">
            RFC 5246 E.1. "Earlier versions of the TLS specification were not fully clear on what the
            record layer version number (TLSPlaintext.version) should contain when sending ClientHello
            (i.e., before it is known which version of the protocol will be employed). Thus, TLS servers
            compliant with this specification MUST accept any value {03,XX} as the record layer version
            number for ClientHello."
        </member>
        <member name="P:Spire.Security.Crypto.Tls.SecurityParameters.Entity">
            @return {@link ConnectionEnd}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.SecurityParameters.CipherSuite">
            @return {@link CipherSuite}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.SecurityParameters.CompressionAlgorithm">
            @return {@link CompressionMethod}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.SecurityParameters.PrfAlgorithm">
            @return {@link PRFAlgorithm}
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerDHParams.Encode(System.IO.Stream)">
            Encode this {@link ServerDHParams} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerDHParams.Parse(System.IO.Stream)">
            Parse a {@link ServerDHParams} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerDHParams} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerName.Encode(System.IO.Stream)">
            Encode this {@link ServerName} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerName.Parse(System.IO.Stream)">
            Parse a {@link ServerName} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerName} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerNameList.#ctor(System.Collections.IList)">
            @param serverNameList an {@link IList} of {@link ServerName}.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.ServerNameList.ServerNames">
            @return an {@link IList} of {@link ServerName}.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerNameList.Encode(System.IO.Stream)">
            Encode this {@link ServerNameList} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerNameList.Parse(System.IO.Stream)">
            Parse a {@link ServerNameList} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerNameList} object.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerSrpParams.Encode(System.IO.Stream)">
            Encode this {@link ServerSRPParams} to an {@link OutputStream}.
            
            @param output
                       the {@link OutputStream} to encode to.
            @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.ServerSrpParams.Parse(System.IO.Stream)">
            Parse a {@link ServerSRPParams} from an {@link InputStream}.
            
            @param input
                       the {@link InputStream} to parse from.
            @return a {@link ServerSRPParams} object.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.SignatureAlgorithm">
            RFC 5246 7.4.1.4.1 (in RFC 2246, there were no specific values assigned)
        </member>
        <member name="T:Spire.Security.Crypto.Tls.SignatureAndHashAlgorithm">
            RFC 5246 7.4.1.4.1
        </member>
        <member name="M:Spire.Security.Crypto.Tls.SignatureAndHashAlgorithm.#ctor(System.Byte,System.Byte)">
            @param hash      {@link HashAlgorithm}
            @param signature {@link SignatureAlgorithm}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.SignatureAndHashAlgorithm.Hash">
            @return {@link HashAlgorithm}
        </member>
        <member name="P:Spire.Security.Crypto.Tls.SignatureAndHashAlgorithm.Signature">
            @return {@link SignatureAlgorithm}
        </member>
        <member name="M:Spire.Security.Crypto.Tls.SignatureAndHashAlgorithm.Encode(System.IO.Stream)">
             Encode this {@link SignatureAndHashAlgorithm} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.SignatureAndHashAlgorithm.Parse(System.IO.Stream)">
             Parse a {@link SignatureAndHashAlgorithm} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link SignatureAndHashAlgorithm} object.
             @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.SimulatedTlsSrpIdentityManager">
            An implementation of {@link TlsSRPIdentityManager} that simulates the existence of "unknown" identities
            to obscure the fact that there is no verifier for them. 
        </member>
        <member name="M:Spire.Security.Crypto.Tls.SimulatedTlsSrpIdentityManager.GetRfc5054Default(Spire.Security.Crypto.Parameters.Srp6GroupParameters,System.Byte[])">
             Create a {@link SimulatedTlsSRPIdentityManager} that implements the algorithm from RFC 5054 2.5.1.3
            
             @param group the {@link SRP6GroupParameters} defining the group that SRP is operating in
             @param seedKey the secret "seed key" referred to in RFC 5054 2.5.1.3
             @return an instance of {@link SimulatedTlsSRPIdentityManager}
        </member>
        <member name="T:Spire.Security.Crypto.Tls.Ssl3Mac">
            HMAC implementation based on original internet draft for HMAC (RFC 2104)
            
            The difference is that padding is concatentated versus XORed with the key
            
            H(K + opad, H(K + ipad, text))
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Ssl3Mac.#ctor(Spire.Security.Crypto.IDigest)">
            Base constructor for one of the standard digest algorithms that the byteLength of
            the algorithm is know for. Behaviour is undefined for digests other than MD5 or SHA1.
            
            @param digest the digest.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.Ssl3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:Spire.Security.Crypto.Tls.SupplementalDataType">
            <summary>RFC 4680</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAeadCipher.#ctor(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.Modes.IAeadBlockCipher,Spire.Security.Crypto.Modes.IAeadBlockCipher,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAeadCipher.#ctor(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.Modes.IAeadBlockCipher,Spire.Security.Crypto.Modes.IAeadBlockCipher,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAeadCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAeadCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAeadCipher.GetAdditionalData(System.Int64,System.Byte,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAgreementCredentials.GenerateAgreement(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAuthentication.NotifyServerCertificate(Spire.Security.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the server certificate.
            </summary>
            <remarks>
            This method is responsible for certificate verification and validation
            </remarks>
            <param name="serverCertificate">The server <see cref="T:Spire.Security.Crypto.Tls.Certificate"/> received</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsAuthentication.GetClientCredentials(Spire.Security.Crypto.Tls.CertificateRequest)">
            <summary>
            Return client credentials in response to server's certificate request
            </summary>
            <param name="certificateRequest">
            A <see cref="T:Spire.Security.Crypto.Tls.CertificateRequest"/> containing server certificate request details
            </param>
            <returns>
            A <see cref="T:Spire.Security.Crypto.Tls.TlsCredentials"/> to be used for client authentication
            (or <c>null</c> for no client authentication)
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsBlockCipher">
            <summary>
            A generic TLS 1.0-1.2 / SSLv3 block cipher. This can be used for AES or 3DES for example.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsBlockCipher.#ctor(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.IBlockCipher,Spire.Security.Crypto.IDigest,Spire.Security.Crypto.IDigest,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsBlockCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsCipherFactory.CreateCipher(Spire.Security.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.Init(Spire.Security.Crypto.Tls.TlsClientContext)">
            <summary>
            Called at the start of a new TLS session, before any other methods.
            </summary>
            <param name="context">
            A <see cref="T:Spire.Security.Crypto.Tls.TlsProtocolHandler"/>
            </param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetSessionToResume">
            <summary>Return the session this client wants to resume, if any.</summary>
            <remarks>Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.</remarks>
            <returns>
            A <see cref="T:Spire.Security.Crypto.Tls.TlsSession"/> representing the resumable session to be used for this connection,
            or null to use a new session.
            </returns>
        </member>
        <member name="P:Spire.Security.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion">
            <summary>
            Return the <see cref="T:Spire.Security.Crypto.Tls.ProtocolVersion"/> to use for the <c>TLSPlaintext.version</c> field prior to
            receiving the server version. NOTE: This method is <b>not</b> called for DTLS.
            </summary>
            <remarks>
            See RFC 5246 E.1.: "TLS clients that wish to negotiate with older servers MAY send any value
            {03,XX} as the record layer version number. Typical values would be {03,00}, the lowest
            version number supported by the client, and the value of ClientHello.client_version. No
            single value will guarantee interoperability with all old servers, but this is a complex
            topic beyond the scope of this document."
            </remarks>
            <returns>The <see cref="T:Spire.Security.Crypto.Tls.ProtocolVersion"/> to use.</returns>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetCipherSuites">
            <summary>
            Get the list of cipher suites that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:Spire.Security.Crypto.Tls.CipherSuite"/> values, each specifying a supported cipher suite.
            </returns>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetCompressionMethods">
            <summary>
            Get the list of compression methods that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:Spire.Security.Crypto.Tls.CompressionMethod"/> values, each specifying a supported compression method.
            </returns>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetClientExtensions">
            <summary>
            Get the (optional) table of client extensions to be included in (extended) client hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (Int32 -> byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.NotifyServerVersion(Spire.Security.Crypto.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])">
            <summary>
            Notifies the client of the session_id sent in the ServerHello.
            </summary>
            <param name="sessionID">An array of <see cref="T:System.Byte"/></param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)">
            <summary>
            Report the cipher suite that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered cipher suites
            <seealso cref="M:Spire.Security.Crypto.Tls.TlsClient.GetCipherSuites"/>
            </remarks>
            <param name="selectedCipherSuite">
            A <see cref="T:Spire.Security.Crypto.Tls.CipherSuite"/>
            </param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)">
            <summary>
            Report the compression method that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered compression methods
            <seealso cref="M:Spire.Security.Crypto.Tls.TlsClient.GetCompressionMethods"/>
            </remarks>
            <param name="selectedCompressionMethod">
            A <see cref="T:Spire.Security.Crypto.Tls.CompressionMethod"/>
            </param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
            <summary>
            Report the extensions from an extended server hello.
            </summary>
            <remarks>
            Will only be called if we returned a non-null result from <see cref="M:Spire.Security.Crypto.Tls.TlsClient.GetClientExtensions"/>.
            </remarks>
            <param name="serverExtensions">
            A <see cref="T:System.Collections.IDictionary"/>  (Int32 -> byte[])
            </param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)">
            <param name="serverSupplementalData">A <see cref="T:System.Collections.IList">list</see> of <see cref="T:Spire.Security.Crypto.Tls.SupplementalDataEntry"/></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetKeyExchange">
            <summary>
            Return an implementation of <see cref="T:Spire.Security.Crypto.Tls.TlsKeyExchange"/> to negotiate the key exchange
            part of the protocol.
            </summary>
            <returns>
            A <see cref="T:Spire.Security.Crypto.Tls.TlsKeyExchange"/>
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetAuthentication">
            <summary>
            Return an implementation of <see cref="T:Spire.Security.Crypto.Tls.TlsAuthentication"/> to handle authentication
            part of the protocol.
            </summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.GetClientSupplementalData">
            <returns>A <see cref="T:System.Collections.IList">list</see> of <see cref="T:Spire.Security.Crypto.Tls.SupplementalDataEntry"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClient.NotifyNewSessionTicket(Spire.Security.Crypto.Tls.NewSessionTicket)">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message</summary>
            <remarks>
            This method will be called (only) when a NewSessionTicket handshake message is received. The
            ticket is opaque to the client and clients MUST NOT examine the ticket under the assumption
            that it complies with e.g. <i>RFC 5077 4. Recommended Ticket Construction</i>.
            </remarks>
            <param name="newSessionTicket">The <see cref="T:Spire.Security.Crypto.Tls.NewSessionTicket">ticket</see></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClientProtocol.#ctor(System.IO.Stream,Spire.Security.Security.SecureRandom)">
            Constructor for blocking mode.
            @param stream The bi-directional stream of data to/from the server
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClientProtocol.#ctor(System.IO.Stream,System.IO.Stream,Spire.Security.Security.SecureRandom)">
            Constructor for blocking mode.
            @param input The stream of data from the server
            @param output The stream of data to the server
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClientProtocol.#ctor(Spire.Security.Security.SecureRandom)">
            Constructor for non-blocking mode.<br/>
            <br/>
            When data is received, use {@link #offerInput(java.nio.ByteBuffer)} to
            provide the received ciphertext, then use
            {@link #readInput(byte[], int, int)} to read the corresponding cleartext.<br/>
            <br/>
            Similarly, when data needs to be sent, use
            {@link #offerOutput(byte[], int, int)} to provide the cleartext, then use
            {@link #readOutput(byte[], int, int)} to get the corresponding
            ciphertext.
            
            @param secureRandom
                       Random number generator for various cryptographic functions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsClientProtocol.Connect(Spire.Security.Crypto.Tls.TlsClient)">
             Initiates a TLS handshake in the role of client.<br/>
             <br/>
             In blocking mode, this will not return until the handshake is complete.
             In non-blocking mode, use {@link TlsPeer#NotifyHandshakeComplete()} to
             receive a callback when the handshake is complete.
            
             @param tlsClient The {@link TlsClient} to use for the handshake.
             @throws IOException If in blocking mode and handshake was not successful.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.TlsContext.ResumableSession">
            Used to get the resumable session, if any, used by this connection. Only available after the
            handshake has successfully completed.
            
            @return A {@link TlsSession} representing the resumable session used by this connection, or
                    null if no resumable session available.
            @see TlsPeer#NotifyHandshakeComplete()
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsContext.ExportKeyingMaterial(System.String,System.Byte[],System.Int32)">
             Export keying material according to RFC 5705: "Keying Material Exporters for TLS".
            
             @param asciiLabel    indicates which application will use the exported keys.
             @param context_value allows the application using the exporter to mix its own data with the TLS PRF for
                                  the exporter output.
             @param length        the number of bytes to generate
             @return a pseudorandom bit string of 'length' bytes generated from the master_secret.
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsDHKeyExchange">
            <summary>(D)TLS DH key exchange.</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsECDheKeyExchange">
            <summary>(D)TLS ECDHE key exchange (see RFC 4492).</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsECDHKeyExchange">
            <summary>(D)TLS ECDH key exchange (see RFC 4492).</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionClient(System.Collections.IDictionary,System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddClientCertificateTypeExtensionServer(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddHeartbeatExtension(System.Collections.IDictionary,Spire.Security.Crypto.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddMaxFragmentLengthExtension(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddPaddingExtension(System.Collections.IDictionary,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionClient(System.Collections.IDictionary,System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddServerCertificateTypeExtensionServer(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddServerNameExtension(System.Collections.IDictionary,Spire.Security.Crypto.Tls.ServerNameList)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.AddStatusRequestExtension(System.Collections.IDictionary,Spire.Security.Crypto.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetClientCertificateTypeExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetHeartbeatExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetMaxFragmentLengthExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetPaddingExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionClient(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetServerCertificateTypeExtensionServer(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetServerNameExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.GetStatusRequestExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.HasEncryptThenMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.HasExtendedMasterSecretExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.HasTruncatedHMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreateCertificateTypeExtensionServer(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreateHeartbeatExtension(Spire.Security.Crypto.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreateMaxFragmentLengthExtension(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreatePaddingExtension(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreateServerNameExtension(Spire.Security.Crypto.Tls.ServerNameList)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.CreateStatusRequestExtension(Spire.Security.Crypto.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadEmptyExtensionData(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionClient(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadCertificateTypeExtensionServer(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadEncryptThenMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadExtendedMasterSecretExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadHeartbeatExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadMaxFragmentLengthExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadPaddingExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadServerNameExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadStatusRequestExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsExtensionsUtilities.ReadTruncatedHMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsKeyExchange">
            <summary>
            A generic interface for key exchange implementations in (D)TLS.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.SkipServerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ProcessServerCredentials(Spire.Security.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ProcessServerCertificate(Spire.Security.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.GenerateServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.SkipServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ValidateCertificateRequest(Spire.Security.Crypto.Tls.CertificateRequest)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.SkipClientCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ProcessClientCredentials(Spire.Security.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ProcessClientCertificate(Spire.Security.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.ProcessClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsKeyExchange.GeneratePremasterSecret">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsMac">
            <summary>
            A generic TLS MAC implementation, acting as an HMAC based on some underlying Digest.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsMac.#ctor(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.IDigest,System.Byte[],System.Int32,System.Int32)">
             Generate a new instance of an TlsMac.
            
             @param context the TLS client context
             @param digest  The digest to use.
             @param key     A byte-array where the key for this MAC is located.
             @param keyOff  The number of bytes to skip, before the key starts in the buffer.
             @param keyLen  The length of the key.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.TlsMac.MacSecret">
            @return the MAC write secret
        </member>
        <member name="P:Spire.Security.Crypto.Tls.TlsMac.Size">
            @return The output length of this MAC.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsMac.CalculateMac(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
             Calculate the MAC for some given data.
            
             @param type    The message type of the message.
             @param message A byte-buffer containing the message.
             @param offset  The number of bytes to skip, before the message starts.
             @param length  The length of the message.
             @return A new byte-buffer containing the MAC value.
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsNoCloseNotifyException">
            <summary>
            This exception will be thrown(only) when the connection is closed by the peer without sending a
            <code cref="F:Spire.Security.Crypto.Tls.AlertDescription.close_notify">close_notify</code> warning alert.
            </summary>
            <remarks>
            If this happens, the TLS protocol cannot rule out truncation of the connection data (potentially
            malicious). It may be possible to check for truncation via some property of a higher level protocol
            built upon TLS, e.g.the Content-Length header for HTTPS.
            </remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsNullCipher">
            <summary>
            A NULL CipherSuite, with optional MAC.
            </summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsNullCipher.#ctor(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.IDigest,Spire.Security.Crypto.IDigest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsNullCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsNullCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime">
            <summary>
            draft-mathewson-no-gmtunixtime-00 2. "If existing users of a TLS implementation may rely on
            gmt_unix_time containing the current time, we recommend that implementors MAY provide the
            ability to set gmt_unix_time as an option only, off by default."
            </summary>
            <returns>
            <code>true</code> if the current time should be used in the gmt_unix_time field of
            Random, or <code>false</code> if gmt_unix_time should contain a cryptographically
            random value.
            </returns>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)">
            <summary>
            Report whether the server supports secure renegotiation
            </summary>
            <remarks>
            The protocol handler automatically processes the relevant extensions
            </remarks>
            <param name="secureRenegotiation">
            A <see cref="T:System.Boolean"/>, true if the server supports secure renegotiation
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.GetCompression">
            <summary>
            Return an implementation of <see cref="T:Spire.Security.Crypto.Tls.TlsCompression"/> to handle record compression.
            </summary>
            <returns>A <see cref="T:Spire.Security.Crypto.Tls.TlsCompression"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.GetCipher">
            <summary>
            Return an implementation of <see cref="T:Spire.Security.Crypto.Tls.TlsCipher"/> to use for encryption/decryption.
            </summary>
            <returns>A <see cref="T:Spire.Security.Crypto.Tls.TlsCipher"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)">
            <summary>This method will be called when an alert is raised by the protocol.</summary>
            <param name="alertLevel"><see cref="T:Spire.Security.Crypto.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:Spire.Security.Crypto.Tls.AlertDescription"/></param>
            <param name="message">A human-readable message explaining what caused this alert. May be null.</param>
            <param name="cause">The <c>Exception</c> that caused this alert to be raised. May be null.</param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)">
            <summary>This method will be called when an alert is received from the remote peer.</summary>
            <param name="alertLevel"><see cref="T:Spire.Security.Crypto.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:Spire.Security.Crypto.Tls.AlertDescription"/></param>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsPeer.NotifyHandshakeComplete">
            <summary>Notifies the peer that the handshake has been successfully completed.</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.ProcessChangeCipherSpec(System.Byte[],System.Int32,System.Int32)">
             This method is called, when a change cipher spec message is received.
            
             @throws IOException If the message has an invalid content or the handshake is not in the correct
             state.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
             Read data from the network. The method will return immediately, if there is still some data
             left in the buffer, or block until some application data has been read from the network.
            
             @param buf    The buffer where the data will be copied to.
             @param offset The position where the data will be placed in the buffer.
             @param len    The maximum number of bytes to read.
             @return The number of bytes read.
             @throws IOException If something goes wrong during reading data.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.WriteData(System.Byte[],System.Int32,System.Int32)">
             Send some application data to the remote system.
             <p/>
             The method will handle fragmentation internally.
            
             @param buf    The buffer with the data.
             @param offset The position in the buffer where the data is placed.
             @param len    The length of the data.
             @throws IOException If something goes wrong during sending.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.TlsProtocol.Stream">
            <summary>The secure bidirectional stream for this connection</summary>
            <remarks>Only allowed in blocking mode.</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.CloseInput">
            Should be called in non-blocking mode when the input data reaches EOF.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.OfferInput(System.Byte[])">
            Offer input from an arbitrary source. Only allowed in non-blocking mode.<br/>
            <br/>
            After this method returns, the input buffer is "owned" by this object. Other code
            must not attempt to do anything with it.<br/>
            <br/>
            This method will decrypt and process all records that are fully available.
            If only part of a record is available, the buffer will be retained until the
            remainder of the record is offered.<br/>
            <br/>
            If any records containing application data were processed, the decrypted data
            can be obtained using {@link #readInput(byte[], int, int)}. If any records
            containing protocol data were processed, a response may have been generated.
            You should always check to see if there is any available output after calling
            this method by calling {@link #getAvailableOutputBytes()}.
            @param input The input buffer to offer
            @throws IOException If an error occurs while decrypting or processing a record
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.GetAvailableInputBytes">
            Gets the amount of received application data. A call to {@link #readInput(byte[], int, int)}
            is guaranteed to be able to return at least this much data.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @return The number of bytes of available application data
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)">
            Retrieves received application data. Use {@link #getAvailableInputBytes()} to check
            how much application data is currently available. This method functions similarly to
            {@link InputStream#read(byte[], int, int)}, except that it never blocks. If no data
            is available, nothing will be copied and zero will be returned.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @param buffer The buffer to hold the application data
            @param offset The start offset in the buffer at which the data is written
            @param length The maximum number of bytes to read
            @return The total number of bytes copied to the buffer. May be less than the
                     length specified if the length was greater than the amount of available data.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.OfferOutput(System.Byte[],System.Int32,System.Int32)">
            Offer output from an arbitrary source. Only allowed in non-blocking mode.<br/>
            <br/>
            After this method returns, the specified section of the buffer will have been
            processed. Use {@link #readOutput(byte[], int, int)} to get the bytes to
            transmit to the other peer.<br/>
            <br/>
            This method must not be called until after the handshake is complete! Attempting
            to call it before the handshake is complete will result in an exception.
            @param buffer The buffer containing application data to encrypt
            @param offset The offset at which to begin reading data
            @param length The number of bytes of data to read
            @throws IOException If an error occurs encrypting the data, or the handshake is not complete
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.GetAvailableOutputBytes">
            Gets the amount of encrypted data available to be sent. A call to
            {@link #readOutput(byte[], int, int)} is guaranteed to be able to return at
            least this much data.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @return The number of bytes of available encrypted data
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)">
            Retrieves encrypted data to be sent. Use {@link #getAvailableOutputBytes()} to check
            how much encrypted data is currently available. This method functions similarly to
            {@link InputStream#read(byte[], int, int)}, except that it never blocks. If no data
            is available, nothing will be copied and zero will be returned.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @param buffer The buffer to hold the encrypted data
            @param offset The start offset in the buffer at which the data is written
            @param length The maximum number of bytes to read
            @return The total number of bytes copied to the buffer. May be less than the
                     length specified if the length was greater than the amount of available data.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.Close">
             Closes this connection.
            
             @throws IOException If something goes wrong during closing.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.AssertEmpty(System.IO.MemoryStream)">
             Make sure the InputStream 'buf' now empty. Fail otherwise.
            
             @param buf The InputStream to check.
             @throws IOException If 'buf' is not empty.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocol.GetCurrentPrfHash(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.Tls.TlsHandshakeHash,System.Byte[])">
            'sender' only relevant to SSLv3
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsProtocolHandler.#ctor(System.IO.Stream,System.IO.Stream,Spire.Security.Security.SecureRandom)">
            <remarks>Both streams can be the same object</remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsPskKeyExchange">
            <summary>(D)TLS PSK key exchange (RFC 4279).</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsRsaKeyExchange">
            <summary>(D)TLS and SSLv3 RSA key exchange.</summary>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsRsaUtilities.GenerateEncryptedPreMasterSecret(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.Parameters.RsaKeyParameters,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.NotifyClientVersion(Spire.Security.Crypto.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.NotifyFallback(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.NotifyOfferedCipherSuites(System.Int32[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.NotifyOfferedCompressionMethods(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.ProcessClientExtensions(System.Collections.IDictionary)">
            <param name="clientExtensions">A <see cref="T:System.Collections.IDictionary"/> (Int32 -> byte[]). Will never be null.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetServerVersion">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetSelectedCipherSuite">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetSelectedCompressionMethod">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetServerExtensions">
            <summary>
            Get the (optional) table of server extensions to be included in (extended) server hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (Int32 -> byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetServerSupplementalData">
            <returns>
            A <see cref="T:System.Collections.IList"/> (<see cref="T:Spire.Security.Crypto.Tls.SupplementalDataEntry"/>). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetCredentials">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetCertificateStatus">
            <remarks>
            This method will be called (only) if the server included an extension of type
            "status_request" with empty "extension_data" in the extended server hello. See <i>RFC 3546
            3.6. Certificate Status Request</i>. If a non-null <see cref="T:Spire.Security.Crypto.Tls.CertificateStatus"/> is returned, it
            is sent to the client as a handshake message of type "certificate_status".
            </remarks>
            <returns>A <see cref="T:Spire.Security.Crypto.Tls.CertificateStatus"/> to be sent to the client (or null for none).</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetKeyExchange">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetCertificateRequest">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.ProcessClientSupplementalData(System.Collections.IList)">
            <param name="clientSupplementalData"><see cref="T:System.Collections.IList"/> (<see cref="T:Spire.Security.Crypto.Tls.SupplementalDataEntry"/>)</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.NotifyClientCertificate(Spire.Security.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the client certificate, only if <c>GetCertificateRequest</c>
            returned non-null.
            </summary>
            <remarks>Note: this method is responsible for certificate verification and validation.</remarks>
            <param name="clientCertificate">the effective client certificate (may be an empty chain).</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServer.GetNewSessionTicket">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message.</summary>
            <remarks>
            This method will be called (only) if a NewSessionTicket extension was sent by the server. See
            <i>RFC 5077 4. Recommended Ticket Construction</i> for recommended format and protection.
            </remarks>
            <returns>The <see cref="T:Spire.Security.Crypto.Tls.NewSessionTicket">ticket</see>)</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServerProtocol.#ctor(System.IO.Stream,Spire.Security.Security.SecureRandom)">
            Constructor for blocking mode.
            @param stream The bi-directional stream of data to/from the client
            @param output The stream of data to the client
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServerProtocol.#ctor(System.IO.Stream,System.IO.Stream,Spire.Security.Security.SecureRandom)">
            Constructor for blocking mode.
            @param input The stream of data from the client
            @param output The stream of data to the client
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServerProtocol.#ctor(Spire.Security.Security.SecureRandom)">
            Constructor for non-blocking mode.<br/>
            <br/>
            When data is received, use {@link #offerInput(java.nio.ByteBuffer)} to
            provide the received ciphertext, then use
            {@link #readInput(byte[], int, int)} to read the corresponding cleartext.<br/>
            <br/>
            Similarly, when data needs to be sent, use
            {@link #offerOutput(byte[], int, int)} to provide the cleartext, then use
            {@link #readOutput(byte[], int, int)} to get the corresponding
            ciphertext.
            
            @param secureRandom
                       Random number generator for various cryptographic functions
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsServerProtocol.Accept(Spire.Security.Crypto.Tls.TlsServer)">
             Receives a TLS handshake in the role of server.<br/>
             <br/>
             In blocking mode, this will not return until the handshake is complete.
             In non-blocking mode, use {@link TlsPeer#notifyHandshakeComplete()} to
             receive a callback when the handshake is complete.
            
             @param tlsServer
             @throws IOException If in blocking mode and handshake was not successful.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsSrpGroupVerifier.Accept(Spire.Security.Crypto.Parameters.Srp6GroupParameters)">
            Check whether the given SRP group parameters are acceptable for use.
            
            @param group the {@link SRP6GroupParameters} to check
            @return true if (and only if) the specified group parameters are acceptable
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsSrpIdentityManager.GetLoginParameters(System.Byte[])">
            Lookup the {@link TlsSRPLoginParameters} corresponding to the specified identity.
            
            NOTE: To avoid "identity probing", unknown identities SHOULD be handled as recommended in RFC
            5054 2.5.1.3. {@link SimulatedTlsSRPIdentityManager} is provided for this purpose.
            
            @param identity
                       the SRP identity sent by the connecting client
            @return the {@link TlsSRPLoginParameters} for the specified identity, or else 'simulated'
                    parameters if the identity is not recognized. A null value is also allowed, but not
                    recommended.
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsSrpKeyExchange">
            <summary>(D)TLS SRP key exchange (RFC 5054).</summary>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsSRTPUtils">
            RFC 5764 DTLS Extension to Establish Keys for SRTP.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsStreamCipher.#ctor(Spire.Security.Crypto.Tls.TlsContext,Spire.Security.Crypto.IStreamCipher,Spire.Security.Crypto.IStreamCipher,Spire.Security.Crypto.IDigest,Spire.Security.Crypto.IDigest,System.Int32,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsStreamCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsStreamCipher.CheckMac(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.TlsUtilities">
            <remarks>Some helper functions for MicroTLS.</remarks>
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsUtilities.AddSignatureAlgorithmsExtension(System.Collections.IDictionary,System.Collections.IList)">
             Add a 'signature_algorithms' extension to existing extensions.
            
             @param extensions                   A {@link Hashtable} to add the extension to.
             @param supportedSignatureAlgorithms {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsUtilities.GetSignatureAlgorithmsExtension(System.Collections.IDictionary)">
             Get a 'signature_algorithms' extension from extensions.
            
             @param extensions A {@link Hashtable} to get the extension from, if it is present.
             @return A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}, or null.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsUtilities.CreateSignatureAlgorithmsExtension(System.Collections.IList)">
             Create a 'signature_algorithms' extension value.
            
             @param supportedSignatureAlgorithms A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @return A byte array suitable for use as an extension value.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.TlsUtilities.ReadSignatureAlgorithmsExtension(System.Byte[])">
             Read 'signature_algorithms' extension data.
            
             @param extensionData The extension data.
             @return A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.UrlAndHash">
            RFC 6066 5.
        </member>
        <member name="M:Spire.Security.Crypto.Tls.UrlAndHash.Encode(System.IO.Stream)">
             Encode this {@link UrlAndHash} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:Spire.Security.Crypto.Tls.UrlAndHash.Parse(Spire.Security.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link UrlAndHash} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link UrlAndHash} object.
            @throws IOException
        </member>
        <member name="T:Spire.Security.Crypto.Tls.UserMappingType">
            <remarks>RFC 4681</remarks>
        </member>
        <member name="T:Spire.Security.Crypto.Tls.UseSrtpData">
            RFC 5764 4.1.1
        </member>
        <member name="M:Spire.Security.Crypto.Tls.UseSrtpData.#ctor(System.Int32[],System.Byte[])">
            @param protectionProfiles see {@link SrtpProtectionProfile} for valid constants.
            @param mki                valid lengths from 0 to 255.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.UseSrtpData.ProtectionProfiles">
            @return see {@link SrtpProtectionProfile} for valid constants.
        </member>
        <member name="P:Spire.Security.Crypto.Tls.UseSrtpData.Mki">
            @return valid lengths from 0 to 255.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.AddMagnitudes(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.CompareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.Divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <member name="M:Spire.Security.Math.BigInteger.IsProbablePrime(System.Int32)">
            return whether or not a BigInteger is probably prime with a
            probability of 1 - (1/2)**certainty.
            <p>From Knuth Vol 2, pg 395.</p>
        </member>
        <member name="M:Spire.Security.Math.BigInteger.ExtEuclid(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger@)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:Spire.Security.Math.BigInteger.Square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.Multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.GetMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <member name="M:Spire.Security.Math.BigInteger.MultiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.UInt32,System.Boolean)">
            Montgomery multiplication: a = x * y * R^(-1) mod m
            <br/>
            Based algorithm 14.36 of Handbook of Applied Cryptography.
            <br/>
            <li> m, x, y should have length n </li>
            <li> a should have length (n + 1) </li>
            <li> b = 2^32, R = b^n </li>
            <br/>
            The result is put in x
            <br/>
            NOTE: the indices of x, y, m, a different in HAC and in Java
        </member>
        <member name="M:Spire.Security.Math.BigInteger.Remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:Spire.Security.Math.BigInteger.ShiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.ShiftRightInPlace(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.ShiftRightOneInPlace(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:Spire.Security.Math.BigInteger.Subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="T:Spire.Security.Math.EC.Abc.SimpleBigDecimal">
            Class representing a simple version of a big decimal. A
            <code>SimpleBigDecimal</code> is basically a
            {@link java.math.BigInteger BigInteger} with a few digits on the right of
            the decimal point. The number of (binary) digits on the right of the decimal
            point is called the <code>scale</code> of the <code>SimpleBigDecimal</code>.
            Unlike in {@link java.math.BigDecimal BigDecimal}, the scale is not adjusted
            automatically, but must be set manually. All <code>SimpleBigDecimal</code>s
            taking part in the same arithmetic operation must have equal scale. The
            result of a multiplication of two <code>SimpleBigDecimal</code>s returns a
            <code>SimpleBigDecimal</code> with double scale.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.SimpleBigDecimal.GetInstance(Spire.Security.Math.BigInteger,System.Int32)">
            Returns a <code>SimpleBigDecimal</code> representing the same numerical
            value as <code>value</code>.
            @param value The value of the <code>SimpleBigDecimal</code> to be
            created. 
            @param scale The scale of the <code>SimpleBigDecimal</code> to be
            created. 
            @return The such created <code>SimpleBigDecimal</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.SimpleBigDecimal.#ctor(Spire.Security.Math.BigInteger,System.Int32)">
            Constructor for <code>SimpleBigDecimal</code>. The value of the
            constructed <code>SimpleBigDecimal</code> Equals <code>bigInt / 
            2<sup>scale</sup></code>.
            @param bigInt The <code>bigInt</code> value parameter.
            @param scale The scale of the constructed <code>SimpleBigDecimal</code>.
        </member>
        <member name="T:Spire.Security.Math.EC.Abc.Tnaf">
            Class holding methods for point multiplication based on the window
            &#964;-adic nonadjacent form (WTNAF). The algorithms are based on the
            paper "Improved Algorithms for Arithmetic on Anomalous Binary Curves"
            by Jerome A. Solinas. The paper first appeared in the Proceedings of
            Crypto 1997.
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.Tnaf.Width">
            The window width of WTNAF. The standard value of 4 is slightly less
            than optimal for running time, but keeps space requirements for
            precomputation low. For typical curves, a value of 5 or 6 results in
            a better running time. When changing this value, the
            <code>&#945;<sub>u</sub></code>'s must be computed differently, see
            e.g. "Guide to Elliptic Curve Cryptography", Darrel Hankerson,
            Alfred Menezes, Scott Vanstone, Springer-Verlag New York Inc., 2004,
            p. 121-122
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.Tnaf.Pow2Width">
            2<sup>4</sup>
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.Tnaf.Alpha0">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.Tnaf.Alpha0Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of TNAFs.
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.Tnaf.Alpha1">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.Tnaf.Alpha1Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of TNAFs.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.Norm(System.SByte,Spire.Security.Math.EC.Abc.ZTauElement)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.Norm(System.SByte,Spire.Security.Math.EC.Abc.SimpleBigDecimal,Spire.Security.Math.EC.Abc.SimpleBigDecimal)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>, where <code>&#955; = u + v&#964;</code>
            and <code>u</code> and <code>u</code> are real numbers (elements of
            <code><b>R</b></code>). 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param u The real part of the element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>.
            @param v The <code>&#964;</code>-adic part of the element
            <code>&#955;</code> of <code><b>R</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.Round(Spire.Security.Math.EC.Abc.SimpleBigDecimal,Spire.Security.Math.EC.Abc.SimpleBigDecimal,System.SByte)">
            Rounds an element <code>&#955;</code> of <code><b>R</b>[&#964;]</code>
            to an element of <code><b>Z</b>[&#964;]</code>, such that their difference
            has minimal norm. <code>&#955;</code> is given as
            <code>&#955; = &#955;<sub>0</sub> + &#955;<sub>1</sub>&#964;</code>.
            @param lambda0 The component <code>&#955;<sub>0</sub></code>.
            @param lambda1 The component <code>&#955;<sub>1</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve. Must
            equal 1 or -1.
            @return The rounded element of <code><b>Z</b>[&#964;]</code>.
            @throws ArgumentException if <code>lambda0</code> and
            <code>lambda1</code> do not have same scale.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.ApproximateDivisionByN(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,System.SByte,System.Int32,System.Int32)">
            Approximate division by <code>n</code>. For an integer
            <code>k</code>, the value <code>&#955; = s k / n</code> is
            computed to <code>c</code> bits of accuracy.
            @param k The parameter <code>k</code>.
            @param s The curve parameter <code>s<sub>0</sub></code> or
            <code>s<sub>1</sub></code>.
            @param vm The Lucas Sequence element <code>V<sub>m</sub></code>.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param m The bit length of the finite field
            <code><b>F</b><sub>m</sub></code>.
            @param c The number of bits of accuracy, i.e. the scale of the returned
            <code>SimpleBigDecimal</code>.
            @return The value <code>&#955; = s k / n</code> computed to
            <code>c</code> bits of accuracy.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.TauAdicNaf(System.SByte,Spire.Security.Math.EC.Abc.ZTauElement)">
            Computes the <code>&#964;</code>-adic NAF (non-adjacent form) of an
            element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The <code>&#964;</code>-adic NAF of <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.Tau(Spire.Security.Math.EC.AbstractF2mPoint)">
            Applies the operation <code>&#964;()</code> to an
            <code>AbstractF2mPoint</code>. 
            @param p The AbstractF2mPoint to which <code>&#964;()</code> is applied.
            @return <code>&#964;(p)</code>
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.GetMu(Spire.Security.Math.EC.AbstractF2mCurve)">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @param curve The elliptic curve from which to obtain <code>&#956;</code>.
            The curve must be a Koblitz curve, i.e. <code>a</code> Equals
            <code>0</code> or <code>1</code> and <code>b</code> Equals
            <code>1</code>. 
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a Koblitz
            curve.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.GetLucas(System.SByte,System.Int32,System.Boolean)">
            Calculates the Lucas Sequence elements <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param k The index of the second element of the Lucas Sequence to be
            returned.
            @param doV If set to true, computes <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>, otherwise <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code>.
            @return An array with 2 elements, containing <code>U<sub>k-1</sub></code>
            and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code>
            and <code>V<sub>k</sub></code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.GetTw(System.SByte,System.Int32)">
            Computes the auxiliary value <code>t<sub>w</sub></code>. If the width is
            4, then for <code>mu = 1</code>, <code>t<sub>w</sub> = 6</code> and for
            <code>mu = -1</code>, <code>t<sub>w</sub> = 10</code> 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param w The window width of the WTNAF.
            @return the auxiliary value <code>t<sub>w</sub></code>
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.GetSi(Spire.Security.Math.EC.AbstractF2mCurve)">
            Computes the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction. 
            @param curve The elliptic curve for which to compute
            <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code>.
            @throws ArgumentException if <code>curve</code> is not a
            Koblitz curve (Anomalous Binary Curve, ABC).
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.PartModReduction(Spire.Security.Math.BigInteger,System.Int32,System.SByte,Spire.Security.Math.BigInteger[],System.SByte,System.SByte)">
            Partial modular reduction modulo
            <code>(&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>.
            @param k The integer to be reduced.
            @param m The bitlength of the underlying finite field.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param s The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param c The precision (number of bits of accuracy) of the partial
            modular reduction.
            @return <code>&#961; := k partmod (&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.MultiplyRTnaf(Spire.Security.Math.EC.AbstractF2mPoint,Spire.Security.Math.BigInteger)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by a <code>BigInteger</code> using the reduced <code>&#964;</code>-adic
            NAF (RTNAF) method.
            @param p The AbstractF2mPoint to Multiply.
            @param k The <code>BigInteger</code> by which to Multiply <code>p</code>.
            @return <code>k * p</code>
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.MultiplyTnaf(Spire.Security.Math.EC.AbstractF2mPoint,Spire.Security.Math.EC.Abc.ZTauElement)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The AbstractF2mPoint to Multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return <code>&#955; * p</code>
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.MultiplyFromTnaf(Spire.Security.Math.EC.AbstractF2mPoint,System.SByte[])">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method, given the TNAF
            of <code>&#955;</code>.
            @param p The AbstractF2mPoint to Multiply.
            @param u The the TNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.TauAdicWNaf(System.SByte,Spire.Security.Math.EC.Abc.ZTauElement,System.SByte,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.EC.Abc.ZTauElement[])">
            Computes the <code>[&#964;]</code>-adic window NAF of an element
            <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @param width The window width of the resulting WNAF.
            @param pow2w 2<sup>width</sup>.
            @param tw The auxiliary value <code>t<sub>w</sub></code>.
            @param alpha The <code>&#945;<sub>u</sub></code>'s for the window width.
            @return The <code>[&#964;]</code>-adic window NAF of
            <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.Tnaf.GetPreComp(Spire.Security.Math.EC.AbstractF2mPoint,System.SByte)">
            Does the precomputation for WTNAF multiplication.
            @param p The <code>ECPoint</code> for which to do the precomputation.
            @param a The parameter <code>a</code> of the elliptic curve.
            @return The precomputation array for <code>p</code>. 
        </member>
        <member name="T:Spire.Security.Math.EC.Abc.ZTauElement">
            Class representing an element of <code><b>Z</b>[&#964;]</code>. Let
            <code>&#955;</code> be an element of <code><b>Z</b>[&#964;]</code>. Then
            <code>&#955;</code> is given as <code>&#955; = u + v&#964;</code>. The
            components <code>u</code> and <code>v</code> may be used directly, there
            are no accessor methods.
            Immutable class.
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.ZTauElement.u">
            The &quot;real&quot; part of <code>&#955;</code>.
        </member>
        <member name="F:Spire.Security.Math.EC.Abc.ZTauElement.v">
            The &quot;<code>&#964;</code>-adic&quot; part of <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Abc.ZTauElement.#ctor(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Constructor for an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param u The &quot;real&quot; part of <code>&#955;</code>.
            @param v The &quot;<code>&#964;</code>-adic&quot; part of
            <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Djb.Curve25519FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Djb.Curve25519Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve the curve to use
            @param x affine x co-ordinate
            @param y affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Djb.Curve25519Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve the curve to use
            @param x affine x co-ordinate
            @param y affine y co-ordinate
            @param withCompression if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.GM.SM2P256V1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.GM.SM2P256V1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.GM.SM2P256V1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP128R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP128R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP128R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(boolean)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160R2FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP160R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP192K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP192K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP192K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP192R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP192R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP192R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP224K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP224K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP224K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP224R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP224R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP224R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP256K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP256K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP256K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP256R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP256R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP256R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP384R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP384R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP384R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP521R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP521R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecP521R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT113R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT113R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT113R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT113R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT131R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT131R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT131R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT131R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT163K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT163K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT163R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT163R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT163R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT163R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT193R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT193R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT193R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT193R2Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT233K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT233K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT233R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT233R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT239K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT239K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT283K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT283K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT283R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT283R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT409K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT409K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT409R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT409R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT571K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT571K1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT571R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:Spire.Security.Math.EC.Custom.Sec.SecT571R1Point.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:Spire.Security.Math.EC.ECAlgorithms.ReferenceMultiply(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            Simple shift-and-add multiplication. Serves as reference implementation
            to verify (possibly faster) implementations, and for very small scalars.
            
            @param p
                       The point to multiply.
            @param k
                       The multiplier.
            @return The result of the point multiplication <code>kP</code>.
        </member>
        <member name="T:Spire.Security.Math.EC.ECCurve">
            <remarks>Base class for an elliptic curve.</remarks>
        </member>
        <member name="M:Spire.Security.Math.EC.ECCurve.SetPreCompInfo(Spire.Security.Math.EC.ECPoint,System.String,Spire.Security.Math.EC.Multiplier.PreCompInfo)">
            Adds <code>PreCompInfo</code> for a point on this curve, under a given name. Used by
            <code>ECMultiplier</code>s to save the precomputation for this <code>ECPoint</code> for use
            by subsequent multiplication.
            
            @param point
                       The <code>ECPoint</code> to store precomputations for.
            @param name
                       A <code>String</code> used to index precomputations of different types.
            @param preCompInfo
                       The values precomputed by the <code>ECMultiplier</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.ECCurve.NormalizeAll(Spire.Security.Math.EC.ECPoint[])">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system. Where more
            than one point is to be normalized, this method will generally be more efficient than
            normalizing each point separately.
            
            @param points
                       An array of points that will be updated in place with their normalized versions,
                       where necessary
        </member>
        <member name="M:Spire.Security.Math.EC.ECCurve.NormalizeAll(Spire.Security.Math.EC.ECPoint[],System.Int32,System.Int32,Spire.Security.Math.EC.ECFieldElement)">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system. Where more
            than one point is to be normalized, this method will generally be more efficient than
            normalizing each point separately. An (optional) z-scaling factor can be applied; effectively
            each z coordinate is scaled by this value prior to normalization (but only one
            actual multiplication is needed).
            
            @param points
                       An array of points that will be updated in place with their normalized versions,
                       where necessary
            @param off
                       The start of the range of points to normalize
            @param len
                       The length of the range of points to normalize
            @param iso
                       The (optional) z-scaling factor - can be null
        </member>
        <member name="M:Spire.Security.Math.EC.ECCurve.GetMultiplier">
            Sets the default <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="M:Spire.Security.Math.EC.ECCurve.DecodePoint(System.Byte[])">
            Decode a point on this curve from its ASN.1 encoding. The different
            encodings are taken account of, including point compression for
            <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
            @return The decoded point.
        </member>
        <member name="T:Spire.Security.Math.EC.FpCurve">
            Elliptic curve over Fp
        </member>
        <member name="F:Spire.Security.Math.EC.AbstractF2mCurve.si">
            The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:Spire.Security.Math.EC.AbstractF2mCurve.SolveQuadradicEquation(Spire.Security.Math.EC.ECFieldElement)">
             Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62
             D.1.6) The other solution is <code>z + 1</code>.
            
             @param beta
                        The value to solve the qradratic equation for.
             @return the solution for <code>z<sup>2</sup> + z = beta</code> or
                     <code>null</code> if no solution exists.
        </member>
        <member name="M:Spire.Security.Math.EC.AbstractF2mCurve.GetSi">
            @return the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="P:Spire.Security.Math.EC.AbstractF2mCurve.IsKoblitz">
            Returns true if this is a Koblitz curve (ABC curve).
            @return true if this is a Koblitz curve (ABC curve), false otherwise
        </member>
        <member name="T:Spire.Security.Math.EC.F2mCurve">
            Elliptic curves over F2m. The Weierstrass equation is given by
            <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mCurve.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mCurve.k1">
            TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Spire.Security.Math.EC.F2mCurve.k2">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Spire.Security.Math.EC.F2mCurve.k3">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Spire.Security.Math.EC.F2mCurve.m_infinity">
            The point at infinity on this curve.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param order The order of the main subgroup of the elliptic curve.
            @param cofactor The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param order The order of the main subgroup of the elliptic curve.
            @param cofactor The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mCurve.IsTrinomial">
             Return true if curve uses a Trinomial basis.
            
             @return true if curve Trinomial, false otherwise.
        </member>
        <member name="P:Spire.Security.Math.EC.FpFieldElement.FieldName">
             return the field name for this field.
            
             @return the string "Fp".
        </member>
        <member name="M:Spire.Security.Math.EC.FpFieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation
            returns the right value - if none exists it returns null.
        </member>
        <member name="T:Spire.Security.Math.EC.F2mFieldElement">
            Class representing the Elements of the finite field
            <code>F<sub>2<sup>m</sup></sub></code> in polynomial basis (PB)
            representation. Both trinomial (Tpb) and pentanomial (Ppb) polynomial
            basis representations are supported. Gaussian normal basis (GNB)
            representation is not supported.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mFieldElement.Gnb">
            Indicates gaussian normal basis representation (GNB). Number chosen
            according to X9.62. GNB is not implemented at present.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mFieldElement.Tpb">
            Indicates trinomial basis representation (Tpb). Number chosen
            according to X9.62.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mFieldElement.Ppb">
            Indicates pentanomial basis representation (Ppb). Number chosen
            according to X9.62.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mFieldElement.representation">
            Tpb or Ppb.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mFieldElement.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:Spire.Security.Math.EC.F2mFieldElement.x">
            The <code>LongArray</code> holding the bits.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Security.Math.BigInteger)">
            Constructor for Ppb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,Spire.Security.Math.BigInteger)">
            Constructor for Tpb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mFieldElement.CheckFieldElements(Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            Checks, if the ECFieldElements <code>a</code> and <code>b</code>
            are elements of the same field <code>F<sub>2<sup>m</sup></sub></code>
            (having the same representation).
            @param a field element.
            @param b field element to be compared.
            @throws ArgumentException if <code>a</code> and <code>b</code>
            are not elements of the same field
            <code>F<sub>2<sup>m</sup></sub></code> (having the same
            representation).
        </member>
        <member name="P:Spire.Security.Math.EC.F2mFieldElement.Representation">
            @return the representation of the field
            <code>F<sub>2<sup>m</sup></sub></code>, either of
            {@link F2mFieldElement.Tpb} (trinomial
            basis representation) or
            {@link F2mFieldElement.Ppb} (pentanomial
            basis representation).
        </member>
        <member name="P:Spire.Security.Math.EC.F2mFieldElement.M">
            @return the degree <code>m</code> of the reduction polynomial
            <code>f(z)</code>.
        </member>
        <member name="P:Spire.Security.Math.EC.F2mFieldElement.K1">
            @return Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:Spire.Security.Math.EC.F2mFieldElement.K2">
            @return Tpb: Always returns <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:Spire.Security.Math.EC.F2mFieldElement.K3">
            @return Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="T:Spire.Security.Math.EC.ECPoint">
            base class for points on elliptic curves.
        </member>
        <member name="P:Spire.Security.Math.EC.ECPoint.X">
            Normalizes this point, and then returns the affine x-coordinate.
            
            Note: normalization can be expensive, this method is deprecated in favour
            of caller-controlled normalization.
        </member>
        <member name="P:Spire.Security.Math.EC.ECPoint.Y">
            Normalizes this point, and then returns the affine y-coordinate.
            
            Note: normalization can be expensive, this method is deprecated in favour
            of caller-controlled normalization.
        </member>
        <member name="P:Spire.Security.Math.EC.ECPoint.AffineXCoord">
            Returns the affine x-coordinate after checking that this point is normalized.
            
            @return The affine x-coordinate of this point
            @throws IllegalStateException if the point is not normalized
        </member>
        <member name="P:Spire.Security.Math.EC.ECPoint.AffineYCoord">
            Returns the affine y-coordinate after checking that this point is normalized
            
            @return The affine y-coordinate of this point
            @throws IllegalStateException if the point is not normalized
        </member>
        <member name="P:Spire.Security.Math.EC.ECPoint.XCoord">
            Returns the x-coordinate.
            
            Caution: depending on the curve's coordinate system, this may not be the same value as in an
            affine coordinate system; use Normalize() to get a point where the coordinates have their
            affine values, or use AffineXCoord if you expect the point to already have been normalized.
            
            @return the x-coordinate of this point
        </member>
        <member name="P:Spire.Security.Math.EC.ECPoint.YCoord">
            Returns the y-coordinate.
            
            Caution: depending on the curve's coordinate system, this may not be the same value as in an
            affine coordinate system; use Normalize() to get a point where the coordinates have their
            affine values, or use AffineYCoord if you expect the point to already have been normalized.
            
            @return the y-coordinate of this point
        </member>
        <member name="M:Spire.Security.Math.EC.ECPoint.Normalize">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system.
            
            @return a new ECPoint instance representing the same point, but with normalized coordinates
        </member>
        <member name="M:Spire.Security.Math.EC.ECPointBase.GetEncoded(System.Boolean)">
            return the field element encoded with point compression. (S 4.3.6)
        </member>
        <member name="M:Spire.Security.Math.EC.ECPointBase.Multiply(Spire.Security.Math.BigInteger)">
            Multiplies this <code>ECPoint</code> by the given number.
            @param k The multiplicator.
            @return <code>k * this</code>.
        </member>
        <member name="T:Spire.Security.Math.EC.FpPoint">
            Elliptic curve points over Fp
        </member>
        <member name="M:Spire.Security.Math.EC.FpPoint.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
             Create a point which encodes without point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
        </member>
        <member name="M:Spire.Security.Math.EC.FpPoint.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
             Create a point that encodes with or without point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
             @param withCompression if true encode with point compression
        </member>
        <member name="T:Spire.Security.Math.EC.F2mPoint">
            Elliptic curve points over F2m
        </member>
        <member name="M:Spire.Security.Math.EC.F2mPoint.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement)">
            @param curve base curve
            @param x x point
            @param y y point
        </member>
        <member name="M:Spire.Security.Math.EC.F2mPoint.#ctor(Spire.Security.Math.EC.ECCurve,Spire.Security.Math.EC.ECFieldElement,Spire.Security.Math.EC.ECFieldElement,System.Boolean)">
            @param curve base curve
            @param x x point
            @param y y point
            @param withCompression true if encode with point compression.
        </member>
        <member name="M:Spire.Security.Math.EC.F2mPoint.#ctor(Spire.Security.Math.EC.ECCurve)">
            Constructor for point at infinity
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.DoubleAddMultiplier.MultiplyPositive(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            Joye's double-add algorithm.
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.ECMultiplier">
            Interface for classes encapsulating a point multiplication algorithm
            for <code>ECPoint</code>s.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.ECMultiplier.Multiply(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            Multiplies the <code>ECPoint p</code> by <code>k</code>, i.e.
            <code>p</code> is added <code>k</code> times to itself.
            @param p The <code>ECPoint</code> to be multiplied.
            @param k The factor by which <code>p</code> is multiplied.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.FixedPointPreCompInfo">
            Class holding precomputation data for fixed-point multiplications.
        </member>
        <member name="F:Spire.Security.Math.EC.Multiplier.FixedPointPreCompInfo.m_preComp">
            Array holding the precomputed <code>ECPoint</code>s used for a fixed
            point multiplication.
        </member>
        <member name="F:Spire.Security.Math.EC.Multiplier.FixedPointPreCompInfo.m_width">
            The width used for the precomputation. If a larger width precomputation
            is already available this may be larger than was requested, so calling
            code should refer to the actual width.
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.MixedNafR2LMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm (right-to-left) using
            mixed coordinates.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.MixedNafR2LMultiplier.#ctor">
            By default, addition will be done in Jacobian coordinates, and doubling will be done in
            Modified Jacobian coordinates (independent of the original coordinate system of each point).
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.MontgomeryLadderMultiplier.MultiplyPositive(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            Montgomery ladder.
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.NafL2RMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm (left-to-right).
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.NafR2LMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm (right-to-left).
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.PreCompInfo">
            Interface for classes storing precomputation data for multiplication
            algorithms. Used as a Memento (see GOF patterns) for
            <code>WNafMultiplier</code>.
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.WNafL2RMultiplier">
            Class implementing the WNAF (Window Non-Adjacent Form) multiplication
            algorithm.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WNafL2RMultiplier.MultiplyPositive(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            Multiplies <code>this</code> by an integer <code>k</code> using the
            Window NAF method.
            @param k The integer by which <code>this</code> is multiplied.
            @return A new <code>ECPoint</code> which equals <code>this</code>
            multiplied by <code>k</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WNafL2RMultiplier.GetWindowSize(System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @return the window size to use
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.WNafPreCompInfo">
            Class holding precomputation data for the WNAF (Window Non-Adjacent Form)
            algorithm.
        </member>
        <member name="F:Spire.Security.Math.EC.Multiplier.WNafPreCompInfo.m_preComp">
            Array holding the precomputed <code>ECPoint</code>s used for a Window
            NAF multiplication.
        </member>
        <member name="F:Spire.Security.Math.EC.Multiplier.WNafPreCompInfo.m_preCompNeg">
            Array holding the negations of the precomputed <code>ECPoint</code>s used
            for a Window NAF multiplication.
        </member>
        <member name="F:Spire.Security.Math.EC.Multiplier.WNafPreCompInfo.m_twice">
            Holds an <code>ECPoint</code> representing Twice(this). Used for the
            Window NAF multiplication to create or extend the precomputed values.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WNafUtilities.GenerateWindowNaf(System.Int32,Spire.Security.Math.BigInteger)">
            Computes the Window NAF (non-adjacent Form) of an integer.
            @param width The width <code>w</code> of the Window NAF. The width is
            defined as the minimal number <code>w</code>, such that for any
            <code>w</code> consecutive digits in the resulting representation, at
            most one is non-zero.
            @param k The integer of which the Window NAF is computed.
            @return The Window NAF of the given width, such that the following holds:
            <code>k = &amp;sum;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
            </code>, where the <code>k<sub>i</sub></code> denote the elements of the
            returned <code>byte[]</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @return the window size to use
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32[])">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
            @return the window size to use
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.WTauNafMultiplier">
            Class implementing the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WTauNafMultiplier.MultiplyPositive(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by <code>k</code> using the reduced <code>&#964;</code>-adic NAF (RTNAF)
            method.
            @param p The AbstractF2mPoint to multiply.
            @param k The integer by which to multiply <code>k</code>.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WTauNafMultiplier.MultiplyWTnaf(Spire.Security.Math.EC.AbstractF2mPoint,Spire.Security.Math.EC.Abc.ZTauElement,Spire.Security.Math.EC.Multiplier.PreCompInfo,System.SByte,System.SByte)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code> using
            the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The AbstractF2mPoint to multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @return <code>p</code> multiplied by <code>&#955;</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.WTauNafMultiplier.MultiplyFromWTnaf(Spire.Security.Math.EC.AbstractF2mPoint,System.SByte[],Spire.Security.Math.EC.Multiplier.PreCompInfo)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the window <code>&#964;</code>-adic NAF (TNAF) method, given the
            WTNAF of <code>&#955;</code>.
            @param p The AbstractF2mPoint to multiply.
            @param u The the WTNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="T:Spire.Security.Math.EC.Multiplier.WTauNafPreCompInfo">
            Class holding precomputation data for the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="F:Spire.Security.Math.EC.Multiplier.WTauNafPreCompInfo.m_preComp">
            Array holding the precomputed <code>AbstractF2mPoint</code>s used for the
            WTNAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.ZSignedDigitL2RMultiplier.MultiplyPositive(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            'Zeroless' Signed Digit Left-to-Right.
        </member>
        <member name="M:Spire.Security.Math.EC.Multiplier.ZSignedDigitR2LMultiplier.MultiplyPositive(Spire.Security.Math.EC.ECPoint,Spire.Security.Math.BigInteger)">
            'Zeroless' Signed Digit Right-to-Left.
        </member>
        <member name="T:Spire.Security.Math.Primes">
            Utility methods for generating primes and testing for primality.
        </member>
        <member name="T:Spire.Security.Math.Primes.MROutput">
            Used to return the output from the
            {@linkplain Primes#enhancedMRProbablePrimeTest(BigInteger, SecureRandom, int) Enhanced
            Miller-Rabin Probabilistic Primality Test}
        </member>
        <member name="T:Spire.Security.Math.Primes.STOutput">
            Used to return the output from the {@linkplain Primes#generateSTRandomPrime(Digest, int, byte[]) Shawe-Taylor Random_Prime Routine} 
        </member>
        <member name="M:Spire.Security.Math.Primes.GenerateSTRandomPrime(Spire.Security.Crypto.IDigest,System.Int32,System.Byte[])">
            FIPS 186-4 C.6 Shawe-Taylor Random_Prime Routine
            
            Construct a provable prime number using a hash function.
            
            @param hash
                       the {@link Digest} instance to use (as "Hash()"). Cannot be null.
            @param length
                       the length (in bits) of the prime to be generated. Must be at least 2.
            @param inputSeed
                       the seed to be used for the generation of the requested prime. Cannot be null or
                       empty.
            @return an {@link STOutput} instance containing the requested prime.
        </member>
        <member name="M:Spire.Security.Math.Primes.EnhancedMRProbablePrimeTest(Spire.Security.Math.BigInteger,Spire.Security.Security.SecureRandom,System.Int32)">
            FIPS 186-4 C.3.2 Enhanced Miller-Rabin Probabilistic Primality Test
            
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases. This is an
            alternative to {@link #isMRProbablePrime(BigInteger, SecureRandom, int)} that provides more
            information about a composite candidate, which may be useful when generating or validating
            RSA moduli.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param random
                       the source of randomness to use to choose bases.
            @param iterations
                       the number of randomly-chosen bases to perform the test for.
            @return an {@link MROutput} instance that can be further queried for details.
        </member>
        <member name="M:Spire.Security.Math.Primes.HasAnySmallFactors(Spire.Security.Math.BigInteger)">
            A fast check for small divisors, up to some implementation-specific limit.
            
            @param candidate
                       the {@link BigInteger} instance to test for division by small factors.
            
            @return <code>true</code> if the candidate is found to have any small factors,
                    <code>false</code> otherwise.
        </member>
        <member name="M:Spire.Security.Math.Primes.IsMRProbablePrime(Spire.Security.Math.BigInteger,Spire.Security.Security.SecureRandom,System.Int32)">
            FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test
            
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param random
                       the source of randomness to use to choose bases.
            @param iterations
                       the number of randomly-chosen bases to perform the test for.
            @return <code>false</code> if any witness to compositeness is found amongst the chosen bases
                    (so <code>candidate</code> is definitely NOT prime), or else <code>true</code>
                    (indicating primality with some probability dependent on the number of iterations
                    that were performed).
        </member>
        <member name="M:Spire.Security.Math.Primes.IsMRProbablePrimeToBase(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger)">
            FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test (to a fixed base).
            
            Run a single iteration of the Miller-Rabin algorithm against the specified base.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param baseValue
                       the base value to use for this iteration.
            @return <code>false</code> if the specified base is a witness to compositeness (so
                    <code>candidate</code> is definitely NOT prime), or else <code>true</code>.
        </member>
        <member name="T:Spire.Security.Ocsp.BasicOcspResp">
            <remarks>
            <code>
            BasicOcspResponse ::= SEQUENCE {
            	tbsResponseData		ResponseData,
            	signatureAlgorithm	AlgorithmIdentifier,
            	signature			BIT STRING,
            	certs				[0] EXPLICIT SEQUENCE OF Certificate OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspResp.GetTbsResponseData">
            <returns>The DER encoding of the tbsResponseData field.</returns>
            <exception cref="T:Spire.Security.Ocsp.OcspException">In the event of an encoding error.</exception>
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspResp.GetCertificates(System.String)">
            <returns>The certificates, if any, associated with the response.</returns>
            <exception cref="T:Spire.Security.Ocsp.OcspException">In the event of an encoding error.</exception>
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspResp.Verify(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the signature against the tbsResponseData object we contain.
            </summary>
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspResp.GetEncoded">
            <returns>The ASN.1 encoded representation of this object.</returns>
        </member>
        <member name="T:Spire.Security.Ocsp.BasicOcspRespGenerator">
            Generator for basic OCSP response objects.
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.#ctor(Spire.Security.Ocsp.RespID)">
            basic constructor
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter)">
            construct with the responderID to be the SHA-1 keyHash of the passed in public key.
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.AddResponse(Spire.Security.Ocsp.CertificateID,Spire.Security.Ocsp.CertificateStatus)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param certStatus status of the certificate - null if okay
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.AddResponse(Spire.Security.Ocsp.CertificateID,Spire.Security.Ocsp.CertificateStatus,Spire.Security.Asn1.X509.X509Extensions)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param certStatus status of the certificate - null if okay
             @param singleExtensions optional extensions
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.AddResponse(Spire.Security.Ocsp.CertificateID,Spire.Security.Ocsp.CertificateStatus,System.DateTime,Spire.Security.Asn1.X509.X509Extensions)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param nextUpdate date when next update should be requested
             @param certStatus status of the certificate - null if okay
             @param singleExtensions optional extensions
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.AddResponse(Spire.Security.Ocsp.CertificateID,Spire.Security.Ocsp.CertificateStatus,System.DateTime,System.DateTime,Spire.Security.Asn1.X509.X509Extensions)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param thisUpdate date this response was valid on
             @param nextUpdate date when next update should be requested
             @param certStatus status of the certificate - null if okay
             @param singleExtensions optional extensions
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.SetResponseExtensions(Spire.Security.Asn1.X509.X509Extensions)">
             Set the extensions for the response.
            
             @param responseExtensions the extension object to carry.
        </member>
        <member name="M:Spire.Security.Ocsp.BasicOcspRespGenerator.Generate(Spire.Security.Crypto.ISignatureFactory,Spire.Security.X509.X509Certificate[],System.DateTime)">
            <summary>
            Generate the signed response using the passed in signature calculator.
            </summary>
            <param name="signatureCalculatorFactory">Implementation of signing calculator factory.</param>
            <param name="chain">The certificate chain associated with the response signer.</param>
            <param name="producedAt">"produced at" date.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Security.Ocsp.BasicOcspRespGenerator.SignatureAlgNames">
             Return an IEnumerable of the signature names supported by the generator.
            
             @return an IEnumerable containing recognised names.
        </member>
        <member name="M:Spire.Security.Ocsp.CertificateID.#ctor(System.String,Spire.Security.X509.X509Certificate,Spire.Security.Math.BigInteger)">
            create from an issuer certificate and the serial number of the
            certificate it signed.
            @exception OcspException if any problems occur creating the id fields.
        </member>
        <member name="P:Spire.Security.Ocsp.CertificateID.SerialNumber">
            return the serial number for the certificate associated
            with this request.
        </member>
        <member name="M:Spire.Security.Ocsp.CertificateID.DeriveCertificateID(Spire.Security.Ocsp.CertificateID,Spire.Security.Math.BigInteger)">
             Create a new CertificateID for a new serial number derived from a previous one
             calculated for the same CA certificate.
            
             @param original the previously calculated CertificateID for the CA.
             @param newSerialNumber the serial number for the new certificate of interest.
            
             @return a new CertificateID for newSerialNumber
        </member>
        <member name="T:Spire.Security.Ocsp.OcspReq">
             <pre>
             OcspRequest     ::=     SEQUENCE {
                   tbsRequest                  TBSRequest,
                   optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            
               TBSRequest      ::=     SEQUENCE {
                   version             [0]     EXPLICIT Version DEFAULT v1,
                   requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                   requestList                 SEQUENCE OF Request,
                   requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            
               Signature       ::=     SEQUENCE {
                   signatureAlgorithm      AlgorithmIdentifier,
                   signature               BIT STRING,
                   certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL}
            
               Version         ::=             INTEGER  {  v1(0) }
            
               Request         ::=     SEQUENCE {
                   reqCert                     CertID,
                   singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            
               CertID          ::=     SEQUENCE {
                   hashAlgorithm       AlgorithmIdentifier,
                   issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                   issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                   serialNumber        CertificateSerialNumber }
             </pre>
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReq.GetTbsRequest">
            Return the DER encoding of the tbsRequest field.
            @return DER encoding of tbsRequest
            @throws OcspException in the event of an encoding error.
        </member>
        <member name="P:Spire.Security.Ocsp.OcspReq.SignatureAlgOid">
            return the object identifier representing the signature algorithm
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReq.GetCertificates(System.String)">
             If the request is signed return a possibly empty CertStore containing the certificates in the
             request. If the request is not signed the method returns null.
            
             @return null if not signed, a CertStore otherwise
             @throws OcspException
        </member>
        <member name="P:Spire.Security.Ocsp.OcspReq.IsSigned">
             Return whether or not this request is signed.
            
             @return true if signed false otherwise.
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReq.Verify(Spire.Security.Crypto.AsymmetricKeyParameter)">
            Verify the signature against the TBSRequest object we contain.
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReq.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReqGenerator.AddRequest(Spire.Security.Ocsp.CertificateID)">
             Add a request for the given CertificateID.
            
             @param certId certificate ID of interest
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReqGenerator.AddRequest(Spire.Security.Ocsp.CertificateID,Spire.Security.Asn1.X509.X509Extensions)">
             Add a request with extensions
            
             @param certId certificate ID of interest
             @param singleRequestExtensions the extensions to attach to the request
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReqGenerator.SetRequestorName(Spire.Security.Asn1.X509.X509Name)">
             Set the requestor name to the passed in X509Principal
            
             @param requestorName a X509Principal representing the requestor name.
        </member>
        <member name="M:Spire.Security.Ocsp.OcspReqGenerator.Generate">
             Generate an unsigned request
            
             @return the OcspReq
             @throws OcspException
        </member>
        <member name="P:Spire.Security.Ocsp.OcspReqGenerator.SignatureAlgNames">
             Return an IEnumerable of the signature names supported by the generator.
            
             @return an IEnumerable containing recognised names.
        </member>
        <member name="M:Spire.Security.Ocsp.OcspResp.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Spire.Security.Ocsp.OCSPRespGenerator">
            base generator for an OCSP response - at the moment this only supports the
            generation of responses containing BasicOCSP responses.
        </member>
        <member name="F:Spire.Security.Ocsp.OcspRespStatus.Successful">
            note 4 is not used.
        </member>
        <member name="T:Spire.Security.Ocsp.RespID">
            Carrier for a ResponderID.
        </member>
        <member name="T:Spire.Security.Ocsp.RevokedStatus">
            wrapper for the RevokedInfo object
        </member>
        <member name="P:Spire.Security.Ocsp.RevokedStatus.RevocationReason">
            return the revocation reason. Note: this field is optional, test for it
            with hasRevocationReason() first.
            @exception InvalidOperationException if a reason is asked for and none is avaliable
        </member>
        <member name="M:Spire.Security.Ocsp.SingleResp.GetCertStatus">
             Return the status object for the response - null indicates good.
            
             @return the status object for the response, null if it is good.
        </member>
        <member name="P:Spire.Security.Ocsp.SingleResp.NextUpdate">
             return the NextUpdate value - note: this is an optional field so may
             be returned as null.
            
             @return nextUpdate, or null if not present.
        </member>
        <member name="T:Spire.Security.Ocsp.UnknownStatus">
            wrapper for the UnknownInfo object
        </member>
        <member name="T:Spire.Security.Security.AgreementUtilities">
            <remarks>
             Utility class for creating IBasicAgreement objects from their names/Oids
            </remarks>
        </member>
        <member name="T:Spire.Security.Security.CipherUtilities">
            <remarks>
             Cipher Utility class contains methods that can not be specifically grouped into other classes.
            </remarks>
        </member>
        <member name="M:Spire.Security.Security.CipherUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:Spire.Security.Security.DigestUtilities">
            <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
        </member>
        <member name="M:Spire.Security.Security.DigestUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
            <param name="mechanism">A string representation of the digest meanism.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:Spire.Security.Security.DotNetUtilities">
            <summary>
            A class containing methods to interface the BouncyCastle world to the .NET Crypto world.
            </summary>
        </member>
        <member name="M:Spire.Security.Security.DotNetUtilities.ToX509Certificate(Spire.Security.Asn1.X509.X509CertificateStructure)">
            <summary>
            Create an System.Security.Cryptography.X509Certificate from an X509Certificate Structure.
            </summary>
            <param name="x509Struct"></param>
            <returns>A System.Security.Cryptography.X509Certificate.</returns>
        </member>
        <member name="T:Spire.Security.Security.MacUtilities">
            <remarks>
             Utility class for creating HMac object from their names/Oids
            </remarks>
        </member>
        <member name="T:Spire.Security.Security.PbeUtilities">
             <summary>
            
             </summary>
        </member>
        <member name="M:Spire.Security.Security.PbeUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="M:Spire.Security.Security.SecureRandom.GetInstance(System.String)">
            <summary>
            Create and auto-seed an instance based on the given algorithm.
            </summary>
            <remarks>Equivalent to GetInstance(algorithm, true)</remarks>
            <param name="algorithm">e.g. "SHA256PRNG"</param>
        </member>
        <member name="M:Spire.Security.Security.SecureRandom.GetInstance(System.String,System.Boolean)">
            <summary>
            Create an instance based on the given algorithm, with optional auto-seeding
            </summary>
            <param name="algorithm">e.g. "SHA256PRNG"</param>
            <param name="autoSeed">If true, the instance will be auto-seeded.</param>
        </member>
        <member name="M:Spire.Security.Security.SecureRandom.#ctor(System.Byte[])">
            <remarks>
            To replicate existing predictable output, replace with GetInstance("SHA1PRNG", false), followed by SetSeed(seed)
            </remarks>
        </member>
        <member name="M:Spire.Security.Security.SecureRandom.#ctor(Spire.Security.Crypto.Prng.IRandomGenerator)">
            <summary>Use the specified instance of IRandomGenerator as random source.</summary>
            <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
            <param name="generator">The source to generate all random bytes from.</param>
        </member>
        <member name="M:Spire.Security.Security.SecurityUtilityException.#ctor">
            base constructor.
        </member>
        <member name="M:Spire.Security.Security.SecurityUtilityException.#ctor(System.String)">
             create a SecurityUtilityException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Spire.Security.Security.SignerUtilities">
            <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
        </member>
        <member name="M:Spire.Security.Security.SignerUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns an ObjectIdentifier for a given encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the OID is not available.</returns>
        </member>
        <member name="T:Spire.Security.Security.WrapperUtilities">
            <remarks>
             Utility class for creating IWrapper objects from their names/Oids
            </remarks>
        </member>
        <member name="T:Spire.Security.OpenSsl.MiscPemGenerator">
            PEM generator for the original set of PEM objects used in Open SSL.
        </member>
        <member name="T:Spire.Security.OpenSsl.PemReader">
            Class for reading OpenSSL PEM encoded streams containing 
            X509 certificates, PKCS8 encoded keys and PKCS7 objects.
            <p>
            In the case of PKCS7 objects the reader will return a CMS ContentInfo object. Keys and
            Certificates will be returned using the appropriate java.security type.</p>
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.#ctor(System.IO.TextReader)">
             Create a new PemReader
            
             @param reader the Reader
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.#ctor(System.IO.TextReader,Spire.Security.OpenSsl.IPasswordFinder)">
             Create a new PemReader with a password finder
            
             @param reader the Reader
             @param pFinder the password finder
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.ReadCertificate(Spire.Security.Utilities.IO.Pem.PemObject)">
             Reads in a X509Certificate.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.ReadCrl(Spire.Security.Utilities.IO.Pem.PemObject)">
             Reads in a X509CRL.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.ReadCertificateRequest(Spire.Security.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS10 certification request.
            
             @return the certificate request.
             @throws IOException if an I/O error occured
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.ReadAttributeCertificate(Spire.Security.Utilities.IO.Pem.PemObject)">
             Reads in a X509 Attribute Certificate.
            
             @return the X509 Attribute Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.ReadPkcs7(Spire.Security.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS7 object. This returns a ContentInfo object suitable for use with the CMS
             API.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:Spire.Security.OpenSsl.PemReader.ReadPrivateKey(Spire.Security.Utilities.IO.Pem.PemObject)">
            Read a Key Pair
        </member>
        <member name="T:Spire.Security.OpenSsl.PemWriter">
            <remarks>General purpose writer for OpenSSL PEM objects.</remarks>
        </member>
        <member name="M:Spire.Security.OpenSsl.PemWriter.#ctor(System.IO.TextWriter)">
            <param name="writer">The TextWriter object to write the output to.</param>
        </member>
        <member name="M:Spire.Security.OpenSsl.Pkcs8Generator.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter)">
             Constructor for an unencrypted private key PEM object.
            
             @param key private key to be encoded.
        </member>
        <member name="M:Spire.Security.OpenSsl.Pkcs8Generator.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter,System.String)">
             Constructor for an encrypted private key PEM object.
            
             @param key       private key to be encoded
             @param algorithm encryption algorithm to use
             @param provider  provider to use
             @throws NoSuchAlgorithmException if algorithm/mode cannot be found
        </member>
        <member name="T:Spire.Security.Pkcs.Pkcs10CertificationRequest">
             <remarks>
             A class for verifying and creating Pkcs10 Certification requests.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs10CertificationRequest.#ctor(System.String,Spire.Security.Asn1.X509.X509Name,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Asn1.Asn1Set,Spire.Security.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs10CertificationRequest.#ctor(Spire.Security.Crypto.ISignatureFactory,Spire.Security.Asn1.X509.X509Name,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Asn1.Asn1Set,Spire.Security.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureCalculatorFactory">The factory for signature calculators to sign the PKCS#10 request with.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs10CertificationRequest.GetPublicKey">
            <summary>
            Get the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs10CertificationRequest.Verify">
            <summary>
            Verify Pkcs10 Cert Request is valid.
            </summary>
            <returns>true = valid.</returns>
        </member>
        <member name="T:Spire.Security.Pkcs.Pkcs10CertificationRequestDelaySigned">
             <remarks>
             A class for creating and verifying Pkcs10 Certification requests (this is an extension on <see cref="T:Spire.Security.Pkcs.Pkcs10CertificationRequest"/>).
             The requests are made using delay signing. This is useful for situations where
             the private key is in another environment and not directly accessible (e.g. HSM)
             So the first step creates the request, then the signing is done outside this
             object and the signature is then used to complete the request.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.String,Spire.Security.Asn1.X509.X509Name,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Asn1.Asn1Set)">
            <summary>
            Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
            </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
            <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
            <param name="publicKey">Public Key to be included in cert reqest.</param>
            <param name="attributes">ASN1Set of Attributes.</param>
            <remarks>
            After the object is constructed use the <see cref="M:Spire.Security.Pkcs.Pkcs10CertificationRequestDelaySigned.GetDataToSign"/> and finally the
            SignRequest methods to finalize the request.
            </remarks>
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs12Store.GetCertificate(System.String)">
            simply return the cert entry for the private key
        </member>
        <member name="T:Spire.Security.Pkcs.Pkcs12Utilities">
            Utility class for reencoding PKCS#12 files to definite length.
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[])">
             Just re-encode the outer layer of the PKCS#12 file to definite length encoding.
            
             @param berPKCS12File - original PKCS#12 file
             @return a byte array representing the DER encoding of the PFX structure
             @throws IOException
        </member>
        <member name="M:Spire.Security.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[],System.Char[])">
             Re-encode the PKCS#12 structure to definite length encoding at the inner layer
             as well, recomputing the MAC accordingly.
            
             @param berPKCS12File - original PKCS12 file.
             @param provider - provider to use for MAC calculation.
             @return a byte array representing the DER encoding of the PFX structure.
             @throws IOException on parsing, encoding errors.
        </member>
        <member name="P:Spire.Security.Pkix.CertStatus.RevocationDate">
            <summary>
            Returns the revocationDate.
            </summary>
        </member>
        <member name="P:Spire.Security.Pkix.CertStatus.Status">
            <summary>
            Returns the certStatus.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixAttrCertChecker.GetSupportedExtensions">
            Returns an immutable <code>Set</code> of X.509 attribute certificate
            extensions that this <code>PkixAttrCertChecker</code> supports or
            <code>null</code> if no extensions are supported.
            <p>
            Each element of the set is a <code>String</code> representing the
            Object Identifier (OID) of the X.509 extension that is supported.
            </p>
            <p>
            All X.509 attribute certificate extensions that a
            <code>PkixAttrCertChecker</code> might possibly be able to process
            should be included in the set.
            </p>
            
            @return an immutable <code>Set</code> of X.509 extension OIDs (in
                    <code>String</code> format) supported by this
                    <code>PkixAttrCertChecker</code>, or <code>null</code> if no
                    extensions are supported
        </member>
        <member name="M:Spire.Security.Pkix.PkixAttrCertChecker.Check(Spire.Security.X509.IX509AttributeCertificate,Spire.Security.Pkix.PkixCertPath,Spire.Security.Pkix.PkixCertPath,System.Collections.ICollection)">
            Performs checks on the specified attribute certificate. Every handled
            extension is rmeoved from the <code>unresolvedCritExts</code>
            collection.
            
            @param attrCert The attribute certificate to be checked.
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param holderCertPath The certificate path which belongs to the holder
                       certificate.
            @param unresolvedCritExts a <code>Collection</code> of OID strings
                       representing the current set of unresolved critical extensions
            @throws CertPathValidatorException if the specified attribute certificate
                        does not pass the check.
        </member>
        <member name="M:Spire.Security.Pkix.PkixAttrCertChecker.Clone">
            Returns a clone of this object.
            
            @return a copy of this <code>PkixAttrCertChecker</code>
        </member>
        <member name="M:Spire.Security.Pkix.PkixAttrCertPathBuilder.Build(Spire.Security.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
        <member name="T:Spire.Security.Pkix.PkixAttrCertPathValidator">
            CertPathValidatorSpi implementation for X.509 Attribute Certificates la RFC 3281.
            
            @see org.bouncycastle.x509.ExtendedPkixParameters
        </member>
        <member name="M:Spire.Security.Pkix.PkixAttrCertPathValidator.Validate(Spire.Security.Pkix.PkixCertPath,Spire.Security.Pkix.PkixParameters)">
            Validates an attribute certificate with the given certificate path.
            
            <p>
            <code>params</code> must be an instance of
            <code>ExtendedPkixParameters</code>.
            </p><p>
            The target constraints in the <code>params</code> must be an
            <code>X509AttrCertStoreSelector</code> with at least the attribute
            certificate criterion set. Obey that also target informations may be
            necessary to correctly validate this attribute certificate.
            </p><p>
            The attribute certificate issuer must be added to the trusted attribute
            issuers with {@link ExtendedPkixParameters#setTrustedACIssuers(Set)}.
            </p>
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param params The PKIX parameters.
            @return A <code>PKIXCertPathValidatorResult</code> of the result of
                    validating the <code>certPath</code>.
            @throws InvalidAlgorithmParameterException if <code>params</code> is
                        inappropriate for this validator.
            @throws CertPathValidatorException if the verification fails.
        </member>
        <member name="T:Spire.Security.Pkix.PkixBuilderParameters">
            <summary>
            Summary description for PkixBuilderParameters.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixBuilderParameters.GetInstance(Spire.Security.Pkix.PkixParameters)">
             Returns an instance of <code>PkixBuilderParameters</code>.
             <p>
             This method can be used to get a copy from other
             <code>PKIXBuilderParameters</code>, <code>PKIXParameters</code>,
             and <code>ExtendedPKIXParameters</code> instances.
             </p>
            
             @param pkixParams The PKIX parameters to create a copy of.
             @return An <code>PkixBuilderParameters</code> instance.
        </member>
        <member name="M:Spire.Security.Pkix.PkixBuilderParameters.GetExcludedCerts">
            <summary>
            Excluded certificates are not used for building a certification path.
            </summary>
            <returns>the excluded certificates.</returns>
        </member>
        <member name="M:Spire.Security.Pkix.PkixBuilderParameters.SetExcludedCerts(Spire.Security.Utilities.Collections.ISet)">
            <summary>
            Sets the excluded certificates which are not used for building a
            certification path. If the <code>ISet</code> is <code>null</code> an
            empty set is assumed.
            </summary>
            <remarks>
            The given set is cloned to protect it against subsequent modifications.
            </remarks>
            <param name="excludedCerts">The excluded certificates to set.</param>
        </member>
        <member name="M:Spire.Security.Pkix.PkixBuilderParameters.SetParams(Spire.Security.Pkix.PkixParameters)">
            Can alse handle <code>ExtendedPKIXBuilderParameters</code> and
            <code>PKIXBuilderParameters</code>.
            
            @param params Parameters to set.
            @see org.bouncycastle.x509.ExtendedPKIXParameters#setParams(java.security.cert.PKIXParameters)
        </member>
        <member name="M:Spire.Security.Pkix.PkixBuilderParameters.Clone">
             Makes a copy of this <code>PKIXParameters</code> object. Changes to the
             copy will not affect the original and vice versa.
            
             @return a copy of this <code>PKIXParameters</code> object
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPath">
             An immutable sequence of certificates (a certification path).<br />
             <br />
             This is an abstract class that defines the methods common to all CertPaths.
             Subclasses can handle different kinds of certificates (X.509, PGP, etc.).<br />
             <br />
             All CertPath objects have a type, a list of Certificates, and one or more
             supported encodings. Because the CertPath class is immutable, a CertPath
             cannot change in any externally visible way after being constructed. This
             stipulation applies to all public fields and methods of this class and any
             added or overridden by subclasses.<br />
             <br />
             The type is a string that identifies the type of Certificates in the
             certification path. For each certificate cert in a certification path
             certPath, cert.getType().equals(certPath.getType()) must be true.<br />
             <br />
             The list of Certificates is an ordered List of zero or more Certificates.
             This List and all of the Certificates contained in it must be immutable.<br />
             <br />
             Each CertPath object must support one or more encodings so that the object
             can be translated into a byte array for storage or transmission to other
             parties. Preferably, these encodings should be well-documented standards
             (such as PKCS#7). One of the encodings supported by a CertPath is considered
             the default encoding. This encoding is used if no encoding is explicitly
             requested (for the {@link #getEncoded()} method, for instance).<br />
             <br />
             All CertPath objects are also Serializable. CertPath objects are resolved
             into an alternate {@link CertPathRep} object during serialization. This
             allows a CertPath object to be serialized into an equivalent representation
             regardless of its underlying implementation.<br />
             <br />
             CertPath objects can be created with a CertificateFactory or they can be
             returned by other classes, such as a CertPathBuilder.<br />
             <br />
             By convention, X.509 CertPaths (consisting of X509Certificates), are ordered
             starting with the target certificate and ending with a certificate issued by
             the trust anchor. That is, the issuer of one certificate is the subject of
             the following one. The certificate representing the
             {@link TrustAnchor TrustAnchor} should not be included in the certification
             path. Unvalidated X.509 CertPaths may not follow these conventions. PKIX
             CertPathValidators will detect any departure from these conventions that
             cause the certification path to be invalid and throw a
             CertPathValidatorException.<br />
             <br />
             <strong>Concurrent Access</strong><br />
             <br />
             All CertPath objects must be thread-safe. That is, multiple threads may
             concurrently invoke the methods defined in this class on a single CertPath
             object (or more than one) with no ill effects. This is also true for the List
             returned by CertPath.getCertificates.<br />
             <br />
             Requiring CertPath objects to be immutable and thread-safe allows them to be
             passed around to various pieces of code without worrying about coordinating
             access. Providing this thread-safety is generally not difficult, since the
             CertPath and List objects in question are immutable.
            
             @see CertificateFactory
             @see CertPathBuilder
            <summary>
            CertPath implementation for X.509 certificates.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.SortCerts(System.Collections.IList)">
            @param certs
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.#ctor(System.Collections.ICollection)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
             @param type the standard name of the type of Certificatesin this path
            
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.#ctor(System.IO.Stream,System.String)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
            
             @param type the standard name of the type of Certificatesin this path
            
        </member>
        <member name="P:Spire.Security.Pkix.PkixCertPath.Encodings">
             Returns an iteration of the encodings supported by this
             certification path, with the default encoding
             first. Attempts to modify the returned Iterator via its
             remove method result in an UnsupportedOperationException.
            
             @return an Iterator over the names of the supported encodings (as Strings)
            
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.Equals(System.Object)">
             Compares this certification path for equality with the specified object.
             Two CertPaths are equal if and only if their types are equal and their
             certificate Lists (and by implication the Certificates in those Lists)
             are equal. A CertPath is never equal to an object that is not a CertPath.<br />
             <br />
             This algorithm is implemented by this method. If it is overridden, the
             behavior specified here must be maintained.
            
             @param other
                        the object to test for equality with this certification path
            
             @return true if the specified object is equal to this certification path,
                     false otherwise
            
             @see Object#hashCode() Object.hashCode()
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.GetEncoded">
             Returns the encoded form of this certification path, using
             the default encoding.
            
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error occurs
            
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.GetEncoded(System.String)">
             Returns the encoded form of this certification path, using
             the specified encoding.
            
             @param encoding the name of the encoding to use
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error
             occurs or the encoding requested is not supported
            
        </member>
        <member name="P:Spire.Security.Pkix.PkixCertPath.Certificates">
            <summary>
            Returns the list of certificates in this certification
            path.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPath.ToAsn1Object(Spire.Security.X509.X509Certificate)">
             Return a DERObject containing the encoded certificate.
            
             @param cert the X509Certificate object to be encoded
            
             @return the DERObject
            
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathBuilder">
             Implements the PKIX CertPathBuilding algorithm for BouncyCastle.
            
             @see CertPathBuilderSpi
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathBuilder.Build(Spire.Security.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathBuilderException">
            <summary>
            Summary description for PkixCertPathBuilderException.
            </summary>
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathBuilderResult">
            <summary>
            Summary description for PkixCertPathBuilderResult.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathChecker.Init(System.Boolean)">
                     * Initializes the internal state of this <code>PKIXCertPathChecker</code>.
                     * <p>
                     * The <code>forward</code> flag specifies the order that certificates
                     * will be passed to the {@link #check check} method (forward or reverse). A
                     * <code>PKIXCertPathChecker</code> <b>must</b> support reverse checking
                     * and <b>may</b> support forward checking.
            		 * </p>
                     * 
                     * @param forward
                     *            the order that certificates are presented to the
                     *            <code>check</code> method. If <code>true</code>,
                     *            certificates are presented from target to most-trusted CA
                     *            (forward); if <code>false</code>, from most-trusted CA to
                     *            target (reverse).
                     * @exception CertPathValidatorException
                     *                if this <code>PKIXCertPathChecker</code> is unable to
                     *                check certificates in the specified order; it should never
                     *                be thrown if the forward flag is false since reverse
                     *                checking must be supported
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathChecker.IsForwardCheckingSupported">
            Indicates if forward checking is supported. Forward checking refers to
            the ability of the <code>PKIXCertPathChecker</code> to perform its
            checks when certificates are presented to the <code>check</code> method
            in the forward direction (from target to most-trusted CA).
            
            @return <code>true</code> if forward checking is supported,
                    <code>false</code> otherwise
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathChecker.GetSupportedExtensions">
                     * Returns an immutable <code>Set</code> of X.509 certificate extensions
                     * that this <code>PKIXCertPathChecker</code> supports (i.e. recognizes,
                     * is able to process), or <code>null</code> if no extensions are
                     * supported.
                     * <p>
                     * Each element of the set is a <code>String</code> representing the
                     * Object Identifier (OID) of the X.509 extension that is supported. The OID
                     * is represented by a set of nonnegative integers separated by periods.
                     * </p><p>
                     * All X.509 certificate extensions that a <code>PKIXCertPathChecker</code>
                     * might possibly be able to process should be included in the set.
            		 * </p>
                     * 
                     * @return an immutable <code>Set</code> of X.509 extension OIDs (in
                     *         <code>String</code> format) supported by this
                     *         <code>PKIXCertPathChecker</code>, or <code>null</code> if no
                     *         extensions are supported
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathChecker.Check(Spire.Security.X509.X509Certificate,Spire.Security.Utilities.Collections.ISet)">
            Performs the check(s) on the specified certificate using its internal
            state and removes any critical extensions that it processes from the
            specified collection of OID strings that represent the unresolved
            critical extensions. The certificates are presented in the order
            specified by the <code>init</code> method.
            
            @param cert
                       the <code>Certificate</code> to be checked
            @param unresolvedCritExts
                       a <code>Collection</code> of OID strings representing the
                       current set of unresolved critical extensions
            @exception CertPathValidatorException
                           if the specified certificate does not pass the check
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathChecker.Clone">
            Returns a clone of this object. Calls the <code>Object.clone()</code>
            method. All subclasses which maintain state must support and override
            this method, if necessary.
            
            @return a copy of this <code>PKIXCertPathChecker</code>
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathValidator">
            The <i>Service Provider Interface</i> (<b>SPI</b>)
            for the {@link CertPathValidator CertPathValidator} class. All
            <code>CertPathValidator</code> implementations must include a class (the
            SPI class) that extends this class (<code>CertPathValidatorSpi</code>)
            and implements all of its methods. In general, instances of this class
            should only be accessed through the <code>CertPathValidator</code> class.
            For details, see the Java Cryptography Architecture.<br />
            <br />
            <b>Concurrent Access</b><br />
            <br />
            Instances of this class need not be protected against concurrent
            access from multiple threads. Threads that need to access a single
            <code>CertPathValidatorSpi</code> instance concurrently should synchronize
            amongst themselves and provide the necessary locking before calling the
            wrapping <code>CertPathValidator</code> object.<br />
            <br />
            However, implementations of <code>CertPathValidatorSpi</code> may still
            encounter concurrency issues, since multiple threads each
            manipulating a different <code>CertPathValidatorSpi</code> instance need not
            synchronize.
            <summary>
            CertPathValidatorSpi implementation for X.509 Certificate validation a la RFC
            3280.
            </summary>
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathValidatorException">
             An exception indicating one of a variety of problems encountered when 
             validating a certification path. <br />
             <br />
             A <code>CertPathValidatorException</code> provides support for wrapping
             exceptions. The {@link #getCause getCause} method returns the throwable, 
             if any, that caused this exception to be thrown. <br />
             <br />
             A <code>CertPathValidatorException</code> may also include the 
             certification path that was being validated when the exception was thrown 
             and the index of the certificate in the certification path that caused the 
             exception to be thrown. Use the {@link #getCertPath getCertPath} and
             {@link #getIndex getIndex} methods to retrieve this information.<br />
             <br />
             <b>Concurrent Access</b><br />
             <br />
             Unless otherwise specified, the methods defined in this class are not
             thread-safe. Multiple threads that need to access a single
             object concurrently should synchronize amongst themselves and
             provide the necessary locking. Multiple threads each manipulating
             separate objects need not synchronize.
            
             @see CertPathValidator
            
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorException.#ctor(System.String)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the given detail
            message. A detail message is a <code>String</code> that describes this
            particular exception. 
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message and cause.
            </summary>
            <param name="message">the detail message</param>
            <param name="cause">the cause (which is saved for later retrieval by the
            {@link #getCause getCause()} method). (A <code>null</code>
            value is permitted, and indicates that the cause is
            nonexistent or unknown.)</param>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception,Spire.Security.Pkix.PkixCertPath,System.Int32)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message, cause, certification path, and index.
            </summary>
            <param name="message">the detail message (or <code>null</code> if none)</param>
            <param name="cause">the cause (or <code>null</code> if none)</param>
            <param name="certPath">the certification path that was in the process of being
            validated when the error was encountered</param>
            <param name="index">the index of the certificate in the certification path that</param>																																																																																   * 
        </member>
        <member name="P:Spire.Security.Pkix.PkixCertPathValidatorException.Message">
            <summary>
            Returns the detail message for this <code>CertPathValidatorException</code>.
            </summary>
            <returns>the detail message, or <code>null</code> if neither the message nor cause were specified</returns>
        </member>
        <member name="P:Spire.Security.Pkix.PkixCertPathValidatorException.CertPath">
            Returns the certification path that was being validated when the
            exception was thrown.
            
            @return the <code>CertPath</code> that was being validated when the
                    exception was thrown (or <code>null</code> if not specified)
        </member>
        <member name="P:Spire.Security.Pkix.PkixCertPathValidatorException.Index">
            Returns the index of the certificate in the certification path that
            caused the exception to be thrown. Note that the list of certificates in
            a <code>CertPath</code> is zero based. If no index has been set, -1 is
            returned.
            
            @return the index that has been set, or -1 if none has been set
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathValidatorResult">
            <summary>
            Summary description for PkixCertPathValidatorResult.
            </summary>
        </member>
        <member name="T:Spire.Security.Pkix.PkixCertPathValidatorUtilities">
            <summary>
            Summary description for PkixCertPathValidatorUtilities.
            </summary>
        </member>
        <member name="F:Spire.Security.Pkix.PkixCertPathValidatorUtilities.KEY_CERT_SIGN">
            <summary>
            key usage bits
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.FindTrustAnchor(Spire.Security.X509.X509Certificate,Spire.Security.Utilities.Collections.ISet)">
            <summary>
            Search the given Set of TrustAnchor's for one that is the
            issuer of the given X509 certificate.
            </summary>
            <param name="cert">the X509 certificate</param>
            <param name="trustAnchors">a Set of TrustAnchor's</param>
            <returns>the <code>TrustAnchor</code> object if found or
            <code>null</code> if not.
            </returns>
            @exception
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.GetIssuerPrincipal(System.Object)">
            <summary>
            Returns the issuer of an attribute certificate or certificate.
            </summary>
            <param name="cert">The attribute certificate or certificate.</param>
            <returns>The issuer as <code>X500Principal</code>.</returns>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.GetNextWorkingKey(System.Collections.IList,System.Int32)">
             Return the next working key inheriting DSA parameters if necessary.
             <p>
             This methods inherits DSA parameters from the indexed certificate or
             previous certificates in the certificate chain to the returned
             <code>PublicKey</code>. The list is searched upwards, meaning the end
             certificate is at position 0 and previous certificates are following.
             </p>
             <p>
             If the indexed certificate does not contain a DSA key this method simply
             returns the public key. If the DSA key already contains DSA parameters
             the key is also only returned.
             </p>
            
             @param certs The certification path.
             @param index The index of the certificate which contains the public key
                        which should be extended with DSA parameters.
             @return The public key of the certificate in list position
                     <code>index</code> extended with DSA parameters if applicable.
             @throws Exception if DSA parameters cannot be inherited.
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.FindCertificates(Spire.Security.X509.Store.X509CertStoreSelector,System.Collections.IList)">
            <summary>
            Return a Collection of all certificates or attribute certificates found
            in the X509Store's that are matching the certSelect criteriums.
            </summary>
            <param name="certSelect">a {@link Selector} object that will be used to select
            the certificates</param>
            <param name="certStores">a List containing only X509Store objects. These
            are used to search for certificates.</param>
            <returns>a Collection of all found <see cref="T:Spire.Security.X509.X509Certificate"/> or
            <see cref="T:Spire.Security.X509.IX509AttributeCertificate"/> objects.
            May be empty but never <code>null</code>.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.GetCrlIssuersFromDistributionPoint(Spire.Security.Asn1.X509.DistributionPoint,System.Collections.ICollection,Spire.Security.X509.Store.X509CrlStoreSelector,Spire.Security.Pkix.PkixParameters)">
             Add the CRL issuers from the cRLIssuer field of the distribution point or
             from the certificate if not given to the issuer criterion of the
             <code>selector</code>.
             <p>
             The <code>issuerPrincipals</code> are a collection with a single
             <code>X500Principal</code> for <code>X509Certificate</code>s. For
             {@link X509AttributeCertificate}s the issuer may contain more than one
             <code>X500Principal</code>.
             </p>
            
             @param dp The distribution point.
             @param issuerPrincipals The issuers of the certificate or attribute
                        certificate which contains the distribution point.
             @param selector The CRL selector.
             @param pkixParams The PKIX parameters containing the cert stores.
             @throws Exception if an exception occurs while processing.
             @throws ClassCastException if <code>issuerPrincipals</code> does not
             contain only <code>X500Principal</code>s.
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.GetCompleteCrls(Spire.Security.Asn1.X509.DistributionPoint,System.Object,System.DateTime,Spire.Security.Pkix.PkixParameters)">
             Fetches complete CRLs according to RFC 3280.
            
             @param dp The distribution point for which the complete CRL
             @param cert The <code>X509Certificate</code> or
                        {@link org.bouncycastle.x509.X509AttributeCertificate} for
                        which the CRL should be searched.
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @return A <code>Set</code> of <code>X509CRL</code>s with complete
                     CRLs.
             @throws Exception if an exception occurs while picking the CRLs
                         or no CRLs are found.
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.GetDeltaCrls(System.DateTime,Spire.Security.Pkix.PkixParameters,Spire.Security.X509.X509Crl)">
             Fetches delta CRLs according to RFC 3280 section 5.2.4.
            
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @param completeCRL The complete CRL the delta CRL is for.
             @return A <code>Set</code> of <code>X509CRL</code>s with delta CRLs.
             @throws Exception if an exception occurs while picking the delta
                         CRLs.
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.FindIssuerCerts(Spire.Security.X509.X509Certificate,Spire.Security.Pkix.PkixBuilderParameters)">
             Find the issuer certificates of a given certificate.
            
             @param cert
                        The certificate for which an issuer should be found.
             @param pkixParams
             @return A <code>Collection</code> object containing the issuer
                     <code>X509Certificate</code>s. Never <code>null</code>.
            
             @exception Exception
                            if an error occurs.
        </member>
        <member name="M:Spire.Security.Pkix.PkixCertPathValidatorUtilities.GetExtensionValue(Spire.Security.X509.IX509Extension,Spire.Security.Asn1.DerObjectIdentifier)">
            <summary>
            Extract the value of the given extension, if it exists.
            </summary>
            <param name="ext">The extension object.</param>
            <param name="oid">The object identifier to obtain.</param>
            <returns>Asn1Object</returns>
            <exception cref="T:System.Exception">if the extension cannot be read.</exception>
        </member>
        <member name="M:Spire.Security.Pkix.PkixCrlUtilities.FindCrls(Spire.Security.X509.Store.X509CrlStoreSelector,System.Collections.IList)">
            <summary>
            crl checking
            Return a Collection of all CRLs found in the X509Store's that are
            matching the crlSelect criteriums.
            </summary>
            <param name="crlSelect">a {@link X509CRLStoreSelector} object that will be used
            to select the CRLs</param>
            <param name="crlStores">a List containing only {@link org.bouncycastle.x509.X509Store
            X509Store} objects. These are used to search for CRLs</param>
            <returns>a Collection of all found {@link X509CRL X509CRL} objects. May be
            empty but never <code>null</code>.
            </returns>
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.IntersectIP(Spire.Security.Utilities.Collections.ISet,Spire.Security.Utilities.Collections.ISet)">
             Returns the intersection of the permitted IP ranges in
             <code>permitted</code> with <code>ip</code>.
            
             @param permitted A <code>Set</code> of permitted IP addresses with
                              their subnet mask as byte arrays.
             @param ips       The IP address with its subnet mask.
             @return The <code>Set</code> of permitted IP ranges intersected with
                     <code>ip</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.UnionIP(Spire.Security.Utilities.Collections.ISet,System.Byte[])">
             Returns the union of the excluded IP ranges in <code>excluded</code>
             with <code>ip</code>.
            
             @param excluded A <code>Set</code> of excluded IP addresses with their
                             subnet mask as byte arrays.
             @param ip       The IP address with its subnet mask.
             @return The <code>Set</code> of excluded IP ranges unified with
                     <code>ip</code> as byte arrays.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.UnionIPRange(System.Byte[],System.Byte[])">
             Calculates the union if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the union of both addresses.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.IntersectIPRange(System.Byte[],System.Byte[])">
             Calculates the interesction if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the single IP address with its subnet
                     mask as a byte array or an empty <code>Set</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.IpWithSubnetMask(System.Byte[],System.Byte[])">
             Concatenates the IP address with its subnet mask.
            
             @param ip         The IP address.
             @param subnetMask Its subnet mask.
             @return The concatenated IP address with its subnet mask.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.ExtractIPsAndSubnetMasks(System.Byte[],System.Byte[])">
             Splits the IP addresses and their subnet mask.
            
             @param ipWithSubmask1 The first IP address with the subnet mask.
             @param ipWithSubmask2 The second IP address with the subnet mask.
             @return An array with two elements. Each element contains the IP address
                     and the subnet mask in this order.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.MinMaxIPs(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             Based on the two IP addresses and their subnet masks the IP range is
             computed for each IP address - subnet mask pair and returned as the
             minimum IP address and the maximum address of the range.
            
             @param ip1         The first IP address.
             @param subnetmask1 The subnet mask of the first IP address.
             @param ip2         The second IP address.
             @param subnetmask2 The subnet mask of the second IP address.
             @return A array with two elements. The first/second element contains the
                     min and max IP address of the first/second IP address and its
                     subnet mask.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.CheckPermittedIP(Spire.Security.Utilities.Collections.ISet,System.Byte[])">
             Checks if the IP <code>ip</code> is included in the permitted ISet
             <code>permitted</code>.
            
             @param permitted A <code>Set</code> of permitted IP addresses with
                              their subnet mask as byte arrays.
             @param ip        The IP address.
             @throws PkixNameConstraintValidatorException
                      if the IP is not permitted.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.checkExcludedIP(Spire.Security.Utilities.Collections.ISet,System.Byte[])">
             Checks if the IP <code>ip</code> is included in the excluded ISet
             <code>excluded</code>.
            
             @param excluded A <code>Set</code> of excluded IP addresses with their
                             subnet mask as byte arrays.
             @param ip       The IP address.
             @throws PkixNameConstraintValidatorException
                      if the IP is excluded.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.IsIPConstrained(System.Byte[],System.Byte[])">
             Checks if the IP address <code>ip</code> is constrained by
             <code>constraint</code>.
            
             @param ip         The IP address.
             @param constraint The constraint. This is an IP address concatenated with
                               its subnetmask.
             @return <code>true</code> if constrained, <code>false</code>
                     otherwise.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.unionEmail(System.String,System.String,Spire.Security.Utilities.Collections.ISet)">
             The common part of <code>email1</code> and <code>email2</code> is
             added to the union <code>union</code>. If <code>email1</code> and
             <code>email2</code> have nothing in common they are added both.
            
             @param email1 Email address constraint 1.
             @param email2 Email address constraint 2.
             @param union  The union.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.intersectEmail(System.String,System.String,Spire.Security.Utilities.Collections.ISet)">
             The most restricting part from <code>email1</code> and
             <code>email2</code> is added to the intersection <code>intersect</code>.
            
             @param email1    Email address constraint 1.
             @param email2    Email address constraint 2.
             @param intersect The intersection.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.checkPermitted(Spire.Security.Asn1.X509.GeneralName)">
             Checks if the given GeneralName is in the permitted ISet.
            
             @param name The GeneralName
             @throws PkixNameConstraintValidatorException
                      If the <code>name</code>
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.checkExcluded(Spire.Security.Asn1.X509.GeneralName)">
             Check if the given GeneralName is contained in the excluded ISet.
            
             @param name The GeneralName.
             @throws PkixNameConstraintValidatorException
                      If the <code>name</code> is
                      excluded.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.IntersectPermittedSubtree(Spire.Security.Asn1.Asn1Sequence)">
             Updates the permitted ISet of these name constraints with the intersection
             with the given subtree.
            
             @param permitted The permitted subtrees
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.AddExcludedSubtree(Spire.Security.Asn1.X509.GeneralSubtree)">
             Adds a subtree to the excluded ISet of these name constraints.
            
             @param subtree A subtree with an excluded GeneralName.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.Max(System.Byte[],System.Byte[])">
             Returns the maximum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The maximum IP address.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.Min(System.Byte[],System.Byte[])">
             Returns the minimum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The minimum IP address.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.CompareTo(System.Byte[],System.Byte[])">
             Compares IP address <code>ip1</code> with <code>ip2</code>. If ip1
             is equal to ip2 0 is returned. If ip1 is bigger 1 is returned, -1
             otherwise.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return 0 if ip1 is equal to ip2, 1 if ip1 is bigger, -1 otherwise.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.Or(System.Byte[],System.Byte[])">
             Returns the logical OR of the IP addresses <code>ip1</code> and
             <code>ip2</code>.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The OR of <code>ip1</code> and <code>ip2</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixNameConstraintValidator.StringifyIP(System.Byte[])">
             Stringifies an IPv4 or v6 address with subnet mask.
            
             @param ip The IP with subnet mask.
             @return The stringified IP address.
        </member>
        <member name="T:Spire.Security.Pkix.PkixParameters">
            <summary>
            Summary description for PkixParameters.
            </summary>
        </member>
        <member name="F:Spire.Security.Pkix.PkixParameters.PkixValidityModel">
            This is the default PKIX validity model. Actually there are two variants
            of this: The PKIX model and the modified PKIX model. The PKIX model
            verifies that all involved certificates must have been valid at the
            current time. The modified PKIX model verifies that all involved
            certificates were valid at the signing time. Both are indirectly choosen
            with the {@link PKIXParameters#setDate(java.util.Date)} method, so this
            methods sets the Date when <em>all</em> certificates must have been
            valid.
        </member>
        <member name="F:Spire.Security.Pkix.PkixParameters.ChainValidityModel">
            This model uses the following validity model. Each certificate must have
            been valid at the moment where is was used. That means the end
            certificate must have been valid at the time the signature was done. The
            CA certificate which signed the end certificate must have been valid,
            when the end certificate was signed. The CA (or Root CA) certificate must
            have been valid, when the CA certificate was signed and so on. So the
            {@link PKIXParameters#setDate(java.util.Date)} method sets the time, when
            the <em>end certificate</em> must have been valid. <p/> It is used e.g.
            in the German signature law.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.#ctor(Spire.Security.Utilities.Collections.ISet)">
             Creates an instance of PKIXParameters with the specified Set of
             most-trusted CAs. Each element of the set is a TrustAnchor.<br />
             <br />
             Note that the Set is copied to protect against subsequent modifications.
            
             @param trustAnchors
                        a Set of TrustAnchors
            
             @exception InvalidAlgorithmParameterException
                            if the specified Set is empty
                            <code>(trustAnchors.isEmpty() == true)</code>
             @exception NullPointerException
                            if the specified Set is <code>null</code>
             @exception ClassCastException
                            if any of the elements in the Set are not of type
                            <code>java.security.cert.TrustAnchor</code>
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetTargetCertConstraints">
             Returns the required constraints on the target certificate. The
             constraints are returned as an instance of CertSelector. If
             <code>null</code>, no constraints are defined.<br />
             <br />
             Note that the CertSelector returned is cloned to protect against
             subsequent modifications.
            
             @return a CertSelector specifying the constraints on the target
                     certificate (or <code>null</code>)
            
             @see #setTargetCertConstraints(CertSelector)
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetTargetCertConstraints(Spire.Security.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate. The constraints
             are specified as an instance of CertSelector. If null, no constraints are
             defined.<br />
             <br />
             Note that the CertSelector specified is cloned to protect against
             subsequent modifications.
            
             @param selector
                        a CertSelector specifying the constraints on the target
                        certificate (or <code>null</code>)
            
             @see #getTargetCertConstraints()
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetInitialPolicies">
             Returns an immutable Set of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. The
             default return value is an empty <code>Set</code>, which is
             interpreted as meaning that any policy would be acceptable.
            
             @return an immutable <code>Set</code> of initial policy OIDs in String
                     format, or an empty <code>Set</code> (implying any policy is
                     acceptable). Never returns <code>null</code>.
            
             @see #setInitialPolicies(java.util.Set)
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetInitialPolicies(Spire.Security.Utilities.Collections.ISet)">
             Sets the <code>Set</code> of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. By
             default, any policy is acceptable (i.e. all policies), so a user that
             wants to allow any policy as acceptable does not need to call this
             method, or can call it with an empty <code>Set</code> (or
             <code>null</code>).<br />
             <br />
             Note that the Set is copied to protect against subsequent modifications.<br />
             <br />
            
             @param initialPolicies
                        a Set of initial policy OIDs in String format (or
                        <code>null</code>)
            
             @exception ClassCastException
                            if any of the elements in the set are not of type String
            
             @see #getInitialPolicies()
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetCertPathCheckers(System.Collections.IList)">
             Sets a <code>List</code> of additional certification path checkers. If
             the specified List contains an object that is not a PKIXCertPathChecker,
             it is ignored.<br />
             <br />
             Each <code>PKIXCertPathChecker</code> specified implements additional
             checks on a certificate. Typically, these are checks to process and
             verify private extensions contained in certificates. Each
             <code>PKIXCertPathChecker</code> should be instantiated with any
             initialization parameters needed to execute the check.<br />
             <br />
             This method allows sophisticated applications to extend a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code>. Each
             of the specified PKIXCertPathCheckers will be called, in turn, by a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code> for
             each certificate processed or validated.<br />
             <br />
             Regardless of whether these additional PKIXCertPathCheckers are set, a
             PKIX <code>CertPathValidator</code> or <code>CertPathBuilder</code>
             must perform all of the required PKIX checks on each certificate. The one
             exception to this rule is if the RevocationEnabled flag is set to false
             (see the {@link #setRevocationEnabled(boolean) setRevocationEnabled}
             method).<br />
             <br />
             Note that the List supplied here is copied and each PKIXCertPathChecker
             in the list is cloned to protect against subsequent modifications.
            
             @param checkers
                        a List of PKIXCertPathCheckers. May be null, in which case no
                        additional checkers will be used.
             @exception ClassCastException
                            if any of the elements in the list are not of type
                            <code>java.security.cert.PKIXCertPathChecker</code>
             @see #getCertPathCheckers()
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetCertPathCheckers">
             Returns the List of certification path checkers. Each PKIXCertPathChecker
             in the returned IList is cloned to protect against subsequent modifications.
            
             @return an immutable List of PKIXCertPathCheckers (may be empty, but not
                     <code>null</code>)
            
             @see #setCertPathCheckers(java.util.List)
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.AddCertPathChecker(Spire.Security.Pkix.PkixCertPathChecker)">
             Adds a <code>PKIXCertPathChecker</code> to the list of certification
             path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}
             method for more details.
             <p>
             Note that the <code>PKIXCertPathChecker</code> is cloned to protect
             against subsequent modifications.</p>
            
             @param checker a <code>PKIXCertPathChecker</code> to add to the list of
             checks. If <code>null</code>, the checker is ignored (not added to list).
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetParams(Spire.Security.Pkix.PkixParameters)">
             Method to support <code>Clone()</code> under J2ME.
             <code>super.Clone()</code> does not exist and fields are not copied.
            
             @param params Parameters to set. If this are
                        <code>ExtendedPkixParameters</code> they are copied to.
        </member>
        <member name="P:Spire.Security.Pkix.PkixParameters.IsUseDeltasEnabled">
            Whether delta CRLs should be used for checking the revocation status.
            Defaults to <code>false</code>.
        </member>
        <member name="P:Spire.Security.Pkix.PkixParameters.ValidityModel">
            The validity model.
            @see #CHAIN_VALIDITY_MODEL
            @see #PKIX_VALIDITY_MODEL
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetStores(System.Collections.IList)">
             Sets the Bouncy Castle Stores for finding CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             The <code>IList</code> is cloned.
             </p>
            
             @param stores A list of stores to use.
             @see #getStores
             @throws ClassCastException if an element of <code>stores</code> is not
                         a {@link Store}.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.AddStore(Spire.Security.X509.Store.IX509Store)">
             Adds a Bouncy Castle {@link Store} to find CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             This method should be used to add local stores, like collection based
             X.509 stores, if available. Local stores should be considered first,
             before trying to use additional (remote) locations, because they do not
             need possible additional network traffic.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.AddAdditionalStore(Spire.Security.X509.Store.IX509Store)">
             Adds an additional Bouncy Castle {@link Store} to find CRLs, certificates,
             attribute certificates or cross certificates.
             <p>
             You should not use this method. This method is used for adding additional
             X.509 stores, which are used to add (remote) locations, e.g. LDAP, found
             during X.509 object processing, e.g. in certificates or CRLs. This method
             is used in PKIX certification path processing.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores()
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetAdditionalStores">
             Returns an <code>IList</code> of additional Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of additional Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #addAddionalStore(Store)
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetStores">
             Returns an <code>IList</code> of Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #setStores(IList)
        </member>
        <member name="P:Spire.Security.Pkix.PkixParameters.IsAdditionalLocationsEnabled">
             Returns if additional {@link X509Store}s for locations like LDAP found
             in certificates or CRLs should be used.
            
             @return Returns <code>true</code> if additional stores are used.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetAdditionalLocationsEnabled(System.Boolean)">
             Sets if additional {@link X509Store}s for locations like LDAP found in
             certificates or CRLs should be used.
            
             @param enabled <code>true</code> if additional stores are used.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetTargetConstraints">
             Returns the required constraints on the target certificate or attribute
             certificate. The constraints are returned as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
            
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> returned is cloned to protect
             against subsequent modifications.
             </p>
             @return a <code>IX509Selector</code> specifying the constraints on the
                     target certificate or attribute certificate (or <code>null</code>)
             @see #setTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetTargetConstraints(Spire.Security.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate or attribute
             certificate. The constraints are specified as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> specified is cloned to protect
             against subsequent modifications.
             </p>
            
             @param selector a <code>IX509Selector</code> specifying the constraints on
                        the target certificate or attribute certificate (or
                        <code>null</code>)
             @see #getTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetTrustedACIssuers">
             Returns the trusted attribute certificate issuers. If attribute
             certificates is verified the trusted AC issuers must be set.
             <p>
             The returned <code>ISet</code> consists of <code>TrustAnchor</code>s.
             </p><p>
             The returned <code>ISet</code> is immutable. Never <code>null</code>
             </p>
            
             @return Returns an immutable set of the trusted AC issuers.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetTrustedACIssuers(Spire.Security.Utilities.Collections.ISet)">
             Sets the trusted attribute certificate issuers. If attribute certificates
             is verified the trusted AC issuers must be set.
             <p>
             The <code>trustedACIssuers</code> must be a <code>ISet</code> of
             <code>TrustAnchor</code>
             </p><p>
             The given set is cloned.
             </p>
            
             @param trustedACIssuers The trusted AC issuers to set. Is never
                        <code>null</code>.
             @throws ClassCastException if an element of <code>stores</code> is not
                         a <code>TrustAnchor</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetNecessaryACAttributes">
             Returns the necessary attributes which must be contained in an attribute
             certificate.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the necessary AC attributes.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetNecessaryACAttributes(Spire.Security.Utilities.Collections.ISet)">
             Sets the necessary which must be contained in an attribute certificate.
             <p>
             The <code>ISet</code> must contain <code>String</code>s with the
             OIDs.
             </p><p>
             The set is cloned.
             </p>
            
             @param necessaryACAttributes The necessary AC attributes to set.
             @throws ClassCastException if an element of
                         <code>necessaryACAttributes</code> is not a
                         <code>String</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetProhibitedACAttributes">
             Returns the attribute certificates which are not allowed.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the prohibited AC attributes. Is never <code>null</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetProhibitedACAttributes(Spire.Security.Utilities.Collections.ISet)">
             Sets the attribute certificates which are not allowed.
             <p>
             The <code>ISet</code> must contain <code>String</code>s with the
             OIDs.
             </p><p>
             The set is cloned.
             </p>
            
             @param prohibitedACAttributes The prohibited AC attributes to set.
             @throws ClassCastException if an element of
                         <code>prohibitedACAttributes</code> is not a
                         <code>String</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.GetAttrCertCheckers">
             Returns the attribute certificate checker. The returned set contains
             {@link PKIXAttrCertChecker}s and is immutable.
            
             @return Returns the attribute certificate checker. Is never
                     <code>null</code>.
        </member>
        <member name="M:Spire.Security.Pkix.PkixParameters.SetAttrCertCheckers(Spire.Security.Utilities.Collections.ISet)">
             Sets the attribute certificate checkers.
             <p>
             All elements in the <code>ISet</code> must a {@link PKIXAttrCertChecker}.
             </p>
             <p>
             The given set is cloned.
             </p>
            
             @param attrCertCheckers The attribute certificate checkers to set. Is
                        never <code>null</code>.
             @throws ClassCastException if an element of <code>attrCertCheckers</code>
                         is not a <code>PKIXAttrCertChecker</code>.
        </member>
        <member name="T:Spire.Security.Pkix.PkixPolicyNode">
            <summary>
            Summary description for PkixPolicyNode.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.PkixPolicyNode.#ctor(System.Collections.IList,System.Int32,Spire.Security.Utilities.Collections.ISet,Spire.Security.Pkix.PkixPolicyNode,Spire.Security.Utilities.Collections.ISet,System.String,System.Boolean)">
            Constructors
        </member>
        <member name="T:Spire.Security.Pkix.ReasonsMask">
            <summary>
            This class helps to handle CRL revocation reasons mask. Each CRL handles a
            certain set of revocation reasons.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.ReasonsMask.#ctor(System.Int32)">
            <summary>
            Constructs are reason mask with the reasons.
            </summary>
            <param name="reasons">The reasons.</param>
        </member>
        <member name="M:Spire.Security.Pkix.ReasonsMask.#ctor">
            <summary>
            A reason mask with no reason.
            </summary>
        </member>
        <member name="F:Spire.Security.Pkix.ReasonsMask.AllReasons">
            <summary>
            A mask with all revocation reasons.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.ReasonsMask.AddReasons(Spire.Security.Pkix.ReasonsMask)">
             Adds all reasons from the reasons mask to this mask.
            
             @param mask The reasons mask to add.
        </member>
        <member name="P:Spire.Security.Pkix.ReasonsMask.IsAllReasons">
            <summary>
            Returns <code>true</code> if this reasons mask contains all possible
            reasons.
            </summary>
            <returns>true if this reasons mask contains all possible reasons.
            </returns>
        </member>
        <member name="M:Spire.Security.Pkix.ReasonsMask.Intersect(Spire.Security.Pkix.ReasonsMask)">
            <summary>
            Intersects this mask with the given reasons mask.
            </summary>
            <param name="mask">mask The mask to intersect with.</param>
            <returns>The intersection of this and teh given mask.</returns>
        </member>
        <member name="M:Spire.Security.Pkix.ReasonsMask.HasNewReasons(Spire.Security.Pkix.ReasonsMask)">
            <summary>
            Returns <c>true</c> if the passed reasons mask has new reasons.
            </summary>
            <param name="mask">The reasons mask which should be tested for new reasons.</param>
            <returns><c>true</c> if the passed reasons mask has new reasons.</returns>
        </member>
        <member name="P:Spire.Security.Pkix.ReasonsMask.Reasons">
            <summary>
            Returns the reasons in this mask.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3280CertPathUtilities.ProcessCrlB2(Spire.Security.Asn1.X509.DistributionPoint,System.Object,Spire.Security.X509.X509Crl)">
             If the complete CRL includes an issuing distribution point (IDP) CRL
             extension check the following:
             <p>
             (i) If the distribution point name is present in the IDP CRL extension
             and the distribution field is present in the DP, then verify that one of
             the names in the IDP matches one of the names in the DP. If the
             distribution point name is present in the IDP CRL extension and the
             distribution field is omitted from the DP, then verify that one of the
             names in the IDP matches one of the names in the cRLIssuer field of the
             DP.
             </p>
             <p>
             (ii) If the onlyContainsUserCerts boolean is asserted in the IDP CRL
             extension, verify that the certificate does not include the basic
             constraints extension with the cA boolean asserted.
             </p>
             <p>
             (iii) If the onlyContainsCACerts boolean is asserted in the IDP CRL
             extension, verify that the certificate includes the basic constraints
             extension with the cA boolean asserted.
             </p>
             <p>
             (iv) Verify that the onlyContainsAttributeCerts boolean is not asserted.
             </p>
            
             @param dp   The distribution point.
             @param cert The certificate.
             @param crl  The CRL.
             @throws AnnotatedException if one of the conditions is not met or an error occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3280CertPathUtilities.ProcessCrlB1(Spire.Security.Asn1.X509.DistributionPoint,System.Object,Spire.Security.X509.X509Crl)">
             If the DP includes cRLIssuer, then verify that the issuer field in the
             complete CRL matches cRLIssuer in the DP and that the complete CRL
             contains an
                  g distribution point extension with the indirectCRL
             boolean asserted. Otherwise, verify that the CRL issuer matches the
             certificate issuer.
            
             @param dp   The distribution point.
             @param cert The certificate ot attribute certificate.
             @param crl  The CRL for <code>cert</code>.
             @throws AnnotatedException if one of the above conditions does not apply or an error
                                        occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3280CertPathUtilities.ProcessCrlF(Spire.Security.X509.X509Crl,System.Object,Spire.Security.X509.X509Certificate,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Pkix.PkixParameters,System.Collections.IList)">
             Obtain and validate the certification path for the complete CRL issuer.
             If a key usage extension is present in the CRL issuer's certificate,
             verify that the cRLSign bit is set.
            
             @param crl                CRL which contains revocation information for the certificate
                                       <code>cert</code>.
             @param cert               The attribute certificate or certificate to check if it is
                                       revoked.
             @param defaultCRLSignCert The issuer certificate of the certificate <code>cert</code>.
             @param defaultCRLSignKey  The public key of the issuer certificate
                                       <code>defaultCRLSignCert</code>.
             @param paramsPKIX         paramsPKIX PKIX parameters.
             @param certPathCerts      The certificates on the certification path.
             @return A <code>Set</code> with all keys of possible CRL issuer
                     certificates.
             @throws AnnotatedException if the CRL is not valid or the status cannot be checked or
                                        some error occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3280CertPathUtilities.CheckCrl(Spire.Security.Asn1.X509.DistributionPoint,Spire.Security.Pkix.PkixParameters,Spire.Security.X509.X509Certificate,System.DateTime,Spire.Security.X509.X509Certificate,Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Pkix.CertStatus,Spire.Security.Pkix.ReasonsMask,System.Collections.IList)">
             Checks a distribution point for revocation information for the
             certificate <code>cert</code>.
            
             @param dp                 The distribution point to consider.
             @param paramsPKIX         PKIX parameters.
             @param cert               Certificate to check if it is revoked.
             @param validDate          The date when the certificate revocation status should be
                                       checked.
             @param defaultCRLSignCert The issuer certificate of the certificate <code>cert</code>.
             @param defaultCRLSignKey  The public key of the issuer certificate
                                       <code>defaultCRLSignCert</code>.
             @param certStatus         The current certificate revocation status.
             @param reasonMask         The reasons mask which is already checked.
             @param certPathCerts      The certificates of the certification path.
             @throws AnnotatedException if the certificate is revoked or the status cannot be checked
                                        or some error occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3280CertPathUtilities.CheckCrls(Spire.Security.Pkix.PkixParameters,Spire.Security.X509.X509Certificate,System.DateTime,Spire.Security.X509.X509Certificate,Spire.Security.Crypto.AsymmetricKeyParameter,System.Collections.IList)">
             Checks a certificate if it is revoked.
            
             @param paramsPKIX       PKIX parameters.
             @param cert             Certificate to check if it is revoked.
             @param validDate        The date when the certificate revocation status should be
                                     checked.
             @param sign             The issuer certificate of the certificate <code>cert</code>.
             @param workingPublicKey The public key of the issuer certificate <code>sign</code>.
             @param certPathCerts    The certificates of the certification path.
             @throws AnnotatedException if the certificate is revoked or the status cannot be checked
                                        or some error occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3280CertPathUtilities.ProcessCrlC(Spire.Security.X509.X509Crl,Spire.Security.X509.X509Crl,Spire.Security.Pkix.PkixParameters)">
             If use-deltas is set, verify the issuer and scope of the delta CRL.
            
             @param deltaCRL    The delta CRL.
             @param completeCRL The complete CRL.
             @param pkixParams  The PKIX paramaters.
             @throws AnnotatedException if an exception occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3281CertPathUtilities.CheckCrls(Spire.Security.X509.IX509AttributeCertificate,Spire.Security.Pkix.PkixParameters,Spire.Security.X509.X509Certificate,System.DateTime,System.Collections.IList)">
            Checks if an attribute certificate is revoked.
            
            @param attrCert Attribute certificate to check if it is revoked.
            @param paramsPKIX PKIX parameters.
            @param issuerCert The issuer certificate of the attribute certificate
                       <code>attrCert</code>.
            @param validDate The date when the certificate revocation status should
                       be checked.
            @param certPathCerts The certificates of the certification path to be
                       checked.
            
            @throws CertPathValidatorException if the certificate is revoked or the
                        status cannot be checked or some error occurs.
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3281CertPathUtilities.ProcessAttrCert1(Spire.Security.X509.IX509AttributeCertificate,Spire.Security.Pkix.PkixParameters)">
            Searches for a holder public key certificate and verifies its
            certification path.
            
            @param attrCert the attribute certificate.
            @param pkixParams The PKIX parameters.
            @return The certificate path of the holder certificate.
            @throws Exception if
                        <ul>
                        <li>no public key certificate can be found although holder
                        information is given by an entity name or a base certificate
                        ID</li>
                        <li>support classes cannot be created</li>
                        <li>no certification path for the public key certificate can
                        be built</li>
                        </ul>
        </member>
        <member name="M:Spire.Security.Pkix.Rfc3281CertPathUtilities.CheckCrl(Spire.Security.Asn1.X509.DistributionPoint,Spire.Security.X509.IX509AttributeCertificate,Spire.Security.Pkix.PkixParameters,System.DateTime,Spire.Security.X509.X509Certificate,Spire.Security.Pkix.CertStatus,Spire.Security.Pkix.ReasonsMask,System.Collections.IList)">
            
            Checks a distribution point for revocation information for the
            certificate <code>attrCert</code>.
            
            @param dp The distribution point to consider.
            @param attrCert The attribute certificate which should be checked.
            @param paramsPKIX PKIX parameters.
            @param validDate The date when the certificate revocation status should
                       be checked.
            @param issuerCert Certificate to check if it is revoked.
            @param reasonMask The reasons mask which is already checked.
            @param certPathCerts The certificates of the certification path to be
                       checked.
            @throws Exception if the certificate is revoked or the status
                        cannot be checked or some error occurs.
        </member>
        <member name="T:Spire.Security.Pkix.TrustAnchor">
            <summary>
            A trust anchor or most-trusted Certification Authority (CA).
            
            This class represents a "most-trusted CA", which is used as a trust anchor
            for validating X.509 certification paths. A most-trusted CA includes the
            public key of the CA, the CA's name, and any constraints upon the set of
            paths which may be validated using this key. These parameters can be
            specified in the form of a trusted X509Certificate or as individual
            parameters.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.TrustAnchor.#ctor(Spire.Security.X509.X509Certificate,System.Byte[])">
             <summary>
             Creates an instance of TrustAnchor with the specified X509Certificate and
             optional name constraints, which are intended to be used as additional
             constraints when validating an X.509 certification path.
            	The name constraints are specified as a byte array. This byte array
            	should contain the DER encoded form of the name constraints, as they
            	would appear in the NameConstraints structure defined in RFC 2459 and
            	X.509. The ASN.1 definition of this structure appears below.
            	
            	<pre>
            	NameConstraints ::= SEQUENCE {
            		permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
            		excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
            	   
             GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
             
            		GeneralSubtree ::= SEQUENCE {
            		base                    GeneralName,
            		minimum         [0]     BaseDistance DEFAULT 0,
            		maximum         [1]     BaseDistance OPTIONAL }
            		
            		BaseDistance ::= INTEGER (0..MAX)
            
            		GeneralName ::= CHOICE {
            		otherName                       [0]     OtherName,
            		rfc822Name                      [1]     IA5String,
            		dNSName                         [2]     IA5String,
            		x400Address                     [3]     ORAddress,
            		directoryName                   [4]     Name,
            		ediPartyName                    [5]     EDIPartyName,
            		uniformResourceIdentifier       [6]     IA5String,
            		iPAddress                       [7]     OCTET STRING,
            		registeredID                    [8]     OBJECT IDENTIFIER}
            	</pre>
            	
            	Note that the name constraints byte array supplied is cloned to protect
            	against subsequent modifications.
             </summary>
             <param name="trustedCert">a trusted X509Certificate</param>
             <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
             NameConstraints extension to be used for checking name
             constraints. Only the value of the extension is included, not
             the OID or criticality flag. Specify null to omit the
             parameter.</param>
             <exception cref="T:System.ArgumentNullException">if the specified X509Certificate is null</exception>
        </member>
        <member name="M:Spire.Security.Pkix.TrustAnchor.#ctor(Spire.Security.Asn1.X509.X509Name,Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[])">
            <summary>
            Creates an instance of <c>TrustAnchor</c> where the
            most-trusted CA is specified as an X500Principal and public key.
            </summary>
            <remarks>
            <p>
            Name constraints are an optional parameter, and are intended to be used
            as additional constraints when validating an X.509 certification path.
            </p><p>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they
            would appear in the NameConstraints structure defined in RFC 2459
            and X.509. The ASN.1 notation for this structure is supplied in the
            documentation for the other constructors.
            </p><p>
            Note that the name constraints byte array supplied here is cloned to
            protect against subsequent modifications.
            </p>
            </remarks>
            <param name="caPrincipal">the name of the most-trusted CA as X509Name</param>
            <param name="pubKey">the public key of the most-trusted CA</param>
            <param name="nameConstraints">
            a byte array containing the ASN.1 DER encoding of a NameConstraints extension to
            be used for checking name constraints. Only the value of the extension is included,
            not the OID or criticality flag. Specify <c>null</c> to omit the parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if <c>caPrincipal</c> or <c>pubKey</c> is null
            </exception>
        </member>
        <member name="M:Spire.Security.Pkix.TrustAnchor.#ctor(System.String,Spire.Security.Crypto.AsymmetricKeyParameter,System.Byte[])">
            <summary>
            Creates an instance of <code>TrustAnchor</code> where the most-trusted
            CA is specified as a distinguished name and public key. Name constraints
            are an optional parameter, and are intended to be used as additional
            constraints when validating an X.509 certification path.
            <br/>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they would
            appear in the NameConstraints structure defined in RFC 2459 and X.509.
            </summary>
            <param name="caName">the X.500 distinguished name of the most-trusted CA in RFC
            2253 string format</param>
            <param name="pubKey">the public key of the most-trusted CA</param>
            <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
            NameConstraints extension to be used for checking name
            constraints. Only the value of the extension is included, not 
            the OID or criticality flag. Specify null to omit the 
            parameter.</param>
            throws NullPointerException, IllegalArgumentException
        </member>
        <member name="P:Spire.Security.Pkix.TrustAnchor.TrustedCert">
            <summary>
            Returns the most-trusted CA certificate.
            </summary>
        </member>
        <member name="P:Spire.Security.Pkix.TrustAnchor.CA">
            <summary>
            Returns the name of the most-trusted CA as an X509Name.
            </summary>
        </member>
        <member name="P:Spire.Security.Pkix.TrustAnchor.CAName">
            <summary>
            Returns the name of the most-trusted CA in RFC 2253 string format.
            </summary>
        </member>
        <member name="P:Spire.Security.Pkix.TrustAnchor.CAPublicKey">
            <summary>
            Returns the public key of the most-trusted CA.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.TrustAnchor.setNameConstraints(System.Byte[])">
            <summary>
            Decode the name constraints and clone them if not null.
            </summary>
        </member>
        <member name="M:Spire.Security.Pkix.TrustAnchor.ToString">
            <summary>
            Returns a formatted string describing the <code>TrustAnchor</code>.
            </summary>
            <returns>a formatted string describing the <code>TrustAnchor</code></returns>
        </member>
        <member name="T:Spire.Security.Tsp.TimeStampRequest">
            Base class for an RFC 3161 Time Stamp Request.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequest.#ctor(System.Byte[])">
             Create a TimeStampRequest from the past in byte array.
            
             @param req byte array containing the request.
             @throws IOException if the request is malformed.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequest.#ctor(System.IO.Stream)">
             Create a TimeStampRequest from the past in input stream.
            
             @param in input stream containing the request.
             @throws IOException if the request is malformed.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequest.Validate(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
             Validate the timestamp request, checking the digest to see if it is of an
             accepted type and whether it is of the correct length for the algorithm specified.
            
             @param algorithms a set of string OIDS giving accepted algorithms.
             @param policies if non-null a set of policies we are willing to sign under.
             @param extensions if non-null a set of extensions we are willing to accept.
             @throws TspException if the request is invalid, or processing fails.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequest.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Spire.Security.Tsp.TimeStampRequestGenerator">
            Generator for RFC 3161 Time Stamp Request objects.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequestGenerator.AddExtension(System.String,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 3)
            @throws IOException
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequestGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag
            The value parameter becomes the contents of the octet string associated
            with the extension.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequestGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 3)
            @throws IOException
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampRequestGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag
            The value parameter becomes the contents of the octet string associated
            with the extension.
        </member>
        <member name="T:Spire.Security.Tsp.TimeStampResponse">
            Base class for an RFC 3161 Time Stamp Response object.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampResponse.#ctor(System.Byte[])">
             Create a TimeStampResponse from a byte array containing an ASN.1 encoding.
            
             @param resp the byte array containing the encoded response.
             @throws TspException if the response is malformed.
             @throws IOException if the byte array doesn't represent an ASN.1 encoding.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampResponse.#ctor(System.IO.Stream)">
             Create a TimeStampResponse from an input stream containing an ASN.1 encoding.
            
             @param input the input stream containing the encoded response.
             @throws TspException if the response is malformed.
             @throws IOException if the stream doesn't represent an ASN.1 encoding.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampResponse.Validate(Spire.Security.Tsp.TimeStampRequest)">
             Check this response against to see if it a well formed response for
             the passed in request. Validation will include checking the time stamp
             token if the response status is GRANTED or GRANTED_WITH_MODS.
            
             @param request the request to be checked against
             @throws TspException if the request can not match this response.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampResponse.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:Spire.Security.Tsp.TimeStampResponseGenerator">
            Generator for RFC 3161 Time Stamp Responses.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampResponseGenerator.Generate(Spire.Security.Tsp.TimeStampRequest,Spire.Security.Math.BigInteger,Spire.Security.Utilities.Date.DateTimeObject)">
             Return an appropriate TimeStampResponse.
             <p>
             If genTime is null a timeNotAvailable error response will be returned.
            
             @param request the request this response is for.
             @param serialNumber serial number for the response token.
             @param genTime generation time for the response token.
             @param provider provider to use for signature calculation.
             @return
             @throws NoSuchAlgorithmException
             @throws NoSuchProviderException
             @throws TSPException
             </p>
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampResponseGenerator.GenerateFailResponse(Spire.Security.Asn1.Cmp.PkiStatus,System.Int32,System.String)">
             Generate a TimeStampResponse with chosen status and FailInfoField.
            
             @param status the PKIStatus to set.
             @param failInfoField the FailInfoField to set.
             @param statusString an optional string describing the failure.
             @return a TimeStampResponse with a failInfoField and optional statusString
             @throws TSPException in case the response could not be created
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampToken.Validate(Spire.Security.X509.X509Certificate)">
            Validate the time stamp token.
            <p>
            To be valid the token must be signed by the passed in certificate and
            the certificate must be the one referred to by the SigningCertificate
            attribute included in the hashed attributes of the token. The
            certificate must also have the ExtendedKeyUsageExtension with only
            KeyPurposeID.IdKPTimeStamping and have been valid at the time the
            timestamp was created.
            </p>
            <p>
            A successful call to validate means all the above are true.
            </p>
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampToken.ToCmsSignedData">
             Return the underlying CmsSignedData object.
            
             @return the underlying CMS structure.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampToken.GetEncoded">
             Return a ASN.1 encoded byte stream representing the encoded object.
            
             @throws IOException if encoding fails.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampTokenGenerator.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String)">
            basic creation - only the default attributes will be included here.
        </member>
        <member name="M:Spire.Security.Tsp.TimeStampTokenGenerator.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.X509.X509Certificate,System.String,System.String,Spire.Security.Asn1.Cms.AttributeTable,Spire.Security.Asn1.Cms.AttributeTable)">
            create with a signer with extra signed/unsigned attributes.
        </member>
        <member name="P:Spire.Security.Tsp.TimeStampTokenInfo.Nonce">
            @return the nonce value, null if there isn't one.
        </member>
        <member name="T:Spire.Security.Tsp.TspAlgorithms">
            Recognised hash algorithms for the time stamp protocol.
        </member>
        <member name="M:Spire.Security.Tsp.TspUtil.GetSignatureTimestamps(Spire.Security.Cms.SignerInformation)">
             Fetches the signature time-stamp attributes from a SignerInformation object.
             Checks that the MessageImprint for each time-stamp matches the signature field.
             (see RFC 3161 Appendix A).
            
             @param signerInfo a SignerInformation to search for time-stamps
             @return a collection of TimeStampToken objects
             @throws TSPValidationException
        </member>
        <member name="M:Spire.Security.Tsp.TspUtil.ValidateCertificate(Spire.Security.X509.X509Certificate)">
             Validate the passed in certificate as being of the correct type to be used
             for time stamping. To be valid it must have an ExtendedKeyUsage extension
             which has a key purpose identifier of id-kp-timeStamping.
            
             @param cert the certificate of interest.
             @throws TspValidationException if the certicate fails on one of the check points.
        </member>
        <member name="M:Spire.Security.Tsp.TspUtil.GetDigestAlgName(System.String)">
            <summary>
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
            </summary>
        </member>
        <member name="T:Spire.Security.Tsp.TspValidationException">
            Exception thrown if a TSP request or response fails to validate.
            <p>
            If a failure code is associated with the exception it can be retrieved using
            the getFailureCode() method.</p>
        </member>
        <member name="P:Spire.Security.Tsp.TspValidationException.FailureCode">
             Return the failure code associated with this exception - if one is set.
            
             @return the failure code if set, -1 otherwise.
        </member>
        <member name="T:Spire.Security.Utilities.Arrays">
            <summary> General array utilities.</summary>
        </member>
        <member name="M:Spire.Security.Utilities.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Arrays.CopyOfRange(System.Byte[],System.Int32,System.Int32)">
             Make a copy of a range of bytes from the passed in data array. The range can
             extend beyond the end of the input array, in which case the return array will
             be padded with zeroes.
            
             @param data the array from which the data is to be copied.
             @param from the start index at which the copying should take place.
             @param to the final index of the range (exclusive).
            
             @return a new byte array containing the range given.
        </member>
        <member name="T:Spire.Security.Utilities.BigIntegers">
            BigInteger utilities.
        </member>
        <member name="M:Spire.Security.Utilities.BigIntegers.AsUnsignedByteArray(Spire.Security.Math.BigInteger)">
             Return the passed in value as an unsigned byte array.
            
             @param value value to be converted.
             @return a byte array without a leading zero byte if present in the signed encoding.
        </member>
        <member name="M:Spire.Security.Utilities.BigIntegers.AsUnsignedByteArray(System.Int32,Spire.Security.Math.BigInteger)">
             Return the passed in value as an unsigned byte array of specified length, zero-extended as necessary.
            
             @param length desired length of result array.
             @param n value to be converted.
             @return a byte array of specified length, with leading zeroes as necessary given the size of n.
        </member>
        <member name="M:Spire.Security.Utilities.BigIntegers.CreateRandomInRange(Spire.Security.Math.BigInteger,Spire.Security.Math.BigInteger,Spire.Security.Security.SecureRandom)">
            Return a random BigInteger not less than 'min' and not greater than 'max'
            
            @param min the least value that may be generated
            @param max the greatest value that may be generated
            @param random the source of randomness
            @return a random BigInteger value in the range [min,max]
        </member>
        <member name="M:Spire.Security.Utilities.Date.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
            <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
            <param name="dateTime">A UTC DateTime value not before epoch.</param>
            <returns>Number of whole milliseconds after epoch.</returns>
            <exception cref="T:System.ArgumentException">'dateTime' is before epoch.</exception>
        </member>
        <member name="M:Spire.Security.Utilities.Date.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
            <summary>
            Create a DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
            <param name="unixMs">Number of milliseconds since the epoch.</param>
            <returns>A UTC DateTime value</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Date.DateTimeUtilities.CurrentUnixMs">
            <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Encode(System.Byte[])">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Decode(System.Byte[])">
             decode the base 64 encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Decode(System.String)">
             decode the base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64.Decode(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a base 64 output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64Encoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Base64Encoder.DecodeString(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.BufferedDecoder">
            <summary>
             A buffering class to allow translation from one format to another to
                be done in discrete chunks.
            </summary>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.BufferedDecoder.#ctor(Spire.Security.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create a buffered Decoder.
            </summary>
            <param name="translator">The translater to use.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">Data in.</param>
            <param name="output">Byte array for the output.</param>
            <param name="outOff">The offset in the output byte array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">The input data.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of data to process from input data array.</param>
            <param name="outBytes">Array to store output.</param>
            <param name="outOff">Position in output array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.BufferedEncoder">
            <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.BufferedEncoder.#ctor(Spire.Security.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create.
            </summary>
            <param name="translator">The translator to use.</param>
            <param name="bufferSize">Size of the chunks.</param>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">The byte.</param>
            <param name="outBytes">An array to store output in.</param>
            <param name="outOff">Offset within output array to start writing from.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">Input data Byte array containing data to be processed.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of input data to be processed.</param>
            <param name="outBytes">Output data array.</param>
            <param name="outOff">Offset within output data array to start writing to.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.Hex.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.HexTranslator">
            <summary>
            A hex translator.
            </summary>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexTranslator.GetEncodedBlockSize">
            <summary>
            Return encoded block size.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexTranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode some data.
            </summary>
            <param name="input">Input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amount of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The offset within the output data array to start writing from.</param>
            <returns>Amount of data encoded.</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexTranslator.GetDecodedBlockSize">
            <summary>
            Returns the decoded block size.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.HexTranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decode data from a byte array.
            </summary>
            <param name="input">The input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amounty of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The position within the output data array to start writing from.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.IEncoder">
            Encode and decode byte arrays (typically from binary to 7-bit ASCII
            encodings).
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.ITranslator">
            <summary>
            Translator interface.
            </summary>
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.UrlBase64">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.UrlBase64.Encode(System.Byte[])">
             Encode the input data producing a URL safe base 64 encoded byte array.
            
             @return a byte array containing the URL safe base 64 encoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.UrlBase64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.UrlBase64.Decode(System.Byte[])">
             Decode the URL safe base 64 encoded input data - white space will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.UrlBase64.Decode(System.Byte[],System.IO.Stream)">
             decode the URL safe base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.UrlBase64.Decode(System.String)">
             decode the URL safe base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Spire.Security.Utilities.Encoders.UrlBase64.Decode(System.String,System.IO.Stream)">
             Decode the URL safe base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Spire.Security.Utilities.Encoders.UrlBase64Encoder">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:Spire.Security.Utilities.IMemoable.Copy">
            <summary>
            Produce a copy of this object with its configuration and in its current state.
            </summary>
            <remarks>
            The returned object may be used simply to store the state, or may be used as a similar object
            starting from the copied state.
            </remarks>
        </member>
        <member name="M:Spire.Security.Utilities.IMemoable.Reset(Spire.Security.Utilities.IMemoable)">
            <summary>
            Restore a copied object state into this object.
            </summary>
            <remarks>
            Implementations of this method <em>should</em> try to avoid or minimise memory allocation to perform the reset.
            </remarks>
            <param name="other">an object originally {@link #copy() copied} from an object of the same type as this instance.</param>
            <exception cref="T:System.InvalidCastException">if the provided object is not of the correct type.</exception>
            <exception cref="T:Spire.Security.Utilities.MemoableResetException">if the <b>other</b> parameter is in some other way invalid.</exception>
        </member>
        <member name="M:Spire.Security.Utilities.IO.Pem.PemObjectGenerator.Generate">
            <returns>
            A <see cref="T:Spire.Security.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:Spire.Security.Utilities.IO.Pem.PemGenerationException"></exception>
        </member>
        <member name="M:Spire.Security.Utilities.IO.Pem.PemObjectParser.ParseObject(Spire.Security.Utilities.IO.Pem.PemObject)">
            <param name="obj">
            A <see cref="T:Spire.Security.Utilities.IO.Pem.PemObject"/>
            </param>
            <returns>
            A <see cref="T:System.Object"/>
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Utilities.IO.Pem.PemReader.ReadPemObject">
            <returns>
            A <see cref="T:Spire.Security.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Utilities.IO.Pem.PemWriter">
            A generic PEM writer, based on RFC 1421
        </member>
        <member name="M:Spire.Security.Utilities.IO.Pem.PemWriter.#ctor(System.IO.TextWriter)">
             Base constructor.
            
             @param out output stream to use.
        </member>
        <member name="M:Spire.Security.Utilities.IO.Pem.PemWriter.GetOutputSize(Spire.Security.Utilities.IO.Pem.PemObject)">
             Return the number of bytes or characters required to contain the
             passed in object if it is PEM encoded.
            
             @param obj pem object to be output
             @return an estimate of the number of bytes
        </member>
        <member name="M:Spire.Security.Utilities.IO.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Pipe all bytes from <c>inStr</c> to <c>outStr</c>, throwing <c>StreamFlowException</c> if greater
            than <c>limit</c> bytes in <c>inStr</c>.
            </summary>
            <param name="inStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <param name="limit">
            A <see cref="T:System.Int64"/>
            </param>
            <param name="outStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <returns>The number of bytes actually transferred, if not greater than <c>limit</c></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spire.Security.Utilities.IO.Streams.WriteBufTo(System.IO.MemoryStream,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Spire.Security.Utilities.MemoableResetException">
            Exception to be thrown on a failure to reset an object implementing Memoable.
            <p>
            The exception extends InvalidCastException to enable users to have a single handling case,
            only introducing specific handling of this one if required.
            </p>
        </member>
        <member name="M:Spire.Security.Utilities.MemoableResetException.#ctor(System.String)">
             Basic Constructor.
            
             @param msg message to be associated with this exception.
        </member>
        <member name="M:Spire.Security.Utilities.Net.IPAddress.IsValid(System.String)">
             Validate the given IPv4 or IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid address, false otherwise
        </member>
        <member name="M:Spire.Security.Utilities.Net.IPAddress.IsValidWithNetMask(System.String)">
             Validate the given IPv4 or IPv6 address and netmask.
            
             @param address the IP address as a string.
            
             @return true if a valid address with netmask, false otherwise
        </member>
        <member name="M:Spire.Security.Utilities.Net.IPAddress.IsValidIPv4(System.String)">
             Validate the given IPv4 address.
             
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="M:Spire.Security.Utilities.Net.IPAddress.IsValidIPv6(System.String)">
             Validate the given IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="T:Spire.Security.Utilities.Strings">
            <summary> General string utilities.</summary>
        </member>
        <member name="T:Spire.Security.Utilities.Zlib.ZDeflaterOutputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:Spire.Security.Utilities.Zlib.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:Spire.Security.X509.AttributeCertificateHolder">
            <remarks>
            The Holder object.
            <pre>
            Holder ::= SEQUENCE {
            	baseCertificateID   [0] IssuerSerial OPTIONAL,
            		-- the issuer and serial number of
            		-- the holder's Public Key Certificate
            	entityName          [1] GeneralNames OPTIONAL,
            		-- the name of the claimant or role
            	objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
            		-- used to directly authenticate the holder,
            		-- for example, an executable
            }
            </pre>
            </remarks>
        </member>
        <member name="M:Spire.Security.X509.AttributeCertificateHolder.#ctor(System.Int32,System.String,System.String,System.Byte[])">
             Constructs a holder for v2 attribute certificates with a hash value for
             some type of object.
             <p>
             <code>digestedObjectType</code> can be one of the following:
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
             <p>This cannot be used if a v1 attribute certificate is used.</p>
            
             @param digestedObjectType The digest object type.
             @param digestAlgorithm The algorithm identifier for the hash.
             @param otherObjectTypeID The object type ID if
                        <code>digestedObjectType</code> is
                        <code>otherObjectDigest</code>.
             @param objectDigest The hash value.
        </member>
        <member name="P:Spire.Security.X509.AttributeCertificateHolder.DigestedObjectType">
             Returns the digest object type if an object digest info is used.
             <p>
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
            
             @return The digest object type or -1 if no object digest info is set.
        </member>
        <member name="P:Spire.Security.X509.AttributeCertificateHolder.DigestAlgorithm">
             Returns the other object type ID if an object digest info is used.
            
             @return The other object type ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="M:Spire.Security.X509.AttributeCertificateHolder.GetObjectDigest">
             Returns the hash if an object digest info is used.
            
             @return The hash or <code>null</code> if no object digest info is set.
        </member>
        <member name="P:Spire.Security.X509.AttributeCertificateHolder.OtherObjectTypeID">
             Returns the digest algorithm ID if an object digest info is used.
            
             @return The digest algorithm ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="M:Spire.Security.X509.AttributeCertificateHolder.GetEntityNames">
             Return any principal objects inside the attribute certificate holder entity names field.
            
             @return an array of IPrincipal objects (usually X509Name), null if no entity names field is set.
        </member>
        <member name="M:Spire.Security.X509.AttributeCertificateHolder.GetIssuer">
             Return the principals associated with the issuer attached to this holder
            
             @return an array of principals, null if no BaseCertificateID is set.
        </member>
        <member name="P:Spire.Security.X509.AttributeCertificateHolder.SerialNumber">
             Return the serial number associated with the issuer attached to this holder.
            
             @return the certificate serial number, null if no BaseCertificateID is set.
        </member>
        <member name="T:Spire.Security.X509.AttributeCertificateIssuer">
            Carrying class for an attribute certificate issuer.
        </member>
        <member name="M:Spire.Security.X509.AttributeCertificateIssuer.#ctor(Spire.Security.Asn1.X509.AttCertIssuer)">
             Set the issuer directly with the ASN.1 structure.
            
             @param issuer The issuer
        </member>
        <member name="M:Spire.Security.X509.AttributeCertificateIssuer.GetPrincipals">
            <summary>Return any principal objects inside the attribute certificate issuer object.</summary>
            <returns>An array of IPrincipal objects (usually X509Principal).</returns>
        </member>
        <member name="T:Spire.Security.X509.Extension.AuthorityKeyIdentifierStructure">
            <remarks>A high level authority key identifier.</remarks>
        </member>
        <member name="M:Spire.Security.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(Spire.Security.Asn1.Asn1OctetString)">
             Constructor which will take the byte[] returned from getExtensionValue()
            
             @param encodedValue a DER octet encoded string with the extension structure in it.
             @throws IOException on parsing errors.
        </member>
        <member name="M:Spire.Security.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(Spire.Security.X509.X509Certificate)">
             Create an AuthorityKeyIdentifier using the passed in certificate's public
             key, issuer and serial number.
            
             @param certificate the certificate providing the information.
             @throws CertificateParsingException if there is a problem processing the certificate
        </member>
        <member name="M:Spire.Security.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(Spire.Security.Crypto.AsymmetricKeyParameter)">
             Create an AuthorityKeyIdentifier using just the hash of the
             public key.
            
             @param pubKey the key to generate the hash from.
             @throws InvalidKeyException if there is a problem using the key.
        </member>
        <member name="T:Spire.Security.X509.Extension.SubjectKeyIdentifierStructure">
            A high level subject key identifier.
        </member>
        <member name="M:Spire.Security.X509.Extension.SubjectKeyIdentifierStructure.#ctor(Spire.Security.Asn1.Asn1OctetString)">
             Constructor which will take the byte[] returned from getExtensionValue()
            
             @param encodedValue a DER octet encoded string with the extension structure in it.
             @throws IOException on parsing errors.
        </member>
        <member name="T:Spire.Security.X509.IX509AttributeCertificate">
            <remarks>Interface for an X.509 Attribute Certificate.</remarks>
        </member>
        <member name="P:Spire.Security.X509.IX509AttributeCertificate.Version">
            <summary>The version number for the certificate.</summary>
        </member>
        <member name="P:Spire.Security.X509.IX509AttributeCertificate.SerialNumber">
            <summary>The serial number for the certificate.</summary>
        </member>
        <member name="P:Spire.Security.X509.IX509AttributeCertificate.NotBefore">
            <summary>The UTC DateTime before which the certificate is not valid.</summary>
        </member>
        <member name="P:Spire.Security.X509.IX509AttributeCertificate.NotAfter">
            <summary>The UTC DateTime after which the certificate is not valid.</summary>
        </member>
        <member name="P:Spire.Security.X509.IX509AttributeCertificate.Holder">
            <summary>The holder of the certificate.</summary>
        </member>
        <member name="P:Spire.Security.X509.IX509AttributeCertificate.Issuer">
            <summary>The issuer details for the certificate.</summary>
        </member>
        <member name="M:Spire.Security.X509.IX509AttributeCertificate.GetAttributes">
            <summary>Return the attributes contained in the attribute block in the certificate.</summary>
            <returns>An array of attributes.</returns>
        </member>
        <member name="M:Spire.Security.X509.IX509AttributeCertificate.GetAttributes(System.String)">
            <summary>Return the attributes with the same type as the passed in oid.</summary>
            <param name="oid">The object identifier we wish to match.</param>
            <returns>An array of matched attributes, null if there is no match.</returns>
        </member>
        <member name="M:Spire.Security.X509.IX509AttributeCertificate.GetEncoded">
            <summary>Return an ASN.1 encoded byte array representing the attribute certificate.</summary>
            <returns>An ASN.1 encoded byte array.</returns>
            <exception cref="T:System.IO.IOException">If the certificate cannot be encoded.</exception>
        </member>
        <member name="M:Spire.Security.X509.IX509Extension.GetCriticalExtensionOids">
            <summary>
            Get all critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="M:Spire.Security.X509.IX509Extension.GetNonCriticalExtensionOids">
            <summary>
            Get all non-critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="T:Spire.Security.X509.PrincipalUtilities">
            <remarks>
            A utility class that will extract X509Principal objects from X.509 certificates.
            <p>
            Use this in preference to trying to recreate a principal from a string, not all
            DNs are what they should be, so it's best to leave them encoded where they
            can be.</p>
            </remarks>
        </member>
        <member name="M:Spire.Security.X509.PrincipalUtilities.GetIssuerX509Principal(Spire.Security.X509.X509Certificate)">
            <summary>Return the issuer of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:Spire.Security.X509.PrincipalUtilities.GetSubjectX509Principal(Spire.Security.X509.X509Certificate)">
            <summary>Return the subject of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:Spire.Security.X509.PrincipalUtilities.GetIssuerX509Principal(Spire.Security.X509.X509Crl)">
            <summary>Return the issuer of the given CRL as an X509Principal.</summary>
        </member>
        <member name="T:Spire.Security.X509.Store.X509AttrCertStoreSelector">
             This class is an <code>Selector</code> like implementation to select
             attribute certificates from a given set of criteria.
            
             @see org.bouncycastle.x509.X509AttributeCertificate
             @see org.bouncycastle.x509.X509Store
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given attribute certificate should be selected.
            </summary>
            <param name="obj">The attribute certificate to be checked.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="P:Spire.Security.X509.Store.X509AttrCertStoreSelector.AttributeCert">
            <summary>The attribute certificate which must be matched.</summary>
            <remarks>If <c>null</c> is given, any will do.</remarks>
        </member>
        <member name="P:Spire.Security.X509.Store.X509AttrCertStoreSelector.AttributeCertificateValid">
            <summary>The criteria for validity</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:Spire.Security.X509.Store.X509AttrCertStoreSelector.Holder">
            <summary>The holder.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:Spire.Security.X509.Store.X509AttrCertStoreSelector.Issuer">
            <summary>The issuer.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:Spire.Security.X509.Store.X509AttrCertStoreSelector.SerialNumber">
            <summary>The serial number.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.AddTargetName(Spire.Security.Asn1.X509.GeneralName)">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name The name as a GeneralName (not <code>null</code>)
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.AddTargetName(System.Byte[])">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the name in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.SetTargetNames(System.Collections.IEnumerable)">
            Adds a collection with target names criteria. If <code>null</code> is
            given any will do.
            <p>
            The collection consists of either GeneralName objects or byte[] arrays representing
            DER encoded GeneralName structures.
            </p>
            
            @param names A collection of target names.
            @throws IOException if a parsing error occurs.
            @see #AddTargetName(byte[])
            @see #AddTargetName(GeneralName)
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.GetTargetNames">
            Gets the target names. The collection consists of <code>List</code>s
            made up of an <code>Integer</code> in the first entry and a DER encoded
            byte array or a <code>String</code> in the second entry.
            <p>The returned collection is immutable.</p>
            
            @return The collection of target names
            @see #setTargetNames(Collection)
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(Spire.Security.Asn1.X509.GeneralName)">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param group The group as GeneralName form (not <code>null</code>)
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(System.Byte[])">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the group in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.SetTargetGroups(System.Collections.IEnumerable)">
             Adds a collection with target groups criteria. If <code>null</code> is
             given any will do.
             <p>
             The collection consists of <code>GeneralName</code> objects or <code>byte[]</code>
             representing DER encoded GeneralNames.
             </p>
            
             @param names A collection of target groups.
             @throws IOException if a parsing error occurs.
             @see #AddTargetGroup(byte[])
             @see #AddTargetGroup(GeneralName)
        </member>
        <member name="M:Spire.Security.X509.Store.X509AttrCertStoreSelector.GetTargetGroups">
             Gets the target groups. The collection consists of <code>List</code>s
             made up of an <code>Integer</code> in the first entry and a DER encoded
             byte array or a <code>String</code> in the second entry.
             <p>The returned collection is immutable.</p>
            
             @return The collection of target groups.
             @see #setTargetGroups(Collection)
        </member>
        <member name="T:Spire.Security.X509.Store.X509CertPairStoreSelector">
            <remarks>
            This class is an <code>IX509Selector</code> implementation to select
            certificate pairs, which are e.g. used for cross certificates. The set of
            criteria is given from two <code>X509CertStoreSelector</code> objects,
            each of which, if present, must match the respective component of a pair.
            </remarks>
        </member>
        <member name="P:Spire.Security.X509.Store.X509CertPairStoreSelector.CertPair">
            <summary>The certificate pair which is used for testing on equality.</summary>
        </member>
        <member name="P:Spire.Security.X509.Store.X509CertPairStoreSelector.ForwardSelector">
            <summary>The certificate selector for the forward part.</summary>
        </member>
        <member name="P:Spire.Security.X509.Store.X509CertPairStoreSelector.ReverseSelector">
            <summary>The certificate selector for the reverse part.</summary>
        </member>
        <member name="M:Spire.Security.X509.Store.X509CertPairStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given certificate pair should be selected. If
            <c>obj</c> is not a <code>X509CertificatePair</code>, this method
            returns <code>false</code>.
            </summary>
            <param name="obj">The <code>X509CertificatePair</code> to be tested.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="P:Spire.Security.X509.Store.X509CertStoreSelector.Policy">
            <summary>
            An <code>ISet</code> of <code>DerObjectIdentifier</code> objects.
            </summary>
        </member>
        <member name="T:Spire.Security.X509.Store.X509CollectionStore">
            A simple collection backed store.
        </member>
        <member name="M:Spire.Security.X509.Store.X509CollectionStore.#ctor(System.Collections.ICollection)">
             Basic constructor.
            
             @param collection - initial contents for the store, this is copied.
        </member>
        <member name="M:Spire.Security.X509.Store.X509CollectionStore.GetMatches(Spire.Security.X509.Store.IX509Selector)">
             Return the matches in the collection for the passed in selector.
            
             @param selector the selector to match against.
             @return a possibly empty collection of matching objects.
        </member>
        <member name="T:Spire.Security.X509.Store.X509CollectionStoreParameters">
            <remarks>This class contains a collection for collection based <code>X509Store</code>s.</remarks>
        </member>
        <member name="M:Spire.Security.X509.Store.X509CollectionStoreParameters.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            <p>
            The collection is copied.
            </p>
            </summary>
            <param name="collection">The collection containing X.509 object types.</param>
            <exception cref="T:System.ArgumentNullException">If collection is null.</exception>
        </member>
        <member name="M:Spire.Security.X509.Store.X509CollectionStoreParameters.GetCollection">
            <summary>Returns a copy of the <code>ICollection</code>.</summary>
        </member>
        <member name="M:Spire.Security.X509.Store.X509CollectionStoreParameters.ToString">
            <summary>Returns a formatted string describing the parameters.</summary>
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.Issuers">
            <summary>
            An <code>ICollection</code> of <code>X509Name</code> objects
            </summary>
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.AttrCertChecking">
             The attribute certificate being checked. This is not a criterion.
             Rather, it is optional information that may help a {@link X509Store} find
             CRLs that would be relevant when checking revocation for the specified
             attribute certificate. If <code>null</code> is specified, then no such
             optional information is provided.
            
             @param attrCert the <code>IX509AttributeCertificate</code> being checked (or
                         <code>null</code>)
             @see #getAttrCertificateChecking()
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.CompleteCrlEnabled">
             If <code>true</code> only complete CRLs are returned. Defaults to
             <code>false</code>.
            
             @return <code>true</code> if only complete CRLs are returned.
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.DeltaCrlIndicatorEnabled">
             Returns if this selector must match CRLs with the delta CRL indicator
             extension set. Defaults to <code>false</code>.
            
             @return Returns <code>true</code> if only CRLs with the delta CRL
                     indicator extension are selected.
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.IssuingDistributionPoint">
             The issuing distribution point.
             <p>
             The issuing distribution point extension is a CRL extension which
             identifies the scope and the distribution point of a CRL. The scope
             contains among others information about revocation reasons contained in
             the CRL. Delta CRLs and complete CRLs must have matching issuing
             distribution points.</p>
             <p>
             The byte array is cloned to protect against subsequent modifications.</p>
             <p>
             You must also enable or disable this criteria with
             {@link #setIssuingDistributionPointEnabled(bool)}.</p>
            
             @param issuingDistributionPoint The issuing distribution point to set.
                                             This is the DER encoded OCTET STRING extension value.
             @see #getIssuingDistributionPoint()
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.IssuingDistributionPointEnabled">
             Whether the issuing distribution point criteria should be applied.
             Defaults to <code>false</code>.
             <p>
             You may also set the issuing distribution point criteria if not a missing
             issuing distribution point should be assumed.</p>
            
             @return Returns if the issuing distribution point check is enabled.
        </member>
        <member name="P:Spire.Security.X509.Store.X509CrlStoreSelector.MaxBaseCrlNumber">
             The maximum base CRL number. Defaults to <code>null</code>.
            
             @return Returns the maximum base CRL number.
             @see #setMaxBaseCRLNumber(BigInteger)
        </member>
        <member name="T:Spire.Security.X509.SubjectPublicKeyInfoFactory">
            <summary>
            A factory to produce Public Key Info Objects.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
            <param name="key">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RsaKeyParameters or ECPublicKeyParameters</param>
            <returns>A subject public key info object.</returns>
            <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
        </member>
        <member name="M:Spire.Security.X509.X509AttrCertParser.ReadAttrCert(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509AttrCertParser.ReadAttrCerts(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509AttrCertParser.ReadAttrCert(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:Spire.Security.X509.X509AttrCertParser.ReadAttrCerts(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="T:Spire.Security.X509.X509Attribute">
            Class for carrying the values in an X.509 Attribute.
        </member>
        <member name="M:Spire.Security.X509.X509Attribute.#ctor(Spire.Security.Asn1.Asn1Encodable)">
            @param at an object representing an attribute.
        </member>
        <member name="M:Spire.Security.X509.X509Attribute.#ctor(System.String,Spire.Security.Asn1.Asn1Encodable)">
             Create an X.509 Attribute with the type given by the passed in oid and
             the value represented by an ASN.1 Set containing value.
            
             @param oid type of the attribute
             @param value value object to go into the atribute's value set.
        </member>
        <member name="M:Spire.Security.X509.X509Attribute.#ctor(System.String,Spire.Security.Asn1.Asn1EncodableVector)">
             Create an X.59 Attribute with the type given by the passed in oid and the
             value represented by an ASN.1 Set containing the objects in value.
            
             @param oid type of the attribute
             @param value vector of values to go in the attribute's value set.
        </member>
        <member name="T:Spire.Security.X509.X509Certificate">
            <summary>
            An Object representing an X509 Certificate.
            Has static methods for loading Certificates encoded in many forms that return X509Certificate Objects.
            </summary>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.IsValidNow">
            <summary>
            Return true if the current time is within the start and end times nominated on the certificate.
            </summary>
            <returns>true id certificate is valid for the current time.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.IsValid(System.DateTime)">
            <summary>
            Return true if the nominated time is within the start and end times nominated on the certificate.
            </summary>
            <param name="time">The time to test validity against.</param>
            <returns>True if certificate is valid for nominated time.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.CheckValidity">
            <summary>
            Checks if the current date is within certificate's validity period.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.CheckValidity(System.DateTime)">
            <summary>
            Checks if the given date is within certificate's validity period.
            </summary>
            <exception cref="T:Spire.Security.Security.Certificates.CertificateExpiredException">if the certificate is expired by given date</exception>
            <exception cref="T:Spire.Security.Security.Certificates.CertificateNotYetValidException">if the certificate is not yet valid on given date</exception>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.Version">
            <summary>
            Return the certificate's version.
            </summary>
            <returns>An integer whose value Equals the version of the cerficate.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.SerialNumber">
            <summary>
            Return a <see cref="T:Spire.Security.Math.BigInteger">BigInteger</see> containing the serial number.
            </summary>
            <returns>The Serial number.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.IssuerDN">
            <summary>
            Get the Issuer Distinguished Name. (Who signed the certificate.)
            </summary>
            <returns>And X509Object containing name and value pairs.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.SubjectDN">
            <summary>
            Get the subject of this certificate.
            </summary>
            <returns>An X509Name object containing name and value pairs.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.NotBefore">
            <summary>
            The time that this certificate is valid from.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.NotAfter">
            <summary>
            The time that this certificate is valid up to.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.GetTbsCertificate">
            <summary>
            Return the Der encoded TbsCertificate data.
            This is the certificate component less the signature.
            To Get the whole certificate call the GetEncoded() member.
            </summary>
            <returns>A byte array containing the Der encoded Certificate component.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.GetSignature">
            <summary>
            The signature.
            </summary>
            <returns>A byte array containg the signature of the certificate.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.SigAlgName">
            <summary>
            A meaningful version of the Signature Algorithm. (EG SHA1WITHRSA)
            </summary>
            <returns>A sting representing the signature algorithm.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.SigAlgOid">
            <summary>
            Get the Signature Algorithms Object ID.
            </summary>
            <returns>A string containg a '.' separated object id.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.GetSigAlgParams">
            <summary>
            Get the signature algorithms parameters. (EG DSA Parameters)
            </summary>
            <returns>A byte array containing the Der encoded version of the parameters or null if there are none.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.IssuerUniqueID">
            <summary>
            Get the issuers UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509Certificate.SubjectUniqueID">
            <summary>
            Get the subjects UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.GetKeyUsage">
            <summary>
            Get a key usage guidlines.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.GetPublicKey">
            <summary>
            Get the public key of the subject of the certificate.
            </summary>
            <returns>The public key parameters.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.GetEncoded">
            <summary>
            Return a Der encoded version of this certificate.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.Verify(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the certificate's signature using the nominated public key.
            </summary>
            <param name="key">An appropriate public key parameter object, RsaPublicKeyParameters, DsaPublicKeyParameters or ECDsaPublicKeyParameters</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If key submitted is not of the above nominated types.</exception>
        </member>
        <member name="M:Spire.Security.X509.X509Certificate.Verify(Spire.Security.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
        </member>
        <member name="T:Spire.Security.X509.X509CertificatePair">
            <remarks>
            This class contains a cross certificate pair. Cross certificates pairs may
            contain two cross signed certificates from two CAs. A certificate from the
            other CA to this CA is contained in the forward certificate, the certificate
            from this CA to the other CA is contained in the reverse certificate.
            </remarks>
        </member>
        <member name="M:Spire.Security.X509.X509CertificatePair.#ctor(Spire.Security.X509.X509Certificate,Spire.Security.X509.X509Certificate)">
            <summary>Constructor</summary>
            <param name="forward">Certificate from the other CA to this CA.</param>
            <param name="reverse">Certificate from this CA to the other CA.</param>
        </member>
        <member name="M:Spire.Security.X509.X509CertificatePair.#ctor(Spire.Security.Asn1.X509.CertificatePair)">
            <summary>Constructor from a ASN.1 CertificatePair structure.</summary>
            <param name="pair">The <c>CertificatePair</c> ASN.1 object.</param>
        </member>
        <member name="P:Spire.Security.X509.X509CertificatePair.Forward">
            <summary>Returns the certificate from the other CA to this CA.</summary>
        </member>
        <member name="P:Spire.Security.X509.X509CertificatePair.Reverse">
            <summary>Returns the certificate from this CA to the other CA.</summary>
        </member>
        <member name="T:Spire.Security.X509.X509CertificateParser">
            class for dealing with X509 certificates.
            <p>
            At the moment this will deal with "-----BEGIN CERTIFICATE-----" to "-----END CERTIFICATE-----"
            base 64 encoded certs, as well as the BER binaries of certificates and some classes of PKCS#7
            objects.</p>
        </member>
        <member name="M:Spire.Security.X509.X509CertificateParser.ReadCertificate(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509CertificateParser.ReadCertificates(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509CertificateParser.ReadCertificate(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:Spire.Security.X509.X509CertificateParser.ReadCertificates(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="M:Spire.Security.X509.X509CertPairParser.ReadCertPair(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509CertPairParser.ReadCertPairs(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Spire.Security.X509.X509Crl">
             The following extensions are listed in RFC 2459 as relevant to CRLs
            
             Authority Key Identifier
             Issuer Alternative Name
             CRL Number
             Delta CRL Indicator (critical)
             Issuing Distribution Point (critical)
        </member>
        <member name="M:Spire.Security.X509.X509Crl.Verify(Spire.Security.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the CRL's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the CRL's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the CRL algorithm is invalid.</exception>
        </member>
        <member name="M:Spire.Security.X509.X509Crl.ToString">
             Returns a string representation of this CRL.
            
             @return a string representation of this CRL.
        </member>
        <member name="M:Spire.Security.X509.X509Crl.IsRevoked(Spire.Security.X509.X509Certificate)">
             Checks whether the given certificate is on this CRL.
            
             @param cert the certificate to check for.
             @return true if the given certificate is on this CRL,
             false otherwise.
        </member>
        <member name="T:Spire.Security.X509.X509CrlEntry">
             The following extensions are listed in RFC 2459 as relevant to CRL Entries
            
             ReasonCode Hode Instruction Code Invalidity Date Certificate Issuer
             (critical)
        </member>
        <member name="M:Spire.Security.X509.X509CrlEntry.#ctor(Spire.Security.Asn1.X509.CrlEntry,System.Boolean,Spire.Security.Asn1.X509.X509Name)">
             Constructor for CRLEntries of indirect CRLs. If <code>isIndirect</code>
             is <code>false</code> {@link #getCertificateIssuer()} will always
             return <code>null</code>, <code>previousCertificateIssuer</code> is
             ignored. If this <code>isIndirect</code> is specified and this CrlEntry
             has no certificate issuer CRL entry extension
             <code>previousCertificateIssuer</code> is returned by
             {@link #getCertificateIssuer()}.
            
             @param c
                        TbsCertificateList.CrlEntry object.
             @param isIndirect
                        <code>true</code> if the corresponding CRL is a indirect
                        CRL.
             @param previousCertificateIssuer
                        Certificate issuer of the previous CrlEntry.
        </member>
        <member name="M:Spire.Security.X509.X509CrlParser.ReadCrl(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509CrlParser.ReadCrls(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Spire.Security.X509.X509CrlParser.ReadCrl(System.IO.Stream)">
            Generates a certificate revocation list (CRL) object and initializes
            it with the data read from the input stream inStream.
        </member>
        <member name="M:Spire.Security.X509.X509CrlParser.ReadCrls(System.IO.Stream)">
             Returns a (possibly empty) collection view of the CRLs read from
             the given input stream inStream.
            
             The inStream may contain a sequence of DER-encoded CRLs, or
             a PKCS#7 CRL set.  This is a PKCS#7 SignedData object, with the
             only significant field being crls.  In particular the signature
             and the contents are ignored.
        </member>
        <member name="M:Spire.Security.X509.X509ExtensionBase.GetNonCriticalExtensionOids">
            <summary>
            Get non critical extensions.
            </summary>
            <returns>A set of non critical extension oids.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509ExtensionBase.GetCriticalExtensionOids">
            <summary>
            Get any critical extensions.
            </summary>
            <returns>A sorted list of critical entension.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509ExtensionBase.GetExtensionValue(System.String)">
            <summary>
            Get the value of a given extension.
            </summary>
            <param name="oid">The object ID of the extension. </param>
            <returns>An Asn1OctetString object if that extension is found or null if not.</returns>
        </member>
        <member name="T:Spire.Security.X509.X509KeyUsage">
             A holding class for constructing an X509 Key Usage extension.
            
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:Spire.Security.X509.X509KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509KeyUsage.keyEncipherment | X509KeyUsage.dataEncipherment)
        </member>
        <member name="M:Spire.Security.X509.X509SignatureUtilities.GetDigestAlgName(Spire.Security.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:Spire.Security.X509.X509V1CertificateGenerator">
            <summary>
            Class to Generate X509V1 Certificates.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.Reset">
            <summary>
            Reset the generator.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetSerialNumber(Spire.Security.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetIssuerDN(Spire.Security.Asn1.X509.X509Name)">
            <summary>
            Set the issuer distinguished name.
            The issuer is the entity whose private key is used to sign the certificate.
            </summary>
            <param name="issuer">The issuers DN.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetSubjectDN(Spire.Security.Asn1.X509.X509Name)">
            <summary>
            Set the subject distinguished name.
            The subject describes the entity associated with the public key.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetPublicKey(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            This can be either a name or an OID, names are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">string representation of the algorithm name</param>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate a new X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Security.SecureRandom)">
            <summary>
            Generate a new X509Certificate specifying a SecureRandom instance that you would like to use.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <param name="random">The Secure Random you want to use.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509V1CertificateGenerator.Generate(Spire.Security.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X509Certificate using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509V1CertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:Spire.Security.X509.X509V2AttributeCertificate">
            <summary>An implementation of a version 2 X.509 Attribute Certificate.</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificate.Verify(Spire.Security.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
        </member>
        <member name="T:Spire.Security.X509.X509V2AttributeCertificateGenerator">
            <remarks>Class to produce an X.509 Version 2 AttributeCertificate.</remarks>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.SetHolder(Spire.Security.X509.AttributeCertificateHolder)">
            <summary>Set the Holder of this Attribute Certificate.</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.SetIssuer(Spire.Security.X509.AttributeCertificateIssuer)">
            <summary>Set the issuer.</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.SetSerialNumber(Spire.Security.Math.BigInteger)">
            <summary>Set the serial number for the certificate.</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm. This can be either a name or an OID, names
            are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">The algorithm name.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.AddAttribute(Spire.Security.X509.X509Attribute)">
            <summary>Add an attribute.</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            <summary>Add a given extension field for the standard extensions tag.</summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add a given extension field for the standard extensions tag.
            The value parameter becomes the contents of the octet string associated
            with the extension.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509 certificate, based on the current issuer and subject.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Security.SecureRandom)">
            <summary>
            Generate an X509 certificate, based on the current issuer and subject,
            using the supplied source of randomness, if required.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V2AttributeCertificateGenerator.Generate(Spire.Security.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X.509 Attribute Certificate using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An IX509AttributeCertificate.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509V2AttributeCertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:Spire.Security.X509.X509V2CrlGenerator">
            class to produce an X.509 Version 2 CRL.
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.Reset">
            reset the generator
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.SetIssuerDN(Spire.Security.Asn1.X509.X509Name)">
            Set the issuer distinguished name - the issuer is the entity whose private key is used to sign the
            certificate.
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddCrlEntry(Spire.Security.Math.BigInteger,System.DateTime,System.Int32)">
             Reason being as indicated by CrlReason, i.e. CrlReason.KeyCompromise
             or 0 if CrlReason is not to be used
            
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddCrlEntry(Spire.Security.Math.BigInteger,System.DateTime,System.Int32,System.DateTime)">
             Add a CRL entry with an Invalidity Date extension as well as a CrlReason extension.
             Reason being as indicated by CrlReason, i.e. CrlReason.KeyCompromise
             or 0 if CrlReason is not to be used
            
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddCrlEntry(Spire.Security.Math.BigInteger,System.DateTime,Spire.Security.Asn1.X509.X509Extensions)">
             Add a CRL entry with extensions.
            
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddCrl(Spire.Security.X509.X509Crl)">
             Add the CRLEntry objects contained in a previous CRL.
            
             @param other the X509Crl to source the other entries from.
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this CRL.
            </summary>
            <param name="signatureAlgorithm"/>
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X.509 CRL, based on the current issuer and subject.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Crl.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Security.SecureRandom)">
            <summary>
            Generate an X.509 CRL, based on the current issuer and subject using the specified secure random.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="random">Your Secure Random instance.</param>
            <returns>An X509Crl.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509V2CrlGenerator.Generate(Spire.Security.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X509Crl using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An X509Crl.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509V2CrlGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:Spire.Security.X509.X509V3CertificateGenerator">
            <summary>
            A class to Generate Version 3 X509Certificates.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.Reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetSerialNumber(Spire.Security.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can Get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetIssuerDN(Spire.Security.Asn1.X509.X509Name)">
            <summary>
            Set the distinguished name of the issuer.
            The issuer is the entity which is signing the certificate.
            </summary>
            <param name="issuer">The issuer's DN.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetSubjectDN(Spire.Security.Asn1.X509.X509Name)">
            <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetPublicKey(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetSubjectUniqueID(System.Boolean[])">
            <summary>
            Set the subject unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.SetIssuerUniqueID(System.Boolean[])">
            <summary>
            Set the issuer unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3).
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,Spire.Security.Asn1.Asn1Encodable)">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.AddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.CopyAndAddExtension(System.String,System.Boolean,Spire.Security.X509.X509Certificate)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3),
            copying the extension value from another certificate.
            </summary>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.CopyAndAddExtension(Spire.Security.Asn1.DerObjectIdentifier,System.Boolean,Spire.Security.X509.X509Certificate)">
            add a given extension field for the standard extensions tag (tag 3)
            copying the extension value from another certificate.
            @throws CertificateParsingException if the extension cannot be extracted.
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.Generate(Spire.Security.Crypto.AsymmetricKeyParameter,Spire.Security.Security.SecureRandom)">
            <summary>
            Generate an X509Certificate using your own SecureRandom.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="random">You Secure Random instance.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:Spire.Security.X509.X509V3CertificateGenerator.Generate(Spire.Security.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X509Certificate using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:Spire.Security.X509.X509V3CertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.DigitalSignatureHelper.SignByAdbePkcs7Detached(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[])">
            <summary>
            Sign by adbe.pkcs7.detached.
            </summary>
            <param name="x509Cert">x509 cert</param>
            <param name="signedContent">signed content</param>
            <returns>The pkcs7 signedData</returns>
        </member>
        <member name="M:Spire.Pdf.Security.DigitalSignatureHelper.VerifyPKCS7SignedData(System.Byte[],System.Byte[])">
            <summary>
            Verify pkcs7 signedData.
            </summary>
            <param name="pkcs7SignedData">pkcs7 signedData</param>
            <param name="signedContent">signed content</param>
            <returns>
            True,if the signedContent is consist of pkcs7SignedData.
            False,otherwise.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Security.DigitalSignatureHelper.GetEncodedAuthenticatedAttributesFromPKCS7SignedData(System.Byte[],System.Int32)">
            <summary>
            Get encoded authenticatedAttributes from pkcs7 signedData.
            </summary>
            <param name="pkcs7SignedData">pkcs7 signedData</param>
            <param name="index">signerInfo index</param>
            <returns>The encoded authenticatedAttributes.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.DigitalSignatureHelper.BuildTimeStampTokenUnauthenticatedAttributes(System.Byte[])">
            <summary>
            build TimeStampToken unauthenticatedAttributes.
            </summary>
            <param name="timeStampToken">time stamp token, DER encoded signedData</param>
            <returns>TimeStampToken unauthenticatedAttributes</returns>
        </member>
        <member name="T:Spire.Pdf.Security.TSAHttpClientBouncyCastle">
            Time Stamp http Client which must conform to RFC 3161.
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.tsaURL">
            URL of the Time Stamp Authority 
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.tsaUsername">
            TSA Username 
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.tsaPassword">
            TSA password 
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.DEFAULTTOKENSIZE">
            The default value for the hash algorithm 
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.tokenSizeEstimate">
            Estimate of the received time stamp token 
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.DEFAULTHASHALGORITHM">
            The default value for the hash algorithm 
        </member>
        <member name="F:Spire.Pdf.Security.TSAHttpClientBouncyCastle.digestAlgorithm">
            Hash algorithm 
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.#ctor(System.String)">
            Creates an instance of a TSAClient that will use BouncyCastle.
            @param url String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.#ctor(System.String,System.String,System.String)">
            Creates an instance of a TSAClient that will use BouncyCastle.
            @param url String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")
            @param username String - user(account) name
            @param password String - password
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
            Constructor.
            Note the token size estimate is updated by each call, as the token
            size is not likely to change (as long as we call the same TSA using
            the same imprint length).
            @param url String - Time Stamp Authority URL (i.e. "http://tsatest1.digistamp.com/TSA")
            @param username String - user(account) name
            @param password String - password
            @param tokSzEstimate int - estimated size of received time stamp token (DER encoded)
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.GetTokenSizeEstimate">
            Get the token size estimate.
            Returned value reflects the result of the last succesfull call, padded
            @return an estimate of the token size
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.GetDigestAlgorithm">
            Gets the digest algorithm to digest the data imprint
            @return the digest algorithm name
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.GetTimeStampToken(System.Byte[])">
            Get RFC 3161 timeStampToken.
            Method may return null indicating that timestamp should be skipped.
            @param imprint data imprint to be time-stamped
            @return encoded, TSA signed data of the timeStampToken
        </member>
        <member name="M:Spire.Pdf.Security.TSAHttpClientBouncyCastle.GetTSAResponse(System.Byte[])">
            Get timestamp token - communications layer
            @return - byte[] - TSA response, raw bytes (RFC 3161 encoded)
        </member>
        <member name="T:Spire.Pdf.Security.PdfCertificate">
            <summary>
            Represents the Certificate object.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.#ctor(System.String,System.String)">
            <summary>
            Creates new PdfCertificate from PFX file.
            </summary>
            <param name="pfxPath">The path to pfx file.</param>
            <param name="password">The password for pfx file.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Creates new PdfCertificate from PFX file.
            </summary>
            <param name="pfxPath">The path to pfx file.</param>
            <param name="password">The password for pfx file.</param>
            <param name="storageFlags">X509KeyStorageFlags storageFlags</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.#ctor(System.Byte[])">
            <summary>
            Signature data
            </summary>
            <param name="signData">The data to pfx file.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.#ctor(System.Byte[],System.String)">
            <summary>
            Signature data
            </summary>
            <param name="signData">The data to pfx file.</param>
            <param name="password">The password for pfx file.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Signature data
            </summary>
            <param name="signData">The data to pfx file.</param>
            <param name="password">The password for pfx file.</param>
            <param name="storageFlags">X509KeyStorageFlags storageFlags</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.GetCertificates">
            <summary>
            Gets the certificates in all storages.
            </summary>
            <returns>
            PdfCertificate array.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.FindBySubject(Spire.Pdf.Security.StoreType,System.String)">
            <summary>
            Finds the certificate by subject.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="subject">The certificate subject.</param>
            <returns>The certificate.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfCertificate.FindByIssuer(Spire.Pdf.Security.StoreType,System.String)">
            <summary>
            Finds the certificate by issuer.
            </summary>
            <param name="storeName">The store name.</param>
            <param name="issuer">The certificate issuer.</param>
            <returns>The certificate.</returns>
        </member>
        <member name="T:Spire.Pdf.Security.PdfSignature">
            <summary>
            Represents a digital signature used for signing a PDF document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_signatureDictionary">
            <summary>
            Holds signature dictionary.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature._mSigFieldWidget">
            <summary>
            Holds pdf Loaded signature field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_pdfCert">
            <summary>
            Holds pdf certificate.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_SignImageLayout">
            <summary>
            The sign image layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_DistinguishedNameLabel">
            <summary>
            The DistinguishName label.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_reason">
            <summary>
            Reason of signing.
            </summary>
        </member>
        <!-- 对于成员“F:Spire.Pdf.Security.PdfSignature.m_GraphicMode”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Pdf.Security.PdfSignature.m_page">
            <summary>
            Page on which signature field is initialized.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_SignTextAlignment">
            <summary>
            The signature text alignment
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_location">
            <summary>
            The CPU host name or physical location of the signing.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_contactInfo">
            <summary>
            Information provided by the signer to enable a recipient to contact
            the signer to verify the signature; for example, a phone number.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_certeficated">
            <summary>
            Holds a value which indicates certefication of the document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_docPermission">
            <summary>
            Permissions of the certificated document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_tsrsrv">
            <summary>
            Holds timestamping server
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_doc">
            <summary>
            Document that holds page and this signature. That document should be signed.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_drawSignatureAppearance">
            <summary>
            Indicates whether the signature corresponds to signature field or not.
            Note : We draw appearance in the case of signature field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_SignInfoFont">
            <summary>
            Set signature info font
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_SignFontColor">
            <summary>
            Set font color for the signature info
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_date">
            <summary>
            Signature datetime
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_SignatureName">
            <summary>
            Internal variable to store the signature name.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_DigitalSigner">
            <summary>
            The name of the person or authority signing the document, usually called signer. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_DigitalSignerLable">
            <summary>
            The signer label.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_DistinguishedName">
            <summary>
            Digital Signature Distinguished name
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_IsTag">
            <summary>
            Digital Signature Whether to display the label
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_ShowConfiguerText">
            <summary>
            Show Signature Configuer Text 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_ConfigGraphicType">
            <summary>
            Digital Signature Graphic Type
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_ConfiguerGraphicPath">
            <summary>
            Digital Signature Configuer Graphic file Path
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_SignImageSource">
            <summary>
            The Signature Image Source 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_ReasonLabel">
            <summary>
            Digital Signature Reason  Label
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_DateLabel">
            <summary>
            Digital Signature Date  
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_ContactInfoLabel">
            <summary>
            Digital Signature ContactInfo  Label
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSignature.m_LocationInfoLabel">
            <summary>
            Digital Signature LocationInfo  Label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Certificates">
            <summary>
            Get all certificates.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Appearence">
            <summary>
            Gets the signature Appearance.
            </summary>
            <value>A  object defines signature`s appearance.</value>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Location">
            <summary>
            Gets or sets signature location on the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Bounds">
            <summary>
            Gets or sets bounds of signature.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.ContactInfo">
            <summary>
            Gets or sets information provided by the signer to enable a recipient to contact
            the signer to verify the signature; for example, a phone number.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Reason">
            <summary>
            Gets or sets reason of signing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.LocationInfo">
            <summary>
            Gets or sets the physical location of the signing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Certificated">
            <summary>
            Gets or sets a value indicating certificate document or not.
            NOTE: Works only with Adobe Reader 7.0.8 or higher.
            </summary>
            <value>certificate document if true.</value>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DocumentPermissions">
            <summary>
            Gets or sets the permission for certificated document.
            </summary>
            <value>The document permission.</value>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Certificate">
            <summary>
            Gets signing certificate.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignTextAlignment">
            <summary>
            Sets the alignment of signature text 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Visible">
            <summary>
            Gets a value indicating whether signature visible or not.
            </summary>
            <remarks>Signature can be set as invisible when its  size is set to empty.</remarks>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Field">
            <summary>
            Gets pdf signature field.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DrawFieldAppearance">
            <summary>
            Gets whether to draw signature appearance or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Date">
            <summary>
            Get Signature Datetime
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignatureName">
            <summary>
            get/set pdf signature name 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.PdfDocBase">
            <summary>
            Document that holds page and this signature. That document should be signed.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignNameFont">
            <summary>
            Set the sign name font.
            Note: This font applys to sign name when the GraphicMode is SignNameOnly or SignNameAndSignDetail.
            if not set, the default font will be applied.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignFontColor">
            <summary>
            Set font color for the signature info
            if not set, the default is black
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignDetailsFont">
            <summary>
            Set the SignDetails font.
            Note: if not set, the default font will be applied.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignInfoFont">
            <summary>
            Set signature info font
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DigitalSigner">
             <summary>
            The name of the person or authority signing the document, usually called signer. 
             </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DigitalSignerLable">
            <summary>
            Digital Signature Common name label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.Name">
             <summary>
            The name of the person or authority signing the document.
             </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.NameLabel">
            <summary>
            Name label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DistinguishedNameLabel">
            <summary>
            Signature Distinguished Name label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DistinguishedName">
            <summary>
            Digital Signature Distinguished name.
            Notes: Assigning a stirng value to it directly is not recommended unless you know what is the Distinguish Name exactly.
            One way suggested of value Assignment is using pdfSignature.Certificate.IssuerName.Name,in which, pdfSignature is an instance of PDFSignature class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.IsTag">
            <summary>
            Flag determine whether to display the labels
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.ShowConfiguerText">
            <summary>
            Show Digital Signature,Configuer Text 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.GraphicsMode">
            <summary>
            The Grapphic render/display mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.ConfigGraphicType">
            <summary>
            Digital Signature Graphic Type
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.ConfiguerGraphicPath">
            <summary>
            Digital Signature Configuer Graphic file Path
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignImageSource">
            <summary>
            Signature Image Source 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.IsConfiguerGraphicFilledBounds">
            <summary>
            Digital Signature Configuer Graphic is filled bounds.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.SignImageLayout">
            <summary>
            Set or get the sign image layout. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.ReasonLabel">
            <summary>
            Digital Signature Reason  Label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.DateLabel">
            <summary>
            Digital Signature Date  Label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.ContactInfoLabel">
            <summary>
            Digital Signature ContactInfo  Label
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSignature.LocationInfoLabel">
            <summary>
            Digital Signature LocationInfo  Label
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.#ctor(Spire.Pdf.PdfNewPage,Spire.Pdf.Security.PdfCertificate,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The current pdf page where signature will be replaced.</param>
            <param name="cert">The pdf certificate.</param>
            <param name="signatureName">Name of the signature.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.#ctor(Spire.Pdf.PdfDocumentBase,Spire.Pdf.PdfPageBase,Spire.Pdf.Security.PdfCertificate,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="document">The document, which has the page.</param>
            <param name="page">The page.</param>
            <param name="certificate">The certificate.</param>
            <param name="signatureName">The name of the signature.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.#ctor(Spire.Pdf.PdfDocumentBase,Spire.Pdf.PdfPageBase,Spire.Pdf.Security.PdfCertificate,System.String,Spire.Pdf.Widget.PdfSignatureFieldWidget)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="document">The loaded document, which has the page.</param>
            <param name="page">The page.</param>
            <param name="certificate">The certificate.</param>
            <param name="signatureName">The name of the signature.</param>
            <param name="fieldWidget">The name of the loaded signature field</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.#ctor(Spire.Pdf.PdfDocument,Spire.Pdf.PdfPageBase,Spire.Pdf.Security.PdfCertificate,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="document">The document or loaded document, which has the page.</param>
            <param name="page">The page.</param>
            <param name="certificate">The certificate.</param>
            <param name="signatureName">The name of the signature.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.#ctor(Spire.Pdf.PdfDocument,Spire.Pdf.PdfPageBase,Spire.Pdf.Security.PdfCertificate,System.String,Spire.Pdf.Widget.PdfSignatureFieldWidget)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="document">The loaded document, which has the page.</param>
            <param name="page">The page.</param>
            <param name="certificate">The certificate.</param>
            <param name="signatureName">The name of the signature.</param>
            <param name="fieldWidget">The name of the loaded signature field</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.Catalog_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the catalog document.
            NOTE: Needed for certifying pdf document.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The  instance containing the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.Dictionary_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Handles the BeginSave event of the Dictionary control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="ars">The  instance containing the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.DrawAppearance(Spire.Pdf.Graphics.PdfTemplate)">
            <summary>
            Draws the appearance.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.DrawSignatureText(Spire.Pdf.Graphics.PdfCanvas,Spire.Pdf.Graphics.PdfSolidBrush,Spire.Pdf.Graphics.PdfStringFormat,System.Single,System.Single,System.Single)">
            <summary>
            Draw Text Signature
            </summary>
            <param name="g"></param>
            <param name="solidBrush"></param>
            <param name="PdfStrFormat"></param>
            <param name="HalfWidth"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.DrawSignatureInformation(Spire.Pdf.Graphics.PdfCanvas,Spire.Pdf.Graphics.PdfSolidBrush,Spire.Pdf.Graphics.PdfStringFormat,System.Single,System.Single,System.Single)">
            <summary>
            Draw Signature information
            </summary>
            <param name="g"></param>
            <param name="solidBrush"></param>
            <param name="PdfStrFormat"></param>
            <param name="HalfWidth"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.DrawSignaturePicture(Spire.Pdf.Graphics.PdfCanvas,System.String,System.Single,System.Single)">
            <summary>
            Draw Picture Signature
            </summary>
            <param name="g"></param>
            <param name="picturePath"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.DrawStringText(Spire.Pdf.Graphics.PdfCanvas,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfSolidBrush,Spire.Pdf.Graphics.PdfStringFormat,System.String,System.Single,System.Single@,System.Single)">
            <summary>
            DrawString 
            </summary>
            <param name="g">PdfCanvas g</param>
            <param name="font">PdfFont font</param>
            <param name="solidBrush">PdfSolidBrush solidBrush</param>
            <param name="PdfStrFormat">PdfStringFormat PdfStrFormat</param>
            <param name="DrawText">text</param>
            <param name="x">point x</param>
            <param name="y">point y</param>
            <param name="HalfWidth">half - width</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.VerifySignature">
            <summary>
            check thie validity of the signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.VerifyDocModified">
            <summary>
            Check if the document was altered after signed. True if modified; otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Security.PdfSignature.TimestampGenerateHandler">
            <summary>
            The handler which generate timestamp token.
            </summary>
            <param name="signature">
            The value of signature field within SignerInfo.
            The value of messageImprint field winthin TimeStampToken shall be the hash of signature.
            Refrence RFC 3161 APPENDIX A.
            </param>
            <returns>timestamp whick must comform to RFC 3161</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.ConfigureTimestamp(System.String)">
            <summary>
            Configure timestamp whick must comform to RFC 3161.
            </summary>
            <param name="tsaUrl">TSA url</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSignature.ConfigureTimeStamp(Spire.Pdf.Security.PdfSignature.TimestampGenerateHandler)">
            <summary>
            Configure timestamp whick must comform to RFC 3161.
            </summary>
            <param name="handler">the handler which generate timestamp token</param>
        </member>
        <member name="F:Spire.Pdf.Security.Oid.x509AuthorityInfoAccess">
            <summary>
            Authority Info Access.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Profile">
            <summary>
            Summary description for Prep.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.B_1">
            <summary>
            RFC 3454, Appendix B.1
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.B_2">
            <summary>
            RFC 3454, Appendix B.2
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.B_3">
            <summary>
            RFC 3454, Appendix B.3
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_1_1">
            <summary>
            RFC 3454, Appendix C.1.1
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_1_2">
            <summary>
            RFC 3454, Appendix C.1.2
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_2_1">
            <summary>
            RFC 3454, Appendix C.2.1
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_2_2">
            <summary>
            RFC 3454, Appendix C.2.2
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_3">
            <summary>
            RFC 3454, Appendix C.3
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_4">
            <summary>
            RFC 3454, Appendix C.4
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_5">
            <summary>
            RFC 3454, Appendix C.5
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_6">
            <summary>
            RFC 3454, Appendix C.6
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_7">
            <summary>
            RFC 3454, Appendix C.7
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_8">
            <summary>
            RFC 3454, Appendix C.8
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.C_9">
            <summary>
            RFC 3454, Appendix C.9
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.NFKC">
            <summary>
            RFC 3454, Section 4
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.BIDI">
            <summary>
            RFC 3454, Section 6
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Profile.UNASSIGNED">
            <summary>
            RFC 3454, Section 7
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Profile.#ctor(Spire.Pdf.Security.StringPrep.Steps.ProfileStep[])">
            <summary>
            Create a new profile, with the given steps.
            </summary>
            <param name="profile">The steps to perform</param>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Profile.Prepare(System.String)">
            <summary>
            Prepare a string, according to the specified profile.
            </summary>
            <param name="input">The string to prepare</param>
            <returns>The prepared string</returns>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Profile.Prepare(System.Text.StringBuilder)">
            <summary>
            Prepare a string, according to the specified profile, in place.
            Not thread safe; make sure the input is locked, if appropriate.
            (this is the canonical version, that should be overriden by
            subclasses if necessary)
            </summary>
            <param name="result">The string to prepare in place</param>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.SASLprep">
            <summary>
            RFC 4013, SASLprep - Stringprep Profile for User Names and Passwords http://tools.ietf.org/html/rfc4013
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.SASLprep.#ctor">
            <summary>
            Create a SASLprep instance
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.BidiException">
            <summary>
            There was a problem with the Bidirection nature of a string to be prepped.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.BidiException.#ctor(System.String)">
            <summary>
            Create a new BidiException
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.BidiStep">
            <summary>
            A stringprep profile step to check for Bidirectional correctness.
            If the NO_BIDI flag is set, this is a no-op.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.BidiStep.#ctor">
            <summary>
            Create a new BidiStep.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.BidiStep.Prepare(System.Text.StringBuilder)">
             <summary>
             Perform BiDi checks.
            
             From RFC 3454, Section 6:
             In any profile that specifies bidirectional character handling, all
             three of the following requirements MUST be met:
             <ol>
             <li>The characters in section 5.8 MUST be prohibited.</li>
             <li>If a string contains any RandALCat character, the string MUST NOT
             contain any LCat character.</li>
             <li> If a string contains any RandALCat character, a RandALCat
             character MUST be the first character of the string, and a
             RandALCat character MUST be the last character of the string.</li>
             </ol>
             </summary>
             <param name="result">Result is modified in place.</param>
             <exception cref="T:Spire.Pdf.Security.StringPrep.Steps.BidiException">A BiDi problem exists</exception>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.MapStep">
            <summary>
            A stringprep profile step to map one input character into 0 or
            more output characters.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.MapStep.#ctor(System.String[],System.String)">
            <summary>
            Map from one character to 0+
            </summary>
            <param name="table"></param>
            <param name="name"></param>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.MapStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Perform mapping for each character of input.
            </summary>
            <param name="result">Result is modified in place.</param>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.NFKCStep">
            <summary>
            Perform Unicode Normalization Form KC.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.NFKCStep.#ctor">
            <summary>
            Create an NFKC step.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.NFKCStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Perform NFKC.  General overview: Decompose, Reorder, Compose
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.NFKCStep.CanonicalOrdering(System.Text.StringBuilder)">
            <summary>
            Reorder characters in the given range into their correct cannonical ordering with
            respect to combining class.
            </summary>
            <param name="buf">Buffer to reorder</param>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.ProfileStep">
            <summary>
            Base class for steps in a stringprep profile.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProfileStep.#ctor(System.String)">
            <summary>
            Create a named profile step, with no flags.
            </summary>
            <param name="name">The profile name</param>
        </member>
        <member name="P:Spire.Pdf.Security.StringPrep.Steps.ProfileStep.Name">
            <summary>
            The name of the step.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProfileStep.Prepare(System.Text.StringBuilder)">
            <summary>
            This is the workhorse function, to be implemented in each subclass.
            </summary>
            <param name="result">Result will be modified in place</param>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.ProhibitedCharacterException">
            <summary>
            A character that is forbidden by the current stringprep profile exists in the input.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Steps.ProhibitedCharacterException.InvalidChar">
            <summary>
            The character that was invalid.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProhibitedCharacterException.#ctor(Spire.Pdf.Security.StringPrep.Steps.ProfileStep,System.Char)">
            <summary>
            Create an instance.
            </summary>
            <param name="step">In which step did this occur?</param>
            <param name="c">The offending character</param>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Steps.ProhibitStep">
            <summary>
            A stringprep profile step that checks for prohibited characters
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProhibitStep.#ctor(System.Char[][],System.String)">
            <summary>
            These characters are prohibited
            </summary>
            <param name="table"></param>
            <param name="name"></param>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProhibitStep.Contains(System.Char)">
            <summary>
            Does this step prohibit the given character?
            </summary>
            <param name="c">The character to check</param>
            <returns>True if the character is prohibited</returns>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProhibitStep.FindStringInTable(System.Text.StringBuilder)">
            <summary>
            Check all of the characters for prohbition.
            </summary>
            <param name="s">String to check</param>
            <returns>If one of the characters is prohibited, returns the index of that character.
            If all are allowed, returns -1.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Steps.ProhibitStep.Prepare(System.Text.StringBuilder)">
            <summary>
            Check for prohibited characters
            </summary>
            <param name="result">No modifications</param>
            <exception cref="T:Spire.Pdf.Security.StringPrep.Steps.ProhibitedCharacterException">Invalid character detected.</exception>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.RFC3454">
            <summary>
            Constants from RFC 3454, Stringprep.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.A_1">
             <summary>
             A.1 Unassigned code points in Unicode 3.2
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.B_1">
             <summary>
             B.1 Commonly mapped to nothing
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.B_2">
             <summary>
             B.2 Mapping for case-folding used with NFKC
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.B_3">
             <summary>
             B.3 Mapping for case-folding used with no normalization
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_1_1">
             <summary>
             C.1.1 ASCII space characters
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_1_2">
            <summary>
            C.1.2 Non-ASCII space characters
                    /// </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_2_1">
             <summary>
             C.2.1 ASCII control characters
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_2_2">
             <summary>
             C.2.2 Non-ASCII control characters
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_3">
             <summary>
             C.3 Private use
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_4">
             <summary>
             C.4 Non-character code points
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_5">
             <summary>
             C.5 Surrogate codes
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_6">
             <summary>
             C.6 Inappropriate for plain text
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_7">
             <summary>
             C.7 Inappropriate for canonical representation
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_8">
             <summary>
             C.8 Change display properties or are deprecated
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.C_9">
             <summary>
             C.9 Tagging characters
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.D_1">
             <summary>
             D.1 Characters with bidirectional property "R" or "AL"
            
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.RFC3454.D_2">
             <summary>
             D.2 Characters with bidirectional property "L"
            
             </summary>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Unicode.Combining">
            <summary>
            Combining classes for Unicode characters.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Unicode.Combining.Class(System.Char)">
            <summary>
            What is the combining class for the given character?
            </summary>
            <param name="c">Character to look up</param>
            <returns>Combining class for this character</returns>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Unicode.CombiningData">
            <summary>
            Combining class lookup tables.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.CombiningData.Classes">
            <summary>
            Combining classes for different pages.  All pages
            unspecified here will return combining class 0.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.CombiningData.Pages">
            <summary>
            Offset into the Classes array for each page, since Classes
            is sparse.
            255 here means that all of the combining classes for that page
            are 0.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Unicode.Compose">
            <summary>
            Combine combining characters, where possible.
            Note: this is still Black Magic, as far as I can tell.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Unicode.Compose.Combine(System.Char,System.Char,System.Char@)">
            <summary>
            Combine two characters together, if possible.
            </summary>
            <param name="a">First character to combine</param>
            <param name="b">Second character to combine</param>
            <param name="result">The combined character, if method returns true.  Otherwise, undefined.</param>
            <returns>True if combination occurred</returns>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Unicode.ComposeData">
            <summary>
            Data for composition of characters.  The algorithms here are still black box to me.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.FIRST_START">
            <summary>
            Where the first range of offsets from Data starts.
            These are used for checking the first character
            in a pair with a second character in Array.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.FIRST_SINGLE_START">
            <summary>
            Where the offsets of the range of characters where there is
            only one match for the second character, with a given first character.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.SECOND_START">
            <summary>
            Where the offsets of the range of second characters that match a given first
            character starts.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.SECOND_SINGLE_START">
            <summary>
            When there is only a single match to the left for these characters on the
            right, the offsets for that chunk of characters starts here.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.Data">
            <summary>
            The offset into Array for each character.  This array is compressed using
            the Table table, which provides page offsets for the pages that are non-zero.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.Table">
            <summary>
            Page offsets into Data for each page of characters.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.FirstSingle">
            <summary>
            When the offset for the  first character is in the range
            [FIRST_SINGLE_START, SECOND_START), look up the corresponding
            character here with the offset from Data to see if it is
            the second character.  If not, there is no combination.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.SecondSingle">
            <summary>
            When the offset for the second character is in the range
            [SECOND_SINGLE_START...), look up the corresponding
            character here with the offset from Data to see if it is
            the first character.  If not, there is no combination.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.ComposeData.Array">
            <summary>
            Array of composition pairs, indexed by offset (from Data) of first
            character, and offset of second character.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Unicode.Decompose">
            <summary>
            Decomposition data for NFKC.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.StringPrep.Unicode.Decompose.Find(System.Char)">
            <summary>
            Look up the expansion, if any, for the given character.
            </summary>
            <param name="ch">The character to find</param>
            <returns>the expansion, or null if none found.</returns>
        </member>
        <member name="T:Spire.Pdf.Security.StringPrep.Unicode.DecomposeData">
            <summary>
            Decomposition data for NFKC.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.DecomposeData.Offsets">
            <summary>
            Offset into the Expansion string for each decomposable character.
            One way to make this faster might be to have this not be sparse, so that the lookup
            could be direct rather than a binary search.  That would add several hundred K to the
            library size, though, or time at startup to initialize an array from this.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StringPrep.Unicode.DecomposeData.Expansion">
            <summary>
            How to expand characters.  Since multiple input characters
            output the same string, this table is compressed to only
            have one copy of each, and the Offsets table
            gives offsets into this for each input.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.PdfEncryptionKeySize">
            <summary>
            Specifies length of the encryption key for encryption.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptionKeySize.Key40Bit">
            <summary>
            The key is 40 bit long.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptionKeySize.Key128Bit">
            <summary>
            The key is 128 bit long.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptionKeySize.Key256Bit">
            <summary>
            The key is 256 bit long.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.PdfEncryptionAlgorithm">
            <summary>
            Specifies the type of encryption algorithm used.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptionAlgorithm.RC4">
            <summary>
            The encryption algorithm is RC4.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptionAlgorithm.AES">
            <summary>
            The encryption algorithm is AES.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.PdfPermissionsFlags">
            <summary>
            Specifies the available permissions set for the signature.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.None">
            <summary>
            Not all permissions
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.Default">
            <summary>
            Default value is 2876. A common document contains all privileges
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.Print">
            <summary>
            Print the document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.EditContent">
            <summary>
            Edit content.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.CopyContent">
            <summary>
            Copy content.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.EditAnnotations">
            <summary>
            Add or modify text annotations, fill in interactive form fields.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.FillFields">
            <summary>
            Fill form fields. (Only for 128 bits key).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.AccessibilityCopyContent">
            <summary>
            Copy accessibility content.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.AssembleDocument">
            <summary>
            Assemble document permission. (Only for 128 bits key).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfPermissionsFlags.FullQualityPrint">
            <summary>
            Full quality print.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SecurityHandlers.Standard">
            <summary>
            The built-in password-based security handler.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.StoreType">
            <summary>
            Specifies the naming a system store.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StoreType.MY">
            <summary>
            A certificate store that holds certificates with associated private keys.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StoreType.ROOT">
            <summary>
            Root certificates.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StoreType.CA">
            <summary>
            Certification authority certificates.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.StoreType.SPC">
            <summary>
            Software Publisher Certificate.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.SignTextAlignment">
            <summary>
            Specifies the alignment type of signature text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignTextAlignment.Left">
            <summary>
            Specifies the signature text is aligned to Left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignTextAlignment.Center">
            <summary>
            Specifies the signature text is aligned to Center.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignTextAlignment.Right">
            <summary>
            Specifies the signature text is aligned to Right.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.PdfCertificationFlags">
            <summary>
            Specifies the available permissions on certificated document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfCertificationFlags.ForbidChanges">
            <summary>
            Disallow any changes to the document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfCertificationFlags.AllowFormFill">
            <summary>
            Only allow form fill-in actions on this document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfCertificationFlags.AllowComments">
            <summary>
            Only allow commenting and form fill-in actions on this document.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.SignatureFlags">
            <summary>
            Enumeration of signature flags.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignatureFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignatureFlags.SignaturesExists">
            <summary>
            If set, the document contains at least one signature field. This flag allows a viewer 
            application to enable user interface items (such as menu items or pushbuttons) related 
            to signature processing without having to scan the entire document for the presence 
            of signature fields.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignatureFlags.AppendOnly">
            <summary>
            If set, the document contains signatures that may be invalidated if the file is saved 
            (written) in a way that alters its previous contents, as opposed to an incremental 
            update. Merely updating the file by appending new information to the end of the 
            previous version is safe. Viewer applications can use this flag to present 
            a user requesting a full save with an additional alert box warning that signatures 
            will be invalidated and requiring explicit confirmation before continuing with the operation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.SignInfoType">
            <summary>
            Signature type
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.SignImageLayout">
             <summary>
            The layout determine how to display the sign image. 
             </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignImageLayout.None">
            <summary>
            Default.
            Sign image status without any modification. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.SignImageLayout.Stretch">
            <summary>
            Stretch the sign image. 
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.GraphicMode">
            <summary>
            Modes to determine what and how to dispay the signature infomation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.GraphicMode.SignDetail">
            <summary>
            Default dispaly model. 
            Display signature details including signer,location,date,contact infomation and reason. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.GraphicMode.SignImageOnly">
            <summary>
            Only display the signature image. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.GraphicMode.SignNameOnly">
            <summary>
            Only display the sign name. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.GraphicMode.SignNameAndSignDetail">
            <summary>
            Diaply sign name and signature details.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.GraphicMode.SignImageAndSignDetail">
            <summary>
            Diaply signature image and signature details.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.ConfiguerGraphicType">
            <summary>
            Signture Configuer Graphic type
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.ConfiguerGraphicType.No">
            <summary>
            No Show Picture Signature and Text Signature
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.ConfiguerGraphicType.Picture">
            <summary>
            draw Picture Signature
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.ConfiguerGraphicType.Text">
            <summary>
            draw Text Signature
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.ConfiguerGraphicType.PictureSignInformation">
            <summary>
            draw Picture Signature and Information
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.ConfiguerGraphicType.TextSignInformation">
            <summary>
            draw Text Signature and Information
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.ConfiguerGraphicType.SignInformationPicture">
            <summary>
            draw  Information and Picture Signature
            </summary>
        </member>
        <member name="T:Spire.Pdf.Security.SignatureConfiguerText">
            <summary>
            Configuer Text,Show Sign content
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptor.m_Dictionary">
            <summary>
            The dictionary
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptor.m_FileID">
            <summary>
            The File ID
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptor.m_CrossTable">
            <summary>
            The cross table
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfEncryptor.m_originalEncrypt">
            <summary>
            Indicate weather the pdf was originally encrypted  or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfEncryptor.Dictionary">
            <summary>
            Gets or sets the dictionary
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfEncryptor.OriginalEncrypt">
            <summary>
            Gets or sets value indicating whether document had been originally encrypted or not.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfEncryptor.#ctor(Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PdfEncryptor"/> class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfEncryptor.CreatFileId">
            <summary>
            Creat a new File ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Security.PdfSecurity">
            <summary>
            Represents the security settings of the PDF document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSecurity.m_originalPassword">
            <summary>
            The original user password or owner password
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSecurity.m_crossTable">
            <summary>
            The cross Table
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSecurity.m_ownerPasswordPassed">
            <summary>
            Indicate the owner password is correct or not.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Security.PdfSecurity.m_userPasswordPassed">
            <summary>
            Indicate the user password is correct or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSecurity.OwnerPassword">
            <summary>
            Gets or sets the owner password.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSecurity.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSecurity.OriginalEncrypt">
            <summary>
            Indicate whether this pdf document was encrypted originally or not. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.Encrypt(System.String)">
            <summary>
            To Encrypt the PDF document with open password.
            Note:If set empty string value to open password, it indicates that the PDF document can be operated without providing corresponding password. 
            </summary>
            <param name="openPassword">The open password</param>
            <returns></returns>       
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.Encrypt(System.String,Spire.Pdf.Security.PdfPermissionsFlags)">
            <summary>
            To Encrypt the PDF document with permission password and permissions.
            Note:The Permission password can't be empty string.
            </summary>
            <param name="permissionPassword">The permission password</param>
            <param name="permissions">A set of flags specifying which operations are permitted when the document is opened with user access</param>
            <param name="OwnerPassword"></param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.Encrypt(System.String,System.String,Spire.Pdf.Security.PdfPermissionsFlags,Spire.Pdf.Security.PdfEncryptionKeySize)">
            <summary>
            To Encrypt the PDF document and set the encryption key size and permissions.
            Note:If set empty string value to open password or permission password, it indicates that the PDF document can be operated without providing corresponding password. 
            </summary>
            <param name="openPassword">The open password</param>
            <param name="permissionPassword">The permission password</param>
            <param name="permissions">A set of flags specifying which operations are permitted when the document is opened with user access</param>
            <param name="keySize">The bit length of the encryption key</param>
            <returns></returns>       
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.Encrypt(System.String,System.String,Spire.Pdf.Security.PdfPermissionsFlags,Spire.Pdf.Security.PdfEncryptionKeySize,System.String)">
            <summary>
            To Encrypt the PDF document with open password and permission password,and set the encryption key size and permissions.
            Note:If set empty string value to open password or permission password, it indicates that the PDF document can be operated without providing corresponding password. 
            </summary>
            <param name="openPassword">The open password</param>
            <param name="permissionPassword">The permission password</param>
            <param name="permissions">A set of flags specifying which operations are permitted when the document is opened with user access</param>
            <param name="keySize">The bit length of the encryption key</param>
            <param name="PermissionPassword">The original permissionPassword of the document</param>
            <param name="OwnerPassword"></param>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSecurity.Permissions">
            <summary>
            Gets or sets the document's permission flags
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSecurity.KeySize">
            <summary>
            Gets or sets the size of the key.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Security.PdfSecurity.FileID">
            <summary>
            Gets file ID.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.#ctor(Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.VerifyOwnerPassword(System.String)">
            <summary>
            To verify the owner password of the PDF document is correct or not.
            </summary>
            <param name="ownerPassword">The owner password</param>
            <returns>The bool value to indicate the password is correct or not</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.VerifyUserPassword(System.String)">
            <summary>
            To verify the user password of the PDF document is correct or not.
            </summary>
            <param name="userPassword">The user password</param>
            <returns>The bool value to indicate the password is cottect or not</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.SetPermissions(Spire.Pdf.Security.PdfPermissionsFlags)">
            <summary>
            Logically ORs flag and mask and return result.
            </summary>
            <param name="flags">The mask of set bit that should be set in the result.</param>
            <returns>The ORed value of flag and mask.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.ResetPermissions(Spire.Pdf.Security.PdfPermissionsFlags)">
            <summary>
            Logically ANDs flag and inverted mask and return result.
            </summary>
            <param name="flags">The mask of set bit that should be cleared in the result.</param>
            <returns>The ANDed value of flag and inverted mask.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.VerifyPassword(System.String,Spire.Pdf.Primitives.PdfString)">
            <summary>
            Verify the user password or owner password is correct or not.
            </summary>
            <param name="password">The user password or owner password</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.EncryptData(System.Int64,System.Byte[],System.Boolean)">
            <summary>
            Encrypts the data.
            </summary>
            <param name="currObjNumber">The curr obj number.</param>
            <param name="data">The data.</param>
            <returns>Encrypted byte array.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.SaveToDictionary(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.Clone">
            <summary>
            Clones the specified document.
            </summary>
            <returns>A new cloned encryptor.</returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.CreatFileId">
            <summary>
            Creat a new Fiel ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Security.PdfSecurity.CheckEncryption(System.String@)">
            <summary>
            Check the given password is correct or not.
            </summary>
            <param name="m_password">The given password</param>
            <returns>The boolean indicates the given password is correct or not</returns>
        </member>
        <member name="M:Spire.Pdf.TextTransformation.RTLLanguageHelper.ContainsRTLChar(System.String)">
            <summary>
            Returns true if the test consists of rtl chars
            </summary>
            <param name="text">Text</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.TextTransformation.RTLLanguageHelper.Transform(System.String)">
            <summary>
            Performs transformation of the string
            </summary>
            <param name="text">Text</param>
            <returns></returns>
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitsEn2An">
            Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitsAn2En">
            Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitsEn2AnInitLr">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitsEn2AnInitAl">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitsReserved">
            Not a valid option value. 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitsMask">
            Bit mask for digit shaping options.
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitTypeAn">
            Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitTypeAnExtended">
            Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
        </member>
        <member name="F:Spire.Pdf.TextTransformation.ArabicShapingResolver.DigitTypeMask">
            Bit mask for digit type options.
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.L">
            Left-to-right
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.LRE">
            Left-to-Right Embedding 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.LRO">
            Left-to-Right Override 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.R">
            Right-to-Left 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.AL">
            Right-to-Left Arabic 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.RLE">
            Right-to-Left Embedding 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.RLO">
            Right-to-Left Override 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.PDF">
            Pop Directional Format 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.EN">
            European Number 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.ES">
            European Number Separator 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.ET">
            European Number Terminator 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.AN">
            Arabic Number 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.CS">
            Common Number Separator 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.NSM">
            Non-Spacing Mark 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.BN">
            Boundary Neutral 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.B">
            Paragraph Separator 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.S">
            Segment Separator 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.WS">
            Whitespace 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.ON">
            Other Neutrals 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.TYPE_MIN">
            Minimum bidi type value. 
        </member>
        <member name="F:Spire.Pdf.TextTransformation.BidiOrder.TYPE_MAX">
            Maximum bidi type value. 
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.#ctor(System.SByte[])">
             Initialize using an array of direction types.  Types range from TYPE_MIN to TYPE_MAX inclusive
             and represent the direction codes of the characters in the text.
            
             @param types the types array
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.#ctor(System.SByte[],System.SByte)">
             Initialize using an array of direction types and an externally supplied paragraph embedding level.
             The embedding level may be -1, 0, or 1.  -1 means to apply the default algorithm (rules P2 and P3),
             0 is for LTR paragraphs, and 1 is for RTL paragraphs.
            
             @param types the types array
             @param paragraphEmbeddingLevel the externally supplied paragraph embedding level.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.RunAlgorithm">
            The algorithm.
            Does not include line-based processing (Rules L1, L2).
            These are applied later in the line-based phase of the algorithm.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ReinsertExplicitCodes(System.Int32)">
            Reinsert levels information for explicit codes.
            This is for ease of relating the level information
            to the original input data.  Note that the levels
            assigned to these codes are arbitrary, they're
            chosen so as to avoid breaking level runs.
            @param textLength the length of the data after compression
            @return the length of the data (original length of
            types array supplied to constructor)
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ProcessEmbeddings(System.SByte[],System.SByte)">
             2) determining explicit levels
             Rules X1 - X8
            
             The interaction of these rules makes handling them a bit complex.
             This examines resultTypes but does not modify it.  It returns embedding and
             override information in the result array.  The low 7 bits are the level, the high
             bit is set if the level is an override, and clear if it is an embedding.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ResolveWeakTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
             3) resolving weak types
             Rules W1-W7.
            
             Note that some weak types (EN, AN) remain after this processing is complete.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ResolveNeutralTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            6) resolving neutral types
            Rules N1-N2.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ResolveImplicitLevels(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            7) resolving implicit embedding levels
            Rules I1, I2.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ComputeMultilineReordering(System.SByte[],System.Int32[])">
            Return multiline reordering array for a given level array.
            Reordering does not occur across a line break.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ComputeReordering(System.SByte[])">
            Return reordering array for a given level array.  This reorders a single line.
            The reordering is a visual to logical map.  For example,
            the leftmost char is string.CharAt(order[0]).
            Rule L2.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.GetBaseLevel">
            Return the base level of the paragraph.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.IsWhitespace(System.SByte)">
            Return true if the type is considered a whitespace type for the line break rules.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.TypeForLevel(System.Int32)">
            Return the strong type (L or R) corresponding to the level.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.FindRunLimit(System.Int32,System.Int32,System.SByte[])">
            Return the limit of the run starting at index that includes only resultTypes in validSet.
            This checks the value at index, and will return index if that value is not in validSet.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.FindRunStart(System.Int32,System.SByte[])">
            Return the start of the run including index that includes only resultTypes in validSet.
            This assumes the value at index is valid, and does not check it.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.SetTypes(System.Int32,System.Int32,System.SByte)">
            Set resultTypes from start up to (but not including) limit to newType.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.SetLevels(System.Int32,System.Int32,System.SByte)">
            Set resultLevels from start up to (but not including) limit to newLevel.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ValidateTypes(System.SByte[])">
            Throw exception if type array is invalid.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ValidateParagraphEmbeddingLevel(System.SByte)">
            Throw exception if paragraph embedding level is invalid. Special allowance for -1 so that
            default processing can still be performed when using this API.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.BidiOrder.ValidateLineBreaks(System.Int32[],System.Int32)">
            Throw exception if line breaks array is invalid.
        </member>
        <member name="M:Spire.Pdf.TextTransformation.HindiText.IsSwaraLetter(System.Char)">
             Checks if a character is vowel letter.
            
             @param ch
                        the character that needs to be checked
             @return true if the characters is a vowel letter
        </member>
        <member name="M:Spire.Pdf.TextTransformation.HindiText.IsSwaraMatra(System.Char)">
             Checks if a character is vowel sign.
            
             @param ch
                        the character that needs to be checked
             @return true if the characters is a vowel sign
        </member>
        <member name="M:Spire.Pdf.TextTransformation.HindiText.IsVyanjana(System.Char)">
             Checks if a character is consonant letter.
            
             @param ch
                        the character that needs to be checked
             @return true if the chracter is a consonant letter
        </member>
        <member name="M:Spire.Pdf.TextTransformation.HindiText.Swap(System.Text.StringBuilder,System.Int32,System.Int32)">
             Swaps two characters in a StringBuilder object
            
             @param s
                        the StringBuilder
             @param i
                        the index of one character
             @param j
                        the index of the other character
        </member>
        <member name="F:Spire.Pdf.TextTransformation.HindiText.langTable">
            Constructor for the IndicLigaturizer for Devanagari.
        </member>
        <member name="T:Spire.Pdf.Exceptions.PdfConformanceException">
            <summary>
            Exception of this type is raised when the document contains object which are not 
            supported by current document standard.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfConformanceException.#ctor">
            <summary>
            Initializes object with default error message.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfConformanceException.#ctor(System.Exception)">
            <summary>
            Initializes object with default error message and inner
            exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfConformanceException.#ctor(System.String)">
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfConformanceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object with specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spire.Pdf.Exceptions.PdfAnnotationException">
            <summary>
            Exception of this type is raised when annotation object is used incorrectly.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfAnnotationException.#ctor">
            <summary>
            Initializes object with default error message.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfAnnotationException.#ctor(System.Exception)">
            <summary>
            Initializes object with default error message and inner
            exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfAnnotationException.#ctor(System.String)">
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfAnnotationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object with specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spire.Pdf.Exceptions.PdfException">
            <summary>
            General exception class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfException.#ctor">
            <summary>
            Initializes object by default error message.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfException.#ctor(System.String)">
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object by specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spire.Pdf.Exceptions.PdfDocumentException">
            <summary>
            Base PDF document exception.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfDocumentException.#ctor">
            <summary>
            Initializes object by default error message.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfDocumentException.#ctor(System.Exception)">
            <summary>
            Initializes object by default error message and inner
            exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfDocumentException.#ctor(System.String)">
            <summary>
            Initializes object by specified error message.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Spire.Pdf.Exceptions.PdfDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes object by specified error message and inner
            exception object.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spire.Pdf.Syntax.FileStructure.PdfFileStructure">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.SetCacheItemForPrimitive(Spire.Pdf.Interfaces.IPdfPrimitive,System.Object)">
            <summary>
            Cache data corresponding to primitive.
            </summary>
            <param name="key">The primitive object.</param>
            <param name="value">The data object.</param>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.GetCacheItemForPrimitive(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Get cached data corresponding to primitive.
            </summary>
            <param name="key">The primitive object.</param>
            <returns>The data object.</returns>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.ContainCacheItemForPrimitive(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Whether contain data corresponding to primitive.
            </summary>
            <param name="key">The primitive object.</param>
            <returns>Return true,otherwise return false.</returns>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.disposed">
            <summary>
            Specify whether to had released resources.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.Dispose(System.Boolean)">
            <summary>
            Releases all resources used.
            </summary>
            <param name="disposing">True,Releases all resources;False,Releases unmanaged resources.</param>
        </member>
        <member name="M:Spire.Pdf.Syntax.FileStructure.PdfFileStructure.Clear">
            <summary>
            disposed is false ,Releases all resources
            </summary>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfAction">
            <summary>
            Represents base class for all action types.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAction.NextAction">
            <summary>
            Gets or sets the next action to be performed after the action represented by this instance.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAction.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfActionCollection">
            <summary>
            Represents collection of actions.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfActionCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.Add(Spire.Pdf.Actions.PdfAction)">
            <summary>
            Adds the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns>action</returns>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.Insert(System.Int32,Spire.Pdf.Actions.PdfAction)">
            <summary>
            Inserts the action at the specified position.
            </summary>
            <param name="index">The index.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.IndexOf(Spire.Pdf.Actions.PdfAction)">
            <summary>
            Gets the index of the action.
            </summary>
            <param name="action">The action.</param>
            <returns>action</returns>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.Contains(Spire.Pdf.Actions.PdfAction)">
            <summary>
            Determines whether the action is contained within collection.
            </summary>
            <param name="action">The action.</param>
            <returns>
            Value, indicating the presents of the action in collection.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.Remove(Spire.Pdf.Actions.PdfAction)">
            <summary>
            Removes the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the action at the specified position.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfActionCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfFormAction">
            <summary>
            Represents the form action base class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfFormAction.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFormAction.Include">
            <summary>
            Gets or sets a value indicating whether fields contained in  
            collection will be included for resetting or submitting.
            </summary>
            <remarks>
            If Include property is true, only the fields in this collection will be reset or submitted.
            If Include property is false, the fields in this collection are not reset or submitted 
            and only the remaining form fields are reset or submitted.
            If the collection is null or empty, then all the form fields are reset 
            and the Include property is ignored.
            </remarks>
            <value><c>true</c> if include; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFormAction.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfGoToAction">
            <summary>
            Represents an action which goes to a destination in the current document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfGoToAction.#ctor(Spire.Pdf.General.PdfDestination)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="destination">The destination to jump to.</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfGoToAction.#ctor(Spire.Pdf.PdfNewPage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page to jump to.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfGoToAction.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfGotoNameAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="destination">The destination to jump to.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfGotoNameAction.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfJavaScriptAction">
            <summary>
            Represents an action which performs java script action in pdf document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScriptAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="javaScript">The java script code.</param>
            <value>A string value representing valid javascript code to be executed.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfJavaScriptAction.Script">
             <summary>
            Gets or sets the javascript code to be executed when this action is executed. 
             </summary>
             <value>A string value representing valid javascript code to be executed. </value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfJavaScript">
            <summary>
            The Adobe Built-in JavaScript
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetNumberFormatString(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Get a AFNumber_Format string
            </summary>
            <param name="nDec">The number of places after the decimal point</param>
            <param name="sepStyle">The integer denoting whether to use a separator or not. If sepStyle=0, use commas. If sepStyle=1, do not separate.</param>
            <param name="negStyle">The formatting used for negative numbers: 0 = MinusBlack, 1 = Red, 2 = ParensBlack, 3 = ParensRed</param>
            <param name="currStyle">The currency style - not used</param>
            <param name="strCurrency">The currency symbol</param>
            <param name="bCurrencyPrepend">True to prepend the currency symbol; false to display on the end of the number</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetNumberKeystrokeString(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Get a AFNumber_Keystroke string
            </summary>
            <param name="nDec">The number of places after the decimal point</param>
            <param name="sepStyle">The integer denoting whether to use a separator or not. If sepStyle=0, use commas. If sepStyle=1, do not separate.</param>
            <param name="negStyle">The formatting used for negative numbers: 0 = MinusBlack, 1 = Red, 2 = ParensBlack, 3 = ParensRed</param>
            <param name="currStyle">The currency style - not used</param>
            <param name="strCurrency">The currency symbol</param>
            <param name="bCurrencyPrepend">True to prepend the currency symbol; false to display on the end of the number</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetRangeValidateString(System.Boolean,System.Single,System.Boolean,System.Single)">
            <summary>
            Get a AFRange_Validate string
            </summary>
            <param name="bGreaterThan">Indicate the use of the greater than comparison</param>
            <param name="nGreaterThan">The value to be used in the greater than comparison</param>
            <param name="bLessThan">Indicate the use of the less than comparison</param>
            <param name="nLessThan">The value to be used in the less than comparison</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetPercentFormatString(System.Int32,System.Int32)">
            <summary>
            Get a AFPercent_Format string
            </summary>
            <param name="nDec">The number of places after the decimal point</param>
            <param name="sepStyle">The integer denoting whether to use a separator or not. If sepStyle=0, use commas. If sepStyle=1, do not separate</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetPercentKeystrokeString(System.Int32,System.Int32)">
            <summary>
            Get a AFPercent_Keystroke string
            </summary>
            <param name="nDec">The number of places after the decimal point</param>
            <param name="sepStyle">The integer denoting whether to use a separator or not. If sepStyle=0, use commas. If sepStyle=1, do not separate</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetDateFormatString(System.String)">
            <summary>
            Get a AFDate_FormatEx string
            </summary>
            <param name="cFormat">Must be one of: "m/d", "m/d/yy", "mm/dd/yy", "mm/yy", "d-mmm", "d-mmm-yy", "dd-mmm-yy", "yymm-dd", "mmm-yy", "mmmm-yy", "mmm d, yyyy", "mmmm d, yyyy", "m/d/yy h:MM tt", "m/d/yy HH:MM"</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetDateKeystrokeString(System.String)">
            <summary>
            Get a AFDate_KeystrokeEx string
            </summary>
            <param name="cFormat">Must be one of: "m/d", "m/d/yy", "mm/dd/yy", "mm/yy", "d-mmm", "d-mmm-yy", "dd-mmm-yy", "yymm-dd", "mmm-yy", "mmmm-yy", "mmm d, yyyy", "mmmm d, yyyy", "m/d/yy h:MM tt", "m/d/yy HH:MM"</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetTimeFormatString(System.Int32)">
            <summary>
            Get a AFTime_Format string
            </summary>
            <param name="ptf">The time format: 0 = 24HR_MM [ 14:30 ], 1 = 12HR_MM [ 2:30 PM ], 2 = 24HR_MM_SS [ 14:30:15 ], 3 = 12HR_MM_SS [ 2:30:15 PM ]</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetTimeKeystrokeString(System.Int32)">
            <summary>
            Get a AFTime_Keystroke string
            </summary>
            <param name="ptf">The time format: 0 = 24HR_MM [ 14:30 ], 1 = 12HR_MM [ 2:30 PM ], 2 = 24HR_MM_SS [ 14:30:15 ], 3 = 12HR_MM_SS [ 2:30:15 PM ]</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetSpecialFormatString(System.Int32)">
            <summary>
            Get a AFSpecial_Format string
            </summary>
            <param name="psf">The type of formatting to use:0 = zip code, 1 = zip + 4, 2 = phone, 3 = SSN</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetSpecialKeystrokeString(System.Int32)">
            <summary>
            Get a AFSpecial_Format string
            </summary>
            <param name="psf">The type of formatting to use:0 = zip code, 1 = zip + 4, 2 = phone, 3 = SSN</param>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfJavaScript.GetSimpleCalculateString(System.String,System.String[])">
            <summary>
            Get a AFSimple_Calculate string
            </summary>
            <param name="cFunction">Must be one of "AVG", "SUM", "PRD", "MIN", "MAX"</param>
            <param name="cFields">The name list of the fields to use in the calculation</param>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfLaunchAction">
            <summary>
            Represents an action which launches an application or opens or prints a document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfLaunchAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="fileName">Name of the file to be launched.</param>       
        </member>
        <member name="M:Spire.Pdf.Actions.PdfLaunchAction.#ctor(System.String,Spire.Pdf.Actions.PdfFilePathType)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="fileName">Name of the file to be launched.</param>    
            <param name="fileName">Name of the file to be launched.</param>
            <param name="path">Name of the path type.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfLaunchAction.FileName">
            <summary>
            Gets or sets file to be launched.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfNamedAction">
            <summary>
            Represents an action which perfoms the named action.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfNamedAction.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The  object representing destination of an action.</value>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfNamedAction.#ctor(Spire.Pdf.Actions.PdfActionDestination)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="destination">The  object representing destination of an action.</param>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfAnnotationActions">
            <summary>
            Represents additional actions of the annotations.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfAnnotationActions.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAnnotationActions.MouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is pressed inside the 
            annotations active area.
            </summary>
            <value>The mouse down action.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAnnotationActions.MouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is released 
            inside the annotations active area..
            </summary>
            <value>The mouse up action.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAnnotationActions.GotFocus">
            <summary>
            Gets or sets the action to be performed when the annotation receives the 
            input focus.
            </summary>
            <value>The got focus action.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAnnotationActions.LostFocus">
            <summary>
            Gets or sets the action to be performed when the annotation loses the 
            input focus.
            </summary>
            <value>The lost focus action.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfAnnotationActions.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfDocumentActions">
            <summary>
            Represents an action for the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.AfterOpenAction">
            <summary>
            Gets or sets the action to execute when the document is opened. 
            </summary>
            <value>A  specifying the action to be executed when documents opens in the viewer. </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.BeforeCloseAction">
            <summary>
            Gets or sets the action to be performed before the document is closed.
            </summary>
            <value>A  object specifying the action to be executed before the document is closed. </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.BeforeSaveAction">
            <summary>
            Gets or sets the java script action to be performed before the document is saved.
            </summary>
            <value>A  object specifying the action to be executed before the document is saved. </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.AfterSaveAction">
            <summary>
            Gets or sets the jave script action to be performed after the document is saved.
            </summary>
            <value>A  object specifying the action to be executed after the document is saved.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.BeforePrintAction">
            <summary>
            Gets or sets the action to be performed before the document is printed.
            </summary>
            <value>A  object specifying the action to be executed before the document is printed. </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.AfterPrintAction">
            <summary>
            Gets or sets the action to be performed after the document is printed.
            </summary>
            <value>A  object specifying the action to be executed after the document is printed. .</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfDocumentActions.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfEmbeddedGoToAction">
            <summary>
            Represents an embedded go-to action which allows jumping to or from a PDF file that is embedded in another PDF file.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfEmbeddedGoToAction.IsNewWindow">
            <summary>
            Indicates the target document should be opened in a new window or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfEmbeddedGoToAction.FileName">
            <summary>
            The target document name.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfEmbeddedGoToAction.Destination">
            <summary>
            The destination in the target document to jump to.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfEmbeddedGoToAction.#ctor(System.String,Spire.Pdf.General.PdfDestination,System.Boolean)">
            <summary>
            Initialize a new instance of PdfEmbeddedGoToAction.
            </summary>
            <param name="fileName">The target PDF file name to be opened.</param>
            <param name="dest">The destination.</param>
            <param name="newWindow">If true, the target PDF would be opened in a new window.Otherwise false.</param>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfFieldActions">
            <summary>
            Represents actions to be performed as response to field events. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfFieldActions.#ctor(Spire.Pdf.Actions.PdfAnnotationActions)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="annotationActrions">The annotation actions.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.KeyPressed">
            <summary>
            Gets or sets the JavaScript action to be performed when the user types a keystroke 
            into a text field or combo box or modifies the selection in a scrollable list box. 
            This action can check the keystroke for validity and reject or modify it.
            </summary>
            <value>A  object specifying the action to be executed when the user types a keystroke.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.Format">
            <summary>
            Gets or sets the JavaScript action to be performed before the field is formatted 
            to display its current value.
            </summary>
            <value>A  object specifying the action to be executed for formating the field value.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.Validate">
            <summary>
            Gets or sets the JavaScript action to be performed
            This action can check the new value for validity.
            </summary>
            <value>A  object specifying the action to be executed for validating the field value.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.Calculate">
            <summary>
            Gets or sets the JavaScript action to be performed to recalculate the value 
            of this field when that of another field changes.
            </summary>
            <value>A  object specifying the action to be executed for calculating the field value.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.MouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is released 
            inside the fields area.
            </summary>
            <value>A  descendant specifying the action to be executed when the mouse button is released inside the field's area.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.MouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is pressed inside the 
            fields area.
            </summary>
            <value>A  descendant specifying the action to be executed when the mouse button is pressed inside the field's area.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.GotFocus">
            <summary>
            Gets or sets the action to be performed when the field receives the 
            input focus.
            </summary>
            <value>A  descendant specifying the action to be executed when the field receives the input focus.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.LostFocus">
            <summary>
            Gets or sets the action to be performed when the field loses the 
            input focus.
            </summary>
            <value>A  descendant specifying the action to be executed when the field losts the input focus.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfFieldActions.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfResetAction">
            <summary>
            Represents Pdf form's reset action.
            </summary>
            <remarks>This action allows a user to reset the form fields to their default values. </remarks>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfResetAction.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfResetAction.Include">
            <summary>
            Gets or sets a value indicating whether fields contained in Fields
            collection will be included for resetting.
            </summary>
            <value><c>true</c> if include; otherwise, <c>false</c>.</value>
            <remarks>
            If Include property is true, only the fields in this collection will be reset.
            If Include property is false, the fields in this collection are not reset
            and only the remaining form fields are reset.
            If the collection is null or empty, then all the form fields are reset
            and the Include property is ignored.
            </remarks>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfSoundAction">
            <summary>
            Represents the sound action.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfSoundAction.#ctor(System.String)">
            <summary>
             Initializes a new instance of the  class.
            </summary>
            <param name="fileName">Name of the sound file.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSoundAction.Volume">
            <summary>
            Gets or sets the volume at which to play the sound, in the range -1.0 to 1.0.
            </summary>
            <value>The volume of the sound.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSoundAction.FileName">
            <value>The name of the sound file.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSoundAction.Sound">
            <summary>
            Gets or sets the sound.
            </summary>
            <value> represents the sound.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSoundAction.Synchronous">
            <summary>
            Gets or sets a value whether to play the sound synchronously or asynchronously.
            If this flag is true, the viewer application retains control, allowing no further 
            user interaction other than canceling the sound, until the sound has been 
            completely played. Default value: false.
            </summary>
            <value><c>true</c> if synchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSoundAction.Repeat">
            <summary>
            Gets or sets a value indicating whether to repeat the sound indefinitely. 
            If this entry is present, the  property is ignored. Default value: false.
            </summary>
            <value><c>true</c> if repeat; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSoundAction.Mix">
            <summary>
            Gets or sets a value indicating whether to mix this sound with any other 
            sound already playing. If this flag is false, any previously playing sound is 
            stopped before starting this sound; this can be used to stop a repeating 
            sound. Default value: false.
            </summary>
            <value><c>true</c> if mix; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfSubmitAction">
            <summary>
            Represents Pdf form's submit action.
            </summary>
            <remarks>This type of action allows a user to go to a resource on the Internet, tipically a hypertext link. </remarks>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfSubmitAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.Url">
            <value>An string value specifying the full URI for the internet resource. </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.CanonicalDateTimeFormat">
            <summary>
            If set, any submitted field values representing dates are converted to the 
            standard format. The interpretation of a form field as a date is not specified 
            explicitly in the field itself but only in the JavaScript code that processes it.
            </summary>
            <value>
            <c>true</c> if use canonical date time format when submit data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.SubmitCoordinates">
            <summary>
            Gets or sets a value indicating whether to submit mouse pointer coordinates. If set, 
            the coordinates of the mouse click that caused the submit-form action are transmitted 
            as part of the form data. 
            </summary>
            <value><c>true</c> if submit coordinates; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.IncludeNoValueFields">
            <summary>
            Gets or sets a value indicating whether to submit fields without value.
            If set, all fields designated by the Fields collection and the 
            flag are submitted, regardless of whether they have a value. For fields without a 
            value, only the field name is transmitted.
            </summary>
            <value>
            <c>true</c> if submit fields without value or the empty ones; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.IncludeIncrementalUpdates">
            <summary>
            Gets or sets a value indicating whether to submit form's incremental updates.
            Meaningful only when the form is being submitted in Forms Data Format.
            If set, the submitted FDF file includes the contents of all incremental 
            updates to the underlying PDF document. If clear, the incremental updates are 
            not included.
            </summary>
            <value>
            <c>true</c> if incremental updates should be submitted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.IncludeAnnotations">
            <summary>
            Gets or sets a value indicating whether to submit annotations.
            Meaningful only when the form is being submitted in Forms Data Format.
            If set, the submitted FDF file includes all markup annotations in the 
            underlying PDF document. If clear, markup annotations are not included.
            </summary>
            <value><c>true</c> if annotations should be submitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.ExcludeNonUserAnnotations">
            <summary>
            Gets or sets a value indicating whether to exclude non user annotations form submit 
            data stream. Meaningful only when the form is being submitted in Forms Data Format 
            and the  property is set to true.
            </summary>
            <value>
            <c>true</c> if non user annotations should be excluded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.EmbedForm">
            <summary>
            Gets or sets a value indicating whether to include form to submit data stream.
            Meaningful only when the form is being submitted in Forms Data Format.
            If set, the  property is a file name containing an embedded file 
            stream representing the PDF file from which the FDF is being submitted.
            </summary>
            <value><c>true</c> if form should be embedded to submit stream; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.DataFormat">
            <summary>
            Gets or sets the submit data format.
            </summary>
            <value>The submit data format.</value>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfSubmitAction.Include">
            <summary>
            Gets or sets a value indicating whether fields contained in Fields
            collection will be included for submitting.
            </summary>
            <value><c>true</c> if include; otherwise, <c>false</c>.</value>
            <remarks>
            If Include property is true, only the fields in this collection will be submitted.
            If Include property is false, the fields in this collection are not submitted
            and only the remaining form fields are submitted.
            If the collection is null or empty, then all the form fields are reset
            and the Include property is ignored.
            If the field has Export property set to false it will be not included for 
            submitting in any case.
            </remarks>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfUriAction">
            <summary>
            Represents an action which resolves unique resource identifier.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfUriAction.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Actions.PdfUriAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="uri">The unique resource identifier.</param>
        </member>
        <member name="P:Spire.Pdf.Actions.PdfUriAction.Uri">
            <summary>
            Gets or sets the unique resource identifier.
            </summary>
            <value>The unique resource identifier.</value>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfFilePathType">
            <summary>
            Specifies the file path type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfFilePathType.Relative">
            <summary>
            Specifies the file location with out including the domain name.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfFilePathType.Absolute">
            <summary>
            Specifies the location, including the domain name.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfActionDestination">
            <summary>
            Specifies the available named actions supported by the viewer. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfActionDestination.FirstPage">
            <summary>
            Navigate to first page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfActionDestination.LastPage">
            <summary>
            Navigate to last page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfActionDestination.NextPage">
            <summary>
            Navigate to next page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfActionDestination.PrevPage">
            <summary>
            Navigate to previous page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Actions.PdfSubmitFormFlags">
            <summary>
            Specifies the available data formats for submitting the form data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.IncludeExclude">
            <summary>
            If clear, the Fields array specifies which fields to
            include in the submission. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.IncludeNoValueFields">
            <summary>
            If set, all fields designated by the Fields array and the Include/
            Exclude flag are submitted, regardless of whether they have a value. 
            For fields without a value, only the
            field name is transmitted.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.ExportFormat">
            <summary>
            Meaningful only if the SubmitPDF and XFDF flags are clear. If set,
            field names and values are submitted in HTML Form format. If
            clear, they are submitted in Forms Data Format
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.GetMethod">
            <summary>
            If set, field names and values are submitted using an HTTP GET
            request. If clear, they are submitted using a POST request. This flag
            is meaningful only when the ExportFormat flag is set; if ExportFormat
            is clear, this flag must also be clear.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.SubmitCoordinates">
            <summary>
            If set, the coordinates of the mouse click that caused the submitform
            action are transmitted as part of the form data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.Xfdf">
            <summary>
            Meaningful only if the SubmitPDF flags are clear. If set,
            field names and values are submitted as XML Forms Data Format .
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.IncludeAppendSaves">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the submitted FDF file includes the contents
            of all incremental updates to the underlying PDF document,
            as contained in the Differences entry in the FDF dictionary.
            If clear, the incremental updates are not included.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.IncludeAnnotations">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the submitted FDF file includes all markup
            annotations in the underlying PDF document.
            If clear, markup annotations are not included.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.SubmitPdf">
            <summary>
            If set, the document is submitted as PDF, using the
            MIME content type application/pdf (described in Internet RFC
            2045, Multipurpose Internet Mail Extensions (MIME), Part One:
            Format of Internet Message Bodies; see the Bibliography). If set, all
            other flags are ignored except GetMethod.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.CanonicalFormat">
            <summary>
            If set, any submitted field values representing dates are
            converted to the standard format described.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.ExclNonUserAnnots">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and
            ExportFormat flags are clear) and the IncludeAnnotations flag is
            set. If set, it includes only those markup annotations whose T entry
            matches the name of the current user, as determined
            by the remote server to which the form is being submitted.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.ExclFKey">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the submitted FDF excludes the F entry.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Actions.PdfSubmitFormFlags.EmbedForm">
            <summary>
            Meaningful only when the form is being submitted in
            Forms Data Format (that is, when both the XFDF and ExportFormat
            flags are clear). If set, the F entry of the submitted FDF is a file
            specification containing an embedded file stream representing the
            PDF file from which the FDF is being submitted.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DActivation">
            <summary>
            Represents the activation states for the 3D annotation. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.ActivationMode">
            <summary>
            Gets or sets the activation mode for the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.DeactivationMode">
            <summary>
            Gets or sets the deactivation mode for the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.ActivationState">
            <summary>
            Gets or sets the activation state for the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.DeactivationState">
            <summary>
            Gets or sets the deactivation state for the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.ShowToolbar">
            <summary>
            Gets or sets a value indicating whether the toolbar should be displayed when the annotation is activated or not. 
            </summary>
            <value>If true, a toolbar should be displayed by default when the annotation is activated and given focus. If false, a toolbar should not be displayed by default. </value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.ShowUI">
            <summary>
            Gets or sets a value indicating whether the UI for managing the 3D artwork should be displayed when the annotation is activated. 
            </summary>
            <value>If true, the user interface should be made visible when the annotation is activated. If false, the user interface should not be made visible by default.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DActivation.#ctor">
            <summary>
            Initializes the new instance of  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DActivation.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DAnimation">
            <summary>
            Represents the lighting to apply for the 3D artwork.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnimation.Type">
            <summary>
            Gets or sets the type of the animation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnimation.PlayCount">
            <summary>
            Gets or sets the play count. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnimation.TimeMultiplier">
            <summary>
            Gets or sets the rendering opacity.
            <remarks>A positive number specifying the time multiplier to be used when running the animation. A value greater than one shortens the time it takes to play the animation, or effectively speeds up the animation.</remarks>
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DAnimation.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DAnimation.#ctor(Spire.Pdf.Annotations.PDF3DAnimationType)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="type">PDF 3D Animation Type.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnimation.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DBackground">
            <summary>
            Represents the background appearance for 3D artwork. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DBackground.Color">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>The  object specifying the background color for the 3D artwork. </value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DBackground.ApplyToEntireAnnotation">
            <summary>
            Gets or sets a value indicating how the background is applied. 
            </summary>
            <value>True if the background is applied to entire annotation, false if the background is applied to annotation's 3D view box only.</value>      
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DBackground.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DBackground.#ctor(Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the  class.        
            </summary>
            <param name="color">The  object specifying the background color for the 3D artwork.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DBackground.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DCrossSection">
            <summary>
            Represents the clipping portion of the 3D artwork for the purpose of showing artwork cross sections.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DCrossSection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.Center">
            <summary>
            Gets or sets the center of the cutting plane. 
            <remarks>A three element array specifying the center of rotation on the cutting plane in world space coordinates.</remarks>
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.Color">
            <summary>
            Gets or sets the cutting plane color. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.IntersectionColor">
            <summary>
            Gets or sets the intersection color.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.IntersectionIsVisible">
            <summary>
            Gets or sets a value indicating whether the intersection of cutting plane with 3D artwork is visible.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.Opacity">
            <summary>
            Gets or sets the cutting plane opacity. 
            <remarks>The opacity is given in percents, 100 is full opacity, 0 is no opacity.</remarks>
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.Orientation">
            <summary>
            Gets or sets the orientation of the cutting plane. 
            <value>A three-element array specifying the orientation of the cutting plane in world space, where each value represents the orientation in relation to the X, Y, and Z axes, respectively. </value>
            <remarks>If the array has more than 3 elements, only the first 3 will be considered. Exactly one of the values must be null, indicating an initial state of the cutting plane that is perpendicular to the corresponding axis and clipping all geometry on the positive side of that axis. The other two values must be numbers indicating the rotation of the plane, in degrees, around their corresponding axes. The order in which these rotations are applied should match the order in which the values appear in the array. </remarks>
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection">
            <summary>
            Represents the collection of  objects. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection.Add(Spire.Pdf.Annotations.Pdf3DCrossSection)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection.Contains(Spire.Pdf.Annotations.Pdf3DCrossSection)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            if it contains the specified value, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection.IndexOf(Spire.Pdf.Annotations.Pdf3DCrossSection)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection.Insert(System.Int32,Spire.Pdf.Annotations.Pdf3DCrossSection)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection.Remove(Spire.Pdf.Annotations.Pdf3DCrossSection)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DCrossSectionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the  at the specified index.
            </summary>        
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DLighting">
            <summary>
            Represents the lighting scheme for the 3D artwork.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DLighting.Style">
            <summary>
            Gets or sets the Lighting style of the 3D artwork.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DLighting.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DLighting.#ctor(Spire.Pdf.Annotations.Pdf3DLightingStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">The  object specifies the style of the 3D artwork.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DLighting.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DNode">
            <summary>
            Represents the particular areas of 3D artwork and the opacity and visibility with which individual nodes are displayed.  
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DNode.Visible">
            <summary>
            Gets or sets a value indicating whether the node is visible or not. 
            </summary>
            <value>True if the node is visible. </value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DNode.Name">
            <summary>
            Gets or sets the node name. 
            </summary>
            <value>The name of the 3D node.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DNode.Opacity">
            <summary>
            Gets or sets the cutting plane opacity. 
            </summary>
            <value>A number indicating the opacity of the cutting plane using a standard additive blend mode. </value>
            <remarks>The opacity is given in percents, 100 is full opacity, 0 is no opacity.</remarks>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DNode.Matrix">
            <summary>
            Gets or sets the 3D transformation matrix. 
            </summary>
            <value>A 12-element 3D transformation matrix that specifies the position and orientation of this node, relative to its parent, in world coordinates. </value>
            <remarks>If the array has more than 12 elements, only the first 12 will be considered.</remarks>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DNode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DNode.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DNodeCollection">
            <summary>
            Represents a collection of  objects. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DNodeCollection.Add(Spire.Pdf.Annotations.Pdf3DNode)">
            <summary>
            Adds the specified value.
            <param name="value">The value.</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DNodeCollection.Contains(Spire.Pdf.Annotations.Pdf3DNode)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            if it contains the specified value, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DNodeCollection.IndexOf(Spire.Pdf.Annotations.Pdf3DNode)">
            <summary>
            Indexes the of.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DNodeCollection.Insert(System.Int32,Spire.Pdf.Annotations.Pdf3DNode)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DNodeCollection.Remove(Spire.Pdf.Annotations.Pdf3DNode)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DProjection">
            <summary>
             Represents the mapping of 3D camera co-ordinates onto the target coordinate system of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.ProjectionType">
            <summary>
            Gets or sets the type of the projection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.ClipStyle">
            <summary>
            Gets or sets the projection ClipStyle.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.OrthoScaleMode">
            <summary>
             Gets or sets the scale mode for ortho graphic projections.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.FarClipDistance">
            <summary>
            Gets or sets the far clipping distance.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.NearClipDistance">
            <summary>
            Gets or sets the near clipping distance.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.Scaling">
            <summary>
            Gets or sets the projection scaling.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DProjection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DProjection.#ctor(Spire.Pdf.Annotations.Pdf3DProjectionType)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="type">The Pdf3D Projection Type.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DProjection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DRendermode">
            <summary>
            Represents the rendering mode of the 3D artwork. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DRendermode.Style">
            <summary>
            Gets or sets the type of the projection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DRendermode.AuxilaryColor">
            <summary>
            Gets or sets the Auxiliary color.
            </summary> 
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DRendermode.FaceColor">
            <summary>
            Gets or sets the Face color.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DRendermode.CreaseValue">
            <summary>
            Gets or sets the crease value. 
            <remarks>The crease value is specified in degrees, from 0 to 360.</remarks>
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DRendermode.Opacity">
            <summary>
            Gets or sets the rendering opacity. 
            </summary>
            <remarks>The opacity is given in percents, 100 is full opacity, 0 is no opacity.</remarks>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DRendermode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DRendermode.#ctor(Spire.Pdf.Annotations.Pdf3DRenderStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">The  object specifies the rendering style of the 3D artwork.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DRendermode.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DView">
            <summary>
            Represents a attributes to be applied to the virtual camera associated with a 3D annotation. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.Background">
            <summary>
            Gets or sets the background for this view.  
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.CameraToWorldMatrix">
            <summary>
            Gets or sets the 3D transformation matrix. 
            </summary>
            <value>A 12-element 3D transformation matrix that specifies a position and orientation of the camera in world coordinates. </value>
            <remarks>If the array has more than 12 elements, only the first 12 will be considered.</remarks>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.CenterOfOrbit">
            <summary>
            Gets or sets the center of orbit for 3D artwork. 
            </summary>
            <value>A non-negative number indicating a distance in the camera coordinate system along the z axis to the center of orbit for this view. </value>
            <remarks>If this value is negative, the viewer application must determine the center of orbit.</remarks>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.CrossSections">
            <summary>
            Gets the list of cross sections for this view. 
            <value>A list of PDF3DCrossSection objects available for this view.</value>
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.ExternalName">
            <summary>
            Gets or sets the view's external name.
            </summary>
            <value>The external name of the view, suitable for presentation in a user interface.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.LightingScheme">
            <summary>
            Gets or sets the Creates a new page and adds it as the last page of the document scheme for this view. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.Nodes">
            <summary>
            Gets the list of 3D nodes for this view. 
            </summary>
            <value>A list of PDF3DNode objects available for this view.</value>        
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.Projection">
            <summary>
            Gets or sets the projection for this view. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.RenderMode">
            <summary>
            Gets or sets the rendering mode for this view. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.ResetNodesState">
            <summary>
            Gets or sets a value indicating whether nodes specified in the Nodes collection are returned to their original states (as specified in the 3D artwork) before applying transformation matrices and opacity settings specified in the node dictionaries. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.ViewNodeName">
            <summary>
            Gets or sets the name of the view node.         
            </summary>
            <remarks>The view node in the content stream defines all the properties for viewing the 3D artwork. If both ViewNodeName and CameraToWorldMatrix are specified, then ViewNodeName takes precedence.</remarks>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DView.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DView.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DViewCollection">
            <summary>
            Represents a collection of Pdf3DView objects. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DViewCollection.Add(Spire.Pdf.Annotations.Pdf3DView)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Pdf3DView</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DViewCollection.Contains(Spire.Pdf.Annotations.Pdf3DView)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
            if it contains the specified value, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DViewCollection.IndexOf(Spire.Pdf.Annotations.Pdf3DView)">
            <summary>
            Indexes the of the Pdf3DView object.
            </summary>
            <param name="value">The value.</param>
            <returns>Pdf3DView</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DViewCollection.Insert(System.Int32,Spire.Pdf.Annotations.Pdf3DView)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DViewCollection.Remove(Spire.Pdf.Annotations.Pdf3DView)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The Pdf3DView object.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DViewCollection.Item(System.Int32)">
            <summary>
            Gets or sets the  at the specified index.
            </summary>
            <value>Pdf3DView</value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DActivationState">
            <summary>
            Specifies an activation state of the 3D annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DActivationState.Instantiated">
            <summary>
            Represents that the state in which the artwork has been read and a run-time instance of 
            the artwork has been created. In this state, it can be rendered but script-driven 
            real-time modifications (that is, animations) are disabled.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DActivationState.Live">
            <summary>
            Represents that the artwork is instantiated, and it is being modified in real time to 
            achieve some animation effect. In the case of keyframe animation, the artwork is 
            live while it is playing and then reverts to an instantiated state when playing 
            completes or is stopped.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DActivationMode">
            <summary>
            Specifies the available modes for activating a 3D annotation. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DActivationMode.PageOpen">
            <summary>
            Represents that the annotation should be activated as soon as the page containing 
            the annotation is opened.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DActivationMode.PageVisible">
            <summary>
            Represents that the annotation should be activated as soon as any part of the page 
            containing the annotation becomes visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DActivationMode.ExplicitActivation">
            <summary>
            Represents that the annotation should remain inactive until explicitly activated 
            by a script or user action.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DDeactivationMode">
            <summary>
            Specifies the available modes for deactivating a 3D annotation. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DDeactivationMode.PageClose">
            <summary>
            Represents that the annotation should be deactivated as soon as the page is closed.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DDeactivationMode.PageInvisible">
            <summary>
            Represents that the annotation should be deactivated as soon as the page containing 
            the annotation becomes invisible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DDeactivationMode.ExplicitDeactivation">
            <summary>
            Represents that the annotation should remain active until explicitly deactivated by a 
            script or user action.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DDeactivationState">
            <summary>
            Specifies the available states upon deactivating a 3D annotation. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DDeactivationState.Uninstantiated">
            <summary>
            Represents the initial state of the artwork before it has been used in any way.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DDeactivationState.Instantiated">
            <summary>
            Represents that the state in which the artwork has been read and a run-time instance of 
            the artwork has been created. In this state, it can be rendered but script-driven 
            real-time modifications (that is, animations) are disabled.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DDeactivationState.Live">
            <summary>
            Represents that the artwork is instantiated, and it is being modified in real time to 
            achieve some animation effect. In the case of keyframe animation, the artwork is 
            live while it is playing and then reverts to an instantiated state when playing 
            completes or is stopped.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DLightingStyle">
            <summary>
            Specifies the available styles for applying light to 3D artwork. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Artwork">
            <summary>
            The Lights as specified in the 3D artwork.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.None">
            <summary>
            The lighting specified in the 3D artwork is ignored.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.White">
            <summary>
            Three blue-grey infinite lights.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Day">
            <summary>
            Three light-grey infinite lights.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Night">
            <summary>
            One yellow, one aqua, and one blue infinite light.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Hard">
            <summary>
            Three grey infinite lights.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Primary">
            <summary>
            One red, one green, and one blue infinite light.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Blue">
            <summary>
            Three blue infinite lights.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Red">
            <summary>
            Three red infinite lights.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Cube">
            <summary>
            Six grey infinite lights aligned with the major axes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.CAD">
            <summary>
            Three grey infinite lights and one light attached to the camera.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DLightingStyle.Headlamp">
            <summary>
            Single infinite light attached to the camera.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DProjectionClipStyle">
            <summary>
            Specifies the available clipping style of the 3D annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionClipStyle.ExplicitNearFar">
            <summary>
            Represents the Clipping style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionClipStyle.AutomaticNearFar">
            <summary>
            Represents the Clipping style.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DProjectionOrthoScaleMode">
            <summary>
            Specifies the available Ortho projection scaling mode of the 3D annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionOrthoScaleMode.Width">
            <summary>
            Scale to fit the width of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionOrthoScaleMode.Height">
            <summary>
            Scale to fit the height of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionOrthoScaleMode.Min">
            <summary>
            Scale to fit the lesser of width or height of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionOrthoScaleMode.Max">
            <summary>
            Scale to fit the greater of width or height of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionOrthoScaleMode.Absolute">
            <summary>
            No scaling should occur due to binding.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DProjectionType">
            <summary>
            Specifies the available projection type of the 3D annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionType.Orthographic">
            <summary>
            Represents Orthographic projection
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DProjectionType.Perspective">
            <summary>
            Represents Perspective projection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DRenderStyle">
            <summary>
            Specifies the available rendering style of the 3D artwork. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.Solid">
            <summary>
            Displays textured and lit geometric shapes. In the case of artwork 
            that conforms to the Universal 3D File Format specification, these 
            shapes are triangles.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.SolidWireframe">
            <summary>
            Displays textured and lit geometric shapes (triangles) with single 
            color edges on top of them.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.Transparent">
            <summary>
            Displays textured and lit geometric shapes (triangles) with an added 
            level of transparency.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.TransparentWireframe">
            <summary>
            Displays textured and lit geometric shapes (triangles) with an added 
            level of transparency, with single color opaque edges on top of it.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.BoundingBox">
            <summary>
            Displays the bounding box edges of each node, aligned with the axes 
            of the local coordinate space for that node.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.TransparentBoundingBox">
            <summary>
            Displays bounding boxes faces of each node, aligned with the axes of 
            the local coordinate space for that node, with an added level of transparency.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.TransparentBoundingBoxOutline">
            <summary>
            Displays bounding boxes edges and faces of each node, aligned with the axes of 
            the local coordinate space for that node, with an added level of transparency.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.Wireframe">
            <summary>
            Displays only edges in a single color.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.ShadedWireframe">
            <summary>
            Displays only edges, though interpolates their color between their two vertices 
            and applies lighting.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.HiddenWireframe">
            <summary>
            Displays edges in a single color, though removes back-facing and obscured edges.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.Vertices">
            <summary>
            Displays only vertices in a single color.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.ShadedVertices">
            <summary>
            Displays only vertices, though uses their vertex color and applies lighting.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.Illustration">
            <summary>
            Displays silhouette edges with surfaces, removes obscured lines.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.SolidOutline">
            <summary>
            Displays silhouette edges with lit and textured surfaces, removes obscured lines.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.Pdf3DRenderStyle.ShadedIllustration">
            <summary>
            Displays silhouette edges with lit and textured surfaces and an additional emissive 
            term to remove poorly lit areas of the artwork.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PDF3DAnimationType">
            <summary>
            Specifies the available animation style for rendering the 3D artwork. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PDF3DAnimationType.None">
            <summary>
            Represents that the Keyframe animations should not be driven directly by 
            the viewer application. This value is used by documents that are intended 
            to drive animations through an alternate means, such as JavaScript.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PDF3DAnimationType.Linear">
            <summary>
            Represents that the Keyframe animations are driven linearly from beginning to end. 
            This animation style results in a repetitive playthrough of the animation, 
            such as in a walking motion.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PDF3DAnimationType.Oscillating">
            <summary>
            Represents that the Keyframe animations should oscillate along their time range. 
            This animation style results in a back-and-forth playing of the animation, 
            such as exploding or collapsing parts.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfActionAnnotation">
            <summary>
            Represents the annotation with associated action.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfActionAnnotation.#ctor(System.Drawing.RectangleF,Spire.Pdf.Actions.PdfAction)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="action">The Pdf action.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfActionLinkAnnotation">
            <summary>
            Represents base class for link annotations with associated action.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfActionLinkAnnotation.Action">
            <summary>
            Gets or sets the action for the link annotation.
            </summary>
            <value>The action to be executed when the link is activated.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfActionLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfActionLinkAnnotation.#ctor(System.Drawing.RectangleF,Spire.Pdf.Actions.PdfAction)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">Bounds specifies the location of the drawn text.</param>
            <param name="action">The  specifies an action to be executed when the link is activated.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.Appearance.PdfAppearanceState">
            <summary>
            Represents the states of an annotation's appearance.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearanceState.On">
            <summary>
            Gets or sets the active state template.
            </summary>
            <value>The  object specifies an active state template.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearanceState.Off">
            <summary>
            Gets or sets the inactive state.
            </summary>
            <value>The  object specifies an inactive state template.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearanceState.OnMappingName">
            <summary>
            Gets or sets the mapping name of the active state.
            </summary>
            <value>String specifies the mapping name of the active state.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearanceState.OffMappingName">
            <summary>
            Gets or sets the mapping name of the inactive state.
            </summary>
            <value>String specifies the mapping name of the inactive state.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.Appearance.PdfAppearanceState.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearanceState.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Appearance.PdfAppearance">
            <summary>
            Represents the appearance of an annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearance.Normal">
            <summary>
            Gets or sets  object which applied to annotation in normal state.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearance.MouseHover">
            <summary>
            Gets or sets  object which applied to the annotation on hovering the mouse.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearance.Pressed">
            <summary>
            Gets or sets  object which applied to an annotation when mouse button is pressed.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.Appearance.PdfAppearance.#ctor(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="annotation">The  object specifies the annotation.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfAppearance.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.Appearance.PdfExtendedAppearance">
            <summary>
            Represents extended appearance of the annotation. It has two states such as On state and Off state.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfExtendedAppearance.Normal">
            <summary>
            Gets the normal appearance of the annotation.
            </summary>
            <value>The  object specifies the normal appearance of the annotation.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfExtendedAppearance.MouseHover">
            <summary>
            Gets the appearance when mouse is hovered.
            </summary>
            <value>The  object specifies the annotation appearance when the mouse is hovered on it.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfExtendedAppearance.Pressed">
            <summary>
            Gets the pressed state annotation.
            </summary>
            <value>The appearance in pressed state.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.Appearance.PdfExtendedAppearance.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Appearance.PdfExtendedAppearance.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLineAnnotation">
            <summary>
            Represents a line annotation. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineAnnotation.m_captionType">
            <summary>
            To specifying Caption Type
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.LineCaption">
            <summary>
            Gets or sets whether the line annotation caption should be displayed.
            </summary>
            <value><c>true</c> if the line caption should be displayed, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.LeaderLine">
            <summary>
            Gets or sets Leader Line 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.LeaderLineExt">
            <summary>
            Gets or sets Leader Line Extension
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.lineBorder">
            <summary>
            Gets or sets Border style of the Line Annotation.
            </summary>
            <value>A  enumeration member specifying the border style for the line.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.BeginLineStyle">
            <summary>
            Gets or sets the style used for the beginning of the line. 
            </summary>
            <value>A  enumeration member specifying the begin style for the line.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.EndLineStyle">
            <summary>
            Gets or sets the style used for the end of the line. 
            </summary>
            <value>A  enumeration member specifying the end style for the line.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.CaptionType">
            <summary>
            Gets or sets the line caption text type.
            </summary>
            <value>A  enumeration member specifying the line caption type.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.LineIntent">
            <summary>
            Gets or sets LineIntent
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.InnerLineColor">
            <summary>
            Gets or sets Inner Color of the PdfLine
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotation.BackColor">
            <summary>
            Gets or sets Background Color of the PdfLine
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfLineAnnotation.#ctor(System.Int32[])">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="linePoints">The line points.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfLineAnnotation.#ctor(System.Int32[],System.String)">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="linePoints">The line points.</param>
            <param name="text">The line caption text.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfLineAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.LineBorder">
            <summary>
            Represents the border style of the Line annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.LineBorder.BorderWidth">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The line border width.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.LineBorder.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The line border style.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.LineBorder.DashArray">
            <summary>
            Gets or sets the Line Dash
            </summary>
            <value>The line border dash array.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.LineBorder.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.LineBorder.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLinkAnnotation">
            <summary>
            Represents the base class for link annotations.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLinkAnnotation.m_highlightMode">
            <summary>
            Highlight mode of the annotation.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfLinkAnnotation.#ctor">
            <summary>
            Initializes new instance of  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.Pdf3DAnnotation">
            <summary>
            Represents the 3D annotation for a PDF document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnnotation.Views">
            <summary>
            Gets the list of available views for the current 3D artwork.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnnotation.DefaultView">
            <summary>
            Gets or sets the default view.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnnotation.OnInstantiate">
            <summary>
            Gets or sets the code to execute when the 3D artwork is instantiated. 
            <value>Javascript code to be executed when the 3D artwork is instantiated.</value>
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnnotation.Activation">
            <summary>
            Gets or sets the activation options for the annotation. 
            </summary>
            <remarks>Defines the times at which the annotation should be activated and deactivated and the state of the 3D artwork instance at those times.</remarks>
        </member>
        <member name="P:Spire.Pdf.Annotations.Pdf3DAnnotation.FileName">
            <value>Filename with Full path</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.Pdf3DAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">Name of the sound file.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfPolygonAnnotation">
            <summary>
            Represents the polygon annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPolygonAnnotation.Author">
            <summary>
            The user who created the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPolygonAnnotation.Subject">
            <summary>
            The description of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPolygonAnnotation.Vertices">
            <summary>
            The vertice coordinates.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPolygonAnnotation.ModifiedDate">
            <summary>
            The date and time when the annotation was most recently modified.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPolygonAnnotation.BorderEffect">
            <summary>
            The border effect.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfPolygonAnnotation.#ctor(Spire.Pdf.PdfPageBase,System.Drawing.PointF[])">
            <summary>
            Initialize a new instance of PdfPolygonAnnotation.
            </summary>
            <param name="page">The page</param>
            <param name="points">The polygon vertices</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfRubberStampAnnotation">
            <summary>
            Represents the Rubber Stamp annotation for a PDF document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfRubberStampAnnotation.Icon">
            <summary>
            Gets or sets the annotation's icon. 
            </summary>        
            <value>A  enumeration member specifying the icon for the annotation when it is displayed in closed state. </value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfRubberStampAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfRubberStampAnnotation.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfRubberStampAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfRubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="text">Text of the rubber stamp annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.WidgetAnnotation.#ctor">
            <summary>
            Creates an widget annotation object.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.WidgetAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates an widget annotation object.
            </summary>
            <param name="bounds">The specified bound</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.WidgetAnnotation.#ctor(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates an widget annotation object.
            </summary>
            <param name="dictWidgetAnnotation">The specified widget annotation dictionary</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.WidgetAppearance.ButtonLayoutMode">
            <summary>
            Gets or sets the button layout mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.WidgetAppearance.AlternateCaption">
            <summary>
            Gets or sets the text displayed when the mouse button is pressed within the annotation's active area.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.WidgetAppearance.RolloverCaption">
            <summary>
            Gets or sets the text displayed when the user rolls the cursor into the annotation's active area without pressing the mouse button.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.WidgetAppearance.NormalAppearance">
            <summary>
            Gets or sets the widget annotation's normal appearance displayed when it is not interacting with the user.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.WidgetAppearance.RolloverAppearance">
            <summary>
            Gets or sets the widget annotation's rollover appearance displayed when the user rolls the cursor into its active area without pressing the mouse button.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.WidgetAppearance.AlternateAppearance">
            <summary>
            Gets or sets the widget annotation's alternate appearance displayed when the mouse button is pressed within its active area.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfTextWebLink">
            <summary>
            Represents the class for text web link annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextWebLink.Url">
            <summary>
            Gets or sets the Url address.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextWebLink.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextWebLink.DrawTextWebLink(Spire.Pdf.PdfNewPage,System.Drawing.PointF)">
            <summary>
            Draws a Text Web Link on the Page
            </summary>
            <param name="page">The page where the annotation should be placed.</param>
            <param name="location">The location of the annotation.</param>
            <returns>Pdf Layout result</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextWebLink.DrawTextWebLink(Spire.Pdf.Graphics.PdfCanvas,System.Drawing.PointF)">
            <summary>
            Draw a Text Web Link on the Graphics
            </summary>
            <param name="g">The  object specifies where annotation should be placed..</param>
            <param name="location">The location of the annotation.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfTextMarkupAnnotation">
            <summary>
            Represents the text markup annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.TextMarkupAnnotationType">
            <summary>
            Gets or sets TextMarkupAnnotationType .
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.TextMarkupColor">
            <summary>
            Gets or sets text markup color.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.#ctor">
            <summary>
            Initializes new instance of  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.#ctor(System.String,System.String,System.String,System.Drawing.PointF,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="markupTitle">The markup annotation title.</param>
            <param name="text">The string specifies the text of the annotation.</param>
            <param name="markupText">The string specifies the markup text of the annotation.</param>
            <param name="point">The location of the markup text annotation.</param>
            <param name="pdfFont">The  specifies the text appearance of the markup text annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.#ctor(System.String,System.String,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="title">The title of the annotation.</param>
            <param name="text">The text of the annotation.</param> 
            <param name="rect">The bounds of the annotation.</param>
            <param name="font">The font of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.#ctor(System.String,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of  class.
            </summary>       
            <param name="title">The title of the annotation.</param>
            <param name="text">The text of the annotation.</param>     
            <param name="rect">The bounds of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextMarkupAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new instance of  class.
            </summary>
            <param name="rectangle">The bounds of the annotation.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAnnotationWidget">
            <summary>
            Represents the base class for loaded annotation classes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidget.ObjectID">
            <summary>
            Represents the Form field identifier
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationWidget.PageWidget">
            <summary>
            Gets and sets the Page.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationWidget.SetText(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
            <param name="name">New name of the field.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAttachmentAnnotationWidget">
            <summary>
            Represents the attachment annotation from the loaded document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAttachmentAnnotationWidget.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAttachmentAnnotationWidget.FileName">
            <summary>
             Gets the attachment file name of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfDocumentLinkAnnotationWidget">
            <summary>
            Represents the loaded document link annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfDocumentLinkAnnotationWidget.Destination">
            <summary>
            Sets the destination of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfFileLinkAnnotationWidget">
            <summary>
            Represents the loaded file link annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFileLinkAnnotationWidget.FileName">
            <summary>
             Gets or sets the filename of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget">
            <summary>
            Represents the free text annotation widget.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.CreationDate">
            <summary>
            Gets or sets the date and time when the annotation was created.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.ModifiedDate">
            <summary>
            Gets or sets the date and time when the annotation was most recently modified.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.Intent">
            <summary>
            Gets a name describing the intent of the free text annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.Author">
            <summary>
            Gets or sets the user who created the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.Subject">
            <summary>
            Gets or sets the annotation's subject.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.Opacity">
            <summary>
            Gets the opcity value to be used.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.BorderWidth">
            <summary>
            Gets the border width.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.BorderColor">
            <summary>
            Gets the border color
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFreeTextAnnotationWidget.BorderStyle">
            <summary>
            Gets the border style
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLineAnnotationWidget">
            <summary>
            Represents the loaded line annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.BackColor">
            <summary>
            Gets or sets the back color of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.BeginLineStyle">
            <summary>
            Gets or sets the begin line style of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.CaptionType">
            <summary>
            Gets or sets the caption type of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.EndLineStyle">
            <summary>
            Gets or sets the end line style of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.InnerLineColor">
            <summary>
            Gets or sets the inner line color of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.LeaderLine">
            <summary>
            Gets or sets the leader line of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.EndPoint">
            <summary>
            Gets the endpoint of the annotation, it's at the bottom left
            The origin of coordinate system corresponds to the lower-left corner of page.The positive x axis extends horizontally to the right and the positive y axis vertically upward
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.StartPoint">
            <summary>
            Gets the startpoint of the annotation, it's at the bottom left
            The origin of coordinate system corresponds to the lower-left corner of page.The positive x axis extends horizontally to the right and the positive y axis vertically upward      
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.LeaderExt">
            <summary>
            Gets or sets the leader ext of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.LineBorder">
            <summary>
            Gets the line border of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.LineCaption">
            <summary>
            Gets or sets the line caption of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfLineAnnotationWidget.LineIntent">
            <summary>
            Gets or sets the line intent of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfPopupAnnotationWidget">
            <summary>
            Represents the loaded pop up annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPopupAnnotationWidget.Open">
            <summary>
            Gets or sets the open option of the popup annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPopupAnnotationWidget.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfRubberStampAnnotationWidget">
            <summary>
            Represents the loaded rubber stamp annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfRubberStampAnnotationWidget.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfSoundAnnotationWidget">
            <summary>
            Represents the loaded sound annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfSoundAnnotationWidget.Sound">
            <summary>
            Gets or sets the sound of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfSoundAnnotationWidget.FileName">
            <summary>
            Gets the filename of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfSoundAnnotationWidget.Icon">
            <summary>
            Gets or sets the icon of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfStyledAnnotationWidget">
            <summary>
            Represents the PdfLoadedStyledAnnotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <!-- 对于成员“P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.Bounds”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.Border">
            <summary>
            Gets or sets the annotation's border.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfStyledAnnotationWidget.AnnotationFlags">
            <summary>
            Gets or sets the annotation flags.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationWidget.m_annotationAuthor">
            <summary>
            The author of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationWidget.m_annotationState">
            <summary>
            The state of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationWidget.m_annotationStateModel">
            <summary>
            The stateModel of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.CreationDate">
            <summary>
            Gets or sets the date and time when the annotation was created.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.State">
            <summary>
             Gets the annotation's state.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.StateModel">
            <summary>
             Gets the annotation's stateModel.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.Subject">
            <summary>
            Gets or sets the annotation's subject.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.Opacity">
            <summary>
            Gets the opacity value to be used.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.IconNmae">
            <summary>
            Gets the iconname value to be used.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.Open">
            <summary>
            Gets the open option of the popup annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextAnnotationWidget.Author">
            <summary>
            Gets or sets annotation's author.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfTextMarkupAnnotationWidget">
            <summary>
            Represents the loaded text markup annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextMarkupAnnotationWidget.TextMarkupAnnotationType">
            <summary>
            Gets or sets the annotation Type.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextMarkupAnnotationWidget.TextMarkupColor">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfTextMarkupAnnotationWidget.SetTitleText(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
            <param name="name">New name of the field.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfTextWebLinkAnnotationWidget">
            <summary>
            Represents the loaded text web link annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfTextWebLinkAnnotationWidget.Url">
            <summary>
            Gets or sets the Url.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfUriAnnotationWidget">
            <summary>
            Represents the loaded unique resource identifier annotation class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfUriAnnotationWidget.Uri">
            <summary>
            Gets or sets the unique resource identifier text of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfWebLinkAnnotationWidget">
            <summary>
            Represents the loaded web link annotation class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfSoundIcon">
            <summary>
            Specifies the name of an icon to be used in displaying the sound annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfSoundIcon.Speaker">
            <summary>
            Speaker icon of sound link.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfSoundIcon.Mic">
            <summary>
            Microphone icon of sound link.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAttachmentIcon">
            <summary>
            Specifies the type of icon to be used in displaying file attachment annotations.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAttachmentIcon.PushPin">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAttachmentIcon.Tag">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAttachmentIcon.Graph">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAttachmentIcon.Paperclip">
            <summary>
            Type of icon used in file attachment annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAnnotationFlags">
            <summary>
            Specifies the enumeration of the annotation flags.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.Invisible">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.Hidden">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.Print">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.NoZoom">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.NoRotate">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.NoView">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.ReadOnly">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.Locked">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationFlags.ToggleNoView">
            <summary>
            Annotation flag's key.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfPopupIcon">
            <summary>
            Specifies the enumeration of popup annotation icons.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.Note">
            <summary>
            Indicates note popup annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.Comment">
            <summary>
            Indicates comment popup annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.Help">
            <summary>
            Indicates help popup annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.Insert">
            <summary>
            Indicates insert popup annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.Key">
            <summary>
            Indicates key popup annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.NewParagraph">
            <summary>
            Indicates new paragraph popup annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfPopupIcon.Paragraph">
            <summary>
            Indicates paragraph popup annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfTextAnnotationIcon">
            <summary>
            Specifies the enumeration of popup annotation icons.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.Note">
            <summary>
            Indicates note text annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.Comment">
            <summary>
            Indicates comment text annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.Help">
            <summary>
            Indicates help text annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.Insert">
            <summary>
            Indicates insert text annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.Key">
            <summary>
            Indicates key text annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.NewParagraph">
            <summary>
            Indicates new paragraph text annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextAnnotationIcon.Paragraph">
            <summary>
            Indicates paragraph text annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon">
            <summary>
            Specifies the enumeration of rubber stamp annotation icons.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Approved">
            <summary>
            Indicates approved rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.AsIs">
            <summary>
            Indicates AaIs rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Confidential">
            <summary>
            Indicates confidential rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Departmental">
            <summary>
            Indicates departmental rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Draft">
            <summary>
            Indicates draft rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Experimental">
            <summary>
            Indicates experimental rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Expired">
            <summary>
            Indicates expired rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Final">
            <summary>
            Indicates final rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.ForComment">
            <summary>
            Indicates for comment rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.ForPublicRelease">
            <summary>
            Indicates for public release rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.NotApproved">
            <summary>
            Indicates not approved rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.NotForPublicRelease">
            <summary>
            Indicates not for public release rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.Sold">
            <summary>
            Indicates sold rubber stamp annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfRubberStampAnnotationIcon.TopSecret">
            <summary>
            Indicates topsecret rubber stamp annotation
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLineEndingStyle">
            <summary>
            Specifies the Line Ending Style to be used in the Line annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.Square">
            <summary>
            Indicates Square
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.Circle">
            <summary>
            Indicates Circle
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.Diamond">
            <summary>
            Indicates Diamond
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.OpenArrow">
            <summary>
            Indicates OpenArrow
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.ClosedArrow">
            <summary>
            Indicates ClosedArrow
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.None">
            <summary>
            Indicates None
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.ROpenArrow">
            <summary>
            Indicates ROpenArrow
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.Butt">
            <summary>
            Indicates Butt
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.RClosedArrow">
            <summary>
            IdicaIndicatestes RClosedArrow
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineEndingStyle.Slash">
            <summary>
            Indicates Slash
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLineBorderStyle">
            <summary>
            Specifies the Line Border Style is to be used in the Line annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineBorderStyle.Solid">
            <summary>
            Indicates Solid
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineBorderStyle.Dashed">
            <summary>
            Indicates Dashed
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineBorderStyle.Beveled">
            <summary>
            Indicates Beveled
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineBorderStyle.Inset">
            <summary>
            Indicates Inset
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineBorderStyle.Underline">
            <summary>
            Indicates Underline
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLineIntent">
            <summary>
            Specifies the Line Intent Style is to be used in the Line annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineIntent.LineArrow">
            <summary>
            Indicates Line Arrow as intent of the line annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfLineIntent.LineDimension">
            <summary>
            Indicates LineDimension as intent of the line annotation
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfLineCaptionType">
            <summary>
            Specifies the Line Caption Type is to be used in the Line annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfTextMarkupAnnotationType">
            <summary>
            Specifies the Style of the Text Markup Annotation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextMarkupAnnotationType.Highlight">
            <summary>
            The Text Markup Annotation Type is Highlight.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextMarkupAnnotationType.Underline">
            <summary>
            The Text Markup Annotation Type is Underline.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextMarkupAnnotationType.Squiggly">
            <summary>
            The Text Markup Annotation Type is Squiggly.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfTextMarkupAnnotationType.StrikeOut">
            <summary>
            The Text Markup Annotation Type is StrikeOut.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes">
            <summary>
            Specifies the annotation types.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.Highlight">
            <summary>
            Highlight type annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.Underline">
            <summary>
            Underline type annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.StrikeOut">
            <summary>
            StrikeOut type annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.Squiggly">
            <summary>
            Squiggly type annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.AnnotationStates">
            <summary>
            AnnotationStates type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.TextAnnotation">
            <summary>
            TextAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.LinkAnnotation">
            <summary>
            LinkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.DocumentLinkAnnotation">
            <summary>
            DocumentLinkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.FileLinkAnnotation">
            <summary>
            FileLinkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.FreeTextAnnotation">
            <summary>
            FreeTextAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.LineAnnotation">
            <summary>
            LineAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.SquareandCircleAnnotation">
            <summary>
            SquareandCircleAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.PolygonandPolylineAnnotation">
            <summary>
            PolygonandPolylineAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.TextMarkupAnnotation">
            <summary>
            TextMarkupAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.CaretAnnotation">
            <summary>
            CaretAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.RubberStampAnnotation">
            <summary>
            RubberStampAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.LnkAnnotation">
            <summary>
            LnkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.PopupAnnotation">
            <summary>
            PopupAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.FileAttachmentAnnotation">
            <summary>
            FileAttachmentAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.SoundAnnotation">
            <summary>
            SoundAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.MovieAnnotation">
            <summary>
            MovieAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.ScreenAnnotation">
            <summary>
            ScreenAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.WidgetAnnotation">
            <summary>
            WidgetAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.PrinterMarkAnnotation">
            <summary>
            PrinterMarkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.TrapNetworkAnnotation">
            <summary>
            TrapNetworkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.WatermarkAnnotation">
            <summary>
            WatermarkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.TextWebLinkAnnotation">
            <summary>
            TextWebLinkAnnotation type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotationWidgetTypes.Null">
            <summary>
            No annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAnnotation">
            <summary>
            Represents the base class for annotation objects.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotation.m_annotationName">
            <summary>
            The name of the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Annotations.PdfAnnotation.m_annotationModifiedDate">
            <summary>
            The ModifiedDate of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Color">
            <summary>
            Gets or sets the background of the annotations icon when closed.
            The title bar of the annotations pop-up window.
            The border of a link annotation.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.ModifiedDate">
            <summary>
            Gets annotation's modified date.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Border">
            <summary>
            Gets or sets annotation's border.
            </summary>
        </member>
        <!-- 对于成员“P:Spire.Pdf.Annotations.PdfAnnotation.Rectangle”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Location">
            <summary>
            Gets or sets location of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Name">
            <summary>
            Gets or sets the name of the annotation.
            Note: The annotation name, a text string uniquely identifying it among all the annotations on its page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Size">
            <summary>
            Gets or sets size of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Page">
            <summary>
            Gets a page which this annotation is connected to.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Text">
            <summary>
            Gets or sets content of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Flags">
            <summary>
            Gets or sets annotation flags.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotation.#ctor(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Creates new annotation object with the specified dictionary.
            </summary>
            <param name="dictionary">Annotation's dictionary</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotation.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAnnotationBorder">
            <summary>
            Represents the appearance of an annotation's border.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationBorder.HorizontalRadius">
            <summary>
            Gets or sets a horizontal corner radius.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationBorder.VerticalRadius">
            <summary>
            Gets or sets a vertical corner radius.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationBorder.Width">
            <summary>
            Gets or sets the width of annotation's border. 
            </summary>
            <value>A float value specifying the width of the annotation's border. </value>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationBorder.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationBorder.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="borderWidth">A float value specifying the width of the annotation's border.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationBorder.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="borderWidth">A float value specifying the width of the annotation's border.</param>
            <param name="horizontalRadius">A float value specifying the horizontal corner radius value.</param>
            <param name="verticalRadius">A float value specifying the vertical corner radius value.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationBorder.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAnnotationCollection">
            <summary>
            Represents collection of  objects.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationCollection.Item(System.Int32)">
            <summary>
            Gets the  object at the specified position.
            </summary>
            <param name="index">The index value of the annotation in the collection. </param>
            <returns>Annotation object at the specified position.</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.#ctor(Spire.Pdf.PdfNewPage)">
            <summary>
            Creates new annotation collection for the specified page.
            </summary>
            <param name="page">Page which collection is created for.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.Add(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Adds a new annotation to collection. 
            </summary>
            <param name="annotation">The new annotation to be added to collection.</param>
            <returns>Position of the annotation in collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.Clear">
            <summary>
            Cleares the collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.Contains(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Searches the collection for the specified annotation. 
            </summary>
            <param name="annotation">The annotation to search for.</param>
            <returns>True, if annotation is contained in collection. Otherwise - false.</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.IndexOf(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Searches the collection for the specified annotation. 
            </summary>
            <param name="annotation">The Annotation to search.</param>
            <returns>Index of the element in the collection, if exists, or -1 if the element does not exist in the collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.Insert(System.Int32,Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Inserts annotation to the collection at the specified index.
            </summary>
            <param name="index">Index where to insert the element.</param>
            <param name="annotation">The annotation to insert in the collection.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified field.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAnnotationCollection.Remove(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Removes the element from the collection. 
            </summary>
            <param name="field">The element to remove.</param>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAnnotationCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfAttachmentAnnotation">
            <summary>
            Represents an attachment annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAttachmentAnnotation.Icon">
            <summary>
            Gets or Sets attachment's icon.
            </summary>
            <value>A  enumeration member specifying the icon for the annotation when it is displayed in closed state.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfAttachmentAnnotation.FileName">
            <value>A string value specifying the full path to the file to be embedded in the PDF file.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAttachmentAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded in the PDF file.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAttachmentAnnotation.#ctor(System.Drawing.RectangleF,System.String,System.Byte[])">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded in the PDF file.</param>
            <param name="data">A byte array specifying the content of the annotation's embedded file. </param>
            <remarks>If both FileName and FileContent are specified, the FileContent takes precedence. </remarks>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfAttachmentAnnotation.#ctor(System.Drawing.RectangleF,System.String,System.IO.Stream)">
            <param name="rectangle">The rectangle.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded in the PDF file.</param>
            <param name="stream">The stream specifying the content of the annotation's embedded file. </param>
            <remarks>If both FileName and FileContent are specified, the FileContent takes precedence. </remarks>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfDocumentLinkAnnotation">
            <summary>
            Represents annotation object with holds link on another location within a document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfDocumentLinkAnnotation.Destination">
            <summary>
            Gets or sets the destination of the annotation.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfDocumentLinkAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes new  instance.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfDocumentLinkAnnotation.#ctor(System.Drawing.RectangleF,Spire.Pdf.General.PdfDestination)">
            <summary>
            Initializes new  instance.
            </summary>
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="destination">Destination of the annotation.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfFileAnnotation">
            <summary>
            Represents a base class for file attachment annotation. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFileAnnotation.FileName">
            <summary>
            Gets or sets file name of the annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFileAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfFileLinkAnnotation">
            <summary>
            Represents the annotation link to external file.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFileLinkAnnotation.FileName">
            <value>A string value specifying the full path to the file to be embedded.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfFileLinkAnnotation.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action to be executed when the annotation is activated.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfFileLinkAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">Bounds of the annotation.</param>
            <param name="fileName">A string value specifying the full path to the file to be embedded.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfPopupAnnotation">
            <summary>
            Represents a Base class for popup annotation which can be either in open or closed state.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPopupAnnotation.Icon">
            <summary>
            Gets or sets icon style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPopupAnnotation.Open">
            <summary>
            Gets or sets value whether annotation is initially open or closed
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfPopupAnnotation.Appearance">
            <summary>
            Gets or sets appearance of the annotation.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfPopupAnnotation.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfPopupAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfPopupAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="text">The string specifies the annotation text.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfSoundAnnotation">
            <summary>
            Represents the sound annotation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfSoundAnnotation.Icon">
            <summary>
            Gets or sets the icon to be used in displaying the annotation.
            </summary>
            <value>The  enumeration member specifying the icon for the annotation.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfSoundAnnotation.Sound">
            <summary>
            Gets or sets the sound.
            </summary>
            <value>The  object specified a sound for the annotation.</value>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfSoundAnnotation.FileName">
            <value>The string specifies the file name of the sound annotation.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfSoundAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="fileName">The string specifies the file name of the sound annotation.</param>
        </member>
        <member name="T:Spire.Pdf.Annotations.PdfUriAnnotation">
            <summary>
            Represents the Uri annotation
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfUriAnnotation.Uri">
            <summary>
            Gets or sets the Uri address.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Annotations.PdfUriAnnotation.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The  object specifies the action of the annotation.</value>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfUriAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>        
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
        </member>
        <member name="M:Spire.Pdf.Annotations.PdfUriAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">RectangleF structure that specifies the bounds of the annotation.</param>
            <param name="uri">unique resource identifier path.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfBarcode">
            <summary>
            Represents a base class for all barcode types.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfBarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">Set the barcode text.</param>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.BackColor">
            <summary>
            Gets or sets the back color of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.BarColor">
            <summary>
            Gets or sets the bar color of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.TextColor">
            <summary>
            Gets or sets the text color of the barcode text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.NarrowBarWidth">
            <summary>
            Gets or sets the narrow bar width.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.Text">
            <summary>
            Gets or Sets the barcode text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.Location">
            <summary>
            Gets or sets the location to render barcode in the PDF Document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.QuietZone">
            <summary>
            Gets or sets the empty area which is to be allocated around the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.BarHeight">
            <summary>
            Gets or sets the bar height.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.Size">
            <summary>
            Gets the size of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcode.Bounds">
            <summary>
            Gets or sets the rectangular area occupied by the barcode.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfBarcodeException">
            <summary>
            Represents the general barcode exception class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfBarcodeException.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfBarcodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="message">User defined error message.</param>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfBarcodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="message">User defined error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfBarcodeQuietZones">
            <summary>
            Represents the Class for specifying Quiet zones around the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcodeQuietZones.Right">
            <summary>
            Gets or sets the quiet zones at the right side of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcodeQuietZones.Top">
            <summary>
             Gets or sets the quiet zones at Top of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcodeQuietZones.Left">
            <summary>
             Gets or sets the quiet zones at the left side of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcodeQuietZones.Bottom">
            <summary>
             Gets or sets the quiet zones at bottom of the barcode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcodeQuietZones.All">
            <summary>
             Gets or sets the quiet zones around the bar code.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfBarcodeQuietZones.IsAll">
            <summary>
            Check whether all the margin values are equal.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCodabarBarcode">
             <summary>
              Represents a Codabar barcode.
             </summary>
            <remarks> This symbology allows the encoding of strings of up to 16 digits, 10 numeric digits (0 through 9) and 
             6 special non alpha characters ("+", "-", "$", "/", ":", "."). 
             </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCodabarBarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCodabarBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode Text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode11Barcode">
            <summary>
            Represents a Code11 barcode.
            </summary>
            <remarks> Only the following symbols are allowed in a Code 11 barcode: 0 1 2 3 4 5 6 7 8 9 -</remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode11Barcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode11Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode Text.</param>
            <param name="text">The Barcode Text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode128ABarcode">
            <summary>
            Represents a Code128A barcode.
            </summary>
            <remarks> Only the following symbols are allowed in a Code 128 A barcode: NUL (\x00) SOH (\x01) STX (\x02) ETX (\x03) EOT (\x04) ENQ (\x05) ACK (\x06) BEL (\x07) BS (\x08) HT (\x09) LF (\x0A) VT (\x0B) FF (\x0C) CR (\x0D) SO (\x0E) SI (\x0F) DLE (\x10) DC1 (\x11) DC2 (\x12) DC3 (\x13) DC4 (\x14) NAK (\x15) SYN (\x16) ETB (\x17) CAN (\x18) EM (\x19) SUB (\x1A) ESC (\x1B) FS (\x1C) GS (\x1D) RS (\x1E) US (\x1F) SPACE !  # $ % ' * + , - . 0 1 2 3 4 5 6 7 8 9 : ; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ]^ _ FNC1 (\xF0) FNC2 (\xF1) FNC3 (\xF2) FNC4  </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode128ABarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode128ABarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode Text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode128BBarcode">
            <summary>
            Represents a Code128B Barcode.
            </summary>
            <remarks> Only the following symbols are allowed in a Code 128 B barcode:SPACE ! " # $ % ' ( ) * + , - . / 0 12 3 4 5 6 7 8 9 : ; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ]^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ DEL (\x7F) FNC1 (\xF0) FNC2 (\xF1) FNC3 (\xF2) FNC4 (\xF3) SHIFT (\xF4). </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode128BBarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode128BBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode128CBarcode">
            <summary>
            Represents a Code128C barcode.
            </summary>
            <remarks>Only the following symbols are allowed in a Code 128C barcode: 0 1 2 3 4 5 6 7 8 9 FNC1 (\xF0). Code 128 C encodes only numeric symbols at double density, each pair of digits is encoded using a single symbol.</remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode128CBarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode128CBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode32Barcode">
            <summary>
            Represents a Code32 barcode.
            </summary>
            <remarks> Only the following symbols are allowed in a Code 32 barcode: 1 2 3 4 5 6 7 8 9 0. The barcode length is 9 digits (8 user defined digits + 1 check digit).
            Code 32 barcodes are also known as Italian Pharmacode barcodes. 
            </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode32Barcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode32Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode Text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode39Barcode">
            <summary>
            Represents a Code39 barcode.
            </summary>
            <remarks> Only the following symbols are allowed in a Code 39 barcode:Only the following symbols are allowed in a Code 39 barcode: 1 2 3 4 5 6 7 8 9 0 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z - . $ / + % SPACE
            All alphabetic characters are uppercase. If lowercase characters are required, then a Code 39 Extended barcode must be used.
            </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode39Barcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode39Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode39ExtendedBarcode">
            <summary>
            Represents a Code39 Extended barcode.
            Code 39 Extended is designed to encode 128 full ASCII characters.
            </summary>
            <remarks> All 128 ASCII characters can be encoded in an extended Code 39 barcode</remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode39ExtendedBarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode39ExtendedBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode93Barcode">
            <summary>
            Represents a Code93 barcode.
            </summary>
            <remarks> Only the following symbols are allowed in a Code 93 barcode: 1 2 3 4 5 6 7 8 9 0 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z - . $ / + % SPACE
            All alphabetic characters are uppercase. If lowercase characters are required, then a Code 93 Extended barcode must be used.
            </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode93Barcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode93Barcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfCode93ExtendedBarcode">
            <summary>
            Represents a code93 extended barcode.
            </summary>
            <remarks> All 128 ASCII characters can be encoded in an extended Code 93 barcode. </remarks>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode93ExtendedBarcode.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfCode93ExtendedBarcode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The Barcode text.</param>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfUnidimensionalBarcode">
            <summary>
            Represents the Base class for all the Single dimensional barcodes
            </summary>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.#ctor">
            <summary>
            Initializes the new instance of 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.Font">
            <summary>
            Gets or sets the Text font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.TextDisplayLocation">
            <summary>
            Gets or sets the text display location. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.ShowCheckDigit">
            <summary>
            </summary>
            <remarks>The Default value is false.</remarks>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.EnableCheckDigit">
            <summary>
            Gets or sets a value indicating whether to enable to check digit calculation in the generated barcode or not.
            </summary>
            <remarks>The Default value is True.</remarks>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.BarcodeToTextGapHeight">
            <summary>
            Gets or sets the gap between the barcode and the displayed text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.TextAlignment">
            <summary>
            Gets or sets the alignment of the text displayed on the barcode.
            </summary>
            <remarks>Default value is Center.</remarks>
        </member>
        <member name="P:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.EncodeStartStopSymbols">
            <summary>
            Gets or sets a value indicating whether [encode start stop symbols].
            </summary>
            <value>
            <c>true</c> if [encode start stop symbols]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.Draw(Spire.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Draws the barcode on the  at the specified region.
            </summary>
            <param name="page">The pdf page.</param>
            <param name="rect">The barcode region.</param>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.Draw(Spire.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Draws the barcode on the  at the specified location.
            </summary>
            <param name="page">The pdf page.</param>
            <param name="location">The barcode location.</param>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.Draw(Spire.Pdf.PdfPageBase,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws the barcode on the  at the specified location with the size.
            </summary>
            <param name="page">The pdf page.</param>
            <param name="location">The barcode location.</param>
            <param name="size">The barcode size.</param>
        </member>
        <member name="M:Spire.Pdf.Barcode.PdfUnidimensionalBarcode.ToImage">
            <summary>
            Exports the barcode as image.
            <returns>The barcode image.</returns>
            </summary>
        </member>
        <member name="T:Spire.Pdf.Barcode.TextLocation">
            <summary>
            Specifies the barcode text display location.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Barcode.TextLocation.None">
            <summary>
            Displays, no text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Barcode.TextLocation.Top">
            <summary>
            Displays text, above the barcode.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Barcode.TextLocation.Bottom">
            <summary>
             Displays text, at the bottom of the barcode.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Barcode.PdfBarcodeTextAlignment">
            <summary>
            Specifies the barcode text alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Barcode.PdfBarcodeTextAlignment.Left">
            <summary>
            Displays the readable text on the left side of the barcode. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Barcode.PdfBarcodeTextAlignment.Center">
            <summary>
            Displays the readable text at the center of the barcode. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Barcode.PdfBarcodeTextAlignment.Right">
            <summary>
             Displays the readable text on the right side of the barcode. 
            </summary>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfCalGrayColor">
            <summary>
            Represents a calibrated gray color, based on a CalGray colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfCalGrayColor.#ctor(Spire.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The color space.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalGrayColor.Gray">
            <summary>
            Gets or sets the gray level for this color. 
            </summary>
            <value>The gray level of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 
            0.0 means the darkest color that can be achieved, and 1.0 means the lightest color. </remarks>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfCalGrayColorSpace">
            <summary>
            Represents a CalGray colorspace.
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfCalGrayColorSpace.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalGrayColorSpace.BlackPoint">
            <summary>
            Gets or sets the black point. 
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point. Default value: [ 0.0 0.0 0.0 ].</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalGrayColorSpace.Gamma">
            <summary>
            Gets or sets the gamma.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalGrayColorSpace.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>An array of three numbers [XW YW ZW] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point. The numbers XW and ZW must be positive, and YW must be equal to 1.0.</value>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfCalRGBColor">
            <summary>
            Represents a calibrated RGB color, based on a CalRGB colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfCalRGBColor.#ctor(Spire.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The colorspace</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColor.Blue">
            <summary>
            Gets or sets the Blue value.
            </summary>
            <value>The blue level of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the darkest color that can be achieved, and 1.0 means the lightest. </remarks>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColor.Green">
            <summary>
            Gets or sets the green level for this color. 
            </summary>
            <value>The green level of this color. </value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the darkest color that can be achieved, and 1.0 means the lightest color. </remarks>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColor.Red">
            <summary>
            Gets or sets the red level for this color.
            </summary>
            <value>The red level of this color.</value>
            <remarks>The acceptable range for this value is [0.0 1.0]. 0.0 means the darkest color that can be achieved, and 1.0 means the lightest color. </remarks>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfCalRGBColorSpace">
            <summary>
            Representing a CalRGB colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfCalRGBColorSpace.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColorSpace.BlackPoint">
            <summary>
            Gets or sets the black point. 
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point. </value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColorSpace.Gamma">
            <summary>
            Gets or sets the gamma. 
            </summary>
            <value>An array of three numbers [GR GG GB] specifying the gamma for the red, green, and blue components of the color space. </value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColorSpace.Matrix">
            <summary>
            Gets or sets the colorspace transformation matrix. 
            </summary>
            <value>An array of nine numbers [XA YA ZA XB YB ZB XC YC ZC] specifying the linear interpretation of the decoded A, B, and C components of the color space with respect to the final XYZ representation.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfCalRGBColorSpace.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>An array of three numbers [XW YW ZW] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point.</value>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfColorSpaces">
            <summary>
            Represents the base class for all colorspaces. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfColorSpaces.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing the font.
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfColorSpaces.Spire#Pdf#Interfaces#IPdfCache#EqualsTo(Spire.Pdf.Interfaces.IPdfCache)">
            <summary>
            Checks whether the object is similar to another object.
            </summary>
            <param name="obj">The object to compare witht ehcurrent object.</param>
            <returns>True - if the objects have equal internals and can share them, False otherwise.</returns>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfDeviceColorSpace">
            <summary>
            Represents a device colorspace.
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfDeviceColorSpace.#ctor(Spire.Pdf.Graphics.PdfColorSpace)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The colorspace.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfDeviceColorSpace.DeviceColorSpaceType">
            <summary>
            Gets or sets the DeviceColorSpaceType
            </summary>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfComplexColor">
            <summary>
            Represents the extended color, based on a complex colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfComplexColor.#ctor(Spire.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The colorspace.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfComplexColor.ColorSpace">
            <summary>
            Gets the Colorspace
            </summary>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfICCColor">
            <summary>
            Represents an ICC color, based on an ICC colorspace.
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfICCColor.#ctor(Spire.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The colorspace.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfICCColor.ColorComponents">
            <summary>
            Gets or sets the color components. 
            </summary>
            <value>An array of values that describe the color in the ICC colorspace. </value>
            <remarks>The length of this array must match the value of ColorComponents property on the underlying ICC colorspace. </remarks>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfICCColorSpace">
            <summary>
            Represents an ICC based colorspace..
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfICCColorSpace.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfICCColorSpace.AlternateColorSpace">
            <summary>
            Gets or sets the alternate color space.
            </summary>
            <value>The alternate color space to be used in case the one specified in the stream data is not supported.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfICCColorSpace.ColorComponents">
            <summary>
            Gets or sets the color components.
            </summary>
            <value>The number of color components in the color space described by the ICC profile data.</value>
            <remarks>This number must match the number of components actually in the ICC profile. As of PDF 1.4, this value must be 1, 3 or 4.</remarks>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfICCColorSpace.ProfileData">
            <summary>
            Gets or sets the profile data.
            </summary>
            <value>The ICC profile data.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfICCColorSpace.Range">
            <summary>
            Gets or sets the range for color components. 
            </summary>
            <value>An array of 2  ColorComponents numbers [ min0 max0 min1 max1 ... ] specifying the minimum and maximum valid values of the corresponding color components. These values must match the information in the ICC profile.</value>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfICCColorSpace.GetProfileData">
            <summary>
            Set the Color Profile.
            </summary>
            <returns>ICC profile data.</returns>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfKnownColor">
            <summary>
            Represents an indexed color, based on an indexed colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfKnownColor.#ctor(Spire.Pdf.ColorSpace.PdfKnownColorSpace)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The colorspace.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfKnownColor.SelectColorIndex">
            <summary>
            Gets or sets the color index
            </summary>
            <value>The index of the select color.</value>
            <remarks>The acceptable range for this value is 0 - MaxColorIndex.</remarks>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfKnownColorSpace">
            <summary>
            Represents an indexed colorspace.
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfKnownColorSpace.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfKnownColorSpace.BaseColorSpace">
            <summary>
            Gets or sets the base colorspace. 
            </summary>
            <value>The color space in which the values in the color table are to be interpreted.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfKnownColorSpace.MaxColorIndex">
            <summary>
            Gets or sets the index of the max color.
            </summary>
            <value>The maximum index that can be used to access the values in the color table.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfKnownColorSpace.IndexedColorTable">
            <summary>
            Gets or sets the color table. 
            </summary>
            <value>The table of color components.</value>
            <remarks>The color table data must be m * (maxIndex + 1) bytes long, where m is the number of color components in the base color space. Each byte is an unsigned integer in the range 0 to 255 that is scaled to the range of the corresponding color component in the base color space; that is, 0 corresponds to the minimum value in the range for that component, and 255 corresponds to the maximum.</remarks>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfKnownColorSpace.GetProfileData">
            <summary>
            Gets the profile data.
            </summary>
            <returns>The profile data.</returns>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfLabColor">
            <summary>
            Represents a calibrated Lab color, based on a Lab colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfLabColor.#ctor(Spire.Pdf.ColorSpace.PdfColorSpaces)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The ColorSpace.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfLabColor.A">
            <summary>
            Gets or sets the a* component for this color. 
            </summary>
            <value>The a* component of this color.</value>
            <remarks>The range for this value is defined by the Range property of the underlying Lab colorspace. </remarks>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfLabColor.B">
            <summary>
            Gets or sets the b* component for this color. 
            </summary>
            <value>The b* component of this color.</value>
            <remarks>The range for this value is defined by the Range property of the underlying Lab colorspace. </remarks>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfLabColor.L">
            <summary>
            Gets or sets the l component for this color. 
            </summary>
            <value>The l component of this color. </value>
            <remarks>The acceptable range for this value is [0.0 100.0]. 0.0 means the darkest color that can be achieved, and 100.0 means the lightest color. </remarks>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfLabColorSpace">
            <summary>
            Represents a Lab colorspace
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfLabColorSpace.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfLabColorSpace.BlackPoint">
            <summary>
            Gets or sets BlackPoint
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfLabColorSpace.Range">
            <summary>
            Gets or sets the Range
            </summary>
            <value>An array of three numbers [XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfLabColorSpace.WhitePoint">
            <summary>
            Gets or sets the white point
            </summary>
            <value>An array of three numbers [XW YW ZW] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point. </value>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfSeparationColor">
            <summary>
            Represents a separation color, based on a separation colorspace. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfSeparationColor.#ctor(Spire.Pdf.ColorSpace.PdfColorSpaces,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="colorspace">The colorspace.</param>
            <param name="tint">The acceptable range for this value is [0.0 1.0]. 0.0 means the lightest color that can be achieved, and 1.0 means the darkest color.</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfSeparationColor.Tint">
            <summary>
            The acceptable range for this value is [0.0 1.0]. 0.0 means the lightest color that can be achieved, and 1.0 means the darkest color.
            </summary>
        </member>
        <member name="T:Spire.Pdf.ColorSpace.PdfSeparationColorSpace">
            <summary>
            Represents a separation colorspace
            </summary>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfSeparationColorSpace.#ctor(System.String,Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the PdfSeparationColorSpace class.
            </summary>
            <param name="colorant">The name of the colorant</param>
            <param name="baseColor">The base color to be used</param>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfSeparationColorSpace.BaseColor">
            <summary>
            The base color to be used.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfSeparationColorSpace.AlternateColorSpaces">
            <summary>
            Gets or sets the alternate color spaces.
            </summary>
            <value>The alternate color space to be used when the destination device does not support separation colorspace.</value>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfSeparationColorSpace.Colorant">
            <summary>
            The name of the colorant.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ColorSpace.PdfSeparationColorSpace.TintTransform">
            <summary>
            Gets or sets the tint transform function for the this colorspace. 
            </summary>
            <value>Tint transform function for the colorspace.</value>
        </member>
        <member name="M:Spire.Pdf.ColorSpace.PdfSeparationColorSpace.GetProfileData">
            <summary>
            Get the profile data.
            </summary>
            <returns>The profile data</returns>
        </member>
        <member name="T:Spire.Pdf.Attachments.PdfAttachment">
            <summary>
            Represents attachments of the Pdf document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachment.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachment.#ctor(System.String,System.Byte[])">
            <param name="fileName">Name of the file.</param>
            <param name="data">The data to be attached as a file.</param>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachment.#ctor(System.String,System.IO.Stream)">
            <param name="fileName">Name of the file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Spire.Pdf.Attachments.PdfAttachmentCollection">
            <summary>
            Represents a collection of the attachment objects.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Attachments.PdfAttachmentCollection.Item(System.Int32)">
            <summary>
            Gets attachment by its index in the collection.
            </summary>
            <param name="index">Index of the attachment.</param>
            <returns>Attachment object by its index in the collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.Add(Spire.Pdf.Attachments.PdfAttachment)">
            <summary>
            Adds the specified attachment.
            </summary>
            <param name="attachment">The attachment.</param>
            <returns>Position of the inserted attachment.</returns>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.Insert(System.Int32,Spire.Pdf.Attachments.PdfAttachment)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.Remove(Spire.Pdf.Attachments.PdfAttachment)">
            <summary>
            Removes the specified attachment.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes attachment at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.IndexOf(Spire.Pdf.Attachments.PdfAttachment)">
            <summary>
            Indexes the of attachment.
            </summary>
            <param name="attachment">The attachment.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.Contains(Spire.Pdf.Attachments.PdfAttachment)">
            <summary>
            Determines whether 
            </summary>
            <param name="attachment">The attachment.</param>
            <returns>
            if it contains the specified attachment, set to <c>true</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Attachments.PdfAttachmentCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Attachments.PdfAttachmentCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfAutomaticField">
            <summary>
            Represents a fields which is calculated before the document saves.
            </summary>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.Bounds">
            <summary>
            Gets or sets the bounds of the field.
            </summary>
            <value>The bounds value.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.Size">
            <summary>
            Gets or sets the size of the field.
            </summary>
            <value>The size of the field.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.Location">
            <summary>
            Gets or sets the location of the field.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
            <value>The brush.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.Pen">
            <summary>
            Gets or sets the pen.
            </summary>
            <value>The pen.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfAutomaticField.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfAutomaticField.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
            <exclude/>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfCreationDateField">
            <summary>
            Represents class to display creation date of the document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCreationDateField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCreationDateField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCreationDateField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCreationDateField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="bounds">Specifies the location and size of the field.</param>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfCreationDateField.DateFormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfDateTimeField">
            <summary>
            Represents date automated field.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDateTimeField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDateTimeField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDateTimeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="brush">A  object that is used to fill the string. </param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDateTimeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="bounds">Specifies the location and size of the field.</param>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfDateTimeField.DateFormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField">
            <summary>
            Represents class which displays destination page's number.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="bounds">Specifies the location and size of the field.</param>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField.PageWidget">
            <summary>
            Get and sets the PdfLoadedPage
            </summary>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfDestinationPageNumberField.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfDocumentAuthorField">
            <summary>
            Represent automatic field which contains document's author name.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDocumentAuthorField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDocumentAuthorField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDocumentAuthorField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDocumentAuthorField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfDynamicField">
            <summary>
            Represents automatic field which value is dynamically evaluated.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDynamicField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDynamicField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDynamicField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfDynamicField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfCompositeField">
            <summary>
            Represents class which can concatenate multiple automatic fields into single string.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>  
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="text">The wide-character string to be drawn.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use. </param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="brush">A  object that is used to fill the string. </param> 
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(System.String,Spire.Pdf.AutomaticFields.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of  objects.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.String,Spire.Pdf.AutomaticFields.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of  objects.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfCompositeField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.String,Spire.Pdf.AutomaticFields.PdfAutomaticField[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">A  object that specifies the font attributes (the family name, the size, and the style of the font) to use.</param>
            <param name="brush">A  object that is used to fill the string. </param>
            <param name="text">The wide-character string to be drawn.</param>
            <param name="list">The list of  objects.</param>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfCompositeField.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The wide-character string to be drawn.</value>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfCompositeField.AutomaticFields">
            <summary>
            Gets or sets the automatic fields.
            </summary>
            <value>The automatic fields.</value>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfMultipleNumberValueField">
            <summary>
            Represents automatic field which has the same value within the 
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleNumberValueField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleNumberValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleNumberValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleNumberValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfMultipleNumberValueField.NumberStyle">
            <summary>
            Gets or sets the number style.
            </summary>
            <value>The number style.</value>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfMultipleValueField">
            <summary>
            Represents automatic field which has the same value within the 
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleValueField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfMultipleValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfPageCountField">
            <summary>
            Represents total page count automatic field.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageCountField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageCountField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageCountField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageCountField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Spire.Pdf.AutomaticFields.PdfPageCountField.NumberStyle">
            <summary>
            Gets or sets the number style.
            </summary>
            <value>The number style.</value>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfPageNumberField">
            <summary>
            Represents page number field.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageNumberField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfSectionNumberField">
            <summary>
            Represents automatic field to display
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionNumberField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfSectionPageCountField">
            <summary>
            Represents automatic field to display number of pages in section.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageCountField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageCountField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageCountField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageCountField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfSectionPageNumberField">
            <summary>
            Represents automatic field to display page number within a section.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageNumberField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSectionPageNumberField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfSingleValueField">
            <summary>
            Represents automatic field which has the same value 
            in the whole document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSingleValueField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSingleValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSingleValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfSingleValueField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.AutomaticFields.PdfStaticField">
            <summary>
            Represents automatic field which value can be evaluated in the moment of creation.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfStaticField.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfStaticField.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfStaticField.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.AutomaticFields.PdfStaticField.#ctor(Spire.Pdf.Graphics.PdfFontBase,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="T:Spire.Pdf.Bookmarks.PdfBookmark">
            <summary>
            Each instance of this class represents
            an bookmark node in the bookmark tree.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmark.Destination">
            <summary>
            Gets or sets the outline destination.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmark.Title">
            <summary>
            Gets or sets the outline title.
            </summary>
            <remarks>The outline title is the text,
            which appears in the outline tree as a tree node.</remarks>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmark.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmark.DisplayStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmark.Action">
            <summary>
            Gets or sets the Action for the Outline.
            </summary>        
        </member>
        <member name="T:Spire.Pdf.Bookmarks.PdfBookmarkCollection">
            <summary>
            This class plays two roles: it's a base class for all bookmarks
            and it's a root of a bookmarks tree.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Count">
            <summary>
            Gets number of the elements in the collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value>index</value>
        </member>
        <member name="M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Add(System.String)">
            <summary>
            Creates and adds an outline.
            </summary>
            <param name="title">The title of the new outline.</param>
            <returns>The outline created.</returns>
        </member>
        <member name="M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Contains(Spire.Pdf.Bookmarks.PdfBookmark)">
            <summary>
            Determines whether the specified outline is a direct descendant of the outline base.
            </summary>
            <param name="outline">The outline.</param>
            <returns>
            <c>true</c> if the specified outline is a direct descendant of the outline base;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Remove(System.String)">
            <summary>
            Removes the specified bookmark from the document.
            </summary>
            <param name="title">The title of the outline.</param>
        </member>
        <member name="M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified bookmark from the document at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Clear">
            <summary>
            Removes all the bookmark from the document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new outline at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="title">The title of the new outline.</param>
            <returns>The new outline.</returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.Bookmarks.PdfBookmarkCollection.System#Collections#IEnumerable#GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Bookmarks.PdfTextStyle">
            <summary>
            Allows to choose outline text style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Bookmarks.PdfTextStyle.Regular">
            <summary>
            Regular text style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Bookmarks.PdfTextStyle.Italic">
            <summary>
            Italic text style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Bookmarks.PdfTextStyle.Bold">
            <summary>
            Bold text style.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Bookmarks.PdfBookmarkWidget">
            <summary>
            Represents loaded bookmark class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkWidget.Destination">
            <summary>
            Gets or sets the outline destination.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkWidget.Title">
            <summary>
            Gets or sets the outline title.
            </summary>
            <remarks>The outline title is the text,
            which appears in the outline tree as a tree node.</remarks>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkWidget.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Bookmarks.PdfBookmarkWidget.DisplayStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfBookletCreator">
            <summary>
            Represents a booklet creator, which allows to create a booklet from a Pdf document.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfConvertOptions">
            <summary>
            The class can be used to set some options when do convert operation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.UseHighQualityImage">
            <summary>
            Gets or sets a value indicates whether to use the high qulity image when convert xps to pdf.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.UseInvariantCulture">
            <summary>
            Gets or sets a value indicates whether to use invariant culture mode when convert pdf to xps.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.UsePsMode">
            <summary>
            Gets or sets a value indicates whether to use PS mode to convert pdf to xps, doc.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.UseEmbeddedSvgMode">
            <summary>
            Gets or sets a value indicates whether to use the embedded svg in the result file when convert pdf to html.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.MaxPageInOneFile">
            <summary>
            Gets or sets a value indicates the count of page contents in one html file when convert pdf to html, works only when UseEmbeddedSvgMode property is set to false.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.UseEmbeddedImage">
            <summary>
            Gets or sets a value indicates whether to embed image data in the result file when convert pdf to html, works only when UseEmbeddedSvgMode property is set to false.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.SvgWidthPixel">
            <summary>
            Gets or sets a value indicates the output svg's width in pixel unit, -1 means use the orignal width.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfConvertOptions.SvgHeightPixel">
            <summary>
            Gets or sets a value indicates the output svg's height in pixel unit, -1 means use the orignal width.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToXpsOptions">
            <summary>
            Set pdf to xps convert options.
            Default usePsMode = true,useInvariantCulture = false,useHighQualityImg = false.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToXpsOptions(System.Boolean)">
            <summary>
            Set pdf to xps convert options.
            </summary>
            <param name="usePsMode">Indicates whether to use PS mode.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToXpsOptions(System.Boolean,System.Boolean)">
            <summary>
            Set pdf to xps convert options.
            </summary>
            <param name="usePsMode">Indicates whether to use PS mode.</param>
            <param name="useInvariantCulture">Indicates whether to use invariant culture.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToXpsOptions(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set pdf to xps convert options.
            </summary>
            <param name="usePsMode">Indicates whether to use PS mode.</param>
            <param name="useInvariantCulture">Indicates whether to use invariant culture.</param>
            <param name="useHighQualityImg">Indicates whether to use the high qulity image.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToDocOptions">
            <summary>
            Set pdf to doc convert options.
            Default usePsMode = true.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToDocOptions(System.Boolean)">
            <summary>
            Set pdf to doc convert options.
            </summary>
            <param name="usePsMode">Indicates whether to use PS mode.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetXpsToPdfOptions">
            <summary>
            Set xps to pdf convert options.
            Default useHighQualityImg = false.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetXpsToPdfOptions(System.Boolean)">
            <summary>
            Set xps to pdf convert options.
            </summary>
            <param name="useHighQualityImg">Indicates whether to use the high qulity image.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToHtmlOptions">
            <summary>
            Set pdf to html convert options.
            Default useEmbeddedSvg = true, useEmbeddedImg = false, maxPageOneFile = 500.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToHtmlOptions(System.Boolean)">
            <summary>
            Set pdf to html convert options.
            </summary>
            <param name="useEmbeddedSvg">Indicates whether to use the embedded svg in html file.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToHtmlOptions(System.Boolean,System.Boolean)">
            <summary>
            Set pdf to html convert options.
            </summary>
            <param name="useEmbeddedSvg">Indicates whether to use the embedded svg in html file.</param>
            <param name="useEmbeddedImg">Indicates whether to embed image data in html file, works only when useEmbeddedSvg is set to false.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToHtmlOptions(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Set pdf to html convert options.
            </summary>
            <param name="useEmbeddedSvg">Indicates whether to use the embedded svg in html file.</param>
            <param name="useEmbeddedImg">Indicates whether to embed image data in html file, works only when useEmbeddedSvg is set to false.</param>
            <param name="maxPageOneFile">Indicates the count of page contents in one html file, works only when useEmbeddedSvg is set to false.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToSvgOptions">
            <summary>
            Set pdf to svg options.
            Default wPixel = -1f, hPixel = -1f, -1f means no change.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToSvgOptions(System.Single)">
            <summary>
            Set pdf to svg options.
            </summary>
            <param name="wPixel">The output svg's width in pixel unit, -1f means no change.</param>
        </member>
        <member name="M:Spire.Pdf.PdfConvertOptions.SetPdfToSvgOptions(System.Single,System.Single)">
            <summary>
            Set pdf to svg options.
            </summary>
            <param name="wPixel">The output svg's width in pixel unit, -1f means no change.</param>
            <param name="hPixel">The output svg's height in pixel unit, -1f means no change.</param>
        </member>
        <member name="F:Spire.Pdf.PdfDocument.m_PageScaling">
            <summary>
            Get or Set PdfDocument Print PageScaling
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.UseHighQualityImage">
            <summary>
            Indicates whether to use the high qulity image when convert document
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDocument.m_SetPdfToHtmlParameter">
            <summary>
            Pdf to Html, Set Parameter
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.AllowCreateForm">
            <summary>
            Get or Set Allow Create Form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.UseInvariantCulture">
            <summary>
            Indicates whether use invariant culture mode to convert pdf document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.ConvertOptions">
            <summary>
            Set some options when do convert operation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PageScaling">
            <summary>
            Get or Set PdfDocument Print PageScaling
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.CustomScaling">
            <summary>
            Get or Set Current PDF Document Print PageScaling
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PDFStandard">
            <summary>
            Set,Get Current active pdf object 
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Conformance">
            <summary>
            Get document PdfConformanceLevel
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Attachments">
            <summary>
            Gets the collection of document attachments displayed on a PDF page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Bookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.ColorSpace">
            <summary>
            Gets or sets the color space for page that will be created.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.DocumentInformation">
            <summary>
            Gets or sets document's information and properties.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.JavaScripts">
            <summary>
            Gets the additional document's actions.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Form">
            <summary>
            Gets the loaded form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PageNumber">
            <summary>
            Get and Set the PdfPageLabel.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Pages">
            <summary>
            Gets the pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.UsedFonts">
            <summary>
            Gets the fonts which are available in the PDF document.
            </summary>
            <value>Retruns the fonts which are used in the PDF document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.CompressionLevel">
            <summary>
            Gets or sets the desired level of stream compression.
            </summary>
            <remarks>All new objects should be compressed with this level of the compression.</remarks>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Security">
            <summary>
            Gets the security parameters of the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.ViewerPreferences">
            <summary>
            Gets or sets a viewer preferences object controlling the way the document is to be 
            presented on the screen or in print.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.AfterOpenAction">
            <summary>
            Gets or sets the action to execute when the document is opened. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.AfterPrintAction">
            <summary>
            Gets or sets the action to be performed after the document is printed.
            </summary>
            <value>A  object specifying the action to be executed after the document is printed. .</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.AfterSaveAction">
            <summary>
            Gets or sets the jave script action to be performed after the document is saved.
            </summary>
            <value>A  object specifying the action to be executed after the document is saved.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.BeforeCloseAction">
            <summary>
            Gets or sets the action to be performed before the document is closed.
            </summary>
            <value>A  object specifying the action to be executed before the document is closed. </value>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.BeforePrintAction">
            <summary>
            Gets or sets the action to be performed before the document is printed.
            </summary>
            <value>A  object specifying the action to be executed before the document is printed. </value>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.BeforeSaveAction">
            <summary>
            Gets or sets the java script action to be performed before the document is saved.
            </summary>
            <value>A  object specifying the action to be executed before the document is saved. </value>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Template">
            <summary>
            Gets the template of pdf document
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.EnableFontCache">
            <summary>
            Indicates whether enable font cache.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.IsEncrypted">
            <summary>
            Indicates the document is encrypted or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.IsPortfolio">
            <summary>
            Indicates the document is a PDF Portfolio or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.Layers">
            <summary>
            Optional content properties
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(System.String)">
            <param name="filename">The path to source pdf file.</param>
            <remarks>This constructor imports an existing pdf file into the document object. It automatically populates the Pages collection with the pages of the given document. </remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="filename">The path to source PDF document.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(Spire.Pdf.PdfConformanceLevel)">
            <summary>
            Setting up the Pdf docuement standard,but Pdf/A2A standards are not suppored
            </summary>
            <param name="Pdflevel"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="file">The byte array with the file content.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="file">The byte array with the file content.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="file">The stream with the file.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="file">The stream with the file.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Dispose">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
             is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromFile(System.String)">
            <param name="filename">The path to source pdf file.</param>
            <remarks>This constructor imports an existing pdf file into the document object. It automatically populates the Pages collection with the pages of the given document. </remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromFile(System.String,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="filename">The path to source PDF document.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromXPS(System.Byte[])">
            <summary>
            Load a xps bytes array.
            </summary>
            <param name="xpsBytes">the xps byte array</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromXPS(System.String)">
            <summary>
            Load a xps file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromXPS(System.IO.Stream)">
            <summary>
            Load a xps stream.
            </summary>
            <param name="xpsStream"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromSvg(System.String)">
            <summary>
            Load Pdf from svg file.
            </summary>
            <param name="fileName">A relative or absolute path for the svg file</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromSvg(System.IO.Stream)">
            <summary>
            Load pdf from svg stream.
            </summary>
            <param name="stream">A Svg file stream</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromHTML(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Load file from disk file.
            </summary>
            <param name="url">url address</param>
            <param name="enableJavaScript">Enable javascrpit</param>
            <param name="enableHyperlinks">Enable hyperlink</param>
            <param name="autoDetectPageBreak">Auto detect page break</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromHTML(System.String,System.Boolean,System.Boolean,System.Boolean,Spire.Pdf.PdfPageSettings)">
            <summary>
             Load file from disk file.
            </summary>
            <param name="url">url address</param>
            <param name="enableJavaScript">Enable javascrpit</param>
            <param name="enableHyperlinks">Enable hyperlink</param>
            <param name="autoDetectPageBreak">Auto detect page break</param>
            <param name="Size">paper size</param>
            <param name="layoutFormat">PdfHtmlLayoutFormat layoutFormat</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromHTML(System.String,System.Boolean,System.Boolean,System.Boolean,Spire.Pdf.PdfPageSettings,Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat)">
            <summary>
             Load file from disk file.
            </summary>
            <param name="url">url address</param>
            <param name="enableJavaScript">Enable javascrpit</param>
            <param name="enableHyperlinks">Enable hyperlink</param>
            <param name="autoDetectPageBreak">Auto detect page break</param>
            <param name="Size">paper size</param>
            <param name="layoutFormat">PdfHtmlLayoutFormat layoutFormat</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromHTML(System.String,System.Boolean,System.Boolean,System.Boolean,Spire.Pdf.PdfPageSettings,Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat,System.Boolean)">
            <summary>
             Load file from disk file.
            </summary>
            <param name="url">url address</param>
            <param name="enableJavaScript">Enable javascrpit</param>
            <param name="enableHyperlinks">Enable hyperlink</param>
            <param name="autoDetectPageBreak">Auto detect page break</param>
            <param name="Size">paper size</param>
            <param name="layoutFormat">PdfHtmlLayoutFormat layoutFormat</param>
            <param name="isLoadComplete">
            by default false, when load Html DOM timeout(PdfHtmlLayoutFormat.LoadHtmlTimeout),convert uncompleted Html DOM to pdf.
            if true,until Html DOM load completed,then convert to pdf. 
            </param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromHTML(System.String,System.Boolean,Spire.Pdf.PdfPageSettings,Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat)">
            <summary>
            Load htmlSourceCode to Pdf
            </summary>
            <param name="htmlSourceCode">htmlSourceCode</param>
            <param name="autoDetectPageBreak">Auto detect page break</param>
            <param name="setting">PdfPageSettings setting</param>
            <param name="layoutFormat">PdfHtmlLayoutFormat layoutFormat</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromHTML(System.String,System.Boolean,Spire.Pdf.PdfPageSettings,Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat,System.Boolean)">
            <summary>
            Load htmlSourceCode to Pdf
            </summary>
            <param name="htmlSourceCode">htmlSourceCode</param>
            <param name="autoDetectPageBreak">Auto detect page break</param>
            <param name="setting">PdfPageSettings setting</param>
            <param name="layoutFormat">PdfHtmlLayoutFormat layoutFormat</param>
            <param name="isLoadComplete">
            by default false, when load Html DOM timeout(PdfHtmlLayoutFormat.LoadHtmlTimeout),convert uncompleted Html DOM to pdf.
            if true,until Html DOM load completed,then convert to pdf. 
            </param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromBytes(System.Byte[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="bytes">The byte array with the file content.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromStream(System.IO.Stream)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="stream">The stream with the file.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromBytes(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="bytes">The byte array with the file content.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.LoadFromStream(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="stream">The stream with the file.</param>
            <param name="password">The password (user or owner) of the encrypted document.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.HasExtendedRight">
            <summary>
            Indicates whthere contains extended right.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.RemoveExtendedRight">
            <summary>
            Removes the extended right.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Close">
            <summary>
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should be disposed completely.</param>
            <remarks>The document is disposed after calling the Close method. So, the document can not be saved if Close method was invoked.</remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToStream(System.IO.Stream)">
            <summary>
            Save the document to the specified stream.
            </summary>
            <param name="stream">
            The stream which default saved to the FileFormat.PDF format.
            </param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToStream(Spire.Pdf.FileFormat)">
            <summary>
            Convert the document to the format file which saved to streams.
            </summary>
            <param name="format">The file format</param>
            <returns>
            The format file streams.
            FileFormat.PDF:return only one stream(PDF support paging).
            FileFormat.XPS:return only one stream(XPS support paging).
            FileFormat.DOC:return only one stream(DOC support paging).
            FileFormat.SVG:return multiple streams(SVG not support paging,one stream to one page).
            FileFormat.HTML:return only one stream(HTML support paging).
            FileFormat.DOCX:return only one stream(DOCX support paging).
            </returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToStream(System.Int32,System.Int32,Spire.Pdf.FileFormat)">
            <summary>
             Convert the specified range of the document pages to the format file which saved to streams.
             FileFormat.PDF is not supported.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="format">The file format</param>
            <returns>
            The format file streams.
            FileFormat.PDF:not supported.
            FileFormat.XPS:return only one stream(XPS support paging).
            FileFormat.DOC:return only one stream(DOC support paging).
            FileFormat.SVG:return multiple streams(SVG not support paging,one stream to one page).
            FileFormat.HTML:return only one stream(HTML support paging).
            FileFormat.DOCX:return only one stream(DOCX support paging).
            </returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToStream(System.IO.Stream,Spire.Pdf.FileFormat)">
            <summary>
            Convert the document to the format file which saved to an stream.
            </summary>
            <param name="stream">
            The stream which saving the format file.
            FileFormat.PDF,FileFormat.XPS,FileFormat.DOC,FileFormat.HTML,FileFormat.DOCX support paging,so be saved to one stream.
            FileFormat.SVG:due to SVG file not support paging,so can't be saved to one stream,not supported.
            </param>
            <param name="format">The file format</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToFile(System.String)">
            <summary>
            Saves PDF document to file.
            </summary>
            <param name="filename">A relative or absolute path for the file</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToFile(System.String,Spire.Pdf.FileFormat)">
            <summary>
            Saves PDF document to file.
            </summary>
            <param name="filename">A relative or absolute path for the file</param>
            <param name="fileFormat">File format for the file</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveToFile(System.String,System.Int32,System.Int32,Spire.Pdf.FileFormat)">
            <summary>
            Saves PDF document to other Format files.
            Current only supports save PDF document to SVG
            </summary>
            <param name="filename">A relative or absolute path for the file</param>
            <param name="startIndex">The start page index.The index starts at 0</param>
            <param name="endIndex">The end page index.</param>
            <param name="fileFormat">File format for the file</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveAsImage(System.Int32)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveAsImage(System.Int32,System.Single,System.Boolean)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <param name="zoomFactor"></param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveAsImage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves PDF document page as image,Set image Dpi
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <param name="dpiX">Pictures X resolution</param>
            <param name="dpiY">Pictures Y resolution</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveAsImage(System.Int32,Spire.Pdf.Graphics.PdfImageType)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page index</param>
            <param name="type">PdfImageType type </param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SaveAsImage(System.Int32,Spire.Pdf.Graphics.PdfImageType,System.Int32,System.Int32)">
            <summary>
            Saves PDF document page as image,Set PdfImageType and image Dpi
            </summary>
            <param name="pageIndex">Page index</param>
            <param name="type">PdfImageType type </param>
            <param name="dpiX">Pictures X resolution</param>
            <param name="dpiY">Pictures Y resolution</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <value>A new object that is a copy of this instance.</value>
            <remarks>The resulting clone must be of the same type as or a compatible type to the original instance.</remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.InsertPage(Spire.Pdf.PdfDocument,Spire.Pdf.PdfPageBase)">
            <summary>
            Imports a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <returns>The page in the target document.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.InsertPage(Spire.Pdf.PdfDocument,System.Int32)">
            <summary>
            Imports a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>The page in the target document.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.InsertPageRange(Spire.Pdf.PdfDocument,System.Int32,System.Int32)">
            <summary>
            Imports a page range from a loaded document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="startIndex">The start page index.</param>
            <param name="endIndex">The end page index.</param>
            <returns>The last created page in the target document.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Merge(Spire.Pdf.PdfDocumentBase,System.Object[])">
            <summary>
            Merges the specified source documents and return destination document.
            </summary>
            <param name="dest">The destination document, where the other documents are merged into.
            If it's null a new document object will be created.</param>
            <param name="sourceDocuments">The source documents.</param>
            <returns>The document containing merged documents.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.MergeFiles(System.IO.Stream[])">
            <summary>
            Merges the PDF documents specified by the Stream.
            </summary>
            <param name="streams"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.MergeFiles(System.String,System.String)">
            <summary>
            Merges the PDF documents specified by the paths.
            </summary>
            <param name="firstInputFile"></param>
            <param name="secInputFile"></param>
            <returns>A new PDF document containing all merged documents.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Split(System.String)">
            <summary>
            Splits a PDF file to many PDF files, each of them consists of one page from the source file.
            </summary>
            <param name="destFilePattern">Template for destination file names.</param>
            <remarks>
            Each destination file will have 'destFileName{0***}' name,
            where *** is an optional format string for the number of the
            page inside of the source document.
            </remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Split(System.String,System.Int32)">
            <summary>
            Splits a PDF file to many PDF files, each of them consists of
            one page from the source file.
            </summary>
            <param name="destFilePattern">Template for destination file
            names.</param>
            <param name="startNumber">The number that is use as a start
            point for the page numbering.</param>
            <remarks>
            Each destination file will have 'destFileName{0***}' name,
            where *** is an optional format string for the number of the
            page inside of the source document.
            </remarks>
        </member>
        <member name="F:Spire.Pdf.PdfDocument.m_PrintPageMode">
            <summary>
            Get or Set PdfDocument pages Print Mode
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PrintPageMode">
            <summary>
            Get or Set PdfDocument pages Print Mode
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.ZoomFator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PrintFromPage">
            <summary>
            Gets or sets the pagenumber which you choose as the start page to printing
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PrintToPage">
            <summary>
            Gets or sets the pagenumber which you choose as the final page to printing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PrinterName">
            <summary>
            Gets or sets the name of printer which is on printing PDF document
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.CustomHandleLandscape">
             <summary>
            Gets or set a value indicating handle PageSettings Landscape.
             </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PrintDocument">
             <summary>
            Gets a value indicating the System.Drawing.Printing.PrintDocument
             </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Preview(System.Windows.Forms.PrintPreviewControl)">
            <summary>
            Print preview.
            </summary>
            <param name="printPreviewControl">Print preview control</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.m_printDocument_QueryPageSettings(System.Object,System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Seting Param
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.OnBeginPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Begin Print Page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.OnPrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print Page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Print(System.Object)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.PrintMultiPage(System.Object)">
            <summary>
            Print Multi-page
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SpiltPage(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.SplitPage(System.Collections.Generic.List{System.Drawing.RectangleF},System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="lists"></param>
            <param name="metafileWidth"></param>
            <param name="metafileHeight"></param>
            <param name="rectWidth"></param>
            <param name="rectHeight"></param>
            <param name="heightPos"></param>
            <param name="widthPos"></param>
        </member>
        <member name="F:Spire.Pdf.PdfDocument.m_printSettings">
            <summary>
            Print settings.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocument.PrintSettings">
            <summary>
            Get the print settings.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocument.Print">
            <summary>
            Print document.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfDocumentBase">
            <summary>
            Represent common PdfDocumentBase classes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDocumentBase.m_UseHighQualityImage">
            <summary>
            specify whether to use high quality images
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDocumentBase.m_SetPdfToHtmlParameter">
            <summary>
            Pdf to Html, Set Parameter
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.SetPdfToHtmlParameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDocumentBase.m_privateFonts">
            <summary>
            Internal variable to store the private font collection.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDocumentBase.m_layers">
            <summary>
            Optional content properties
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.UsedFonts">
            <summary>
            Gets the fonts which are available in the PDF document.
            </summary>
            <value>Retruns the fonts which are used in the PDF document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.Template">
            <summary>
            Gets or sets a template that is applied to all pages in the document.
            </summary>        
            <value>The  specifying the default template for the document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.Pages">
            <summary>
            Gets the pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.Security">
            <summary>
            Gets the security parameters of the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.DocumentInformation">
            <summary>
            Gets or sets document's information and properties.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.ViewerPreferences">
            <summary>
            Gets or sets a viewer preferences object controlling the way the document is to be 
            presented on the screen or in print.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.CompressionLevel">
            <summary>
            Gets or sets the desired level of stream compression.
            </summary>
            <remarks>All new objects should be compressed with this level of the compression.</remarks>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.FileStructure">
            <summary>
            Gets or sets the internal structure of the PDF file.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.FileStructureNew">
            <summary>
            Get the PDF file structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.JavaScripts">
            <summary>
            Gets the additional document's actions.
            </summary>
            <value>The  specifying the document action.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.Bookmarks">
            <summary>
            Gets the bookmarks.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.PrivateFonts">
            <summary>
            Gets the Private Font Collection
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentBase.Layers">
            <summary>
            Optional content properties
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Split(System.String)">
            <summary>
            Splits a PDF file to many PDF files, each of them consists of one page from the source file.
            </summary>
            <param name="destFilePattern">Template for destination file names.</param>
            <remarks>
            Each destination file will have 'destFileName{0***}' name,
            where *** is an optional format string for the number of the
            page inside of the source document.
            </remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Split(System.String,System.Int32)">
            <summary>
            Splits a PDF file to many PDF files, each of them consists of
            one page from the source file.
            </summary>
            <param name="destFilePattern">Template for destination file
            names.</param>
            <param name="startNumber">The number that is use as a start
            point for the page numbering.</param>
            <remarks>
            Each destination file will have 'destFileName{0***}' name,
            where *** is an optional format string for the number of the
            page inside of the source document.
            </remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Merge(Spire.Pdf.PdfDocumentBase,System.Object[])">
            <summary>
            Merges the specified source documents and return destination document.
            </summary>
            <param name="dest">The destination document, where the other documents are merged into.
            If it's null a new document object will be created.</param>
            <param name="sourceDocuments">The source documents.</param>
            <returns>The document containing merged documents.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Merge(System.String,System.String)">
            <summary>
            Merges the PDF documents specified by the paths.
            </summary>
            <param name="paths">The array of string paths.</param>
            <param name="password">documents password</param>
            <returns>A new PDF document containing all merged documents.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.DisposeOnClose(System.IDisposable)">
            <summary>
            Adds an object to a collection of the objects that will be disposed during document closing.
            </summary>
            <param name="obj">The object that will be disposed during document closing.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToSvg(System.String,System.Int32,System.Int32)">
            <param name="filename">A relative or absolute path for the file</param>
            <param name="startIndex">The start page index.</param>
            <param name="endIndex">The end page index.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToHtml(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Save a range page of the document to html stream.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="stream">The html stream.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToHtml(System.IO.Stream)">
            <summary>
            Save the document to html stream.
            </summary>
            <param name="stream">The html stream.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToXPS(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Save a range page of the document to xps as stream.
            </summary>
            <param name="startIndex">The strart index.</param>
            <param name="endIndex">The end index.</param>
            <param name="stream">The xps stream.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToXPS(System.IO.Stream)">
            <summary>
            Save the document to xps as stream.
            </summary>
            <param name="stream">The xps stream.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsImage(System.Int32)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsImage(System.Int32,System.Single,System.Boolean)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <param name="zoomFactor"></param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsMetaImage(System.Int32)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsImage(System.Int32,System.Int32,System.Int32)">
            <summary>
             Saves PDF document page as image,set Dpi
            </summary>
            <param name="pageIndex">Page with page index to save as image</param>
            <param name="dpiX">Pictures X resolution</param>
            <param name="dpiY">Pictures Y resolution</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsMetaImage(System.Boolean,System.Int32)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="isWriteWarning">bool isWriteWarning</param>
            <param name="pageIndex">Page with page index to save as image</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsMetaImage(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves PDF document page as image,set Dpi
            </summary>
            <param name="isWriteWarning">bool isWriteWarning</param>
            <param name="pageIndex">Page with page index to save as image</param>
            <param name="dpiX">Pictures X resolution</param>
            <param name="dpiY">Pictures Y resolution</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsImage(System.Int32,Spire.Pdf.Graphics.PdfImageType)">
            <summary>
            Saves PDF document page as image
            </summary>
            <param name="pageIndex">Page index</param>
            <param name="type">PdfImageType type </param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsImage(System.Int32,Spire.Pdf.Graphics.PdfImageType,System.Int32,System.Int32)">
            <summary>
            Saves PDF document page as image,Set PdfImageType and image Dpi
            </summary>
            <param name="pageIndex">Page index</param>
            <param name="type">PdfImageType type </param>
            <param name="dpiX">Pictures X resolution</param>
            <param name="dpiY">Pictures Y resolution</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveAsMetaImageToMemoryStream(System.IO.Stream,System.Int32)">
            <summary>
            Saves document page as image, Pdf to Xps
            </summary>
            <param name="stream">MemoryStream obj</param>
            <param name="pageIndex">Page index</param>
            <returns>Returns  page as Image</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToSVG(System.Int32,System.Int32)">
            <summary>
            Save a range page of the document to svg as stream[].
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns>Stream collection.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToSVG">
            <summary>
            Save the document to svg as stream[].
            </summary>
            <returns>Stream collection</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToDoc(System.Int32,System.Int32,System.IO.Stream,System.Boolean)">
            <summary>
            Save a range page of the document to doc as stream[].
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="stream">The doc stream.</param>
            <param name="IsDocx">Is doc or docx.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.SaveToDoc(System.IO.Stream,System.Boolean)">
            <summary>
            Save the document to doc as stream[].
            </summary>
            <param name="stream">The doc stream.</param>
            <param name="IsDocx">Is docs or doc.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Save(System.String)">
            <summary>
            Saves the document to the specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Save(System.String,System.Web.HttpResponse,Spire.Pdf.HttpReadType)">
            <summary>
            Saves the document into a HTTP response stream.
            </summary>
            <param name="fileName">The name of the document.</param>
            <param name="response">The HTTP response stream object.</param>
            <param name="type">The type of the reading document.</param>
            <remarks>
            If a document containing digital signature needs to be saved then
            the destination stream must support seeking, otherwise an exception will be raised.
            Since the HTTP response stream does not support seeking please write the document to a memory stream first and then flush it to the destination stream to avoid raising an exception.
            </remarks>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Save(System.IO.Stream,System.Web.HttpContext)">
            <summary>
            Saves the document into a HTTP response stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="response">The HTTP response stream object.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Close">
            <summary>
            Closes the document. Releases all common resources.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Close(System.Boolean)">
            <summary> 
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should close its stream as well.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream object where PDF document will be saved.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportPage(Spire.Pdf.PdfDocumentBase,Spire.Pdf.PdfPageBase)">
            <summary>
            Imports a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="page">The page.</param>
            <returns>The page in the target document.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportPage(Spire.Pdf.PdfDocumentBase,System.Int32)">
            <summary>
            Imports a page.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>The page in the target document.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportPageRange(Spire.Pdf.PdfDocumentBase,System.Int32,System.Int32)">
            <summary>
            Imports a page range from a loaded document.
            </summary>
            <param name="ldDoc">The loaded document.</param>
            <param name="startIndex">The start page index.</param>
            <param name="endIndex">The end page index.</param>
            <returns>The last created page in the target document.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.CreateBookmarkDestinationDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportDestinations(Spire.Pdf.PdfDocumentBase)">
            <summary>
            Import Original Document Destinations to new Document Catalog->Names -> Dests.
            Quote page to this document Catalog->Names -> Dests -> Names
            </summary>
            <param name="ldDoc">Original Document</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportOCProperties(Spire.Pdf.PdfDocumentBase)">
            <summary>
            Merge OCProperties
            </summary>
            <param name="ldDoc"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportD(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            
            </summary>
            <param name="D"></param>
            <param name="newD"></param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentBase.ImportItem(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Primitives.PdfDictionary,System.String)">
            <summary>
            Merge D Item
            </summary>
            <param name="D"></param>
            <param name="newD"></param>
            <param name="key"></param>
        </member>
        <member name="T:Spire.Pdf.PdfFileInfo">
            <summary>
            This class represents a set of the properties that define the internal structure of PDF file.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfFileInfo.m_documentBase">
             <summary>
            PDF Document object
             </summary>
        </member>
        <member name="F:Spire.Pdf.PdfFileInfo.m_LoadFile">
            <summary>
            read pdf file
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfFileInfo.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>    
        </member>
        <member name="P:Spire.Pdf.PdfFileInfo.DocumentBase">
             <summary>
            PDF Document object
             </summary>
        </member>
        <member name="P:Spire.Pdf.PdfFileInfo.LoadFile">
            <summary>
            read pdf file
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfFileInfo.Version">
            <summary>
            Gets or sets the version of the PDF document.
            </summary>
            <value>The document version.</value>
        </member>
        <member name="P:Spire.Pdf.PdfFileInfo.IncrementalUpdate">
            <summary>
            Gets or sets a value indicating whether [incremental update].
            </summary>
            <value><c>true</c> if [incremental update]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.PdfFileInfo.CrossReferenceType">
            <summary>
            Gets or sets the type of PDF cross-reference.
            </summary>
            <remarks>Please see the description of  for more details.</remarks>
        </member>
        <member name="P:Spire.Pdf.PdfFileInfo.TaggedPdf">
            <summary>
            Gets the value indicating whether the PDF document is tagged one or not.
            </summary>
            <value>If true PDF document is tagged, otherwise false.</value>
        </member>
        <member name="M:Spire.Pdf.PdfFileInfo.SetPdfVersion(Spire.Pdf.PdfVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:Spire.Pdf.PdfStructureType">
            <summary>
            Tagged PDF's standard structure types
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfStructureType.Div">
            <summary>
            A generic block-level element or group of elements
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfStructureType.Span">
            <summary>
            A generic inline portion of text having no particular inherent characteristics
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfStructureType.Figure">
            <summary>
            An item of graphical content
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfStructTreeRoot">
            <summary>
            Represents the document's structure tree root dictionary
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfStructTreeRoot.Build">
            <summary>
            Build struct tree root before saved.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfStructElement">
            <summary>
            Represents the structure element
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfStructElement.Parent">
            <summary>
            The parent struct element
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfStructElement.TreeRoot">
            <summary>
            The parent tree root
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfStructElement.Build">
            <summary>
            Build struct element before saved.
            </summary>
        </member>
        <member name="T:Spire.Pdf.DrawPageInBookletEventHandler">
            <summary>
            Delegate for handling event when drawing page in a booklet.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when starting/finished drawing a page of the source file in a booklet.</remarks>
        </member>
        <member name="T:Spire.Pdf.DrawPageInBookletEventArgs">
            <summary>
            Represents DrawPageInBooklet Event arguments.
            </summary>
        </member>
        <member name="P:Spire.Pdf.DrawPageInBookletEventArgs.PageInSource">
            <summary>
            Gets the page of the source file.
            </summary>
        </member>
        <member name="P:Spire.Pdf.DrawPageInBookletEventArgs.PageNumberInSource">
            <summary>
            Gets the index of the source page, basing on 0.
            </summary>
        </member>
        <member name="P:Spire.Pdf.DrawPageInBookletEventArgs.PageInBooklet">
            <summary>
            Gets the page of the booklet.
            </summary>
        </member>
        <member name="P:Spire.Pdf.DrawPageInBookletEventArgs.PageNumberInBooklet">
            <summary>
            Gets the index of the booklet page, basing on 0.
            </summary>
        </member>
        <member name="T:Spire.Pdf.FileFormat">
            <summary>
            Specifies the type of file format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfFileFormat.Plain">
            <summary>
            Specifies plain PDF file format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfFileFormat.Linearized">
            <summary>
            Specifies Linearized PDF file format.
            </summary>
        </member>
        <member name="T:Spire.Pdf.HttpReadType">
            <summary>
            Specifies the different way of presenting the document at the client browser.
            </summary>
        </member>
        <member name="F:Spire.Pdf.HttpReadType.Open">
            <summary>
            Send the generated document to the client browser and will open document inside browser or using application associated with .pdf extension externally.
            </summary>
        </member>
        <member name="F:Spire.Pdf.HttpReadType.Save">
            <summary>
            Send the generated document to the client browser and presents an option to save the document to disk or open inside the browser.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfVersion">
            <summary>
            Specifies the available PDF versions to save a PDF document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_0">
            <summary>
            PDF version 1.0.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_1">
            <summary>
            PDF version 1.1.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_2">
            <summary>
            PDF version 1.2.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_3">
            <summary>
            PDF version 1.3. Adobe Acrobat 4.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_4">
            <summary>
            PDF version 1.4. Adobe Acrobat 5.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_5">
            <summary>
            PDF version 1.5. Adobe Acrobat 6.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_6">
            <summary>
            PDF version 1.6. Adobe Acrobat 7.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfVersion.Version1_7">
            <summary>
            PDF version 1.7. Adobe Acrobat 8.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfCrossReferenceType">
            <summary>
            Specifies the type of the PDF cross-reference.
            </summary>
            <remarks>Default value is CrossReferenceStream</remarks>
        </member>
        <member name="F:Spire.Pdf.PdfCrossReferenceType.CrossReferenceTable">
            <summary>
            The cross-reference table contains information that permits random access to indirect objects within the file so that the entire file need not be read to locate any particular object. The structure is useful for incremental updates, since it allows a new cross-reference section to be added to the PDF file, containing entries only for objects that have been added or deleted. Cross-reference is represented by cross-reference table. The cross-reference table is the traditional way of representing reference type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCrossReferenceType.CrossReferenceStream">
            <summary>
            Cross-reference is represented by cross-reference stream. Cross-reference streams are stream objects, and contain a dictionary and a data stream.
            This leads to more compact representation of the file data especially along with the compression enabled.
            This format is supported by PDF 1.5 version and higher only.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfConformanceLevel">
            <summary>
            Specifies the Pdf document's Conformance-level.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfConformanceLevel.None">
            <summary>
            Specifies Default / No Conformance.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfConformanceLevel.Pdf_A1B">
            <summary>
            This PDF/A ISO standard [ISO 19005-1:2005] is based on Adobe PDF version 1.4
            and This Level B conformance indicates minimal compliance to ensure that the 
            rendered visual appearance of a conforming file is preservable over the long term.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfConformanceLevel.Pdf_X1A2001">
            <summary>
            This PDF/X-1a:2001 ISO standard [ISO 15930-1] is based on Adobe PDF version 1.3
            which uses only CMYK + Spot Color and this compliance to ensure that the 
            contents will be reliably reproduced in the repress environment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfConformanceLevel.Pdf_A1A">
            <summary>
            PDF/A-1a ensures the preservation of a document's logical structure and con-tent text stream in natural reading order. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfConformanceLevel.Pdf_A2A">
            <summary>
            PDF/A-2a standard,Only check the standard from the pdfaid:part and pdfaid:conformance node,And only check
            </summary>
        </member>
        <member name="T:Spire.Pdf.PrintScalingMode">
            <summary>
            Specifies the different page scaling option that shall be selected when a print dialog is displayed for this document.
            </summary>
            <remarks>Default value is AppDefault.</remarks>
        </member>
        <member name="F:Spire.Pdf.PrintScalingMode.AppDefault">
            <summary>
            Indicates the conforming readers default print scaling.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PrintScalingMode.None">
            <summary>
            Indicates no page scaling.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToPostScriptConverter.AddDocumentProperties(Spire.Pdf.PdfDocumentInformation)">
            <summary>
            Adds the document properties.
            </summary>
            <param name="docProperties">The doc properties.</param>
        </member>
        <member name="T:Spire.Pdf.Common.PdfToDocConverter">
            <summary>
            This class provides support for converting PDF into an XPS Document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToDocConverter.ConvertToWord(Spire.Pdf.PdfDocumentBase,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Converts a range of the pdf document to word.
            </summary>
            <param name="pdfDocument">The pdf document.</param>
            <param name="stream">The word stream.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">the end index.</param>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToDocConverter.ConvertToWord(Spire.Pdf.PdfDocumentBase,System.IO.Stream)">
            <summary>
            Converts the specified pdf document to word.
            </summary>
            <param name="pdfDocument">The pdf document.</param>
            <param name="stream">The word stream.</param>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToDocConverter.CreateDocument(Spire.Pdf.General.Paper.Base.DocumentInfo,System.Boolean)">
            <summary>
            Creates the PDF document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToDocConverter.AddDocumentProperties(Spire.Pdf.PdfDocumentInformation)">
            <summary>
            Adds the document properties.
            </summary>
            <param name="docProperties">The doc properties.</param>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToDocConverter.DrawToWord(Spire.Pdf.PdfDocumentBase,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Draws to PDF.
            </summary>
            <param name="images">The images.</param>
            <returns>The PdfNewDocument.</returns>
        </member>
        <member name="F:Spire.Pdf.Common.PdfToHtmlConverter.m_SetPdfToHtmlParameter">
            <summary>
            Pdf to Html, Set Parameter
            </summary>
        </member>
        <member name="P:Spire.Pdf.Common.PdfToHtmlConverter.SetPdfToHtmlParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToSvgConverter.ConvertToSvgList(Spire.Pdf.PdfDocumentBase,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Convert a range page of the document to svg.
            </summary>
            <param name="pdfDocument">The pdf document.</param>
            <param name="mainOutFile">Main out file.</param>
            <param name="svgFileHeader">Is svg file header.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns>A list of byte.</returns>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToSvgConverter.ConvertToSvgList(Spire.Pdf.PdfDocumentBase,System.String,System.Boolean)">
            <summary>
            Convert the document to svg.
            </summary>
            <param name="pdfDocument">The pdf document.</param>
            <param name="mainOutFile">Main out file.</param>
            <param name="svgFileHeader">Is svg file header.</param>
            <returns>A list of byte.</returns>
        </member>
        <member name="T:Spire.Pdf.Common.PdfToXPSConverter">
            <summary>
            This class provides support for converting PDF into an XPS Document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToXPSConverter.ConvertToXPS(Spire.Pdf.PdfDocumentBase,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Converts a range page of the PdfDocument to Xps.
            </summary>
            <param name="pdfDocument">The pdf document.</param>
            <param name="stream">The xps stream.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToXPSConverter.ConvertToXPS(Spire.Pdf.PdfDocumentBase,System.IO.Stream)">
            <summary>
            Converts the specified PdfDocument to Xps.
            </summary>
            <param name="pdfDocument">The pdf document.</param>
            <param name="stream">The xps stream.</param>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToXPSConverter.CreateDocument(Spire.Pdf.General.Paper.Base.DocumentInfo)">
            <summary>
            Creates the PDF document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Common.PdfToXPSConverter.AddDocumentProperties(Spire.Pdf.PdfDocumentInformation)">
            <summary>
            Adds the document properties.
            </summary>
            <param name="docProperties">The doc properties.</param>
        </member>
        <member name="T:Spire.Pdf.Exporting.PdfImageInfo">
            <summary>
            Represents the utility class to store information about Images and its location.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Exporting.PdfImageInfo.m_objNum">
            <summary>
            The number of indirect objects.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Exporting.PdfImageInfo.m_objStream">
            <summary>
            The original stream object.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfImageInfo.Bounds">
            <summary>
            Gets the Image Boundary location.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfImageInfo.Image">
            <summary>
            Gets the Image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfImageInfo.Index">
            <summary>
            Gets the Image index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfImageInfo.ObjectNumber">
            <summary>
            The number of indirect object.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfImageInfo.OjbectStream">
            <summary>
            The original stream object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Exporting.PdfToHtml.PdfToHtmlParameter">
            <summary>
            Pdf to html Set Parameter
            </summary>
        </member>
        <member name="F:Spire.Pdf.Exporting.PdfToHtml.PdfToHtmlParameter.m_SplitHtmlNumber">
            <summary>
            In 1000 The Split Page
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfToHtml.PdfToHtmlParameter.SplitHtmlNumber">
            <summary>
            In 1000 The Split Page,default 1000
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfToHtml.PdfToHtmlParameter.IsEmbedImage">
            <summary>
            wheather embedded image
            </summary>
        </member>
        <member name="F:Spire.Pdf.Exporting.PdfToHtml.HtmlExportOptions.m_SetPdfToHtmlParameter">
            <summary>
            Pdf to Html, Set Parameter
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.HtmlFileExport.WriteDocComment">
            <summary>
            Writes the doc Comment
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.HtmlFileExport.DocumentPageStart(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="PageWidth"></param>
            <param name="PageMarginTopHeight"></param>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.HtmlFileExport.DocumentPageEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.HtmlFileExport.JavaScript">
            <summary>
            
            </summary>
            <param name="js"></param>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfToHtml.Html.HtmlCssWriter.StyleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfToHtml.Html.HtmlCssWriter.CssFileNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.PdfToHtml.Html.HtmlTextWriter.FilesFolder">
            <summary>
            Get file Folder
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.Html.HtmlTextWriterHelper.DocComment(System.String)">
            <summary>
            write doc comment
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.Html.HtmlUtils.GetSaveFileRelativePath(System.String)">
            <summary>
            Save file  Relative Path
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.Html.HtmlUtils.GetHtmlSaveFilesFolder(System.String)">
            <summary>
            Save file folder
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.PdfToHtml.XhtmlFileExport.WriteDocComment">
            <summary>
            write doc comment
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Spire.Pdf.Exporting.PageResourceLoader.DecodeTest(Spire.Pdf.PdfPageBase,System.String,System.String)">
            <summary>
            Extracts the text from the page given
            </summary>
            <param name="page">page from which text is extracted</param>
            <param name="fontName">font used in the text</param>
            <param name="textToDecode">text in the page to be decoded</param>
            <returns>decoded text</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.PageResourceLoader.GetFontResources(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.PdfPageBase)">
            <summary>
            Collects all the fonts in the page in a dictionary
            </summary>
            <param name="resourceDictionary">dictionary containing all the resources in the page</param>
            <param name="page">page in which text is to be extracted</param>
            <returns>dictionary containing font name and the font</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.PageResourceLoader.GetImageResources(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Collects all the images in the pdf document
            </summary>
            <param name="resourceDictionary">containing all the resources of the document</param>
            <returns>dictionary of images</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.PageResourceLoader.UpdatePageResources(Spire.Pdf.Exporting.PdfPageResources,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the resources in the page
            </summary>
            <param name="pageResources">Existing page resources</param>
            <param name="objects">Dictionary items to the updated</param>
            <returns>Updated page resource</returns>
        </member>
        <member name="T:Spire.Pdf.Exporting.Text.SimpleTextExtractionStrategy">
            <summary>
            This extractor keeps track of the current Y position of each string. If it detectsthat the y position has changed, it inserts a line break into the output.If the PDF extractor text in a non-top-to-bottom fashion, this will result in the text not being a true representation of how it appears in the PDF.
            </summary>
            <returns>The Extracted Text.</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XObjectElement.RenderResources">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Reader.PathDataReader">
            <summary>
            Represents the path data reader.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.EOF">
            <summary>
            Gets a value indicating whether this <see cref="!:StringTokenizer"/> is EOF.
            </summary>
            <value><c>true</c> if EOF; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.Length">
            <summary>
            Gets text length.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PathDataReader class.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.ReadSymbol">
            <summary>
            Reads the symbols
            </summary>
            <returns>Symbol</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.GetNextSymbol">
            <summary>
            Gets the next symbol
            </summary>
            <returns>Symbol</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.UpdateCurrentPosition(System.Int32)">
            <summary>
            Updates the current position of the reader
            </summary>
            <param name="length">Length of the path data</param>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.TryReadFloat(System.Single@)">
            <summary>
            Reads the float value from the path data
            </summary>
            <param name="value">float value</param>
            <returns>True if the next value is float</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.TryReadPoint(System.Drawing.PointF@)">
            <summary>
            Reads the pint form the path data
            </summary>
            <param name="val">Point value</param>
            <returns>True if the next parameter is point</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.TryReadPositionArray(System.String[]@)">
            <summary>
            Reads the position array from the path data
            </summary>
            <param name="val">position array</param>
            <returns>True if the next parameter is position array</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.ReadPoints">
            <summary>
            Reads the points from the path data
            </summary>
            <returns>Points</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.PathDataReader.CheckIfCurrentCharIsSymbol">
            <summary>
            Checks if the current character is symbol
            </summary>
            <returns>True if the character is a symbol</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDataReader.ReadName(System.String,System.Int32@)">
            <summary>
            Reads the Name of the element
            </summary>
            <param name="data">XPS data</param>
            <param name="position">Reader position</param>
            <returns>Name</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDataReader.ReadBoolean(System.String,System.Int32@)">
            <summary>
            Reads the boolean value from the Data
            </summary>
            <param name="data">XPS data</param>
            <param name="position">Reader position</param>
            <returns>True if the next value is boolean</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDataReader.ReadDouble(System.String,System.Int32@)">
            <summary>
            Reads the float from the data.
            </summary>
            <param name="data">XPS data</param>
            <param name="position">Reader position</param>
            <returns>float value</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDataReader.ReadPoint(System.String,System.Int32@)">
            <summary>
            Reads the point from the data
            </summary>
            <param name="data">XPS data</param>
            <param name="position">Reader position</param>
            <returns>point</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDataReader.ReadMatrix(System.String,System.Int32@)">
            <summary>
            Reads the matrix from the data
            </summary>
            <param name="data">XPS data</param>
            <param name="position">Reader position</param>
            <returns>Matrix</returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.Exporting.XPS.Reader.XPSDocumentReader.GetAttributeFromXmlHeader(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDocumentReader.FindItemFromRels(System.String)">
            <summary>
            Find item by searching in the .rels file
            </summary>
            <param name="relsPath"></param>
            <returns>The index of item</returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Reader.XPSDocumentReader.GetItemFromAlternateContent(System.Byte[],System.Type)">
            <summary>
            Get item from alternate content
            </summary>
            <param name="data">alternate content data</param>
            <param name="itemType">the type of item</param>
            <returns>the item</returns>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Reader.XPSElementType">
            <summary>
            Enumerator representing the available XPS elements.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Renderer.XPStoPDFRenderer.GetIntArraySpiltIndices(System.String)">
            <summary>
            Bug897
            </summary>
            <param name="Indices"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Renderer.XPStoPDFRenderer.DrawAlternateContent(Spire.Pdf.Exporting.XPS.Schema.Mc.AlternateContent)">
            <summary>
            Converts the alternateContent graphics to PDF graphics.
            </summary>
            <param name="alternateContent"></param>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Renderer.XPStoPDFRenderer.DrawChoice(Spire.Pdf.Exporting.XPS.Schema.Mc.Choice,System.String)">
            <summary>
             Converts the choice graphics to PDF graphics.
            </summary>
            <param name="choice"></param>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Renderer.XPStoPDFRenderer.DrawFallback(Spire.Pdf.Exporting.XPS.Schema.Mc.Fallback,System.String)">
            <summary>
             Converts the fallback graphics to PDF graphics.
            </summary>
            <param name="fallback"></param>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Renderer.XPStoPDFRenderer.DrawBaloo(Spire.Pdf.Exporting.XPS.Schema.Mc.Baloo,System.String)">
            <summary>
             Converts the baloo graphics to PDF graphics.
            </summary>
            <param name="baloo"></param>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Renderer.ICCProfile.Index">
            <summary>
            The index of the profile in the xps archive
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Renderer.ICCProfile.Data">
            <summary>
            The data of icc proifle
            </summary>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Renderer.ICCProfile.Components">
            <summary>
            The number of color components
            </summary>
        </member>
        <member name="M:Spire.Pdf.Exporting.XPS.Renderer.ICCProfile.#ctor(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Initialize a new ICCProfile
            </summary>
            <param name="index">The index of the profile in the xps archive</param>
            <param name="data">The data of icc proifle</param>
            <param name="components">The number of color components</param>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.DiscardControl">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.DiscardControl.Discard">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Discard">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Discard.SentinelPage">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Discard.Target">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.DocumentStructure">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.DocumentStructure.DocumentStructureOutline">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.DocumentStructure.Story">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Outline">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Outline.DocumentOutline">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.DocumentOutline">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.DocumentOutline.OutlineEntry">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.DocumentOutline.lang">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.OutlineEntry">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.OutlineEntry.OutlineLevel">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.OutlineEntry.OutlineTarget">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.OutlineEntry.Description">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.OutlineEntry.lang">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Story">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Story.StoryFragmentReference">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Story.StoryName">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.StoryFragmentReference">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragmentReference.FragmentName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragmentReference.Page">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.StoryFragments">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragments.StoryFragment">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.StoryFragment">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragment.StoryBreak">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragment.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragment.StoryBreak1">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragment.StoryName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragment.FragmentName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.StoryFragment.FragmentType">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Break">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Figure">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Figure.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.NamedElement">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.NamedElement.NameReference">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.List">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.List.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ListItem">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ListItem.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ListItem.Marker">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Paragraph">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Paragraph.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Table">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Table.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.TableRowGroup">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.TableRowGroup.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.TableRow">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.TableRow.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.TableCell">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.TableCell.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.TableCell.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.TableCell.RowSpan">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.TableCell.ColumnSpan">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ItemsChoiceType.FigureStructure">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ItemsChoiceType.ListStructure">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ItemsChoiceType.ParagraphStructure">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ItemsChoiceType.TableStructure">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Section">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Section.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.FragmentType">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.FragmentType.Content">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.FragmentType.Header">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.FragmentType.Footer">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.MatrixTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.MatrixTransform.Matrix">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.MatrixTransform.Key">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.SolidColorBrush">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SolidColorBrush.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SolidColorBrush.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SolidColorBrush.Color">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ImageBrush">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.ImageBrushTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.Transform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.Viewbox">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.Viewport">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.TileMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.ViewboxUnits">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.ViewportUnits">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ImageBrush.ImageSource">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Transform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Transform.MatrixTransform">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.TileMode">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.TileMode.None">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.TileMode.Tile">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.TileMode.FlipX">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.TileMode.FlipY">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.TileMode.FlipXY">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ViewUnits">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ViewUnits.Absolute">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.VisualBrush">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.VisualBrushTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.VisualBrushVisual">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.Transform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.Viewbox">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.Viewport">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.TileMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.ViewboxUnits">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.ViewportUnits">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.VisualBrush.Visual">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Visual">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Visual.Item">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Canvas">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.CanvasResources">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.CanvasRenderTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.CanvasClip">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.CanvasOpacityMask">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.RenderTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.Clip">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.OpacityMask">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.Name">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.RenderOptionsEdgeMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.RenderOptionsEdgeModeSpecified">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.FixedPageNavigateUri">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.lang">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.AutomationPropertiesName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Canvas.AutomationPropertiesHelpText">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Resources">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Resources.ResourceDictionary">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ResourceDictionary">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ResourceDictionary.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ResourceDictionary.Source">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Glyphs">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.GlyphsRenderTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.GlyphsClip">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.GlyphsOpacityMask">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.GlyphsFill">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.BidiLevel">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.CaretStops">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.DeviceFontName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.Fill">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.FontRenderingEmSize">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.FontUri">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.OriginX">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.OriginY">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.IsSideways">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.Indices">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.UnicodeString">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.StyleSimulations">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.RenderTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.Clip">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.OpacityMask">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.Name">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.FixedPageNavigateUri">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.lang">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Glyphs.Key">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Geometry">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Geometry.PathGeometry">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.PathGeometry">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathGeometry.PathGeometryTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathGeometry.PathFigure">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathGeometry.Figures">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathGeometry.FillRule">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathGeometry.Transform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathGeometry.Key">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.PathFigure">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathFigure.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathFigure.IsClosed">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathFigure.StartPoint">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PathFigure.IsFilled">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ArcSegment">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ArcSegment.Point">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ArcSegment.Size">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ArcSegment.RotationAngle">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ArcSegment.IsLargeArc">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ArcSegment.SweepDirection">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.ArcSegment.IsStroked">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.SweepDirection">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.SweepDirection.Clockwise">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.SweepDirection.Counterclockwise">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.PolyBezierSegment">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PolyBezierSegment.Points">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PolyBezierSegment.IsStroked">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.PolyLineSegment">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PolyLineSegment.Points">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PolyLineSegment.IsStroked">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.PolyQuadraticBezierSegment">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PolyQuadraticBezierSegment.Points">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PolyQuadraticBezierSegment.IsStroked">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.FillRule">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.FillRule.EvenOdd">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.FillRule.NonZero">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Brush">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Brush.Item">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.LinearGradientBrushTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.LinearGradientBrushGradientStops">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.ColorInterpolationMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.SpreadMethod">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.MappingMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.Transform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.StartPoint">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinearGradientBrush.EndPoint">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.GradientStop">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.GradientStop.Color">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.GradientStop.Offset">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.ClrIntMode">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ClrIntMode.ScRgbLinearInterpolation">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.ClrIntMode.SRgbLinearInterpolation">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.SpreadMethod">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.SpreadMethod.Pad">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.SpreadMethod.Reflect">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.SpreadMethod.Repeat">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.MappingMode">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.MappingMode.Absolute">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.RadialGradientBrushTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.RadialGradientBrushGradientStops">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.ColorInterpolationMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.SpreadMethod">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.MappingMode">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.Transform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.Center">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.GradientOrigin">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.RadiusX">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.RadialGradientBrush.RadiusY">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.StyleSimulations">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.StyleSimulations.None">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.StyleSimulations.ItalicSimulation">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.StyleSimulations.BoldSimulation">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.StyleSimulations.BoldItalicSimulation">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.Path">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.PathRenderTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.PathClip">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.PathOpacityMask">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.PathFill">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.PathStroke">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.PathData">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Data">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Fill">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.RenderTransform">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Clip">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Opacity">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.OpacityMask">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Stroke">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeDashArray">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeDashCap">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeDashOffset">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeEndLineCap">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeStartLineCap">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeLineJoin">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeMiterLimit">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.StrokeThickness">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Name">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.FixedPageNavigateUri">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.lang">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.Key">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.AutomationPropertiesName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.AutomationPropertiesHelpText">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.SnapsToDevicePixels">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Path.SnapsToDevicePixelsSpecified">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.DashCap">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.DashCap.Flat">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.DashCap.Round">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.DashCap.Square">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.DashCap.Triangle">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.LineCap">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineCap.Flat">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineCap.Round">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineCap.Square">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineCap.Triangle">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.LineJoin">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineJoin.Miter">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineJoin.Bevel">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.LineJoin.Round">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.EdgeMode">
            <remarks/>
        </member>
        <member name="F:Spire.Pdf.Exporting.XPS.Schema.EdgeMode.Aliased">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.FixedPage">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.FixedPageResources">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.Width">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.Height">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.ContentBox">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.BleedBox">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.lang">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedPage.Name">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.FixedDocument">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedDocument.PageContent">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.PageContent">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PageContent.PageContentLinkTargets">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PageContent.Source">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PageContent.Width">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PageContent.WidthSpecified">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PageContent.Height">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.PageContent.HeightSpecified">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.LinkTarget">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinkTarget.Name">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.FixedDocumentSequence">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.FixedDocumentSequence.DocumentReference">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.DocumentReference">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.DocumentReference.Source">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.LinkTargets">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.LinkTargets.LinkTarget">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.GradientStops">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.GradientStops.GradientStop">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Mc.AlternateContent.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Mc.Choice.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Mc.Fallback.Items">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.Mc.Baloo.Items">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionsType">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionsType.SignatureDefinition">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.SpotLocation">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.Intent">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.SignBy">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.SignBySpecified">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.SigningLocation">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.SpotID">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.SignerName">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SignatureDefinitionType.lang">
            <remarks/>
        </member>
        <member name="T:Spire.Pdf.Exporting.XPS.Schema.SpotLocationType">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SpotLocationType.PageURI">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SpotLocationType.StartX">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.Exporting.XPS.Schema.SpotLocationType.StartY">
            <remarks/>
        </member>
        <member name="P:Spire.Pdf.FontStructure.FontName">
            <summary>
            Holds the font name associated with the text element
            </summary>
        </member>
        <member name="P:Spire.Pdf.FontStructure.FontStyle">
            <summary>
            Holds the font style of the text to be decoded.
            </summary>
        </member>
        <member name="P:Spire.Pdf.FontStructure.CharacterMapTable">
            <summary>
            Represents the mapping table which contains the mapping value to the encoded text in the PDF document
            </summary>
        </member>
        <member name="M:Spire.Pdf.FontStructure.Decode(System.String)">
            <summary>
            Takes in the encoded text, identifies the type of encoding used, decodes the encoded text, returns the decoded text.
            </summary>
            <param name="textToDecode">
            Encoded string from the PDF document.
            </param>
            <returns>
            Decoded string, human readable.
            </returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.GetLiteralString(System.String)">
            <summary>
            Decodes the octal text in the encoded text.
            </summary>
            <param name="encodedText">The text encoded from the PDF document</param>
            <returns>Decoded text with replaced octal texts</returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.GetHexaDecimalString(System.String)">
            <summary>
            Decodes the HEX encoded string.
            </summary>
            <param name="hexEncodedText">
            HEX encoded string.
            </param>
            <returns>
            Decoded string.
            </returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.GetFontName">
            <summary>
            Extracts the font name associated with the string.
            </summary>
            <returns>
            Font name.
            </returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.GetFontStyle">
            <summary>
            Extracts the font style associated with the text string
            </summary>
            <returns>
            Font style.
            </returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.GetCharacterMapTable">
            <summary>
            Builds the mapping table that is used to map the decoded text to get the expected text.
            </summary>
            <returns>
            A dictionary with key as the encoded element and value as the value to be mapped to.
            </returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.GetDifferencesDictionary">
            <summary>
            Builds the mapping table that is used to map the decoded text to get the expected text.
            </summary>		
        </member>
        <member name="M:Spire.Pdf.FontStructure.MapCharactersFromTable(System.String)">
            <summary>
            Takes in the decoded text and maps it with its corresponding entry in the CharacterMapTable
            </summary>
            <param name="decodedText">decoded text </param>
            <returns>Expected text string</returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.MapDifferences(System.String)">
            <summary>
            Takes in the decoded text and maps it with its corresponding entry in the CharacterMapTable
            </summary>
            <param name="encodedText">encoded text </param>
            <returns>Expected text string</returns>
        </member>
        <member name="M:Spire.Pdf.FontStructure.EscapeSymbols(System.String)">
            <summary>
            Method to remove the new line character
            </summary>
            <param name="text">Text with new line character</param>
            <returns>Text without new line character</returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.FontStructure.GetHexCode(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Editable">
            <summary>
            Gets or sets a value indicating whether this  is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list. 
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.ForeColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
            <remarks>This property is meaningful for fields containing variable text only.
            </remarks>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Visible">
            <summary>
            Gets or sets a value indicating whether this  is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.MappingName">
            <summary>
            Gets or sets the mapping name to be used when exporting interactive form 
            field data from the document.
            </summary>
            <value>The mapping name.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Export">
            <summary>
            Gets or sets a value indicating whether this  is export.
            </summary>
            <value><c>true</c> if export; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value> if the field is read only, set to <c>true</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Required">
            <summary>
            Gets or sets a value indicating whether this  is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Page">
            <summary>
            Gets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.IPdfComboBoxField.Flatten">
            <summary>
            Gets or sets a value indicating whether this  is flatten.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfSignatureStyledField">
            <summary>
            Represents form's field with style parameters.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfSignatureStyledField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page where the field should be placed.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureStyledField.Visible">
            <summary>
            Gets or sets a value indicating whether this  is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spire.Pdf.Fields.FieldPainter.DrawButton(Spire.Pdf.Graphics.PdfCanvas,Spire.Pdf.Fields.PaintParams,Spire.Pdf.Graphics.PdfImage,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws a button.
            </summary>
            <param name="g">The g.</param>
            <param name="paintParams">The paint params.</param>
            <param name="image">The image.</param>
            <param name="format">The format.</param>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfAppearanceField">
            <summary>
            Represents form field with appearance custom support.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfAppearanceField.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfButtonField">
            <summary>
            Represents button field in the PDF form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfButtonField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page where the fields should be placed.</param>
            <param name="name">The name of the button.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.Text">
            <summary>
            Gets or sets the caption text.
            </summary>
            <value>The caption text.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.LayoutMode">
            <summary>
            Gets or sets the button layout mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.AlternateText">
            <summary>
            Gets or sets the text displayed when the mouse button is pressed within the annotation's active area, only available in Push mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.RolloverText">
            <summary>
            Gets or sets the text displayed when the user rolls the cursor into the annotation's active area without pressing the mouse button, only available in Push mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.IconLayout">
            <summary>
            Defining the icon layout.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.Icon">
            <summary>
            Gets or sets the widget annotation's normal icon displayed when it is not interacting with the user.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.AlternateIcon">
            <summary>
            Gets or sets the widget annotation's alternate icon displayed when the mouse button is pressed within its active area, only available in Push mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonField.RolloverIcon">
            <summary>
            Gets or sets the widget annotation's rollover icon displayed when the user rolls the cursor into its active area without pressing the mouse button, only available in Push mode.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfButtonField.AddPrintAction">
            <summary>
            Adds Print action to current button field.
            <remarks>Clicking on the specified button will trigger the Print Dialog Box.</remarks>
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfButtonIconLayout">
            <summary>
            Represents the button icon layout options.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonIconLayout.ScaleReason">
            <summary>
            Gets or sets the circumstances under which the icon shall be scaled inside the annotation rectangle.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonIconLayout.Spaces">
            <summary>
            Gets or sets an array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonIconLayout.IsFitBounds">
            <summary>
            If true, indicates that the button appearance should be scaled to fit fully within the bounds of the annotation without taking into consideration the line width of the border.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfButtonIconLayout.ScaleMode">
            <summary>
            Gets or sets the type of scaling to use.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfButtonIconScaleMode">
            <summary>
            Represents the type of scaling to use.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonIconScaleMode.Anamorphic">
            <summary>
            Scale the icon to fill the annotation rectangle exactly, without regard to its original aspect ratio.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonIconScaleMode.Proportional">
            <summary>
            Scale the icon to fit the width or height of the annotation rectangle while maintaining the icon's original aspect ratio.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfButtonLayoutMode">
            <summary>
            Represents the button layout mode.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.CaptionOnly">
            <summary>
            No icon; caption only.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.IconOnly">
            <summary>
            No caption; icon only.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.CaptionBelowIcon">
            <summary>
            Caption below the icon.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.CaptionAboveIcon">
            <summary>
            Caption above the icon.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.CaptionRightOfIcon">
            <summary>
            Caption to the right of the icon.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.CaptionLeftOfIcon">
            <summary>
            Caption to the left of the icon,
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonLayoutMode.CaptionOverlayIcon">
            <summary>
            Caption overlaid directly on the icon.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfButtonIconScaleReason">
            <summary>
            Represtents the circumstances under which the icon shall be scaled inside the annotation rectangle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonIconScaleReason.Always">
            <summary>
            Always scale.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonIconScaleReason.IconIsBigger">
            <summary>
            Scale only when the icon is bigger than the annotation rectangele.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonIconScaleReason.IconIsSmaller">
            <summary>
            Scale only when the icon is smaller than the annotation rectangle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfButtonIconScaleReason.Never">
            <summary>
            Never scale.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfCheckBoxField">
            <summary>
            Represents check box field in the PDF form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfCheckBoxField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page where the fields should be placed.</param>
            <param name="name">The name of the check box field.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfCheckBoxField.Checked">
            <summary>
            Gets or sets a value indicating whether this  is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfCheckFieldBase">
            <summary>
            Represents base class for field which can be in checked and unchecked states.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfCheckFieldBase.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page where the fields should be placed.</param>
            <param name="name">The name of the check box field.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfCheckFieldBase.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The  object specifies the style of the check box field.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfComboBoxField">
            <summary>
            Represents combo box field in the PDF Form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfComboBoxField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">Page the field to be placed on.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfComboBoxField.Editable">
            <summary>
            Gets or sets a value indicating whether this  is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfField">
            <summary>
            Represents field of the Pdf document's interactive form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page where the field should be placed.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfField.#ctor(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="dictionary">Field Dictionary</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.MappingName">
            <summary>
            Gets or sets the mapping name to be used when exporting interactive form 
            field data from the document.
            </summary>
            <value>The mapping name.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Export">
            <summary>
            Gets or sets a value indicating whether this  is export.
            </summary>
            <value><c>true</c> if export; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value> if the field is read only, set to <c>true</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Required">
            <summary>
            Gets or sets a value indicating whether this  is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Page">
            <summary>
            Gets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Flatten">
            <summary>
            Gets or sets a value indicating whether this  is flatten.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfField.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfFieldCollection">
            <summary>
            Represents collection of the Pdf fields.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfFieldCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>        
        </member>
        <member name="P:Spire.Pdf.Fields.PdfFieldCollection.Item(System.String)">
            <summary>
            Gets the  with thier field name.
            </summary>   
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.Add(Spire.Pdf.Fields.PdfField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field item which is added in the PDF form.</param>
            <returns>The field to be added on the page. </returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.Insert(System.Int32,Spire.Pdf.Fields.PdfField)">
            <summary>
            Inserts the the field at the specified index.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="field">The field which should be inserted at the specified index.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.Contains(Spire.Pdf.Fields.PdfField)">
            <summary>
            Determines whether field is contained within the collection.
            </summary>
            <param name="field">Check whether  object is present in the field collection or not.</param>
            <returns>
            <c>true</c> if field is present in the collection, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.IndexOf(Spire.Pdf.Fields.PdfField)">
            <summary>
            Gets the index of the field.
            </summary>
            <param name="field">The  object whose index is requested.</param>
            <returns>Index of the field in collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.Remove(Spire.Pdf.Fields.PdfField)">
            <summary>
            Removes the specified field in the collection.
            </summary>
            <param name="field">The  object to be removed from collection.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.RemoveAt(System.Int32)">
            <summary>
            Removes field at the specified position.
            </summary>
            <param name="index">The index where to remove the item.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFieldCollection.Clear">
            <summary>
            Clears the form field collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfFieldCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfForm">
            <summary>
            Represents interactive form of the Pdf document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfForm.m_enabledHighLightFormField">
            <summary>
            Set a value to enabled form field highLight
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfForm.m_needRewriteFormField">
            <summary>
            pdfviewer fill,a form field needs to override ap 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfForm.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The Form fields.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.IsFlatten">
            <summary>
            Gets or sets a value indicating whether this  is flatten.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the form is read only.
            </summary>
            <value><c>true</c> if the form is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.AutoNaming">
            <summary>
            Gets or sets a value indicating whether [field auto naming].
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.NeedAppearances">
            <summary>
            Gets or sets a value indicating whether the viewer must generate appearances for fields.
            </summary>
            <value><c>true</c> if viewer must generate appearance; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.EnabledHighLightFormField">
            <summary>
            Set a value to enabled form field highLight
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.NeedRewriteFormField">
            <summary>
            pdfviewer fill,a form field needs to override ap 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfForm.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfFormFieldCollection">
            <summary>
            Represents a collection of form fields.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfFormFieldCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfListBoxField">
            <summary>
            Represents list box field of the PDF form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListBoxField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">Page the field to be placed on.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListBoxField.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the field is multiselectable.
            </summary>
            <value><c>true</c> if multiselectable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfListField">
            <summary>
            Represents base class form's list fields.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfListField.m_commitOnSelChange">
            <summary>
            Internal variable to store CommitOnSelChange flag.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListField.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListField.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list. 
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListField.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListField.CommitOnSelChange">
            <summary>
            Gets or sets the flag indicating if a new value selected is committed immediately without waiting to leave the field.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfListFieldItem">
            <summary>
            Represents an item of the list fields.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItem.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The item text, it is displayed in the list.</param>
            <param name="value">The item value, it is exported when form content is exported.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListFieldItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text of the list item field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListFieldItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value of the list item field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListFieldItem.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value>The primitive.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfListFieldItemCollection">
            <summary>
            Represents list field item collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListFieldItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value>The  object.</value>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.Add(Spire.Pdf.Fields.PdfListFieldItem)">
            <summary>
            Adds the specified item in the collection.
            </summary>
            <param name="item">The  object which to be added in the collection.</param>
            <returns>item</returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.Insert(System.Int32,Spire.Pdf.Fields.PdfListFieldItem)">
            <summary>
            Inserts the list item field at the specified index.
            </summary>
            <param name="index">The index where to insert the new item.</param>
            <param name="item">The  object to be added to collection.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.Remove(Spire.Pdf.Fields.PdfListFieldItem)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The  object which to be removed in the collection.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position.
            </summary>
            <param name="index">The index where to remove the item.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.Contains(Spire.Pdf.Fields.PdfListFieldItem)">
            <summary>
            Determines whether the item is contained by the collection.
            </summary>
            <param name="item">Check whether  object is exists in the collection or not.</param>
            <returns>
            <c>true</c> if the item is contained within the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.IndexOf(Spire.Pdf.Fields.PdfListFieldItem)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item">A  object whose index is requested.</param>
            <returns>The index of the given item, -1 if the item does not exist.</returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfListFieldItemCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfListFieldItemCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfRadioButtonListField">
            <summary>
            Represents radio button field in the PDF form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonListField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListField.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list. 
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListField.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
            <value>The selected value of the list field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListField.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
            <value>The selected item of the field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListField.Items">
            <summary>
            Gets the items of the radio button field.
            </summary>
            <value>The radio button field item collection.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfRadioButtonListItem">
            <summary>
            Represents an item of a radio button list.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonListItem.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListItem.Form">
            <summary>
            Gets the form of the field.
            </summary>
            <value>The  object of the field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListItem.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonListItem.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfRadioButtonItemCollection">
            <summary>
            Represents collection of radio buttons items.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.#ctor(Spire.Pdf.Fields.PdfRadioButtonListField)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Add(Spire.Pdf.Fields.PdfRadioButtonListItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The  object to be added to collection.</param>
            <returns>The index of the added field.</returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Insert(System.Int32,Spire.Pdf.Fields.PdfRadioButtonListItem)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index where to insert the new item..</param>
            <param name="item">A  object to be added to collection.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Remove(Spire.Pdf.Fields.PdfRadioButtonListItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The  object which is to be removed from the collection.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position.
            </summary>
            <param name="index">The index where to remove the item.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.IndexOf(Spire.Pdf.Fields.PdfRadioButtonListItem)">
            <summary>
            Gets the index of the item within the collection.
            </summary>
            <param name="item">A  object whose index is requested.</param>
            <returns>Index of the item with the collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Contains(Spire.Pdf.Fields.PdfRadioButtonListItem)">
            <summary>
            Determines whether the collection contains the specified item.
            </summary>
            <param name="item">Check whether  object is exists in the collection or not.</param>
            <returns>
            <c>true</c> if collection contains specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Clear">
            <summary>
            Clears the item collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value>Returns item at the specified position.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfRadioButtonItemCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfSignatureAppearanceField">
            <summary>
            Represents form field with appearance custom support.
            </summary>   
        </member>
        <member name="P:Spire.Pdf.Fields.PdfSignatureAppearanceField.Appearance">
            <summary>
            Gets the appearance.
            </summary>
            <value>The appearance.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfSignatureField">
            <summary>
            Represents signature field in the PDF Form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfSignatureField.#ctor(Spire.Pdf.PdfPageBase,System.String,Spire.Pdf.Security.PdfSignature)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the field.</param>
            <param name="m_signature">a PdfSignature obj</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfSignatureField.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Single,System.Single)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfSignatureField.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Drawing.RectangleF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfSignatureField.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfStyledField">
            <summary>
            Represents form's field with style parameters.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfStyledField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page where the field should be placed.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.ForeColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.HighlightMode">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
            <value>The highlighting mode.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
            <remarks>This property is meaningful for fields containing variable text only.
            </remarks>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The border style.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfStyledField.Visible">
            <summary>
            Gets or sets a value indicating whether this  is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfTextBoxField">
            <summary>
            Represents text box field in the PDF form.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfTextBoxField.m_passwordValue">
            <summary>
            The password chrackter.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text of the text box field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value of the text box field.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.SpellCheck">
            <summary>
            Gets or sets a value indicating whether to check spelling.
            </summary>
            <value><c>true</c> if check spelling; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.InsertSpaces">
            <summary>
            Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.
            If set, the field is automatically divided into as many equally spaced positions, or combs, 
            as the value of MaxLength, and the text is laid out into those combs.
            </summary>
            <value><c>true</c> if need to insert spaces; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.Multiline">
            <summary>
            Gets or sets a value indicating whether this  is multiline.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.Password">
            <summary>
            Gets or sets a value indicating whether this  is password field.
            </summary>
            <value><c>true</c> if password field; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.Scrollable">
            <summary>
            Gets or sets a value indicating whether this  is scrollable.
            </summary>
            <value><c>true</c> if scrollable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Fields.PdfTextBoxField.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be entered in the text box.
            </summary>
            <value>An integer value specifying the maximum number of characters that can be entered in the text box.</value>
        </member>
        <member name="M:Spire.Pdf.Fields.PdfTextBoxField.#ctor(Spire.Pdf.PdfPageBase,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">Page which the field to be placed on.</param>
            <param name="name">The name of the text box field.</param>
        </member>
        <member name="T:Spire.Pdf.Fields.FieldFlags">
            <summary>
            Represents fields flags enum.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Default">
            <summary>
            Default field flag.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.ReadOnly">
            <summary>
            If set, the user may not change the value of the field. Any associated widget annotations 
            will not interact with the user; that is, they will not respond to mouse clicks or 
            change their appearance in response to mouse motions. This flag is useful 
            for fields whose values are computed or imported from a database.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Required">
            <summary>
            If set, the field must have a value at the time it is exported by a submit-form action.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.NoExport">
            <summary>
            If set, the field must not be exported by a submit-form action
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Multiline">
            <summary>
            If set, the field can contain multiple lines of text; 
            if clear, the fields text is restricted to a single line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Password">
            <summary>
            If set, the field is intended for entering a secure password that should not be 
            echoed visibly to the screen. Characters typed from the keyboard should instead 
            be echoed in some unreadable form, such as asterisks or bullet characters.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.FileSelect">
            <summary>
            If set, the text entered in the field represents the pathname of a file whose 
            contents are to be submitted as the value of the field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.DoNotSpellCheck">
            <summary>
            If set, text entered in the field is not spell-checked.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.DoNotScroll">
            <summary>
            If set, the field does not scroll (horizontally for single-line fields, vertically 
            for multiple-line fields) to accommodate more text than fits within its annotation 
            rectangle. Once the field is full, no further text is accepted.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Comb">
            <summary>
            Meaningful only if the MaxLen entry is present in the text field dictionary and if 
            the Multiline, Password, and FileSelect flags are clear. If set, the field is 
            automatically divided into as many equally spaced positions, or combs, as the 
            value of MaxLen, and the text is laid out into those combs.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.RichText">
            <summary>
            If set, the value of this field should be represented as a rich text string.
            If the field has a value, the RVentry of the field dictionary specifies 
            the rich text string.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.NoToggleToOff">
            <summary>
            If set, exactly one radio button must be selected at all times; clicking 
            the currently selected button has no effect. If clear, clicking the selected 
            button reselects it, leaving no button selected.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Radio">
            <summary>
            If set, the field is a set of radio buttons; if clear, the field is a check box. 
            This flag is meaningful only if the Pushbutton flag is clear.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.PushButton">
            <summary>
            If set, the field is a pushbutton that does not retain a permanent value.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.RadiosInUnison">
            <summary>
            If set, a group of radio buttons within a radio button field that use the same value 
            for the on state will turn on and off in unison; that is if one is checked, they 
            are all checked. If clear, the buttons are mutually exclusive.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Combo">
            <summary>
            If set, the field is a combo box; if clear, the field is a list box.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Edit">
            <summary>
            If set, the combo box includes an editable text box as well as a drop-down 
            list; if clear, it includes only a drop-down list. This flag is meaningful only 
            if the Combo flag is set.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.Sort">
            <summary>
            If set, the fields option items should be sorted alphabetically. This flag 
            is intended for use by form authoring tools, not by PDF viewer applications.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.MultiSelect">
            <summary>
            If set, more than one of the fields option items may be selected simultaneously; 
            if clear, no more than one item at a time may be selected.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.FieldFlags.CommitOnSelChange">
            <summary>
            If set, the new value is committed as soon as a selection is made with the pointing 
            device. This option enables applications to perform an action once a selection is 
            made, without requiring the user to exit the field. If clear, the new value is not 
            committed until the user exits the field.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfBorderStyle">
            <summary>
            Specifies the available styles for a field border.
            </summary>
            <remarks>Defaule value is Solid.</remarks>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfBorderStyle.Solid">
            <summary>
            A solid rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfBorderStyle.Dashed">
            <summary>
            A dashed rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfBorderStyle.Beveled">
            <summary>
            A simulated embossed rectangle that appears to be raised above the surface 
            of the page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfBorderStyle.Inset">
            <summary>
            A simulated engraved rectangle that appears to be recessed below the surface 
            of the page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfBorderStyle.Underline">
            <summary>
            A single line along the bottom of the annotation rectangle.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfHighlightMode">
            <summary>
            Specifies the highlight mode for a field.
            </summary>
            <remarks>Defaule value is Invert.</remarks>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfHighlightMode.NoHighlighting">
            <summary>
            No highlighting.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfHighlightMode.Invert">
            <summary>
            Invert the contents of the field rectangle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfHighlightMode.Outline">
            <summary>
            Invert the field's border.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfHighlightMode.Push">
            <summary>
            Pushed highlighting.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfCheckBoxStyle">
            <summary>
            Specifies the style for a check box field.
            </summary>
            <remarks>The default value is Check.</remarks>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckBoxStyle.Check">
            <summary>
            A check mark is used for the checked state.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckBoxStyle.Circle">
            <summary>
            A circle is used for the checked state. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckBoxStyle.Cross">
            <summary>
            A cross is used for the checked state.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckBoxStyle.Diamond">
            <summary>
            A diamond symbol is used for the checked state. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckBoxStyle.Square">
            <summary>
            A square is used for the checked state.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckBoxStyle.Star">
            <summary>
            A star is used for the checked state.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.HttpMethod">
            <summary>
            Specifies Http request method.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.HttpMethod.Get">
            <summary>
            Data submitted using Http Get method.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.HttpMethod.Post">
            <summary>
            Data submitted using Http Post method.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.SubmitDataFormat">
            <summary>
            Specifies the enumeration of submit data formats.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.SubmitDataFormat.Html">
            <summary>
            Data should be transmitted as Html.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.SubmitDataFormat.Pdf">
            <summary>
            Data should be transmitted as Pdf.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.SubmitDataFormat.Fdf">
            <summary>
            Data should be transmitted as Forms Data Format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.SubmitDataFormat.Xfdf">
            <summary>
            Data should be transmitted as XML Forms Data Format .
            </summary>
        </member>
        <member name="T:Spire.Pdf.Fields.PdfCheckFieldState">
            <summary>
            Represents states of the check field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckFieldState.Unchecked">
            <summary>
            Indicated unchecked/unpressed state.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckFieldState.Checked">
            <summary>
            Indicated checked unpressed state.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckFieldState.PressedUnchecked">
            <summary>
            Indicated pressed unchecked state.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Fields.PdfCheckFieldState.PressedChecked">
            <summary>
            Indicated pressed checked state.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.XFAForm">
            <summary>
            Represents XML Forms Architecture (XFA).
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.XFAForm.XmlTemplate">
            <summary>
            XFA Template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.XFAForm.XmlDatasets">
            <summary>
            XFA Datasets.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.XFAForm.XmlConfig">
            <summary>
            XFA Config.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.XFAForm.XmlDataPackage">
            <summary>
            XML Data Package
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.XFAForm.Item(System.String)">
            <summary>
            Gets of sets data node value.deprecated to use,instead use xfaField to set field value.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.XFAForm.GetTemplate(System.String)">
            <summary>
            Returns XML node of field tempalte. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.XFAForm.getField(System.String)">
            <summary>
            Added by Henry Zhou. 
            To get the xfaField through its name. Notes: the param 'name' is the name have been midified by codes instead of originals.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfPageCollection">
            <summary>
            Implements routines for manipulation with loaded pages.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Widget.PdfPageCollection.PageAdded">
            <summary>
            Represents the  method that executes on a PdfNewDocument when a new page is created.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfPageCollection.SectionCount">
            <summary>
            Get the Section Count.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfPageCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfPageCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Add">
            <summary>
            Creates a new page and adds it to the collection.
            </summary>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Add(System.Drawing.SizeF)">
            <summary>
            Creates a new page of the specified size and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Add(System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins)">
            <summary>
            Creates a new page of the specified size and with the specified margins
            and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <param name="margins">The margins of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Add(System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins,Spire.Pdf.PdfPageRotateAngle)">
            <summary>
            Creates a new page of the specified size and with the specified margins
            and adds it to the collection.
            </summary>
            <param name="size">The size of the new page.</param>
            <param name="margins">The margins of the new page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <returns>The created page.</returns>		
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Add(System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins,Spire.Pdf.PdfPageRotateAngle,Spire.Pdf.PdfPageOrientation)">
            <summary>
            Creates a new page of the specified size and with the specified margins
            and adds it to the collection.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <param name="orientation">The orientation of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Insert(System.Int32)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins,Spire.Pdf.PdfPageRotateAngle)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page at the given specified index.
            </summary>
            <param name="index"> Index of the page.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Remove(System.Int32,Spire.Pdf.PdfPageBase)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page to be remove.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Remove(Spire.Pdf.PdfPageBase)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page to be remove.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.ReArrange(System.Int32[])">
            <summary>
            ReArrange the Pages in the Loaded Document.
            </summary>
            <param name="orderArray">The page sequence to arrange the pages.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins,Spire.Pdf.PdfPageRotateAngle,Spire.Pdf.PdfPageOrientation,System.Boolean)">
            <summary>
            Creates a new page and inserts it at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="size">The size of the page.</param>
            <param name="margins">The margins of the page.</param>
            <param name="rotation">The rotation of the new page.</param>
            <param name="orientation">The orientation of the new page.</param>
            <returns>The created page.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.IndexOf(Spire.Pdf.PdfPageBase)">
            <summary>
            Gets the index of the page in the document.
            </summary>
            <param name="page">The current page.</param>
            <returns>Index of the page in the document if exists, -1 otherwise.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageCollection.ForeachKids(Spire.Pdf.Primitives.PdfDictionary,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            foreach Nodes,find page
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <param name="currentIndex"></param>
            <param name="localIndex"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.Widget.PdfPageCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="T:Spire.Pdf.Widget.PdfPageWidgetEnumerator">
            <summary>
            Implements enumerator to the loaded page collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageWidgetEnumerator.#ctor(Spire.Pdf.Widget.PdfPageCollection)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfPageWidgetEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection
            or after the last element. </exception>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageWidgetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfPageWidgetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfAnnotationWidgetCollection">
            <summary>
            Represents the loaded annotation colllection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfAnnotationWidgetCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfAnnotationWidgetCollection.Item(System.String)">
            <summary>
            Represents the annotation with specified name.
            </summary>
            <param name="name">The specified annotation name.</param>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfAnnotationWidgetCollection.PageWidget">
            <summary>
            Gets or sets the page.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfAnnotationWidgetCollection.Add(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Adds annotation to collection.
            </summary>
            <param name="annotation">Annotation to be added to collection.</param>
            <returns>Position of the annotation in collection.</returns>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.BackColor">
            <summary>
            Get or Set the back color of the field
            </summary>
            <value>A  object specifying the background color of field. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.ForeColor">
            <summary>
            Gets or Set the fore color of the field.
            </summary>
            <value>A  object specifying the background color of field.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.TextAlignment">
            <summary>
            Get or Set the text alignment in a text box.
            </summary>
            <value>A  enumeration member specifying the text alignment in a text box.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.HighlightMode">
            <summary>
            Get or Set the HighLightMode of the Field.
            </summary>
            <value>A  enumeration member specifying the highlight mode in a text box.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Text">
            <summary>
            Gets or Set value of the text box field.
            </summary>
            <value>A string value representing the value of the item. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.DefaultValue">
            <summary>
            Gets or set the default value of the field.
            </summary>
            <value>A string value representing the default value of the item. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.SpellCheck">
            <summary>
            Gets or sets a value indicating whether to check spelling.
            </summary>
            <value>True if the field content should be checked for spelling erorrs, false otherwise. Default is true.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.InsertSpaces">
            <summary>
            Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.
            If set, the field is automatically divided into as many equally spaced positions, or combs, 
            as the value of MaxLength, and the text is laid out into those combs.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Multiline">
            <summary>
            Gets or sets a value indicating whether this  is multiline.
            </summary>       
            <value>True if the field is multiline, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Password">
            <summary>
            Gets or sets a value indicating whether this  is password field.
            </summary>
            <value>True if the field is a password field, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Scrollable">
            <summary>
            Gets or sets a value indicating whether this  is scrollable.
            </summary>
            <value>True if the field content can be scrolled, false otherwise. Default is true.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.MaxLength">
            <summary>
            Gets or sets the maximum length of the field, in characters.
            </summary>
            <value>A positive integer value specifying the maximum number of characters that can be entered in the text edit field.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.BorderStyle">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.BorderWidth">
            <summary>
            Gets or Sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Font">
            <summary>
            Gets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Visible">
            <summary>
            Gets a value indicating the visibility of the field.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value>A string value specifying the name of the field.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.MappingName">
            <summary>
            Gets or sets the mapping name to be used when exporting interactive form
            field data from the document.
            </summary>
            <value>A string value specifying the mapping name of the field. </value>        
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Page">
            <summary>
            Gets the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value>True if the field is read-only, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Required">
            <summary>
            Gets or sets a value indicating whether this  is required.
            </summary>
            <value>True if the field is required, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Export">
            <summary>
            Gets or sets a value indicating whether this  is export.
            </summary>
            <value><c>true</c> if export; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.IPdfTextBoxField.Flatten">
            <summary>
            Gets or sets a value indicating whether this  is flatten.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget">
            <summary>
            Represents a button field of an existing PDF document`s form.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget.m_ButtonImage">
            <summary>
            Button background picture
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget.ButtonImage">
            <summary>
            Gets or sets Button background picture.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget.Text">
            <summary>
            Gets or sets the caption text.
            </summary>
            <value>A string value specifying the caption of the button.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget.WidgetItems">
            <summary>
            Gets the collection of button items.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget.SetButtonImage(Spire.Pdf.Graphics.PdfImage)">
            <summary>
            need replace image
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfButtonWidgetFieldWidget.AddPrintAction">
            <summary>
            Adds Print action to current button field.</summary>
            <remarks>Clicking on the specified button will trigger the Print Dialog Box.</remarks>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfButtonWidgetWidgetItem">
            <summary>
            Represents button group item of an existing PDF document`s form.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfStateFieldWidget">
            <summary>
            Represents the base class for loaded state field.
            </summary>   
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStateFieldWidget.WidgetItems">
            <summary>
            Gets the items collection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfStateWidgetItem">
            <summary>
            Represents the loaded state item.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStateWidgetItem.Checked">
            <summary>
            Gets or sets a value indicating whether this  is checked.
            </summary>           
        </member>
        <member name="T:Spire.Pdf.Widget.PdfButtonWidgetItemCollection">
            <summary>
            Represents collection of button item.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfButtonWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfCheckBoxWidgetFieldWidget">
            <summary>
            Represents check box of an existing PDF document`s form. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfCheckBoxWidgetFieldWidget.Checked">
            <summary>
            Gets or sets a value indicating whether this  is checked.
            </summary>
            <value>True if the check box is checked, false otherwise. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfCheckBoxWidgetFieldWidget.WidgetWidgetItems">
            <summary>
            Gets the collection check box items.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfCheckBoxWidgetWidgetItemCollection">
            <summary>
            Represents collection of text box group items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfCheckBoxWidgetWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfCheckBoxWidgetWidgetItem">
            <summary>
            Represents loaded check box item.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget">
            <summary>
            Represents a choice field of an existing PDF document`s form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget.Values">
            <summary>
            Gets the collection of choice items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget.SelectedIndex">
            <summary>
            Gets or sets the first selected item in the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget.SelectedWidgetItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget.SelectedItem">
            <summary>
            Gets the first selected item in the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfChoiceWidgetFieldWidget.CommitOnSelChange">
            <summary>
            Gets or sets the flag indicating if a new value selected is committed immediately without waiting to leave the field.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfComboBoxWidgetFieldWidget">
            <summary>
            Represents the combo box field of an existing item.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfComboBoxWidgetFieldWidget.Editable">
            <summary>
            Gets or sets a value indicating whether this  is editable.
            </summary>
            <value>True if the drop down list is editable, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfComboBoxWidgetFieldWidget.WidgetItems">
            <summary>
            Gets the collection of combo box items.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfComboBoxWidgetWidgetItem">
            <summary>
            Represents group for combo box field.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfComboBoxWidgetItemCollection">
            <summary>
            Represents collection of Combo box items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfComboBoxWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfStateItemCollection">
            <summary>
            Represents state item collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStateItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>  
            <value>The index of specified  item.</value>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfFieldWidget">
            <summary>
            Represents base class for loaded fields.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidget.ObjectID">
            <summary>
            Form field identifier
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value>A string value specifying the name of the field.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.MappingName">
            <summary>
            Gets or sets the mapping name to be used when exporting interactive form
            field data from the document.
            </summary>
            <value>A string value specifying the mapping name of the field. </value>        
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.Page">
            <summary>
            Gets the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value>True if the field is read-only, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.Required">
            <summary>
            Gets or sets a value indicating whether this  is required.
            </summary>
            <value>True if the field is required, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.Export">
            <summary>
            Gets or sets a value indicating whether this  is export.
            </summary>
            <value><c>true</c> if export; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidget.FormWidget">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFieldWidget.SetName(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
            <param name="name">New name of the field.</param>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfFieldWidgetItem">
            <summary>
            Represents base class for field's group items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidgetItem.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidgetItem.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidgetItem.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFieldWidgetItem.Page">
            <summary>
            Gets the page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfFormWidget">
            <summary>
            Represents Loaded form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormWidget.FieldsWidget">
            <summary>
            Gets the field collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormWidget.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the form is read only.
            </summary>
            <value>True if the field is read-only, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormWidget.XFAForm">
            <summary>
            Gets XFA data of the form.
            </summary>
            
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormWidget.NeedAppearances">
            <summary>
            Gets or sets a value indicating whether need appearances.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ExportData(System.String,Spire.Pdf.Widget.DataFormat,System.String)">
            <summary>
            Export the form data to a file.
            </summary>
            <param name="fileName">Name of the document which is need to export.</param>
            <param name="dataFormat">The format of exported data.</param>
            <param name="formName"> The name of the PDF file the data is exported from.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ExportData(System.IO.Stream,Spire.Pdf.Widget.DataFormat,System.String)">
            <summary>
            Export the form data to a file.
            </summary>
            <param name="fileName">The stream where form data will be exported.</param>
            <param name="dataFormat">The format of exported data</param>
            <param name="formName"> The name of the PDF file the data is exported from</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ImportData(System.String,Spire.Pdf.Widget.DataFormat)">
            <summary>
            Imports the data.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="dataFormat">The data format.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ImportData(System.String,Spire.Pdf.Widget.DataFormat,System.Boolean)">
            <summary>
            Imports the data.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="dataFormat">The data format.</param>
            <param name="errorFlag">if it is error flag, set to <c>true</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ImportDataFDF(System.IO.Stream,System.Boolean)">
            <summary>
            Import form data from FDF file.
            </summary>
            <param name="stream">The FDF file stream</param>
            <param name="continueImportOnError">False if the import should stop on the first field that generates an error, or true if the import should ignore the error and continue with the next field.</param>
            <returns>Document form fields filled with data which are imported from FDF.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.HighlightFields(System.Boolean)">
            <summary>
            Sets/Resets the form field highlight option.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.OnlyHexInString(System.String)">
            <summary>
            Called when [hex in string].
            </summary>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ImportDataXFDF(System.String)">
            <summary>
            Imports XFDF Data
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.ExtractSignatureAsImages">
            <summary>
            Extract Images from Signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormWidget.RenderFromAnnots(Spire.Pdf.General.Render.PdfElement.PdfPageResources)">
            <summary>
            
            </summary>
            <param name="apAsAnnotsRes"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfFormFieldWidgetCollection">
            <summary>
            Represents field collection of loaded form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.Item(System.String)">
            <summary>
            Returns field with specified name.
            </summary>
            <param name="name">The specified field name.</param>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.FormWidget">
            <summary>
            Gets or sets the form.
            </summary>      
        </member>
        <member name="P:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.FieldNames">
            <summary>
            Field Signature Names
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.AddFormField(Spire.Pdf.Fields.PdfField)">
            <summary>
            Add field
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.GetField(System.Int32)">
            <summary>
            Gets the field.
            </summary>
            <param name="index">int index</param>
            <returns>The created field.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.GetFieldNameByExportValue(System.String)">
            <summary>
            Get FieldName from FormWidget by exportValue
            </summary>
            <param name="exportValue"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.GetFieldNameByExportValue(Spire.Pdf.Primitives.PdfDictionary,System.String)">
            <summary>
            Get filedName from FiledWeiget
            </summary>
            <param name="dic"></param>
            <param name="exportValue"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.FindExportValueFromAP(Spire.Pdf.Primitives.PdfDictionary,System.String)">
            <summary>
            find exportValue from AP  By exportValue
            </summary>
            <param name="dicAP"></param>
            <param name="exportValue"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfFormFieldWidgetCollection.GetFieldsByExportValue(System.String)">
            <summary>
            Get Fields from FormWidget by exportValue
            </summary>
            <param name="exportValue"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfListBoxWidgetFieldWidget">
            <summary>
            Represents loaded list box field.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfListBoxWidgetFieldWidget.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the field is multiselectable..
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfListBoxWidgetFieldWidget.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The collection of list box items.</value>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfListFieldWidgetItem">
            <summary>
            Represents group item for list field.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfListWidgetFieldItemCollection">
            <summary>
            Represents loaded item collection.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfListWidgetFieldItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfListWidgetItem">
            <summary>
            Represents loaded list item.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfListWidgetItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>A string value representing the display text of the item. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfListWidgetItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>A string value representing the value of the item. </value>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfListWidgetItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfListWidgetItemCollection">
            <summary>
            Represents a collection of list box field items.
            </summary>   
        </member>
        <member name="P:Spire.Pdf.Widget.PdfListWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfListWidgetItemCollection.Add(Spire.Pdf.Widget.PdfListWidgetItem)">
            <summary>
            Inserts an item at the end of the collection. 
            </summary>
            <param name="widgetItem">a object to be added to collection.</param>
            <returns>The index of item.</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfListWidgetItemCollection.Insert(System.Int32,Spire.Pdf.Widget.PdfListWidgetItem)">
            <summary>
            Inserts the list item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="widgetItem">The item.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfListWidgetItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <remarks>Throws IndexOutOfRange exception if the index is out of bounds.</remarks>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfListWidgetItemCollection.Clear">
            <summary>
            Clears the item collection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfRadioButtonWidgetWidgetItemCollection">
            <summary>
            Represents collection of radio box group items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonWidgetWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <returns>Returns  object at the specified index.</returns>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfRadioButtonWidgetItem">
            <summary>
            Represents radio button field of an existing PDF document`s form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonWidgetItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value of the radio button item.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonWidgetItem.Selected">
            <summary>
            Gets or sets a value indicating whether this  is selected.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfRadioButtonListFieldWidget">
            <summary>
            Represents radio button field of an existing PDF document`s form.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonListFieldWidget.WidgetWidgetItems">
            <summary>
            Gets the collection of radio button items.
            </summary>
            <value>A  that represents the items within the list.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonListFieldWidget.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item in the list.
            </summary>
            <value>The lowest ordinal index of the selected items in the list. The default is -1, which indicates that nothing is selected. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonListFieldWidget.SelectedValue">
            <summary>
            Gets or sets the value of the first selected item in the list. 
            </summary>
            <value>A string value specifying the value of the first selected item, null (Nothing in VB.NET) if there is no selected item.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonListFieldWidget.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>Return the item as PdfLoadedRadioButtonItem class</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfRadioButtonListFieldWidget.Value">
            <summary>
            Gets or sets the value of specified item.
            </summary>
            <value>A string value representing the value of the item.</value>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfSignatureFieldWidget">
            <summary>
            Represents the signature field of an existing PDF document`s form.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfSignatureFieldWidget.Draw">
            <summary>
            draw signature
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfSignatureFieldWidget.ParseDatetime(System.String)">
            <summary>
            Need to convert a date
            </summary>
            <param name="date">convert a date</param>
            <returns>DateTime</returns>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfStateWidgetItemCollection">
            <summary>
            Represents the collection of loaded state item.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStateWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfStyledFieldWidget">
            <summary>
            Represents loaded styled field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfStyledFieldWidget.m_DAString">
            <summary>
            Get DA for from annot 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.Actions">
            <summary>
            Gets the actions of the field.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.MouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is released 
            inside the annotations active area..
            </summary>
            <value>The mouse up action.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.MouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is pressed inside the 
            annotations active area.
            </summary>
            <value>The mouse down action.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.GotFocus">
            <summary>
            Gets or sets the action to be performed when the annotation receives the 
            input focus.
            </summary>
            <value>The got focus action.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.LostFocus">
            <summary>
            Gets or sets the action to be performed when the annotation loses the 
            input focus.
            </summary>
            <value>The lost focus action.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.BorderStyle">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.BorderWidth">
            <summary>
            Gets or Sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.Font">
            <summary>
            Gets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.DefaultIndex">
            <summary>
            Gets the default index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfStyledFieldWidget.Visible">
            <summary>
            Gets a value indicating the visibility of the field.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfStyledFieldWidget.GraphicsProperties.#ctor(Spire.Pdf.Widget.PdfStyledFieldWidget)">
            <summary>
            Initializes a new instance of the  struct.
            </summary>
            <param name="fieldWidget">The field.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfStyledFieldWidget.GraphicsProperties.#ctor(Spire.Pdf.Widget.PdfFieldWidgetItem)">
            <summary>
            Initializes a new instance of the  struct.
            </summary>
            <param name="widgetItem">The item.</param>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfTexBoxWidgetItem">
            <summary>
            Represents an item in a text box field collection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfTextBoxFieldWidget">
            <summary>
            Represents the text box field of an existing PDF document`s form.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfTextBoxFieldWidget.m_passwordValue">
            <summary>
            The password chrackter.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.BackColor">
            <summary>
            Get or Set the back color of the field
            </summary>
            <value>A  object specifying the background color of field. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.ForeColor">
            <summary>
            Gets or Set the fore color of the field.
            </summary>
            <value>A  object specifying the background color of field.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.TextAlignment">
            <summary>
            Get or Set the text alignment in a text box.
            </summary>
            <value>A  enumeration member specifying the text alignment in a text box.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.HighlightMode">
            <summary>
            Get or Set the HighLightMode of the Field.
            </summary>
            <value>A  enumeration member specifying the highlight mode in a text box.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.Text">
            <summary>
            Gets or Set value of the text box field.
            </summary>
            <value>A string value representing the value of the item. </value>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfTextBoxFieldWidget.AppendApContent(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            append ap content
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfTextBoxFieldWidget.GetTransformMatrix(Spire.Pdf.Primitives.PdfDictionary,System.Drawing.RectangleF)">
            <summary>
            Get the transform matrix from the MK entry in dictionary.
            </summary>
            <param name="dictionary">The annotation</param>
            <param name="bounds">The annotation's bound</param>
            <returns>The matrix</returns>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.DefaultValue">
            <summary>
            Gets or set the default value of the field.
            </summary>
            <value>A string value representing the default value of the item. </value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.SpellCheck">
            <summary>
            Gets or sets a value indicating whether to check spelling.
            </summary>
            <value>True if the field content should be checked for spelling erorrs, false otherwise. Default is true.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.InsertSpaces">
            <summary>
            Meaningful only if the MaxLength property is set and the Multiline, Password properties are false.
            If set, the field is automatically divided into as many equally spaced positions, or combs, 
            as the value of MaxLength, and the text is laid out into those combs.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.Multiline">
            <summary>
            Gets or sets a value indicating whether this  is multiline.
            </summary>       
            <value>True if the field is multiline, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.Password">
            <summary>
            Gets or sets a value indicating whether this  is password field.
            </summary>
            <value>True if the field is a password field, false otherwise. Default is false.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.Scrollable">
            <summary>
            Gets or sets a value indicating whether this  is scrollable.
            </summary>
            <value>True if the field content can be scrolled, false otherwise. Default is true.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.MaxLength">
            <summary>
            Gets or sets the maximum length of the field, in characters.
            </summary>
            <value>A positive integer value specifying the maximum number of characters that can be entered in the text edit field.</value>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxFieldWidget.WidgetItems">
            <summary>
            Gets the collection of text box field items. 
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.PdfTextBoxWidgetItemCollection">
            <summary>
            Represents collection of text box group items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfTextBoxWidgetItemCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.XFdfDocument">
            <summary>
            Represents base class of XFDF.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.XFdfDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.PushButton">
            <summary>
            Identify push button field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.CheckBox">
            <summary>
            Identify check box field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.RadioButton">
            <summary>
            Identify radio button field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.TextField">
            <summary>
            Identify text field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.ListBox">
            <summary>
            Identify listbox field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.ComboBox">
            <summary>
            Identify combobox field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.SignatureField">
            <summary>
            Identify signature field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.PdfFieldWidgetTypes.Null">
            <summary>
            Identify that field has no type.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Widget.DataFormat">
            <summary>
            Specifies the format of Export or Import data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.DataFormat.Xml">
            <summary>
            Specifies  XML file format
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.DataFormat.Fdf">
            <summary>
            Specifies  Forms Data Format file format
            </summary>
        </member>
        <member name="F:Spire.Pdf.Widget.DataFormat.XFdf">
            <summary>
            Specifies  XFDF file format.
            </summary>    
        </member>
        <member name="F:Spire.Pdf.Widget.PdfDocumentWidget.m_bookmark">
            <summary>
            Collection of loaded and created pages.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.FindAndCreateForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Widget.PdfDocumentWidget.Conformance">
            <summary>
            Gets the conformance level applied in the document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Load from Stream ,And Used by PdfViewer-Asp
            </summary>
            <param name="file"></param>
            <param name="isDisposedStream"></param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.#ctor(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Load from Stream  with password,And Used by PdfViewer-Asp
            </summary>
            <param name="file"></param>
            <param name="password"></param>
            <param name="isDisposedStream"></param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.VerifySignature(System.String)">
            <summary>
            Verify PDF Document regarding signature.
            </summary>
            <param name="sigName">Signature field name.</param>
            <returns>signature is validated return true,otherwise false</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.VerifyDocModified(System.String)">
            <summary>
            Check if the document was altered after signed. True if modified; otherwise false.
            </summary>
            <param name="signName">Signature field name.</param>
            <returns>signature is validated return false,otherwise true</returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.GetSignatureFieldWidget(Spire.Pdf.Widget.PdfFormWidget,System.String)">
            <summary>
            Get PdfSignatureFieldWidget obj from form  by signName
            </summary>
            <param name="form"></param>
            <param name="signName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.RemoveExtendedRight">
            <summary>
            Remove Extended right.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.GetNextSignatureFieldWidget(Spire.Pdf.Widget.PdfFormWidget,System.String)">
            <summary>
            Get next PdfSignatureFieldWidget obj from form  by signName
            </summary>
            <param name="form"></param>
            <param name="signName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.GetCertificateData(System.String)">
            <summary>
            Get PDF Document regarding CertificateData
            </summary>
            <param name="sigName">Signature field name.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.GetSignatureContent(System.String)">
            <summary>
            Get PDF Document regarding signature.
            </summary>
            <param name="sigName">Signature field name.</param>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.GetSignatureDicitionary(System.String)">
            <summary>
            Get the signature dictionary
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.getContents(Spire.Pdf.Primitives.PdfArray)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Widget.PdfDocumentWidget.ReadBytes(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.General.AbstractCodePointMapping">
            Abstract base class for code point mapping classes (1-byte character encodings).
        </member>
        <member name="F:Spire.Pdf.General.AbstractCodePointMapping.NOT_FOUND_CODE_POINT">
            Code point that is used if no code point for a specific character has been found. 
        </member>
        <member name="F:Spire.Pdf.General.AbstractCodePointMapping.NOT_A_CHARACTER">
            Unicode value indicating the the character is "not a character". 
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.#ctor(System.String,System.Int32[])">
            Main constructor.
            @param name the name of the encoding
            @param table the table ([code point, unicode scalar value]+) with the mapping
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.#ctor(System.String,System.Int32[],System.String[])">
            Extended constructor.
            @param name the name of the encoding
            @param table the table ([code point, unicode scalar value]+) with the mapping
            @param charNameMap all character names in the encoding (a value of null will be converted
                             to ".notdef")
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.buildFromTable(System.Int32[])">
            Builds the internal lookup structures based on a given table.
            @param table the table ([code point, unicode scalar value]+) with the mapping
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.getName">
            {@inheritDoc} 
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.mapChar(System.Char)">
            {@inheritDoc} 
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.getUnicodeForIndex(System.Int32)">
            Returns the main Unicode value that is associated with the given code point in the encoding.
            Note that multiple Unicode values can theoretically be mapped to one code point in the
            encoding.
            @param idx the code point in the encoding
            @return the Unicode value (or \uFFFF (NOT A CHARACTER) if no Unicode value is at that point)
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.getUnicodeCharMap">
            {@inheritDoc} 
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.getCodePointForGlyph(System.String)">
            Returns the index of a character/glyph with the given name. Note that this
            method is relatively slow and should only be used for fallback operations.
            @param charName the character name
            @return the index of the character in the encoding or -1 if it doesn't exist
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.getCharNameMap">
            {@inheritDoc} 
        </member>
        <member name="M:Spire.Pdf.General.AbstractCodePointMapping.ToString">
            {@inheritDoc} 
        </member>
        <member name="F:Spire.Pdf.General.CharGlyphs.winAnsiEncoding">
            The characters in WinAnsiEncoding
        </member>
        <member name="M:Spire.Pdf.General.CharGlyphs.glyphToString(System.String)">
            Return the glyphname from a string,
            eg, glyphToString("\\") returns "backslash"
        </member>
        <member name="M:Spire.Pdf.General.CharGlyphs.stringToGlyph(System.String)">
            Return the string representation of a glyphname,
            eg stringToGlyph("backslash") returns "\\"
        </member>
        <member name="M:Spire.Pdf.General.Paper.Base.CodePage.GetEncoding(System.Int32)">
            <summary>
            Returns the encoding associated with the specified code page identifier.
            </summary>
            <param name="codepage">The code page identifier of the preferred encoding.</param>
            <returns>The encoding that is associated with the specified code page.</returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Base.CodePage.GetEncoding(System.String)">
            <summary>
            Returns the encoding associated with the specified code page name.
            </summary>
            <param name="name">The code page name of the preferred encoding.</param>
            <returns>The encoding that is associated with the specified code page.</returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.ExternalFontCache.Finalize">
            <summary>
            Destructor 
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.ExternalFontCache.Dispose">
            <summary>
            Clean up Memory
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.PdfExternalFontCache.Finalize">
            <summary>
            Destructor 
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.PdfExternalFontCache.Dispose">
            <summary>
            Clean up Memory
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFont.Panose">
            <summary>
            Represents 10 byte series of numbers is used to describe the visual characteristics of a given typeface. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFont.PostscriptTtFontKey">
            <summary>
            Get mPostscriptTtFontKey
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFont.UTF16ToUCS4(System.Char[],System.Int32,System.UInt32@)">
            <summary>   
            Convert utf16 to ucs4.
            </summary>  
            <param name="UTF16">utf16 code array.</param>  
            <param name="index">utf16 code start index.</param>  
            <param name="UCS4">ucs4 code.</param>  
            <returns>num of utf16 code in use.</returns>   
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFontFamily.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFontFamily.Dispose">
            <summary>
            Clean up Memory
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeIdentity">
            An identity transform is one in which the output coordinates are
            always the same as the input coordinates.
            If this transform is anything other than the identity transform,
            the type will either be the constant GENERAL_TRANSFORM or a
            combination of the appropriate flag bits for the various coordinate
            conversions that this transform performs.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeTranslation">
            A translation moves the coordinates by a constant amount in x
            and y without changing the length or angle of vectors.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeUniformScale">
            A uniform scale multiplies the length of vectors by the same amount
            in both the x and y directions without changing the angle between
            vectors.
            This flag bit is mutually exclusive with the TypeGeneralScale flag.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeGeneralScale">
            A general scale multiplies the length of vectors by different
            amounts in the x and y directions without changing the angle
            between perpendicular vectors.
            This flag bit is mutually exclusive with the TypeUniformScale flag.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeMaskScale">
            This constant is a bit mask for any of the scale flag bits.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeFlip">
            This flag bit indicates that the transform defined by this object
            performs a mirror image flip about some axis which changes the
            normally right handed coordinate system into a left handed
            system in addition to the conversions indicated by other flag bits.
            A right handed coordinate system is one where the positive X
            axis rotates counterclockwise to overlay the positive Y axis
            similar to the direction that the fingers on your right hand
            curl when you stare end on at your thumb.
            A left handed coordinate system is one where the positive X
            axis rotates clockwise to overlay the positive Y axis similar
            to the direction that the fingers on your left hand curl.
            There is no mathematical way to determine the angle of the
            original flipping or mirroring transformation since all angles
            of flip are identical given an appropriate adjusting rotation.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeQuadrantRotation">
            This flag bit indicates that the transform defined by this object
            performs a quadrant rotation by some multiple of 90 degrees in
            addition to the conversions indicated by other flag bits.
            A rotation changes the angles of vectors by the same amount
            regardless of the original direction of the vector and without
            changing the length of the vector.
            This flag bit is mutually exclusive with the TypeGeneralRotation flag.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeGeneralRotation">
            This flag bit indicates that the transform defined by this object
            performs a rotation by an arbitrary angle in addition to the
            conversions indicated by other flag bits.
            A rotation changes the angles of vectors by the same amount
            regardless of the original direction of the vector and without
            changing the length of the vector.
            This flag bit is mutually exclusive with the
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeMaskRotation">
            This constant is a bit mask for any of the rotation flag bits.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.TypeGeneralTransform">
            This constant indicates that the transform defined by this object
            performs an arbitrary conversion of the input coordinates.
            If this transform can be classified by any of the above constants,
            the type will either be the constant TypeIdentity or a
            combination of the appropriate flag bits for the various coordinate
            conversions that this transform performs.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.ApplyIdentity">
            This constant is used for the internal state variable to indicate
            that no calculations need to be performed and that the source
            coordinates only need to be copied to their destinations to
            complete the transformation equation of this transform.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.ApplyTranslate">
            This constant is used for the internal state variable to indicate
            that the translation components of the matrix (m02 and m12) need
            to be added to complete the transformation equation of this transform.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.ApplyScale">
            This constant is used for the internal state variable to indicate
            that the scaling components of the matrix (m00 and m11) need
            to be factored in to complete the transformation equation of
            this transform.  If the ApplyShear bit is also set then it
            indicates that the scaling components are not both 0.0.  If the
            ApplyShear bit is not also set then it indicates that the
            scaling components are not both 1.0.  If neither the ApplyShear
            nor the ApplyScale bits are set then the scaling components
            are both 1.0, which means that the x and y components contribute
            to the transformed coordinate, but they are not multiplied by
            any scaling factor.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.ApplyShear">
            This constant is used for the internal state variable to indicate
            that the shearing components of the matrix (m01 and m10) need
            to be factored in to complete the transformation equation of this
            transform.  The presence of this bit in the state variable changes
            the interpretation of the ApplyScale bit as indicated in its
            documentation.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.m00">
            The X coordinate scaling element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.m01">
            The X coordinate shearing element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.m02">
            The X coordinate of the translation element of the
            3x3 affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.m10">
            The Y coordinate shearing element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.m11">
            The Y coordinate scaling element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.m12">
            The Y coordinate of the translation element of the
            3x3 affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.mState">
            This field keeps track of which components of the matrix need to
            be applied when performing a transformation.
            @see #ApplyIdentity
            @see #ApplyTranslate
            @see #ApplyScale
            @see #ApplyShear
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsMatrix.mType">
            This field caches the current transformation type of the matrix.
            @see #TypeIdentity
            @see #TypeTranslation
            @see #TypeUniformScale
            @see #TypeGeneralScale
            @see #TypeFlip
            @see #TypeQuadrantRotation
            @see #TypeGeneralRotation
            @see #TypeGeneralTransform
            @see #TypeUnknown
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.PsMatrix.UpdateState">
             Manually recalculates the state of the transform when the matrix
             changes too much to predict the effects on the state.
             The following table specifies what the various settings of the
             state field say about the values of the corresponding matrix
             element fields.
             Note that the rules governing the SCALE fields are slightly
             different depending on whether the SHEAR flag is also set.
             <pre>
                                 SCALE            SHEAR          TRANSLATE
                                m00/m11          m01/m10          m02/m12
            
             IDENTITY             1.0              0.0              0.0
             TRANSLATE (TR)       1.0              0.0          not both 0.0
             SCALE (SC)       not both 1.0         0.0              0.0
             TR | SC          not both 1.0         0.0          not both 0.0
             SHEAR (SH)           0.0          not both 0.0         0.0
             TR | SH              0.0          not both 0.0     not both 0.0
             SC | SH          not both 0.0     not both 0.0         0.0
             TR | SC | SH     not both 0.0     not both 0.0     not both 0.0
             </pre>
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.ApplyTranslate">
            This constant is used for the internal state variable to indicate
            that the translation components of the matrix (m03, m13, m23) need
            to be added to complete the transformation equation of this transform.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.ApplyScale">
            This constant is used for the internal state variable to indicate
            that the scaling components of the matrix (m00, m11, m22) need
            to be factored in to complete the transformation equation of
            this transform.  If the ApplyShear bit is also set then it
            indicates that the scaling components are not all 0.0.  If the
            ApplyShear bit is not also set then it indicates that the
            scaling components are not all 1.0.  If neither the ApplyShear
            nor the ApplyScale bits are set then the scaling components
            are both 1.0, which means that the x, y and z components contribute
            to the transformed coordinate, but they are not multiplied by
            any scaling factor.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.ApplyShear">
            This constant is used for the internal state variable to indicate
            that the shearing components of the matrix (m01, m02, m10, m12, m20, m21) 
            need to be factored in to complete the transformation equation of this
            transform. The presence of this bit in the state variable changes the 
            interpretation of the ApplyScale bit as indicated in its documentation.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.ApplyProjection">
            This constant is used for the internal state variable to indicate
            that the projection components of the matrix (m30, m31, m32) need
            to be factored in to complete the transformation equation of this
            transform.  
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.ApplyOverallScale">
            This constant is used for the internal state variable to indicate
            that the overall scaling component of the matrix (m33) need to be 
            factored in to complete the transformation equation of this transform.  
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m00">
            The X coordinate scaling element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m01">
            The YX coordinate shearing element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m02">
            The XZ coordinate shearing element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m03">
            The X coordinate of the translation element of the
            4x4 affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m10">
            The YX coordinate shearing element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m11">
            The Y coordinate scaling element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m12">
            The YZ coordinate shearing element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m13">
            The Y coordinate of the translation element of the
            4x4 affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m20">
            The ZX coordinate shearing element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m21">
            The ZY coordinate shearing element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m22">
            The Z coordinate scaling element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m23">
            The Z coordinate of the translation element of the
            4x4 affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m30">
            The X projection element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m31">
            The Y projection element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m32">
            The Z projection element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.m33">
            The overall scaling element of the 4x4
            affine transformation matrix.
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.mState">
            This field keeps track of which components of the matrix need to
            be applied when performing a transformation.
            @see #ApplyIdentity
            @see #ApplyTranslate
            @see #ApplyScale
            @see #ApplyShear
            @see #ApplyProjection
            @see #ApplyOverallScale
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.PsTDMatrix.UpdateState">
            Manually recalculates the state of the transform when the matrix
            changes too much to predict the effects on the state.
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Ps.PsBitmap.BlendTransparencyWithBackground(Spire.Pdf.General.Paper.Drawing.PsColor)">
            <summary>
            Blend transparency whith background color.
            </summary>
            <param name="backgroundColor">background color</param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Ps.PsSystem.GetMacOSFontFolders">
            <summary>
            Get MacOS font folders.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Spire.Pdf.General.Paper.Drawing.Rendering.Ps.PsGlyphs.fontDoubleStrikeout">
            <summary>
            The font strikeout.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Rendering.BasicLayout.BasicLayoutLine.CompareFloat(System.Single,System.Single,System.Single)">
            <summary>
            Compares the floating number.
            </summary>
            <param name="val1">The value1.</param>
            <param name="val2">The value2.</param>
            <param name="accuracy">The accuracy.</param>
            <returns><c>return 0,val1 equal val2;return 1,val1 greater than val2;return -1,val1 less than val2;</c></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Rendering.BasicLayout.BasicLayoutLine.CompareDouble(System.Double,System.Double,System.Double)">
            <summary>
            Compares the double number.
            </summary>
            <param name="val1">The value1.</param>
            <param name="val2">The value2.</param>
            <param name="accuracy">The accuracy.</param>
            <returns><c>return 0,val1 equal val2;return 1,val1 greater than val2;return -1,val1 less than val2;</c></returns>
        </member>
        <member name="T:Spire.Pdf.General.Paper.Drawing.Rendering.Common.XpsPathBuilder">
            <summary>
            Converts an APS path or a clipping region into XPS Abbreviated Syntax.
            The technique is the same as in PdfPathBuilder, but Syntax of path is different
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Paper.Drawing.Rendering.Dml.Styles.DmlFontReference">
            This element represents a reference to a themed font. 
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Rendering.Dml.Text.Layout.DmlLayoutServiceLocator.GetShapeDrawingContext">
            <summary>
            Gets the context of path drawing.
            </summary>
        </member>
        <member name="E:Spire.Pdf.General.Paper.Drawing.Rendering.Internal.Rendering.PdfRenderer.PdfRendererEndPage">
            <summary>
            Occurs when end page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Paper.Drawing.Rendering.Internal.Rendering.PdfRendererEndPageHandler">
            <summary>
            Represents the method that will handle an event that with event data.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">args that contains event data</param>
        </member>
        <member name="T:Spire.Pdf.General.Paper.Drawing.Rendering.Internal.Rendering.PdfRendererEndPageEventArgs">
            <summary>
            PdfRendererEndPageEventArgs is the class containg event data.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Paper.Drawing.Rendering.Internal.Rendering.PdfRendererEndPageEventArgs.CurrentDocument">
            <summary>
            Represents the current Pdf documnet.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Paper.Drawing.Rendering.Internal.Rendering.PdfRendererEndPageEventArgs.CurrentPage">
            <summary>
            Represents the current Pdf page.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Drawing.Rendering.Xps.ApsGlyphsIndicesToXpsReader.IsValidXmlChar(System.Int32)">
            <summary>
            Reference Spire.Pdf.General.Paper.Drawing.Rendering.Ps.XmlDocumentBuilder,IsValidXmlChar(char c)
            </summary>
            <param name="utf32Char"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Pdf.General.Paper.Drawing.Rendering.Xps.XpsRenderer.IsNegative">
            <summary>
            Reverse y position.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.CFF.CFFFontParser.Parse(Spire.Pdf.General.Paper.Font.Common.Locator.FontDefinition,Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
            
            </summary>
            <param name="fontDefinition"></param>
            <param name="fontReader"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.Common.FontFactory.CreateFont(Spire.Pdf.General.Paper.Font.Common.Locator.FontDefinition,Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
            Creates a font, using font definition ( that contains font type and font files )
            </summary>
            <param name="fontDefinition"></param>
            <param name="fontReader"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.Common.IFontFactory.CreateFont(Spire.Pdf.General.Paper.Font.Common.Locator.FontDefinition,Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
             Creates a font, using font definition and ttfReader
            </summary>
            <param name="fontDefinition"></param>
            <param name="fontReader"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.Common.IFontParser.Parse(Spire.Pdf.General.Paper.Font.Common.Locator.FontDefinition,Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
            Parses font from  fontReader and fontDefinition
            </summary>
            <param name="fontDefinition"></param>
            <param name="fontReader"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.TTF.TTCFontSource.GetFontDefinitions">
            <summary>
            Parse for fontSource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.TTF.TTCFontSource.GetFontDefinitionsImpl(System.Collections.ArrayList,Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
            Parse font form fontDefinitions and ttfReader
            </summary>
            <param name="fontDefinitions"></param>
            <param name="ttfReader"></param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.TTF.TTFFontParser.ParseImpl">
            <summary>
            Parse for font
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.TTF.TTFFontParser.ParseImpl(Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
            Parse for fontReader
            </summary>
            <param name="fontReader"></param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.TTF.TTFFontParser.ParseringImpl(Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
             Parse for font
            </summary>
            <param name="ttfReader"></param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.Type1.Type1FontParser.Parse(Spire.Pdf.General.Paper.Font.Common.Locator.FontDefinition,Spire.Pdf.General.Paper.Font.TTF.Internals.Parsing.TTFFileReader)">
            <summary>
            
            </summary>
            <param name="fontDefinition"></param>
            <param name="fontReader"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Font.Type42.Type42Builder.EncodeTableData(System.Byte[])">
            <summary>
            Encodes table data to ASCII hexadecimal string.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Pcl.PclResource.WriteFonts(Spire.Pdf.General.Paper.Pcl.PclDocument)">
            <summary>
            Write font with PCL XL Font Formats.
            </summary>
            <param name="writer">PCL writer.</param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Pcl.PclFont.#ctor(Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFont)">
            <summary>
            PCL font.
            </summary>
            <param name="font">TTFont</param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Pcl.PclFont.WriteFont(Spire.Pdf.General.Paper.Pcl.PclDocument)">
            <summary>
            Write font with PCL XL Font Formats.
            </summary>
            <param name="writer">PCL writer.</param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Pcl.PclFontBuilder.#ctor(Spire.Pdf.General.Paper.Pcl.PclDocument)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Pcl document writer.</param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Pcl.PclFontBuilder.WriteFont(Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFontSubset)">
            <summary>
            Write font with PCL XL Font Formats.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Pcl.PclFontBuilder.WriteFont(Spire.Pdf.General.Paper.Drawing.Fonts.TrueType.TTFont)">
            <summary>
            Write font with PCL XL Font Formats.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Paper.Pcl.PclBuilderOptions.ScaleForPrecison">
            <summary>
            PCL only support point unit "Int16",but PsPath support point unit "Float".
            1.When filling region is very small,overlap to line("Int16" to "Float").
            If only fill(no stroke),PsPath disappear.
            Bug_127/220/316/354/499,BaselineFile_8
            2.Glyph position loss precison.
            So,by scaling,advoid precison loss.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Paper.Pcl.Tags.SegmentIdentifier">
            <summary>
            Font segment identifier.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Paper.Pcl.Tags.SegmentIdentifier.GT">
            <summary>
            Global TrueType Data
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Paper.Pcl.Tags.SegmentIdentifier.NG">
            <summary>
            Null segment
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Paper.PostScript.PostScriptApsGlyphsIndicesReader">
            <summary>
            Reference Spire.Pdf.General.Paper.Drawing.Rendering.Xps.ApsGlyphsIndicesToXpsReader
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.PostScript.PostScriptApsGlyphsIndicesReader.IsValidXmlChar(System.Int32)">
            <summary>
            Reference Spire.Pdf.General.Paper.Drawing.Rendering.Ps.XmlDocumentBuilder,IsValidXmlChar(char c)
            </summary>
            <param name="utf32Char"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.PostScript.PostScriptApsGlyphsIndicesReader.GetFormattedIndicesCharWidth(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.PostScript.PostscriptBuilderContext.CheckCharRange(System.String)">
            <summary>
            check character range 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.PostScript.PostscriptBuilderContext.GetEncodeString(System.String)">
            <summary>
            Encode the font name,Because the font has illegal characters, Postscript does not know
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.PostScript.PostscriptWriter.WriteLine(System.String,System.String,System.String)">
            <summary>
            Writes text followed by new line characters.
            The string must contain only 7 bit characters.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Svg.FilterEffects.GaussianBlur.FilterEdge(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Edge softness.
            </summary>
            <param name="image">Target image.</param>
            <param name="mw">Width.</param>
            <param name="mh">Height.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Word.Doc.StreamsController.SetEmbedFontTag(System.IO.Stream)">
            <summary>
            write embedFont tag
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Word.ToFlowDoucment.Format.IFlowDocumentBuilder.WriteFooter(Spire.Pdf.General.Paper.Word.ToFlowDoucment.Format.FormatElement,System.Single,System.Int32)">
            <summary>
            html Split Page Number
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Word.ToFlowDoucment.Format.IFlowDocumentBuilder.GetCurrentPageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Paper.Word.ToFlowDoucment.Format.IFlowDocumentBuilder.JavaScript">
             <summary>
            html write javascript
             </summary>
        </member>
        <member name="T:Spire.Pdf.General.PdfSound">
            <summary>
            Represents sound embedded into pdf document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.PdfSound.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Spire.Pdf.General.PdfSound.Rate">
            <summary>
            Gets or sets the sampling rate, in samples per second (in Hz).
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfSound.Bits">
            <summary>
            Gets or sets the number of bits per sample value per channel.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfSound.Encoding">
            <summary>
            Gets or sets the encoding format for the sample data.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfSound.Channels">
            <summary>
            Gets or sets the number of sound channels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfSound.FileName">
            <value>The name of the file.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfSound.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.General.Render.ColorSpace.ColorCache">
            <summary>
            Provides color caching
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Render.ColorSpace.LastColorCache">
            <summary>
            Provides color caching of last color
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.Decode.CCITTFaxDecode.GetDicSplitPdfString(Spire.Pdf.Primitives.PdfString)">
            <summary>
            Get PdfDictionary Split PdfString
            </summary>
            <param name="value">PdfString value</param>
            <returns>PdfDictionary dic</returns>
        </member>
        <member name="F:Spire.Pdf.General.Render.Decode.FlateStream.ErrorBehaviorEnum.Fail">
            <summary>
            fail (by default)
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.Decode.FlateStream.ErrorBehaviorEnum.ReturnSuccessBytes">
            <summary>
            return something successfully read
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.Decode.TIFFFaxDecoder.#ctor(System.Int64,System.Int32,System.Int32)">
            @param fillOrder   The fill order of the compressed data bytes.
            @param w
            @param h
        </member>
        <member name="T:Spire.Pdf.General.Render.Decode.Tiff.zLib.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <!-- 对于成员“M:Spire.Pdf.General.Render.Font.FontSupport.#cctor”忽略有格式错误的 XML 注释 -->
        <member name="M:Spire.Pdf.General.Render.Font.FontSupport.GetCharFromAdobeGlyphListByName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.FontSupport.GetNameEncoding(System.Int32)">
            <summary>
            get the name of a glyph from its encoding value (NOT the character
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.OpenTypeFile.CMap.WriteShort(System.Int16)">
            <summary>
            Writes short value into the font stream
            </summary>
            <param name="value">Short value to be written</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.OpenTypeFile.CMap.WriteInt(System.Int32)">
            <summary>
            Writes integer value into the font stream
            </summary>
            <param name="value">Integer value to be written</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.OpenTypeFile.CMap.WriteString(System.String)">
            <summary>
            Writes string value into the font stream
            </summary>
            <param name="value">String value to be written</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.OpenTypeFile.CMap.WriteBytes(System.Byte[])">
            <summary>
            Write the bytes into the font stream
            </summary>
            <param name="buffer">byte array to be written</param>
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.OpenTypeFile.Table_name.PLATFORMID_UNICODE">
             <summary>
             Values for platformID
             </summary>
            
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.OpenTypeFile.Table_name.ENCODINGID_MAC_ROMAN">
             <summary>
             Values for platformSpecificID if platform is Mac
             </summary>
            
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.OpenTypeFile.Table_name.ENCODINGID_UNICODE_DEFAULT">
             <summary>
             Values for platformSpecificID if platform is Unicode
             </summary>
            
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.OpenTypeFile.Table_name.LANGUAGEID_MAC_ENGLISH">
             <summary>
             Values for language ID if platform is Mac
             </summary>
            
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.OpenTypeFile.Table_name.NAMEID_COPYRIGHT">
             <summary>
             Values for nameID
             </summary>
            
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.PDFFontEncoding.GetCMapObj(System.String)">
            <summary>
            Get Cmap  by MapName
            </summary>
            <param name="cMapName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.PDFFontEncoding.CaluateByteNumMapToGlyph">
            <summary>
            Caluate how many bytes(byte) map(maps) one glyph
            </summary>
            <returns>The number of bytes(byte) which map(maps) to glpyh </returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.PDFFontEncoding.DecodeGBK(System.String)">
            <summary>
            Decodes the input string,Encoding is GBK.
            </summary>
            <param name="text">The input string.</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.General.Render.Font.TrueTypeFont.GlyphOutline">
            <summary>
            Description of Glyph.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Render.Font.TrueTypeFont.GlyphMatrix">
            <summary>
            Description of GlyphMatrix.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.Font.TrueTypeFont.GlyphMatrix.HAdvance">
            <summary>
            Max width value.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Render.Font.TrueTypeFont.IFont">
            <summary>
            Description of IFont.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Render.Font.TrueTypeFont.OutlineGlyph">
            <summary>
            Description of Glyph.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Render.Font.TrueTypeFont.TrueTypeFont">
            <summary>
            Description of TrueTypeFont.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.TrueTypeFont.TrueTypeFont.GetGlyph(System.Int32,System.Single)">
            <summary>
            Get the outline glyph for glyph of a given character code and name.
            </summary>
            <param name="glyphId"></param>        
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.TrueTypeFont.TrueTypeFont.GetArrayPoint(Spire.Pdf.General.Render.Font.OpenTypeFile.Table_glyf.SimpleGlyph.Coordinate[],System.Int32,System.Int32)">
            <summary>
            Gets the path to determine wherther you need to move the point ,return results
            </summary>
            <param name="coordinates">character path</param>
            <param name="startIndex"> int startIndex</param>
            <param name="endIndex"> int endIndex</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.TrueTypeFont.TrueTypeFont.ReCalculateLineValues">
            <summary>
            Recalculate line values
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.TTFFont.GetCharacterMapTable(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            This outputs individual glyph index to character code mapping for each char.
            If you are doing any work on CMap, you need to open the resulting file in Adobe Reader, 
            select and copy text, paste it to notepad and see if it was correctly mapped to characters. 
            It is especially important to do so for TestUnicode.doc.
            </summary>
            <param name="m_fontDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.TTFFont.GetOutline(System.Char,System.String,System.Single,Spire.Pdf.General.TypeEncodingCmap)">
            <summary>
            Get the outline of a character given the character name or src char
            </summary>
            <param name="srcChar"></param>
            <param name="name"></param>
            <param name="width"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.Type1CFont.GetGlyphById(System.Int32)">
            <summary>
             Get a glyph outline by glyphId
            </summary>
            <param name="glyphId"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.Type1CFont.GetGlyphById(System.Int32,System.String,System.Single)">
            <summary>
            Get a glyph outline by glyphId or name
            </summary>
            <param name="glyphId"></param>
            <param name="name"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.Type1CFont.FindoffsetfromEncode(System.Char,Spire.Pdf.General.TypeEncodingCmap)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Font.Type1CFont.FindIndexFormEncodeByCharName(Spire.Pdf.General.TypeEncodingCmap,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="charName"></param>
            <returns></returns>
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.Type3Font.charCache">
            <summary>
            a cache of glyphs indexed by character 
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.Font.Type3Font.m_CharacterSpacing">
            <summary>
            Character Spacing width
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.Font.Type3Font.CharacterSpacing">
            <summary>
            Set Character Spacing width
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Render.ImageQualityMode">
            <summary>
            specify image quality level
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.ImageQualityMode.Default">
            <summary>
            default quality
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.ImageQualityMode.HighQuality">
            <summary>
            high quality
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.Page.IgnoreCase">
            <summary>
            find text ignorecase
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.Page.FindText">
            <summary>
            Set find text
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.Page.FindTextHighLightColor">
            <summary>
            find text color
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.DrawHighLight(System.Drawing.Graphics,System.String,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="graphic"></param>
            <param name="findText"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Spire.Pdf.General.Render.Page.BorderPen">
            <summary>
            draw border pen
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.Draw(System.Drawing.Graphics,System.Single,System.Single,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            draw page content and annot
            </summary>
            <param name="graphic"></param>
            <param name="vScrollValue"></param>
            <param name="zoomFactor"></param>
            <param name="printing"></param>
            <param name="panelWidth"></param>
            <param name="eastAsianFont"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CreatePageBuffer">
            <summary>
             Create Page iamge Buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CreatePage(System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            create page image,draw content and annot
            </summary>
            <param name="isWriteWarning"></param>
            <param name="liMaxScale"></param>
            <param name="eastAsianFont"></param>
            <param name="isDrawPageContent"></param>
            <param name="isDrawPageAnnot"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CreatePageAnnotBuffer(System.Boolean,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Create Page annot Buffer
            </summary>
            <param name="isWriteWarning">bool isWriteWarning</param>
            <param name="zoomFactor">float zoomFactor</param>
            <param name="eastAsianFont">bool eastAsianFont</param>
            <param name="isDrawPageAnnot">bool isDrawPageAnnot</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CreatePageBuffer(System.Boolean,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Create Page image Buffer,it's eastAsianFont
            </summary>
            <param name="isWriteWarning">bool isWriteWarning</param>
            <param name="zoomFactor">float zoomFactor</param>
            <param name="eastAsianFont">bool eastAsianFont</param>
            <param name="isDrawPageAnnot">bool isDrawPageAnnot</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CreatePageBuffer(System.Boolean,System.Single,System.Int32,System.Int32)">
            <summary>
            Create Page iamge Buffer
            </summary>
            <param name="isWriteWarning">bool isWriteWarning</param>
            <param name="zoomFactor">float zoomFactor</param>
            <param name="dpiX">int dpiX</param>
            <param name="dpiY">int dpiY</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CreateBitmap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create Bitmap,set width,height and dpi
            </summary>
            <param name="width">Bitmap width</param>
            <param name="height">Bitmap height </param>
            <param name="dpiX">Bitmap dpiX</param>
            <param name="dpiY">Bitmap dpiY</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.Page.CheckEvalExpired(System.Drawing.Graphics)">
            <summary>
            write Warning info
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="T:Spire.Pdf.General.Render.ImageRenderEventHandler">
            <summary>
            Provides image render events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfCommon.DegreesToRadians(System.Double)">
            <summary>
            Converts an angle in degrees to radians.
            </summary>
            <param name="angleInDegrees">Double value of angle in degrees to convert.</param>
            <returns>The value of the angle in radians.</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfCommon.RadiansToDegrees(System.Double)">
            <summary>
            Converts an angle in radians to degrees.
            </summary>
            <param name="angleInRadians">Double value of angle in radians to convert.</param>
            <returns>The value of the angle in degrees.</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfCommon.DoApplyMask(System.Drawing.Bitmap,Spire.Pdf.Primitives.PdfArray)">
            <summary>
            Apply the mask when the mask format is PdfArray.
            </summary>
            <param name="input"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfCommon.CheckLineFromPath(System.String)">
            <summary>
            According to Path to determine whether it is a straight line. If All points of X or Y are equal, then is is a straight line
            </summary>
            <param name="pathData"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfCommon.GetOffset(System.String)">
            <summary>
            More than two offsets
            </summary>
            <param name="strOffsetX">string strOffset)</param>
            <returns>one offset</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.AdobeGlyphList.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.AdobeGlyphList.Dispose">
            <summary>
            Clean up Memory
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.ContentParser.ReadBIData(System.Collections.Generic.List{System.Byte},System.Char,System.Char,System.Int32@)">
            <summary>
            read bi data
            </summary>
            <param name="eiBytes"></param>
            <param name="ch2"></param>
            <param name="nextChar"></param>
            <param name="endPosition"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.ContentParser.ParseInlineImage">
             <summary>
             Parse an inline image.  An inline image starts with BI (already
             read, contains a dictionary until ID, and then image data until
             EI.
             </summary>
            
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.BuildIFontFromSystemFont(System.String)">
            <summary>
            Creates the I font.
            </summary>
            <param name="fontName">Name of the font.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.GetMatchFontName(System.Collections.ArrayList,System.String)">
            <summary>
            Match Font by fontName
            </summary>
            <param name="list"></param>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.AddFontToPrivateList(System.Byte[])">
            <summary>
            Add fake font to private list.
            </summary>
            <param name="fontData"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.DrawType3FontFromGraphicsData(Spire.Pdf.General.Render.PdfToImageRenderer,Spire.Pdf.General.Render.TextElement,System.Drawing.Graphics)">
            <summary>
            Draw text of embed font to page
            </summary>
            <param name="render">Render object</param>
            <param name="element"></param>
            <param name="g"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.GetCharWidthFromFont(Spire.Pdf.General.Render.PdfToImageRenderer,Spire.Pdf.General.Render.TextElement,System.Drawing.Font,System.Char)">
            <summary>
            
            </summary>
            <param name="render"></param>
            <param name="element"></param>
            <param name="textFont"></param>
            <param name="glyphChar"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.ByteArrayToFile(System.String,System.Byte[])">
            <summary>
            Function to save byte array to a file
            </summary>
            <param name="_FileName">File name to save byte array</param>
            <param name="_ByteArray">Byte array to save to external file</param>
            <returns>Return true if byte array save successfully, if not return false</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.GetByteNum">
            <summary>
            Get the number of bytes map to one glyph
            </summary>
            <returns>The number of bytes which map to one glyph</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.SplitDecodeTextString(System.String)">
            <summary>
            Spilt string
            </summary>
            <param name="decodedText">The decode string</param>
            <param name="structure">The strucure</param>
            <returns>An array of decode</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.EscapeSymbols(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.EscapeQuotes(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.Spilts(System.String,System.String)">
            <summary>
            Spirt string by opstr
            </summary>
            <param name="text"></param>
            <param name="opstr"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.IsHexString(System.String)">
            <summary>
            Verify hex number.
            </summary>
            <param name="val">The hex number.</param>
            <returns>Thue,if is hex number.False,Otherwise.</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.GetLiteralString(System.String,System.Boolean)">
            <summary>
            Parse and get the content behind the char of '\'
            </summary>
            <param name="encodedText">The text be Parse</param>
            <param name="isRenderTTF"></param>
            <returns>The text be parsed</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.MapDifferences(System.String,System.Boolean)">
            <summary>
            Character map table for embed font condition.
            </summary>
            <param name="encodedText"></param>
            <param name="isNoEmbedFont"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.SkipEscapeSequence(System.String)">
            <summary>
            Remove eascape text.
            </summary>
            <param name="text"></param>
            <returns></returns>
            
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfElement.PdfFontStructure.IsEmbed">
            <summary>
            Inidcates whether font is embed.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PageResourceLoader.GetPatternGraphicResources(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
             Collects all the Pattern elements in the pdf document
            </summary>
            <param name="resourceDictionary">containing all the resources of the document</param>
            <returns>dictionary of Pattern elements</returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.PageResourceLoader.GetOptValueFromOpt(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Get opttion value from PdfArray
            </summary>
            <param name="ipri"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.ReplaceResources(Spire.Pdf.Primitives.PdfDictionary,System.String,Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            
            </summary>
            <param name="xObjDictionary"></param>
            <param name="CmdParameters"></param>
            <param name="newObj"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.GetPdfPageResources">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.RenderXobject(System.Drawing.Graphics,Spire.Pdf.General.Render.PdfElement.PdfPageResources,Spire.Pdf.General.Render.Page)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="resources"></param>
            <param name="imageRender"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.RenderXobjectTilingPatternBrush(System.Drawing.Graphics,Spire.Pdf.General.Render.PdfElement.PdfPageResources,Spire.Pdf.General.Render.Page)">
            <summary>
            Bug654
            </summary>
            <param name="g"></param>
            <param name="resources"></param>
            <param name="page"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.Render(Spire.Pdf.General.Render.PdfElement.PdfPageResources)">
            <summary>
            get PdfRecordCollection from resources
            </summary>
            <param name="resources"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.RenderImage(Spire.Pdf.General.Render.PdfToImageRenderer,System.Drawing.Graphics,Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Render inline image.
            </summary>
            <param name="g"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfElement.XObjectElement.RenderForAnnotationsAp(Spire.Pdf.General.Render.PdfElement.PdfPageResources)">
            <summary>
            for Ap Resources
            </summary>
            <param name="resources"></param>
            <returns></returns>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfImageDecoder.m_ImageQualityMode">
            <summary>
            specify the quality level of decode image
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfImageDecoder.ImageQualityMode">
            <summary>
            specify the quality level of decode image
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfImageDecoder.ParamColumns">
            <summary>
            get columns from DecodeParms
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfImageDecoder.ParamColors">
            <summary>
            get colors from DecodeParms
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfImageDecoder.ImageMask">
            <summary>
            Gets Image mask.
            </summary>        
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfImageDecoder.GetImageFromStream(System.IO.Stream)">
            <summary>
            Stream stream  ,Bug_337
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfImageDecoder.GetImageDeviceGrayForLZWDecode(System.IO.Stream)">
            <summary>
            Get deviceGray image for Filter LZWDecode
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfImageDecoder.GetJpegImageDeviceGray(Spire.Pdf.General.Render.ColorSpace.PDFColorSpace,System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get Bitmap Stream  from DeviceGray Color Space 
            </summary>
            <param name="colorspace">PDFColorSpace colorspace</param>
            <param name="data">Stream data</param>
            <param name="grayWidth">int grayWidth</param>
            <param name="grayHeight">int grayHeight</param>
            <param name="mask">bool mask</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfImageDecoder.GetJpegImageDeviceGray(System.IO.Stream,System.Boolean)">
            <summary>
            Get Bitmap Stream  from DeviceGray Color Space 
            </summary>
            <param name="data">image Stream</param>
            <param name="mask">bool mask</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfImageDecoder.GetColorSpace(Spire.Pdf.Primitives.PdfDictionary,System.Boolean)">
            <summary>
            Get color space name
            </summary>
            <param name="imageDict"></param>
            <param name="allowIndexed"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfImageDecoder.GetSubColorSpace(Spire.Pdf.Interfaces.IPdfPrimitive,System.Boolean)">
            <summary>
            
            </summary>
            <param name="imageDict"></param>
            <param name="allowIndexed"></param>
            <returns></returns>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_UserToDeviceSpaceTransform">
            <summary>
            mapping Transform from user space to device space 
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.loPath">
            <summary>
            clip rectangleF for form field
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_highLightFormFieldColor">
            <summary>
            highLight color for form field
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_enabledHighLightFormField">
            <summary>
            whether enabled HighLight for FormField
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_TjAfterIsTranslate">
            <summary>
            Determine whether there is Tj in front of Td,TD,cm,T* ,TL,Tw,Tc,Tz. if not ,you need to calculate the translation
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_UserDefinedTextMatrix">
            <summary>
            Save the translation data
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_SaveCurrentTmMatrix">
            <summary>
            From BT,save the current Tm matrix
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_textLeading">
            <summary>
            Text leading
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_textScaling">
            <summary>
            horizontal scaling 
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_wordSpacing">
            <summary>
            word spacing 
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_currentTextElement">
            <summary>
            Current text element
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_characterSpacing">
            <summary>
            Character spacing.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_colorspaceTable">
            <summary>
            Colorspace table of page resource
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_patternTable">
            <summary>
            Pattern table of page resource
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToImageRenderer.m_GraphicObjectData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfToImageRenderer.BoxRectangle">
             <summary>
            set Box Rectangle,when dictionary FT=Tx
             </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfToImageRenderer.FormFieldFT">
             <summary>
            set FT type from form field
             </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfToImageRenderer.UserToDeviceSpaceTransform">
            <summary>
            mapping Transform from user space to device space 
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.#ctor(System.Drawing.Graphics,Spire.Pdf.General.Render.PdfElement.PdfPageResources,System.Boolean)">
            <summary>
            Extract Signature As Images
            </summary>
            <param name="g"></param>
            <param name="resources"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.#ctor(Spire.Pdf.General.Render.PdfElement.PdfRecordCollection,Spire.Pdf.General.Render.PdfElement.PdfPageResources,System.Drawing.Graphics,Spire.Pdf.General.Render.Page,System.Boolean,Spire.Pdf.PdfPrintPageScaling)">
            <summary>
            Print Pdf Page to Image
            </summary>
            <param name="contentElements">PdfRecordCollection contentElements</param>
            <param name="resources">PdfPageResources resources</param>
            <param name="g">Graphics g</param>
            <param name="page">Current Page</param>
            <param name="newPage">Whether new page</param>
            <param name="printPageScaling">Pdf Print Page Scale type</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.LoadHeader(Spire.Pdf.General.Render.Page)">
            <summary>
             Set page RotateAngle
            </summary>
            <param name="page">Current  Pdf Page</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.LoadHeader(Spire.Pdf.General.Render.Page,Spire.Pdf.PdfPrintPageScaling)">
            <summary>
            Set page RotateAngle
            </summary>
            <param name="page">Current  Pdf Page</param>
            <param name="printPageScaling">Pdf Print Page Scale type</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.AddBezierCurve(System.String[])">
            <summary>
            
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.AddBezierCurve2(System.String[])">
            <summary>
            
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.AddBezierCurve3(System.String[])">
            <summary>
            
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.AddLine(System.String[])">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.BeginPath(System.String[])">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.PdfToXpsExecuteDoCommand(System.String[],Spire.Pdf.General.Paper.Drawing.Fonts.PdfExternalFontCache)">
            <summary>
            execute do command
            </summary>
            <param name="xobjectElement"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.CheckWhetherDrawHighLightFormField">
            <summary>
            whether enabled highLight for formField
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.DrawAndFillPathType3Font(System.Drawing.Drawing2D.FillMode,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Draw Type3Font
            </summary>
            <param name="mode"></param>
            <param name="Type3FontPath"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.SetBoxRectangle(System.String[])">
            <summary>
            Get Rectangle from pdf command.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.GetClipRectangle(System.String[])">
            <summary>
            Get Rectangle from pdf dictionary.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.SetBBoxForForm(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set BBox for Form object.
            </summary>
            <param name="x,y,x1,y1,y,x1,y1"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.FixedZeroOfGapsForDashPattern(System.Single[]@,System.Single@)">
            <summary>
            
            </summary>
            <param name="dashPattern"></param>
            <param name="dashOffset"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.FixedZeroOfDashesForDashPattern(System.Single[],System.Single,System.Drawing.Pen)">
            <summary>
            
            </summary>
            <param name="dashPattern"></param>
            <param name="dashOffset"></param>
            <param name="pen"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.ApplyStrokingColor(System.String,System.Single[])">
            <summary>
            Apply Color
            </summary>
            <param name="type"></param>
            <param name="colorRed"></param>
            <param name="colorGreen"></param>
            <param name="colorBlue"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.GetXObjectFromAnnotationsAp(System.String[])">
             <summary>
            Get Resources obj from Xobject
             </summary>
             <param name="xobjectElement"></param>
             <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.RenderForAnnotationsAp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.DrawPageContent">
            <summary>
            draw page content
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.DrawPageAnnot">
            <summary>
            draw page annot
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfToImageRenderer.IsDisposeFont">
            <summary>
            Modify Bug1801,pdf to xps(false),font whether need dispose
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.GetFormWidget">
            <summary>
            get form field objcet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.AddInsetForParentAP(Spire.Pdf.Primitives.PdfDictionary,System.Drawing.RectangleF,System.String,System.Boolean)">
            <summary>
            read ap content from Parent
            </summary>
            <param name="annotElements"></param>
            <param name="rect"></param>
            <param name="annotType"></param>
            <param name="llffDisplay"></param>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfToImageRenderer.NeedPAPP">
            <summary>
            NeedAppearances value 
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.AddInsetForAP(Spire.Pdf.Primitives.PdfDictionary,System.Drawing.RectangleF,System.String)">
            <summary>
            
            </summary>
            <param name="annotElements"></param>
            <param name="rect"></param>
            <param name="annotType"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.GetFontInfoFromDA(System.String)">
            <summary>
            
            </summary>
            <param name="DAstring"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.ExecuteCommand(Spire.Pdf.General.Render.PdfElement.PdfRecord)">
            <summary>
            Execute pdf command.
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.RestoreAnnotsGraphicObjectData">
            <summary>
            initialize annot state
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.RenderTextElement(System.String[],System.String)">
            <summary>
            Render text element
            </summary>
            <param name="textElements">text elements</param>
            <param name="tokenType">token type</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToImageRenderer.RenderText(System.String,Spire.Pdf.General.Render.PdfElement.PdfFontStructure,System.String,System.Boolean)">
            <summary>
            Render text to pdf drawing context.
            </summary>
            <param name="tokenType"></param>
            <param name="structure"></param>
            <param name="decodedText"></param>
            <param name="increaseWidth"></param>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_ImageQualityMode">
            <summary>
            specify the quality level of render image
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_TjAfterIsTranslate">
            <summary>
            Determine whether there is Tj in front of Td,TD,cm,T* ,TL,Tw,Tc,Tz. if not ,you need to calculate the translation
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_UserDefinedTextMatrix">
            <summary>
            Save the translation data
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_textLeading">
            <summary>
            Text leading
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_textScaling">
            <summary>
            horizontal scaling 
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_wordSpacing">
            <summary>
            word spacing 
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_currentTextElement">
            <summary>
            Current text element
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_characterSpacing">
            <summary>
            Character spacing.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_colorspaceTable">
            <summary>
            Colorspace table of page resource
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_patternTable">
            <summary>
            Pattern table of page resource
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.PdfToPsRenderer.m_GraphicObjectData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfToPsRenderer.ImageQualityMode">
            <summary>
            specify the quality level of render image
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddBezierCurve(System.String[])">
            <summary>
            
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddBezierCurve1(System.String[])">
            <summary>
            
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddBezierCurve2(System.String[])">
            <summary>
            AddBezierCurve2
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddLine(System.String[])">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.BeginPath(System.String[])">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.GetClipRectangle(System.String[])">
            <summary>
            Get Rectangle from pdf dictionary.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.ApplyStrokingColor(System.Boolean,System.Single[])">
            <summary>
            Apply Color Space,Bug-654
            </summary>
            <param name="isNonStroking"></param>
            <param name="colorRGB"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.Process">
            
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.GetFieldName(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Get form Field Name
            </summary>
            <param name="annotDic"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddInsetForAP(Spire.Pdf.Primitives.PdfDictionary,System.Drawing.RectangleF,System.String)">
            <summary>
            
            </summary>
            <param name="annotElements"></param>
            <param name="rect"></param>
            <param name="annotType"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddInsetForParentAP(Spire.Pdf.Primitives.PdfDictionary,System.Drawing.RectangleF,System.String,System.Boolean)">
            <summary>
            read ap content from Parent
            </summary>
            <param name="annotElements"></param>
            <param name="rect"></param>
            <param name="annotType"></param>
            <param name="llffDisplay"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.AddInsetForDA(Spire.Pdf.Primitives.PdfDictionary,System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="annotElements"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.ExecuteCommand(Spire.Pdf.General.Render.PdfElement.PdfRecord)">
            <summary>
            Execute pdf command.
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.RenderTextElement(System.String[],System.String)">
            <summary>
            Render text element
            </summary>
            <param name="textElements">text elements</param>
            <param name="tokenType">token type</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.PdfToPsRenderer.RenderText(System.String,Spire.Pdf.General.Render.PdfElement.PdfFontStructure,System.String,System.Boolean)">
            <summary>
            Render text to pdf drawing context.
            </summary>
            <param name="tokenType"></param>
            <param name="structure"></param>
            <param name="decodedText"></param>
            <param name="increaseWidth"></param>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfRenderContext.Presenter">
            <summary>
            Gets the presenter.
            </summary>
            <value>The presenter.</value>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfRenderContext.GraphicsState">
            <summary>
            Graphic stats
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfRenderContext.NonstrokingColorSpace">
            <summary>
            Gets or sets current colorsapce.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.PdfRenderContext.StrokingColorSpace">
            <summary>
            Gets or sets Stroking colorsapce.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.Render.TextElement.m_wordSpacing">
            <summary>
            word spacing 
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.TextElement.RenderText(System.Drawing.Graphics,Spire.Pdf.General.Render.PdfToImageRenderer,System.Boolean,System.Boolean)">
            <summary>
            Render text embed font or installed system font
            </summary>
            <param name="g"></param>
            <param name="render"></param>
            <param name="IncreaseWidth"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.TextElement.RenderTextWithNativeFont(System.Drawing.Graphics,Spire.Pdf.General.Render.PdfToImageRenderer,System.Boolean,System.Boolean)">
            <summary>
            Render text using installed system font.
            </summary>
            <param name="g"></param>
            <param name="render"></param>
            <param name="IncreaseWidth"></param>
        </member>
        <member name="M:Spire.Pdf.General.Render.TextElement.GetCharFromStdNameEncoding(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Pdf.General.Render.TextElement.WordSpacing">
            <summary>
            word spacing 
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.ViewLayer.IPresenter.DisposeBrush">
            <summary>
            Dispose ImageBrush
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Render.ViewLayer.IPresenter.Brush">
            <summary>
            used in pdf2xps when it has pattern
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.ViewLayer.PresentationFactory.CreateTextureBrush(System.Byte[],Spire.Pdf.General.Paper.Drawing.PsMatrix,Spire.Pdf.General.Render.ViewLayer.LayerType)">
            <summary>
            Create the brush
            </summary>
            <param name="imageBytes">The byte array of image for PsTextureBrush</param>
            <param name="matrix">Image transform</param>
            <param name="layerType">The presenter type</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.General.Render.ViewLayer.PresentationFactory.CreateLinearGradientBrush(System.Drawing.RectangleF,Spire.Pdf.General.Paper.Drawing.PsColor,Spire.Pdf.General.Paper.Drawing.PsColor,Spire.Pdf.General.Render.ViewLayer.LayerType)”忽略有格式错误的 XML 注释 -->
        <member name="M:Spire.Pdf.General.Render.ViewLayer.PresentationFactory.CreateHatchBrush(System.Drawing.Drawing2D.HatchStyle,Spire.Pdf.General.Paper.Drawing.PsColor,Spire.Pdf.General.Paper.Drawing.PsColor,Spire.Pdf.General.Render.ViewLayer.LayerType)">
            <summary>
            Create the brush.
            </summary>
            <param name="hatchStyle">The hatch style.</param>
            <param name="foreColor">The fore color.</param>
            <param name="backColor">The back color.</param>
            <param name="layerType">The presenter type.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.General.Render.ViewLayer.Presenter.DisposeBrush">
            <summary>
            Dispose ImageBrush
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Render.ViewLayer.PsLayer.BrushLayer.#ctor(System.Byte[],Spire.Pdf.General.Paper.Drawing.PsMatrix)">
            <summary>
            Initializes a new instance of the BrushLayer
            </summary>
            <param name="imageBytes">The byte array of image for PsTextureBrush</param>
            <param name="matrix">Image Transform</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.ViewLayer.PsLayer.BrushLayer.#ctor(System.Drawing.RectangleF,Spire.Pdf.General.Paper.Drawing.PsColor,Spire.Pdf.General.Paper.Drawing.PsColor)">
            <summary>
            Initializes a new instance of the BrushLayer.
            </summary>
            <param name="rect">A rectangular region that defines the starting and ending points of the gradient.</param>
            <param name="startColor">Start Color.</param>
            <param name="endColor">End Color.</param>
        </member>
        <member name="M:Spire.Pdf.General.Render.ViewLayer.PsLayer.BrushLayer.#ctor(System.Drawing.Drawing2D.HatchStyle,Spire.Pdf.General.Paper.Drawing.PsColor,Spire.Pdf.General.Paper.Drawing.PsColor)">
            <summary>
            Initializes a new instance of the BrushLayer
            </summary>
            <param name="hatchStyle">The hatch style.</param>
            <param name="foreColor">The fore color.</param>
            <param name="backColor">The back color.</param>
        </member>
        <member name="T:Spire.Pdf.General.SingleByteEncoding">
            The interface defines a 1-byte character encoding (with 256 characters).
        </member>
        <member name="M:Spire.Pdf.General.SingleByteEncoding.getName">
            Returns the encoding's name.
            @return the name of the encoding
        </member>
        <member name="M:Spire.Pdf.General.SingleByteEncoding.mapChar(System.Char)">
            Maps a Unicode character to a code point in the encoding.
            @param c the Unicode character to map
            @return the code point in the encoding or 0 (=.notdef) if not found
        </member>
        <member name="M:Spire.Pdf.General.SingleByteEncoding.getCharNameMap">
            Returns the array of character names for this encoding.
            @return the array of character names
                             (unmapped code points are represented by a ".notdef" value)
        </member>
        <member name="M:Spire.Pdf.General.SingleByteEncoding.getUnicodeCharMap">
            Returns a character array with Unicode scalar values which can be used to map encoding
            code points to Unicode values. Note that this does not return all possible Unicode values
            that the encoding maps.
            @return a character array with Unicode scalar values
        </member>
        <member name="T:Spire.Pdf.General.PdfSoundEncoding">
            <summary>
            The encoding format for the sample data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfSoundEncoding.Raw">
            <summary>
            Unspecified or unsigned values in the range 0 to 2^B - 1.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfSoundEncoding.Signed">
            <summary>
            Twos-complement values.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfSoundEncoding.MuLaw">
            <summary>
            M-lawencoded samples.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfSoundEncoding.ALaw">
            <summary>
            A-lawencoded samples.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.PdfSoundChannels">
            <summary>
            The number of sound channels.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfSoundChannels.Mono">
            <summary>
            One channel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfSoundChannels.Stereo">
            <summary>
            Two channels.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.PdfDestinationMode">
            <summary>
            Enumeration that represents fit mode.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfDestinationMode.Location">
            <summary>
            Display the page designated by page, with the coordinates (left, top) positioned
            at the top-left corner of the window and the contents of the page magnified
            by the factor zoom. A NULL value for any of the parameters left, top, or
            zoom specifies that the current value of that parameter is to be retained unchanged.
            A zoom value of 0 has the same meaning as a NULL value.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfDestinationMode.FitToPage">
            <summary>
            Display the page designated by page, with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically. If
            the required horizontal and vertical magnification factors are different, use
            the smaller of the two, centering the page within the window in the other
            dimension.
            </summary>
        </member>
        <member name="F:Spire.Pdf.General.PdfDestinationMode.FitH">
            <summary>
            Display the page designated by page, with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified
            just enough to fit the entire width of the page within the window.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.FormFieldFTType">
            <summary>
            Pdf version 1-7 ,on page 675
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.Find.PdfTextFind">
            <summary>
            The class representing a result of searching designated text from PDF page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.SearchText">
            <summary>
             Gets  search text of this System.String structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.MatchText">
            <summary>
            Gets  match text of this System.String structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.OuterText">
            <summary>
            Gets  text which is including the searched text of this System.String structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.LineText">
            <summary>
            Gets all the text of the line where covers the searched text of this System.String structure .
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.SearchPage">
            <summary>
            Gets page which is including the searched text of this Spire.Pdf.PdfPageBase structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.SearchPageIndex">
            <summary>
            Gets index of page which is including the searched text of this System.Int32 structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.Position">
            <summary>
             Gets the position of the searched text of this System.Drawing.PointF structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.Size">
            <summary>
             Gets the size of the searched text of this System.Drawring SizeF structure.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.Find.PdfTextFind.Bounds">
            <summary>
            Gets the bounds of the searched text of this System.Drawring RectangleF structure.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Find.PdfTextFind.ApplyHighLight">
            <summary>
            apply hight light of the seached text
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Find.PdfTextFind.ApplyRecoverString(System.String)">
            <summary>
            apply hight light of the seached text
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Find.PdfTextFind.ApplyRecoverString(System.String,System.Boolean)">
            <summary>
            apply hight light of the seached text,with unicode
            </summary>
            <param name="newvalue"></param>
            <param name="unicode"></param>
        </member>
        <member name="M:Spire.Pdf.General.Find.PdfTextFind.ApplyRecoverString(System.String,System.Drawing.Color)">
            <summary>
            apply hight light of the seached text
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.Find.PdfTextFind.ApplyRecoverString(System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            apply hight light of the seached text,with unicode
            </summary>
            <param name="newvalue"></param>
            <param name="backColor"></param>
        </member>
        <member name="T:Spire.Pdf.General.Find.PdfTextFindCollection">
            <summary>
            The class representing all the resuls of searching designated text from PDF page
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.PdfDestination">
            <summary>
            Represents an anchor in the document where bookmarks or annotations can direct when clicked.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.PageNumber">
            <summary>
            The zero based page number.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.PdfDestination.#ctor(Spire.Pdf.PdfPageBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.General.PdfDestination.#ctor(Spire.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Spire.Pdf.General.PdfDestination.#ctor(System.Int32,System.Drawing.PointF,System.Single)">
            <summary>
            Initializes a new instance of PdfDestination.
            </summary>
            <param name="pageNumber">The zero based page number.</param>
            <param name="location">The location in the page based on the lower-left coordinate system.</param>
            <param name="zoom">The zoom factor.</param>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.Zoom">
            <summary>
            Gets or sets zoom factor.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.Page">
            <summary>
            Gets or sets a page where the destination is situated.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.Mode">
            <summary>
            Gets or sets mode of the destination.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.Location">
            <summary>
            Gets or sets a location of the destination.
            </summary>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfDestination.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets pdf primitive representing this object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.General.PdfEmbeddedFileSpecification">
            <summary>
            Represents specification of embedded file.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.PdfEmbeddedFileSpecification.#ctor(System.String)">
            <param name="fileName">file name</param>
        </member>
        <member name="M:Spire.Pdf.General.PdfEmbeddedFileSpecification.#ctor(System.String,System.Byte[])">
            <param name="fileName">Name of the file.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Spire.Pdf.General.PdfEmbeddedFileSpecification.#ctor(System.String,System.IO.Stream)">
            <param name="fileName">Name of the file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="P:Spire.Pdf.General.PdfEmbeddedFileSpecification.FileName">
            <value></value>
        </member>
        <member name="P:Spire.Pdf.General.PdfEmbeddedFileSpecification.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfEmbeddedFileSpecification.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfEmbeddedFileSpecification.MimeType">
            <summary>
            Gets or sets the MIME type of the embedded file.
            </summary>
            <value>The MIME type of the embedded file.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfEmbeddedFileSpecification.CreationDate">
            <summary>
            Gets or sets creation date.
            </summary>
            <value>Creation date.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfEmbeddedFileSpecification.ModificationDate">
            <summary>
            Gets or sets modification date.
            </summary>
            <value>Modification date.</value>
        </member>
        <member name="M:Spire.Pdf.General.PdfEmbeddedFileSpecification.ModifyEmbeddedFile(System.Byte[])">
            <summary>
            Modify embeddedFile data
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Spire.Pdf.General.PdfFileSpecificationBase">
            <summary>
            Represents base class for file specification objects.
            </summary>
        </member>
        <member name="M:Spire.Pdf.General.PdfFileSpecificationBase.#ctor(System.String)">
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Spire.Pdf.General.PdfFileSpecificationBase.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Spire.Pdf.General.PdfFileSpecificationBase.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="M:Spire.Pdf.PdfCacheCollection.GetCachedObject(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Get cached item.
            </summary>
            <param name="group">
            Cache group which all objects in group share the same data.
            </param>
            <returns>Any cached object,because all objects in group share the same data.</returns>
        </member>
        <member name="F:Spire.Pdf.BitFile.blocks_">
            note this also indicates gif format BITFile. *
        </member>
        <member name="M:Spire.Pdf.BitFile.#ctor(System.IO.Stream,System.Boolean)">
             @param output destination for output data
             @param blocks GIF LZW requires block counts for output data
            
        </member>
        <member name="F:Spire.Pdf.LZWStringTable.RES_CODES">
            codesize + Reserved Codes 
        </member>
        <member name="F:Spire.Pdf.LZWStringTable.strLen_">
             each entry corresponds to a code and contains the length of data
             that the code expands to when decoded.
            
        </member>
        <member name="M:Spire.Pdf.LZWStringTable.#ctor">
             Constructor allocate memory for string store data
            
        </member>
        <member name="M:Spire.Pdf.LZWStringTable.AddCharString(System.Int16,System.Byte)">
             @param index value of -1 indicates no predecessor [used in initialisation]
             @param b the byte [character] to add to the string store which follows
             the predecessor string specified the index.
             @return 0xFFFF if no space in table left for addition of predecesor
             index and byte b. Else return the code allocated for combination index + b.
            
        </member>
        <member name="M:Spire.Pdf.LZWStringTable.FindCharString(System.Int16,System.Byte)">
             @param index index to prefix string
             @param b the character that follws the index prefix
             @return b if param index is HASH_FREE. Else return the code
             for this prefix and byte successor
            
        </member>
        <member name="M:Spire.Pdf.LZWStringTable.ClearTable(System.Int32)">
             @param codesize the size of code to be preallocated for the
             string store.
            
        </member>
        <member name="M:Spire.Pdf.LZWStringTable.ExpandCode(System.Byte[],System.Int32,System.Int16,System.Int32)">
             If expanded data doesnt fit into array only what will fit is written
             to buf and the return value indicates how much of the expanded code has
             been written to the buf. The next call to ExpandCode() should be with 
             the same code and have the skip parameter set the negated value of the 
             previous return. Succesive negative return values should be negated and
             added together for next skip parameter value with same code.
            
             @param buf buffer to place expanded data into
             @param offset offset to place expanded data
             @param code the code to expand to the byte array it represents.
             PRECONDITION This code must allready be in the LZSS
             @param skipHead is the number of bytes at the start of the expanded code to 
             be skipped before data is written to buf. It is possible that skipHead is
             equal to codeLen.
             @return the length of data expanded into buf. If the expanded code is longer
             than space left in buf then the value returned is a negative number which when
             negated is equal to the number of bytes that were used of the code being expanded.
             This negative value also indicates the buffer is full.
            
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.codeSize_">
            base underlying code size of data being compressed 8 for TIFF, 1 to 8 for GIF *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.clearCode_">
            reserved clear code based on code size *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.endOfInfo_">
            reserved end of data code based on code size *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.numBits_">
            current number bits output for each code *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.limit_">
            limit at which current number of bits code size has to be increased *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.prefix_">
            the prefix code which represents the predecessor string to current input point *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.bf_">
            output destination for bit codes *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.lzss_">
            general purpose LZW string table *
        </member>
        <member name="F:Spire.Pdf.LZWCompressor.tiffFudge_">
            modify the limits of the code values in LZW encoding due to TIFF bug / feature *
        </member>
        <member name="M:Spire.Pdf.LZWCompressor.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
             @param outp destination for compressed data
             @param codeSize the initial code size for the LZW compressor
             @param TIFF flag indicating that TIFF lzw fudge needs to be applied
             @exception IOException if underlying output stream error
            
        </member>
        <member name="M:Spire.Pdf.LZWCompressor.Compress(System.Byte[],System.Int32,System.Int32)">
             @param buf data to be compressed to output stream
             @exception IOException if underlying output stream error
            
        </member>
        <member name="M:Spire.Pdf.LZWCompressor.Flush">
             Indicate to compressor that no more data to go so write outp
             any remaining buffered data.
            
             @exception IOException if underlying output stream error
            
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBlend">
            <summary>
            Implements blend brush setting and functions.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBlend.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBlend.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="count">The number of elements in the Factors and Positions arrays.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBlend.Factors">
            <summary>
            Gets or sets the factors array.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBlendBase">
            <summary>
            Represents the base class for PdfBlend and PdfColorBlend classes.
            Implements basic routines needed by both classes.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBlendBase.Positions">
            <summary>
            Gets or sets the positions array.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBrushes">
            <summary>
            Represents the collection of immutable default brushes.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.AliceBlue">
            <summary>
            Gets the AliceBlue brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.AntiqueWhite">
            <summary>
            Gets the antique white brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Aqua">
            <summary>
            Gets the Aqua default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Aquamarine">
            <summary>
            Gets the Aquamarine default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Azure">
            <summary>
            Gets the Azure default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Beige">
            <summary>
            Gets the Beige default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Bisque">
            <summary>
            Gets the Bisque default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Black">
            <summary>
            Gets the Black default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.BlanchedAlmond">
            <summary>
            Gets the BlanchedAlmond default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Blue">
            <summary>
            Gets the Blue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.BlueViolet">
            <summary>
            Gets the BlueViolet default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Brown">
            <summary>
            Gets the Brown default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.BurlyWood">
            <summary>
            Gets the BurlyWood default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.CadetBlue">
            <summary>
            Gets the CadetBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Chartreuse">
            <summary>
            Gets the Chartreuse default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Chocolate">
            <summary>
            Gets the Chocolate default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Coral">
            <summary>
            Gets the Coral default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.CornflowerBlue">
            <summary>
            Gets the CornflowerBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Cornsilk">
            <summary>
            Gets the Corn silk default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Crimson">
            <summary>
            Gets the Crimson default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Cyan">
            <summary>
            Gets the Cyan default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkBlue">
            <summary>
            Gets the DarkBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkCyan">
            <summary>
            Gets the DarkCyan default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkGoldenrod">
            <summary>
            Gets the DarkGoldenrod default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkGray">
            <summary>
            Gets the DarkGray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkGreen">
            <summary>
            Gets the DarkGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkKhaki">
            <summary>
            Gets the DarkKhaki default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkMagenta">
            <summary>
            Gets the DarkMagenta default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkOliveGreen">
            <summary>
            Gets the DarkOliveGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkOrange">
            <summary>
            Gets the DarkOrange default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkOrchid">
            <summary>
            Gets the DarkOrchid default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkRed">
            <summary>
            Gets the DarkRed default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkSalmon">
            <summary>
            Gets the DarkSalmon default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkSeaGreen">
            <summary>
            Gets the DarkSeaGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkSlateBlue">
            <summary>
            Gets the DarkSlateBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkSlateGray">
            <summary>
            Gets the DarkSlateGray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkTurquoise">
            <summary>
            Gets the DarkTurquoise default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DarkViolet">
            <summary>
            Gets the DarkViolet default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DeepPink">
            <summary>
            Gets the DeepPink default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DeepSkyBlue">
            <summary>
            Gets the DeepSkyBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DimGray">
            <summary>
            Gets the DimGray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.DodgerBlue">
            <summary>
            Gets the DodgerBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Firebrick">
            <summary>
            Gets the Firebrick default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.FloralWhite">
            <summary>
            Gets the FloralWhite default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.ForestGreen">
            <summary>
            Gets the ForestGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Fuchsia">
            <summary>
            Gets the Fuchsia default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Gainsboro">
            <summary>
            Gets the Gainsborough default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.GhostWhite">
            <summary>
            Gets the GhostWhite default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Gold">
            <summary>
            Gets the Gold default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Goldenrod">
            <summary>
            Gets the Goldenrod default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Gray">
            <summary>
            Gets the Gray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Green">
            <summary>
            Gets the Green default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.GreenYellow">
            <summary>
            Gets the GreenYellow default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Honeydew">
            <summary>
            Gets the Honeydew default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.HotPink">
            <summary>
            Gets the HotPink default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.IndianRed">
            <summary>
            Gets the IndianRed default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Indigo">
            <summary>
            Gets the Indigo default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Ivory">
            <summary>
            Gets the Ivory default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Khaki">
            <summary>
            Gets the Khaki default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Lavender">
            <summary>
            Gets the Lavender default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LavenderBlush">
            <summary>
            Gets the LavenderBlush default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LawnGreen">
            <summary>
            Gets the LawnGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LemonChiffon">
            <summary>
            Gets the LemonChiffon default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightBlue">
            <summary>
            Gets the LightBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightCoral">
            <summary>
            Gets the LightCoral default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightCyan">
            <summary>
            Gets the LightCyan default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightGoldenrodYellow">
            <summary>
            Gets the LightGoldenrodYellow default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightGray">
            <summary>
            Gets the LightGray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightGreen">
            <summary>
            Gets the LightGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightPink">
            <summary>
            Gets the LightPink default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightSalmon">
            <summary>
            Gets the LightSalmon default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightSeaGreen">
            <summary>
            Gets the LightSeaGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightSkyBlue">
            <summary>
            Gets the LightSkyBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightSlateGray">
            <summary>
            Gets the LightSlateGray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightSteelBlue">
            <summary>
            Gets the LightSteelBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LightYellow">
            <summary>
            Gets the LightYellow default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Lime">
            <summary>
            Gets the Lime default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.LimeGreen">
            <summary>
            Gets the LimeGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Linen">
            <summary>
            Gets the Linen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Magenta">
            <summary>
            Gets the Magenta default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Maroon">
            <summary>
            Gets the Maroon default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumAquamarine">
            <summary>
            Gets the MediumAquamarine default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumBlue">
            <summary>
            Gets the MediumBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumOrchid">
            <summary>
            Gets the MediumOrchid default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumPurple">
            <summary>
            Gets the MediumPurple default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumSeaGreen">
            <summary>
            Gets the MediumSeaGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumSlateBlue">
            <summary>
            Gets the MediumSlateBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumSpringGreen">
            <summary>
            Gets the MediumSpringGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumTurquoise">
            <summary>
            Gets the MediumTurquoise default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MediumVioletRed">
            <summary>
            Gets the MediumVioletRed default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MidnightBlue">
            <summary>
            Gets the MidnightBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MintCream">
            <summary>
            Gets the MintCream default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.MistyRose">
            <summary>
            Gets the MistyRose default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Moccasin">
            <summary>
            Gets the Moccasin default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.NavajoWhite">
            <summary>
            Gets the NavajoWhite default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Navy">
            <summary>
            Gets the Navy default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.OldLace">
            <summary>
            Gets the OldLace default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Olive">
            <summary>
            Gets the Olive default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.OliveDrab">
            <summary>
            Gets the OliveDrab default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Orange">
            <summary>
            Gets the Orange default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.OrangeRed">
            <summary>
            Gets the OrangeRed default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Orchid">
            <summary>
            Gets the Orchid default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PaleGoldenrod">
            <summary>
            Gets the PaleGoldenrod default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PaleGreen">
            <summary>
            Gets the PaleGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PaleTurquoise">
            <summary>
            Gets the PaleTurquoise default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PaleVioletRed">
            <summary>
            Gets the PaleVioletRed default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PapayaWhip">
            <summary>
            Gets the PapayaWhip default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PeachPuff">
            <summary>
            Gets the PeachPuff default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Peru">
            <summary>
            Gets the Peru default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Pink">
            <summary>
            Gets the Pink default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Plum">
            <summary>
            Gets the Plum default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.PowderBlue">
            <summary>
            Gets the PowderBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Purple">
            <summary>
            Gets the Purple default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Red">
            <summary>
            Gets the Red default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.RosyBrown">
            <summary>
            Gets the RosyBrown default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.RoyalBlue">
            <summary>
            Gets the RoyalBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SaddleBrown">
            <summary>
            Gets the SaddleBrown default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Salmon">
            <summary>
            Gets the Salmon default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SandyBrown">
            <summary>
            Gets the SandyBrown default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SeaGreen">
            <summary>
            Gets the SeaGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SeaShell">
            <summary>
            Gets the SeaShell default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Sienna">
            <summary>
            Gets the Sienna default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Silver">
            <summary>
            Gets the Silver default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SkyBlue">
            <summary>
            Gets the SkyBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SlateBlue">
            <summary>
            Gets the SlateBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SlateGray">
            <summary>
            Gets the SlateGray default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Snow">
            <summary>
            Gets the Snow default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SpringGreen">
            <summary>
            Gets the SpringGreen default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.SteelBlue">
            <summary>
            Gets the SteelBlue default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Tan">
            <summary>
            Gets the Tan default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Teal">
            <summary>
            Gets the Teal default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Thistle">
            <summary>
            Gets the Thistle default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Tomato">
            <summary>
            Gets the Tomato default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Transparent">
            <summary>
            Gets the Transparent default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Turquoise">
            <summary>
            Gets the Turquoise default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Violet">
            <summary>
            Gets the Violet default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Wheat">
            <summary>
            Gets the Wheat default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.White">
            <summary>
            Gets the White default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.WhiteSmoke">
            <summary>
            Gets the WhiteSmoke default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.Yellow">
            <summary>
            Gets the Yellow default brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBrushes.YellowGreen">
            <summary>
            Gets the YellowGreen default brush.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfColorBlend">
            <summary>
            Represents the arrays of colors and positions used for
            interpolating color blending in a multicolor gradient.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfColorBlend.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfColorBlend.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfColorBlend.Colors">
            <summary>
            Gets or sets the colours array.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLinearGradientMode">
            <summary>
            Specifies the gradient direction of the linear gradient brush.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLinearGradientMode.BackwardDiagonal">
            <summary>
            Specifies a gradient from upper right to lower left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLinearGradientMode.ForwardDiagonal">
            <summary>
            Specifies a gradient from upper left to lower right.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLinearGradientMode.Horizontal">
            <summary>
            Specifies a gradient from left to right.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLinearGradientMode.Vertical">
            <summary>
            Specifies a gradient from top to bottom.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfExtend">
            <summary>
            Specifies the constant values specifying whether to extend the shading
            beyond the starting and ending points of the axis.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfExtend.None">
            <summary>
            Do not extend any point.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfExtend.Start">
            <summary>
            Extend start point.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfExtend.End">
            <summary>
            Extend end point.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfExtend.Both">
            <summary>
            Extend both start and end points.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.Function">
            <summary>
            Function-based shading.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.Axial">
            <summary>
            Axial shading.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.Radial">
            <summary>
            Radial shading.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.FreeForm">
            <summary>
            Free-form Gouraud-shaded triangle mesh
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.LatticeForm">
            <summary>
            Lattice-form Gouraud-shaded triangle mesh.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.Coons">
            <summary>
            Coons patch mesh.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ShadingType.Tensor">
            <summary>
            Tensor-product patch mesh.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfDrawWidget">
            <summary>
            Describes a graphics element which can be drawn by a pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfDrawWidget.Pen">
            <summary>
            Gets or sets a pen that will be used to draw the element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLayoutHTMLResult.HTMLViewBounds">
            <summary>
            The actual bounds of the html view. It may larger than Bounds
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFillElement">
            <summary>
            Represents an element that could be drawn and/or filled.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFillElement.Brush">
            <summary>
            Gets or sets the brush.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfGraphicsWidget">
            <summary>
            Represents a base class for all page graphics elements.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGraphicsWidget.Draw(Spire.Pdf.Graphics.PdfCanvas)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGraphicsWidget.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Drawing.PointF)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="location">Location of the element in the Graphics' co-ordinate system.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGraphicsWidget.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLayoutWidget">
            <summary>
            Represents the base class for all elements that can be layout on the pages.
            </summary>
            [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Assert, Name = "FullTrust")]
        </member>
        <member name="E:Spire.Pdf.Graphics.PdfLayoutWidget.EndPageLayout">
            <summary>
            Event. Raises after the element was printed on the page.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Graphics.PdfLayoutWidget.BeginPageLayout">
            <summary>
            Event. Raises before the element should be printed on the page.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Drawing.PointF)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <returns>Layouting result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Single,System.Single)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="x">X co-ordinate of the element on the page.</param>
            <param name="y">Y co-ordinate of the element on the page.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Drawing.PointF,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Single,System.Single,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="x">X co-ordinate of the element on the page.</param>
            <param name="y">Y co-ordinate of the element on the page.</param>
            <param name="format">Layout format.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLayoutWidget.Draw(Spire.Pdf.PdfPageBase,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the element on the page.
            </summary>
            <param name="page">Current page where the element should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the element.</param>
            <param name="format">Layout format.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.PrivateFontStructOfPdf.FontPath">
            <summary>
            Gets or sets the path of the font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PrivateFontStructOfPdf.FontStream">
            <summary>
            Gets or set the font stream.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PrivateFontStructOfPdf.PrivateFontCollection">
            <summary>
            Gets or sets the private font collection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfShapeWidget">
            <summary>
            Base class for the main shapes.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfShapeWidget.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>rect</returns>
        </member>
        <!-- 对于成员“F:Spire.Pdf.Graphics.ShapeLayouter.splitDiff”忽略有格式错误的 XML 注释 -->
        <member name="T:Spire.Pdf.Graphics.PdfHTMLTextElement">
            <summary>
            Class that represent HTML text area with the ability to span several pages.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.TextAlign">
            <summary>
            Specifies how text in a  is
            horizontally aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextAlign.Left">
            <summary>
            The text is aligned to the left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextAlign.Right">
            <summary>
            The text is aligned to the right.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextAlign.Center">
            <summary>
            The text is aligned in the center.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextAlign.Justify">
            <summary>
            The text is justified.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.cbSize">
            <summary>
            internal variable to store Size.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dwMask">
            <summary>
            internal variable to store Mask.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wNumbering">
            <summary>
            internal variable to store Numbering.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wReserved">
            <summary>
            internal variable to store Reserved.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dxStartIndent">
            <summary>
            internal variable to store Start Indent.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dxRightIndent">
            <summary>
            internal variable to store Right Indent.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dxOffset">
            <summary>
            internal variable to store Offset.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wAlignment">
            <summary>
            internal variable to store Alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.cTabCount">
            <summary>
            internal variable to store Tab Count.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.rgxTabs">
            <summary>
            internal variable to store rgxTabs.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dySpaceBefore">
            <summary>
            internal variable to store Space Before.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dySpaceAfter">
            <summary>
            internal variable to store Space After.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.dyLineSpacing">
            <summary>
            internal variable to store Line Spacing.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.sStyle">
            <summary>
            internal variable to store Style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.bLineSpacingRule">
            <summary>
            internal variable to store Line Spacing Rule.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.bOutlineLevel">
            <summary>
            internal variable to store Out line Level.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wShadingWeight">
            <summary>
            internal variable to store Shading Weight.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wShadingStyle">
            <summary>
            internal variable to store Shading Style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wNumberingStart">
            <summary>
            internal variable to store Numbering Start.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wNumberingStyle">
            <summary>
            internal variable to store Numbering Style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wNumberingTab">
            <summary>
            internal variable to store Numbering Tab.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wBorderSpace">
            <summary>
            internal variable to store Border Space.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wBorderWidth">
            <summary>
            internal variable to store Border Width.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PARAFORMAT.wBorders">
            <summary>
            internal variable to store Borders.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.cbSize">
            <summary>
            internal variable to store size.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.dwMask">
            <summary>
            internal variable to store Mask.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.dwEffects">
            <summary>
            internal variable to store Effects.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.yHeight">
            <summary>
            internal variable to store Height.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.yOffset">
            <summary>
            internal variable to store Offset.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.crTextColor">
            <summary>
            internal variable to store Text Color.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.bCharSet">
            <summary>
            internal variable to store CharSet.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.bPitchAndFamily">
            <summary>
            internal variable to store Pitch And Family.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.wWeight">
            <summary>
            internal variable to store Weight.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.sSpacing">
            <summary>
            internal variable to store Spacing.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.crBackColor">
            <summary>
            internal variable to store BackColor.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.lcid">
            <summary>
            internal variable to store lcid.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.dwReserved">
            <summary>
            internal variable to store Reserved.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.sStyle">
            <summary>
            internal variable to store Style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.wKerning">
            <summary>
            internal variable to store Kerning.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.bUnderlineType">
            <summary>
            internal variable to store Under line Type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.bAnimation">
            <summary>
            internal variable to store Animation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.bRevAuthor">
            <summary>
            internal variable to store RevAuthor.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CHARFORMAT.bReserved1">
            <summary>
            internal variable to store Reserved.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfTextWidget">
            <summary>
            Represents the text area with the ability to span several pages.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="format">The format.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTextWidget.Text">
            <summary>
            Gets or sets a value indicating the text that should be printed.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTextWidget.Pen">
            <summary>
            Gets or sets a pen that will be used to draw the text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTextWidget.Brush">
            <summary>
            Gets or sets the brush that will be used to draw the text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTextWidget.Font">
            <summary>
            Gets or sets a font that will be used to draw the text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTextWidget.StringFormat">
            <summary>
            Gets or sets text settings that will be used to draw the text.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.Draw(Spire.Pdf.PdfNewPage,System.Drawing.PointF,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the text on the page.
            </summary>
            <param name="page">Current page where the text should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.Draw(Spire.Pdf.PdfNewPage,System.Drawing.PointF,System.Single,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the text on the page.
            </summary>
            <param name="page">Current page where the text should be drawn.</param>
            <param name="location">Start location on the page.</param>
            <param name="width">Width of the text bounds.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTextWidget.Draw(Spire.Pdf.PdfNewPage,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the text on the page.
            </summary>
            <param name="page">Current page where the text should be drawn.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the text.</param>
            <param name="format">Lay outing format.</param>
            <returns>Lay outing result.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfCancelEventArgs">
            <summary>
            Represents the data for a cancelable event.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this  is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spire.Pdf.Graphics.BeginPageLayoutEventArgs">
            <summary>
            Data for event before lay outing of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.BeginPageLayoutEventArgs.Bounds">
            <summary>
            Gets or sets value that indicates the lay outing bounds on the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.BeginPageLayoutEventArgs.Page">
            <summary>
            Gets the page where the lay outing should start.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.BeginPageLayoutEventArgs.#ctor(System.Drawing.RectangleF,Spire.Pdf.PdfPageBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.EndPageLayoutEventArgs">
            <summary>
            Contains information about layout`s element .
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.EndPageLayoutEventArgs.Result">
            <summary>
            Gets a result of the lay outing on the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.EndPageLayoutEventArgs.NextPage">
            <summary>
            Gets or sets a value indicating the next page where the element should be layout if the process is not finished or stopped.
            </summary>
            <remarks>The default value is null. In this case the element will be layout on the next page.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.EndPageLayoutEventArgs.#ctor(Spire.Pdf.Graphics.PdfLayoutResult)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.EndTextPageLayoutEventArgs">
            <summary>
            Contains information about layout`s element .
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.EndTextPageLayoutEventArgs.#ctor(Spire.Pdf.Graphics.PdfTextLayoutResult)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.EndTextPageLayoutEventArgs.Result">
            <summary>
            Gets a result of the lay outing on the page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.BeginPageLayoutEventHandler">
            <summary>
            Delegate. Defines a type of the event before lay outing on the page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.EndPageLayoutEventHandler">
            <summary>
            Delegate. Defines a type of the event after lay outing on the page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.EndTextPageLayoutEventHandler">
            <summary>
            Delegate. Defines a type of the event after the text lay outing on the page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLayoutType">
            <summary>
            Specifies type of paginating.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLayoutType.Paginate">
            <summary>
            If the element exceeds the page, proceed it on the next page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLayoutType.OnePage">
            <summary>
            Draw the element on the one page only.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLayoutBreakType">
            <summary>
            Specifies how the element should be contained on the page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLayoutBreakType.FitPage">
            <summary>
            Fit the element according to the bounds specified or the page bounds.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLayoutBreakType.FitElement">
            <summary>
            If the element doesn't fit at the first page, don't draw it on this page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Fonts.PdfUsedFont">
            <summary>
            Represents the used fonts in a PDF document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.PdfUsedFont.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.PdfUsedFont.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.PdfUsedFont.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.PdfUsedFont.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Spire.Pdf.Graphics.Fonts.PdfUsedFont.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.PdfPageWidget)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Fonts.PdfUsedFont.Replace(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Replaces the specified new font.
            </summary>
            <param name="newFont">The new font.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Fonts.PdfUsedFont.Replace(System.Single,Spire.Pdf.Primitives.PdfName)">
            <summary>
            Replace the font size in the content.
            </summary>
            <param name="fontSize">The font size.</param>
            <param name="name">The font name in the resources.</param>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableInfo.Offset">
            <summary>
            Gets or sets ofset from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableInfo.Length">
            <summary>
            Gets or sets length of this table.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableInfo.Checksum">
            <summary>
            Gets or sets table checksum.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.TtfTableInfo.Empty">
            <summary>
            Gets a value indicating whether this  is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.LineGap">
            <summary>
            Typographic line gap.
            Negative LineGap values are treated as DEF_TABLE_CHECKSUM.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.ContainsCFF">
            <summary>
            Gets or sets contains CFF.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.IsSymbol">
            <summary>
            Gets or sets value indicating if Symbol font is used.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.FontBox">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.IsFixedPitch">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.IsScript">
            <summary>
            Gets a value indicating whether font is script.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.IsSerif">
            <summary>
            Gets a value indicating whether font is serif.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.ItalicAngle">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.PostScriptName">
            <summary>
            Gets or sets post-script font name.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.FontFamily">
            <summary>
            Gets or sets font family name.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.FontName">
            <summary>
            Gets or sets font name.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.CapHeight">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.Leading">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.MacAscent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.MacDescent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.WinDescent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.WinAscent">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.StemV">
            <summary>
            Gets or sets description font item.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.WidthTable">
            <summary>
            Gets or sets widths table for the font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.MacStyle">
            <summary>
            Regular: 0
            Bold: 1
            Italic: 2
            Bold Italic: 3
            Bit 0- bold (if set to 1)
            Bit 1- italic (if set to 1)
            Bits 2-15- reserved (set to 0).
            NOTE:
            Note that macStyle bits must agree with the 'OS/2' table fsSelection bits.
            The fsSelection bits are used over the macStyle bits in Microsoft Windows.
            The PANOSE values and 'post' table values are ignored for determining bold or italic fonts.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.SubScriptSizeFactor">
            <summary>
            Subscript size factor.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.SuperscriptSizeFactor">
            <summary>
            Superscript size factor.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.FirstChar">
            <summary>
            First char of the font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMetrics.LastChar">
            <summary>
            Last char of the font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.TtfMetrics.IsItalic">
            <summary>
            Gets a value indicating whether this instance is italic.
            </summary>
            <value><c>true</c> if this instance is italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.TtfMetrics.IsBold">
            <summary>
            Gets a value indicating whether this instance is bold.
            </summary>
            <value><c>true</c> if this instance is bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameTable.FormatSelector">
            <summary>
            Local variable to store Format Selector.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameTable.RecordsCount">
            <summary>
            Local variable to store Records Count.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameTable.Offset">
            <summary>
            Local variable to store Offset.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameTable.NameRecords">
            <summary>
            Local variable to store Name Records.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.PlatformID">
            <summary>
            The PlatformID.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.EncodingID">
            <summary>
            The EncodingID.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.LanguageID">
            <summary>
            The PlatformIDLanguageID
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.NameID">
            <summary>
            The NameID.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.Length">
            <summary>
            The Length.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.Offset">
            <summary>
            The Offset.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfNameRecord.Name">
            <summary>
            The Name.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.cmap">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.glyf">
            <summary>
            The glyf.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.head">
            <summary>
            The head.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.hhea">
            <summary>
            The hhea.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.hmtx">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.loca">
            <summary>
            The loca.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.maxp">
            <summary>
            The maxp.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.name">
            <summary>
            The cmap.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.post">
            <summary>
            The post.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.OS2">
            <summary>
            The OS2.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.CFF">
            <summary>
            The CFF.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.cvt">
            <summary>
            The cvt.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.fpgm">
            <summary>
            The fpgm.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTableNames.prep">
            <summary>
            The prep.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.Modified">
            <summary>
            Modified: International date (8-byte field).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.Created">
            <summary>
            Created: International date (8-byte field).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.MagicNumber">
            <summary>
            MagicNumber: Set to 0x5F0F3CF5.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.CheckSumAdjustment">
            <summary>
            CheckSumAdjustment: To compute: set it to 0, sum the entire font as ULONG,
            then store 0xB1B0AFBA - sum.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.FontRevision">
            <summary>
            FontRevision: Set by font manufacturer.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.Version">
            <summary>
            Table version number: 0x00010000 for version 1.0.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.XMin">
            <summary>
            Minimum x for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.YMin">
            <summary>
            Minimum y for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.UnitsPerEm">
            <summary>
            Valid range is from 16 to 16384.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.YMax">
            <summary>
            Maximum y for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.XMax">
            <summary>
            Maximum x for all glyph bounding boxes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.MacStyle">
            <summary>
            Regular: 0
            Bold: 1
            Italic: 2
            Bold Italic: 3
            Bit 0 - bold (if set to 1)
            Bit 1 - italic (if set to 1)
            Bits 2-15 - reserved (set to 0)
            NOTE:
            Note that macStyle bits must agree with the 'OS/2' table fsSelection bits.
            The fsSelection bits are used over the macStyle bits in Microsoft Windows.
            The PANOSE values and 'post' table values are ignored for determining bold or italic fonts.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.Flags">
            <summary>
            Bit 0 - baseline for font at y=0
            Bit 1 - left SideBearing at x=0
            Bit 2 - instructions may depend on point size
            Bit 3 - force ppem to integer values for all private scaler math; may use fractional ppem sizes if this bit is clear
            Bit 4 - instructions may alter advance width (the advance widths might not scale linearly)
            Note: All other bits must be zero.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.LowestRecPPEM">
            <summary>
            LowestRecPPEM: Smallest readable size in pixels.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.FontDirectionHint">
            <summary>
            FontDirectionHint:
            0   Fully mixed directional glyphs
            1   Only strongly left to right
            2   Like 1 but also contains neutrals
            -1   Only strongly right to left
            -2   Like -1 but also contains neutrals.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.IndexToLocFormat">
            <summary>
            0 for short offsets, 1 for long.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHeadTable.GlyphDataFormat">
            <summary>
            0 for current format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.Ascender">
            <summary>
            Typographic ascent.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.AdvanceWidthMax">
            <summary>
            Maximum advance width value in HTML table.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.Descender">
            <summary>
            Typographic descent.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.NumberOfHMetrics">
            <summary>
            Number of hMetric entries in HTML table;
            may be smaller than the total number of glyphs in the font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.LineGap">
            <summary>
            Typographic line gap. Negative LineGap values are treated as DEF_TABLE_CHECKSUM
            in Windows 3.1, System 6, and System 7.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.MinLeftSideBearing">
            <summary>
            Minimum left SideBearing value in HTML table.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.MinRightSideBearing">
            <summary>
            Minimum right SideBearing value; calculated as Min(aw - lsb - (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.XMaxExtent">
            <summary>
            Max(lsb + (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.CaretSlopeRise">
            <summary>
            Used to calculate the slope of the cursor (rise/run); 1 for vertical.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.CaretSlopeRun">
            <summary>
            0 for vertical.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfHorizontalHeaderTable.MetricDataFormat">
            <summary>
            0 for current format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.Version">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.XAvgCharWidth">
            <summary>
            The Average Character Width parameter specifies
            the arithmetic average of the escapement (width)
            of all of the 26 lowercase letters a through z of the Latin alphabet
            and the space character. If any of the 26 lowercase letters are not present,
            this parameter should equal the weighted average of all glyphs in the font.
            For non-UGL (platform 3, encoding 0) fonts, use the unweighted average.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsWeightClass">
            <summary>
            Indicates the visual weight (degree of blackness or thickness of strokes)
            of the characters in the font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsWidthClass">
            <summary>
            Indicates a relative change from the normal aspect ratio (width to height ratio)
            as specified by a font designer for the glyphs in a font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.FsType">
            <summary>
            Indicates font embedding licensing rights for the font.
            Embeddable fonts may be stored in a document.
            When a document with embedded fonts is opened on a system that does not have the font installed
            (the remote system), the embedded font may be loaded for temporary (and in some cases, permanent)
            use on that system by an embedding-aware application.
            Embedding licensing rights are granted by the vendor of the font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptXSize">
            <summary>
            The recommended horizontal size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptYSize">
            <summary>
            The recommended vertical size in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptXOffset">
            <summary>
            The recommended horizontal offset in font design units for subscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSubscriptYOffset">
            <summary>
            The recommended vertical offset in font design units from the baseline for subscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.ySuperscriptXSize">
            <summary>
            The recommended horizontal size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSuperscriptYSize">
            <summary>
            The recommended vertical size in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSuperscriptXOffset">
            <summary>
            The recommended horizontal offset in font design units for superscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YSuperscriptYOffset">
            <summary>
            The recommended vertical offset in font design units from the baseline for superscripts for this font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YStrikeoutSize">
            <summary>
            Width of the strikeout stroke in font design units.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.YStrikeoutPosition">
            <summary>
            The position of the strikeout stroke relative to the baseline in font design units.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.SFamilyClass">
            <summary>
            This parameter is a classification of font-family design.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.Panose">
            <summary>
            This 10 byte series of numbers are used to describe the visual characteristics
            of a given typeface.  These characteristics are then used to associate the font with
            other fonts of similar appearance having different names. The variables for each digit are listed below.
            The specifications for each variable can be obtained in the specification
            PANOSE v2.0 Numerical Evaluation from Microsoft or Elseware Corporation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange2">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange3">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UlUnicodeRange4">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.AchVendID">
            <summary>
            The four character identifier for the vendor of the given type face.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.FsSelection">
            <summary>
            Information concerning the nature of the font patterns.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsFirstCharIndex">
            <summary>
            The minimum Unicode index (character code) in this font,
            according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
            For most fonts supporting Win-ANSI or other character sets, this value would be 0x0020.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsLastCharIndex">
            <summary>
            usLastCharIndex: The maximum Unicode index (character code) in this font,
            according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
            This value depends on which character sets the font supports.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.STypoAscender">
            <summary>
            The typographic ascender for this font.
            Remember that this is not the same as the Ascender value in the 'hhea' table,
            which Apple defines in a far different manner.
            DEF_TABLE_OFFSET good source for usTypoAscender is the Ascender value from an AFM file.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.STypoDescender">
            <summary>
            The typographic descender for this font.
            Remember that this is not the same as the Descender value in the 'hhea' table,
            which Apple defines in a far different manner.
            DEF_TABLE_OFFSET good source for usTypoDescender is the Descender value from an AFM file.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.STypoLineGap">
            <summary>
            The typographic line gap for this font.
            Remember that this is not the same as the LineGap value in the 'hhea' table,
            which Apple defines in a far different manner.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsWinAscent">
            <summary>
            The ascender metric for Windows.
            This too is distinct from Apple's Ascender value and from the usTypoAscender values.
            usWinAscent is computed as the yMax for all characters in the Windows ANSI character set.
            usTypoAscent is used to compute the Windows font height and default line spacing.
            For platform 3 encoding 0 fonts, it is the same as yMax.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsWinDescent">
            <summary>
            The descender metric for Windows.
            This too is distinct from Apple's Descender value and from the usTypoDescender values.
            usWinDescent is computed as the -yMin for all characters in the Windows ANSI character set.
            usTypoAscent is used to compute the Windows font height and default line spacing.
            For platform 3 encoding 0 fonts, it is the same as -yMin.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UlCodePageRange1">
            <summary>
            This field is used to specify the code pages encompassed
            by the font file in the 'cmap' subtable for platform 3, encoding ID 1 (Microsoft platform).
            If the font file is encoding ID 0, then the Symbol Character Set bit should be set.
            If the bit is set (1) then the code page is considered functional.
            If the bit is clear (0) then the code page is not considered functional.
            Each of the bits is treated as an independent flag and the bits can be set in any combination.
            The determination of "functional" is left up to the font designer,
            although character set selection should attempt to be functional by code pages if at all possible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UlCodePageRange2">
            <summary>
            This field is used to specify the code pages encompassed
            by the font file in the 'cmap' subtable for platform 3, encoding ID 1 (Microsoft platform).
            If the font file is encoding ID 0, then the Symbol Character Set bit should be set.
            If the bit is set (1) then the code page is considered functional.
            If the bit is clear (0) then the code page is not considered functional.
            Each of the bits is treated as an independent flag and the bits can be set in any combination.
            The determination of "functional" is left up to the font designer,
            although character set selection should attempt to be functional by code pages if at all possible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.SxHeight">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.SCapHeight">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsDefaultChar">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsBreakChar">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfOS2Table.UsMaxContext">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.FormatType">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.ItalicAngle">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.UnderlinePosition">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.UnderlineThickness">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.IsFixedPitch">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.MinMemType42">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.MaxMemType42">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.MinMemType1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfPostTable.MaxMemType1">
            <summary>
            Struct field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfLongHorMertric.AdvanceWidth">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfLongHorMertric.Lsb">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfCmapTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfCmapTable.TablesCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfCmapSubTable.PlatformID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfCmapSubTable.EncodingID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfCmapSubTable.Offset">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfAppleCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfAppleCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfAppleCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.FirstCode">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfTrimmedCmapSubTable.EntryCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.Format">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.Length">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.Version">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.SegCountX2">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.SearchRange">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.EntrySelector">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.RangeShift">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.EndCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.ReservedPad">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.StartCount">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.IdDelta">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.IdRangeOffset">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfMicrosoftCmapSubTable.GlyphID">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphInfo.Index">
            <summary>
            Holds glyph index.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphInfo.Width">
            <summary>
            Holds character's width.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphInfo.CharCode">
            <summary>
            Code of the char symbol.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Fonts.TtfGlyphInfo.Empty">
            <summary>
            Gets a value indicating whether this  is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spire.Pdf.Graphics.Fonts.TtfGlyphInfo.CompareTo(System.Object)">
            <summary>
            Compares two WidthDescriptor objects.
            </summary>
            <param name="obj">Another object for comparing.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.</returns>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfLocaTable.Offsets">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphHeader.numberOfContours">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphHeader.XMin">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphHeader.YMin">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphHeader.XMax">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Fonts.TtfGlyphHeader.YMax">
            <summary>
            Structure field.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfCjkStandardFont">
            <summary>
            Represents the standard CJK fonts.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCjkStandardFont.#ctor(Spire.Pdf.Graphics.PdfCjkFontFamily,System.Single,Spire.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCjkStandardFont.#ctor(Spire.Pdf.Graphics.PdfCjkFontFamily,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCjkStandardFont.#ctor(Spire.Pdf.Graphics.PdfCjkStandardFont,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCjkStandardFont.#ctor(Spire.Pdf.Graphics.PdfCjkStandardFont,System.Single,Spire.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfCjkStandardFont.FontFamily">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFontBase">
            <summary>
            Represents the font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Height">
            <summary>
            Gets the height of the font in points.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Descent">
            <summary>
            Gets the descent of the font in points.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Style">
            <summary>
            Gets the style information for this font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Bold">
            <summary>
            Gets a value indicating whether this  is bold.
            </summary>
            <value><c>true</c> if bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Italic">
            <summary>
            Gets a value indicating whether this  is italic.
            </summary>
            <value><c>true</c> if italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Strikeout">
            <summary>
            Gets a value indicating whether this  is strikeout.
            </summary>
            <value><c>true</c> if strikeout; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Underline">
            <summary>
            Gets a value indicating whether this  is underline.
            </summary>
            <value><c>true</c> if underline; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,Spire.Pdf.Graphics.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,System.Single)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="width">Maximum width of the string in points.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,System.Single,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="width">Maximum width of the string in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,System.Single,Spire.Pdf.Graphics.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="width">Maximum width of the string in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,System.Drawing.SizeF)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.MeasureString(System.String,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfStringFormat,System.Int32@,System.Int32@)">
            <summary>
            Measures a string by using this font.
            </summary>
            <param name="text">Text to be measured.</param>
            <param name="layoutArea">SizeF structure that specifies the maximum layout area for the text in points.</param>
            <param name="format">PdfStringFormat that represents formatting information, such as line spacing, for the string.</param>
            <param name="charactersFitted">Number of characters in the string.</param>
            <param name="linesFilled">Number of text lines in the string.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFontBase.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets Pdf primitive representing the font.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFontBase.Spire#Pdf#Interfaces#IPdfCache#EqualsTo(Spire.Pdf.Interfaces.IPdfCache)">
            <summary>
            Checks whether the object is similar to another object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True - if the objects have equal internals and can share them, False otherwise.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFont">
            <summary>
            Represents one of the 14 standard PDF fonts.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFont.#ctor(Spire.Pdf.Graphics.PdfFontFamily,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFont.#ctor(Spire.Pdf.Graphics.PdfFontFamily,System.Single,Spire.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFont.#ctor(Spire.Pdf.Graphics.PdfFont,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFont.#ctor(Spire.Pdf.Graphics.PdfFont,System.Single,Spire.Pdf.Graphics.PdfFontStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="size">The size.</param>
            <param name="style">The style.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFont.FontFamily">
            <summary>
            Gets the FontFamily.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfStringFormat">
            <summary>
            Represents the text layout information.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringFormat.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringFormat.#ctor(Spire.Pdf.Graphics.PdfTextAlignment)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="columnFormat">The column format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringFormat.#ctor(Spire.Pdf.Graphics.PdfTextAlignment,Spire.Pdf.Graphics.PdfVerticalAlignment)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="alignment">The alignment.</param>
            <param name="lineAlignment">The vertical alignment.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.LineAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.RightToLeft">
            <summary>
            Gets or sets the value that indicates text direction mode.
            </summary>
            <remarks>Note, that this property doesn't change any alignment of the text. 
             property should be set manually to align the text. This property just enables or disables
            support of right to left approach. 
            If the value is False, the text won't be checked for right to left symbols occurrence.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.CharacterSpacing">
            <summary>
            Gets or sets value that indicates a size among the characters in the text.
            When the glyph for each character in the string is rendered, this value is
            added to the the glyphs displacement.
            </summary>
            <remarks>
            Default value is 0.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.WordSpacing">
            <summary>
            Gets or sets value that indicates a size among the words in the text.
            Word spacing works the same way as character spacing but applies only to the
            space character, code 32.
            </summary>
            <remarks>Default value is 0.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.LineSpacing">
            <summary>
            Gets or sets value that indicates the vertical distance between the baselines of adjacent lines of text.
            </summary>
            <remarks>Default value is 0.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.ClipPath">
            <summary>
            Gets or sets a value indicating whether the text
            should be a part of the clipping path.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.SubSuperScript">
            <summary>
            Gets or sets value indicating whether the text is in subscript or superscript mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.ParagraphIndent">
            <summary>
            Gets or sets the indent of the first line in the paragraph.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.LineLimit">
            <summary>
            Only entire lines are laid out in the formatting rectangle.
            By default layout continues until the end of the text, 
            or until no more lines are visible as a result of clipping, whichever comes first. 
            Note that the default settings allow the last line to be partially obscured by a formatting rectangle that is not a whole multiple of the line height.
            To ensure that only whole lines are seen, specify this value and be careful to provide a formatting rectangle at least as tall as the height of one line.
            </summary>
            <value><c>true</c> if [line limit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.MeasureTrailingSpaces">
            <summary>
            Includes the trailing space at the end of each line.
            By default the boundary rectangle returned by the MeasureString method of PdfFont excludes the space at the end of each line.
            Set this flag to include that space in measurement.
            </summary>
            <value>
            	<c>true</c> if [measure trailing spaces]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.NoClip">
            <summary>
            Overhanging parts of glyphs, 
            and unwrapped text reaching outside the formatting rectangle are allowed to show. 
            By default all text and glyph parts reaching outside the formatting rectangle are clipped.
            </summary>
            <value><c>true</c> if [no clip]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringFormat.WordWrap">
            <summary>
            Gets or sets value indicating type of the text wrapping.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringFormat.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The new created object.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfTrueTypeFont">
             <summary>
             Represents TrueType font.
             </summary>
            [System.Security.Permissions.PermissionSet( System.Security.Permissions.SecurityAction.Assert, Name = "FullTrust" )]
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfStringLayouter">
            <summary>
            Class lay outing the text.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringLayouter.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfStringLayouter.Layout(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfStringFormat,System.Drawing.SizeF)">
            <summary>
            Layouts the text.
            </summary>
            <param name="text">String text.</param>
            <param name="font">Font for the text.</param>
            <param name="format">String format.</param>
            <param name="size">Bounds of the text.</param>
            <returns>Layout result.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfStringLayoutResult">
            <summary>
            Layouter result.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringLayoutResult.Remainder">
            <summary>
            Gets the text which is not layouted
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringLayoutResult.ActualSize">
            <summary>
            Gets the actual layouted text bounds
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringLayoutResult.Lines">
            <summary>
            Gets layouted lines information.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfStringLayoutResult.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.LineInfo">
            <summary>
            Contains information about the line.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.LineInfo.LineType">
            <summary>
            Gets width of the line text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.LineInfo.Text">
            <summary>
            Gets line text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.LineInfo.Width">
            <summary>
            Gets width of the line text.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.LineType">
            <summary>
            Break type of the line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.LineType.None">
            <summary>
            Unknown type line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.LineType.NewLineBreak">
            <summary>
            The line has new line symbol.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.LineType.LayoutBreak">
            <summary>
            layout break.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.LineType.FirstParagraphLine">
            <summary>
            The line is the first in the paragraph.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.LineType.LastParagraphLine">
            <summary>
            The line is the last in the paragraph.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Separator.None">
            <summary>
            Is not a separator
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Separator.Separator">
            <summary>
            Is a separator, but can not be the first char of a new line
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Separator.LineBreakSeparator">
            <summary>
            Is a separator which can be the first char of a new line
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Separator.InitialQuotePunctuation">
            <summary>
            Indicates that the character is an opening or initial quotation mark.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Separator.G7FFLetter">
            <summary>
            Letter, whoes code > 0x7ff
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.TtfReader.CheckFontTable(System.String)">
            <summary>
            Check table name does not exist
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.TtfReader.SetUnicodeStringToCharCodeForXpsConvertPdf(System.String,System.String)">
            <summary>
            set char Code for unicode char 
            </summary>
            <param name="unicodeString">unicodeString</param>
            <param name="charCode">charCode</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.TtfReader.GetGlyphCharCode(System.Int32)">
            <summary>
            Get CharCode
            </summary>
            <param name="glyphIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFontStyle">
            <summary>
            Specifies style information applied to text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontStyle.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontStyle.Underline">
            <summary>
            Represents the underline text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontStyle.Strikeout">
            <summary>
            Strikeout text.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFontFamily">
            <summary>
            Indicates type of standard PDF fonts.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontFamily.Helvetica">
            <summary>
            Represents the Helvetica font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontFamily.Courier">
            <summary>
            Represents the Courier font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontFamily.TimesRoman">
            <summary>
            Represents the Times Roman font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontFamily.Symbol">
            <summary>
            Represents the Symbol font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontFamily.ZapfDingbats">
            <summary>
            Represents the ZapfDingbats font.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfCjkFontFamily">
            <summary>
            Specifies the type of CJK font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.HanyangSystemsGothicMedium">
            <summary>
            Represents the Hanyang Systems Gothic Medium font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Represents the Hanyang Systems shin myeong Jo Medium font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.HeiseiKakuGothicW5">
            <summary>
            Represents the Heisei kaku GothicW5 font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.HeiseiMinchoW3">
            <summary>
            Represents the Heisei MinchoW3 font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.MonotypeHeiMedium">
            <summary>
            Represents the Monotype Hei Medium font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.MonotypeSungLight">
            <summary>
            Represents the monotype sung Light font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfCjkFontFamily.SinoTypeSongLight">
            <summary>
            Represents the sinotype song light font.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFontType">
            <summary>
            Specifies the type of the font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontType.Standard">
            <summary>
            Indicates the standard Adobe fonts.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontType.TrueType">
            <summary>
            Indicates the non-embedded TrueType fonts.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFontType.TrueTypeEmbedded">
            <summary>
            Indicates the Embedded TrueType fonts.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfWordWrapType">
            <summary>
            Specifies the types of text wrapping.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfWordWrapType.None">
            <summary>
            Text wrapping between lines when formatting within a rectangle is disabled.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfWordWrapType.Word">
            <summary>
            Text is wrapped by words. If there is a word that is longer than bounds' width, this word is wrapped by characters.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfWordWrapType.WordOnly">
            <summary>
            Text is wrapped by words. If there is a word that is longer than bounds' width, it won't be wrapped at all
            and the process will be finished.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfWordWrapType.Character">
            <summary>
            Text is wrapped by characters. In this case the word at the end of the text line can be split.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfSubSuperScript">
            <summary>
            Specifies type of the SubSuperScript.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfSubSuperScript.None">
            <summary>
            Specifies no subscript or superscript.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfSubSuperScript.SuperScript">
            <summary>
            Specifies superscript format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfSubSuperScript.SubScript">
            <summary>
            Specifies subscript format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfPlatformID.AppleUnicode">
            <summary>
            Apple platform.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfPlatformID.Macintosh">
            <summary>
            Macintosh platform.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfPlatformID.Iso">
            <summary>
            Iso platform.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfPlatformID.Microsoft">
            <summary>
            Microsoft platform.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.Copyright">
            <summary>
            The Copyright
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.FontFamily">
            <summary>
            The Font Family
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.FontSubFamily">
            <summary>
            The Font Sub Family
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.FontIdentifier">
            <summary>
            The Font Identifier
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.FontName">
            <summary>
            The Font Name
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.Version">
            <summary>
            The Version
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.PostScriptName">
            <summary>
            The PostScriptName
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfNameID.Trademark">
            <summary>
            The Trademark
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapEncoding.Unknown">
            <summary>
            Unknown encoding.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapEncoding.Symbol">
            <summary>
            When building a symbol font for Windows.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapEncoding.Unicode">
            <summary>
            When building a Unicode font for Windows.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapEncoding.Macintosh">
            <summary>
            For font that will be used on a Macintosh.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfMicrosoftEncodingID.Undefined">
            <summary>
            Undefined encoding.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfMicrosoftEncodingID.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfMacintoshEncodingID.Roman">
            <summary>
            Roman encoding.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfMacintoshEncodingID.Japanese">
            <summary>
            Japanese encoding.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfMacintoshEncodingID.Chinese">
            <summary>
            Chinese encoding.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapFormat.Apple">
            <summary>
            This is the Apple standard character to glyph index mapping table.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapFormat.Microsoft">
            <summary>
            This is the Microsoft standard character to glyph index mapping table.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCmapFormat.Trimmed">
            <summary>
            Format 6: Trimmed table mapping.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.TtfCompositeGlyphFlags">
            <summary>
            ttf composite glyph flags.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.ARG_1_AND_2_ARE_WORDS">
            <summary>
            The ARG_1_AND_2_ARE_WORDS.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.ARGS_ARE_XY_VALUES">
            <summary>
            The ARGS_ARE_XY_VALUES.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.ROUND_XY_TO_GRID">
            <summary>
            The ROUND_XY_TO_GRID.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_A_SCALE">
            <summary>
            The WE_HAVE_A_SCALE.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.RESERVED">
            <summary>
            The RESERVED.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.MORE_COMPONENTS">
            <summary>
            The MORE_COMPONENTS.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_AN_X_AND_Y_SCALE">
            <summary>
            The WE_HAVE_AN_X_AND_Y_SCALE.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_A_TWO_BY_TWO">
            <summary>
            The WE_HAVE_A_TWO_BY_TWO.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.WE_HAVE_INSTRUCTIONS">
            <summary>
            The WE_HAVE_INSTRUCTIONS.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TtfCompositeGlyphFlags.USE_MY_METRICS">
            <summary>
            The USE_MY_METRICS.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.Unknown">
            <summary>
            Unknown encoding
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.StandardEncoding">
            <summary>
            Adobe standard Latin-text encoding
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.MacRomanEncoding">
            <summary>
            Mac OS standard encoding
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.MacExpertEncoding">
            <summary>
            An encoding for use with expert fonts
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.WinAnsiEncoding">
            <summary>
            Windows Code Page 1252
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.PDFDocEncoding">
            <summary>
            Encoding for text strings in a PDF document outside the document's content streams.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontEncoding.IdentityH">
            <summary>
            The horizontal identity mapping for 2-byte CIDs; may be used with CIDFonts using any
            Registry, Ordering, and Supplement values. It maps 2-byte character codes ranging from
            0 to 65,535 to the same 2-byte CID value, interpreted high-order byte first.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.FixedPitch">
            <summary>
            All glyphs have the same width (as opposed to proportional or variable-pitch
            fonts, which have different widths).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.Serif">
            <summary>
            Glyphs have serifs, which are short strokes drawn at an angle on the top and
            bottom of glyph stems (as opposed to sans serif fonts, which do not).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.Symbolic">
            <summary>
            Font contains glyphs outside the Adobe standard Latin character set. The
            flag and the nonsymbolic flag cannot both be set or both be clear.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.Script">
            <summary>
            Glyphs resemble cursive handwriting.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.Nonsymbolic">
            <summary>
            Font uses the Adobe standard Latin character set or a subset of it.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.Italic">
            <summary>
            Glyphs have dominant vertical strokes that are slanted.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.FontDescriptorFlags.ForceBold">
            <summary>
            Bold font.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CompositeFontType.Type0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.CompositeFontType.TrueType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFormXObject">
            <summary>
            Represent pdf form XObject.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFormXObject.m_stream">
            <summary>
            Form XObject pdf stream.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFormXObject.m_bound">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFormXObject.m_matrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFormXObject.m_resources">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFormXObject.m_graphics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFormXObject.m_visibilityGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFormXObject.Bound">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.#ctor(System.Drawing.RectangleF,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="crossTable"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.#ctor(Spire.Pdf.Primitives.PdfStream,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="crossTable"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.Stream_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Trigger when pdf wrappered element saving.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="ars">The arguments of event.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfFormXObject.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeToPdfPrimitive">
            <summary>
            Synchronize the instance to the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeToPdfPrimitiveForBound(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_bound to the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeToPdfPrimitiveForMatrix(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_matrix to the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeToPdfPrimitiveForVisibilityGroup(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_visibilityGroup to the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeToPdfPrimitiveForResources(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_resources to the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeFromPdfPrimitive">
            <summary>
            Synchronize the instance from the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeFromPdfPrimitiveForBound(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_bound from the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeFromPdfPrimitiveForMatrix(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_matrix from the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeFromPdfPrimitiveForVisibilityGroup(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_visibilityGroup from the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfFormXObject.SynchronizeFromPdfPrimitiveForResources(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_resources from the pdf primitive.
            </summary>
            <param name="dictFormXObject">The form XObject dictionary.</param>
        </member>
        <member name="F:Spire.Pdf.Graphics.ByteBuffer.count">
            The count of bytes in the buffer. 
        </member>
        <member name="F:Spire.Pdf.Graphics.ByteBuffer.buf">
            The buffer where the bytes are stored. 
        </member>
        <member name="F:Spire.Pdf.Graphics.ByteBuffer.HIGH_PRECISION">
            If <CODE>true</CODE> always output floating point numbers with 6 decimal digits.
            If <CODE>false</CODE> uses the faster, although less precise, representation.
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.#ctor">
            Creates new ByteBuffer with capacity 128 
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.#ctor(System.Int32)">
            Creates a byte buffer with a certain capacity.
            @param size the initial capacity
        </member>
        <!-- 对于成员“M:Spire.Pdf.Graphics.ByteBuffer.SetCacheSize(System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.FillCache(System.Int32)">
             You can fill the cache in advance if you want to.
            
             @param   decimals
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.ConvertToBytes(System.Int32)">
             Converts an double (multiplied by 100 and cast to an int) into an array of bytes.
            
             @param   i   the int
             @return  a bytearray
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append_i(System.Int32)">
            Appends an <CODE>int</CODE>. The size of the array will grow by one.
            @param b the int to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            Appends the subarray of the <CODE>byte</CODE> array. The buffer will grow by
            <CODE>len</CODE> bytes.
            @param b the array to be appended
            @param off the offset to the start of the array
            @param len the length of bytes to Append
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Byte[])">
            Appends an array of bytes.
            @param b the array to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.String)">
            Appends a <CODE>string</CODE> to the buffer. The <CODE>string</CODE> is
            converted according to the encoding ISO-8859-1.
            @param str the <CODE>string</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Char)">
            Appends a <CODE>char</CODE> to the buffer. The <CODE>char</CODE> is
            converted according to the encoding ISO-8859-1.
            @param c the <CODE>char</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(Spire.Pdf.Graphics.ByteBuffer)">
            Appends another <CODE>ByteBuffer</CODE> to this buffer.
            @param buf the <CODE>ByteBuffer</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Int32)">
            Appends the string representation of an <CODE>int</CODE>.
            @param i the <CODE>int</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Int64)">
            Appends the string representation of a <CODE>long</CODE>.
            @param i the <CODE>long</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Single)">
            Appends a string representation of a <CODE>float</CODE> according
            to the Pdf conventions.
            @param i the <CODE>float</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Append(System.Double)">
            Appends a string representation of a <CODE>double</CODE> according
            to the Pdf conventions.
            @param d the <CODE>double</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.FormatDouble(System.Double)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @return the <CODE>string</CODE> representation of the <CODE>double</CODE>
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.FormatDouble(System.Double,Spire.Pdf.Graphics.ByteBuffer)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @param buf a ByteBuffer
            @return the <CODE>String</CODE> representation of the <CODE>double</CODE> if
            <CODE>buf</CODE> is <CODE>null</CODE>. If <CODE>buf</CODE> is <B>not</B> <CODE>null</CODE>,
            then the double is appended directly to the buffer and this methods returns <CODE>null</CODE>.
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.Reset">
            Sets the size to zero.
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.ToByteArray">
             Creates a newly allocated byte array. Its size is the current
             size of this output stream and the valid contents of the buffer
             have been copied into it.
            
             @return  the current contents of this output stream, as a byte array.
        </member>
        <member name="P:Spire.Pdf.Graphics.ByteBuffer.Size">
             Returns the current size of the buffer.
            
             @return the value of the <code>count</code> field, which is the number of valid bytes in this byte buffer.
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.ToString">
             Converts the buffer's contents into a string, translating bytes into
             characters according to the platform's default character encoding.
            
             @return string translated from the buffer's contents.
        </member>
        <member name="M:Spire.Pdf.Graphics.ByteBuffer.WriteTo(System.IO.Stream)">
             Writes the complete contents of this byte buffer output to
             the specified output stream argument, as if by calling the output
             stream's write method using <code>out.Write(buf, 0, count)</code>.
            
             @param      out   the output stream to which to write the data.
             @exception  IOException  if an I/O error occurs.
        </member>
        <member name="M:Spire.Pdf.Graphics.ImageUtilities.GetShortInverted(System.IO.Stream)">
            <summary>
            Reads an inverted short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.JpegEncoder.BaseJPEGEncoder.DefaultQuantizerQuality">
            <summary>
            Default Quantizer Quality.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.JpegEncoder.BaseJPEGEncoder.LuminanceTable">
            <summary>
            A 64 byte array which corresponds to a JPEG Luminance Quantization table.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.JpegEncoder.BaseJPEGEncoder.ChromianceTable">
            <summary>
            A 64 byte array which corresponds to a JPEG Chromiance Quantization table.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.BaseJPEGEncoder.EncodeImageBufferToJpg(System.Byte[0:,0:,0:],System.Drawing.Point,System.Drawing.Point,System.IO.BinaryWriter,System.Single,Spire.Pdf.Graphics.JpegEncoder.Utils.IProgress,Spire.Pdf.Graphics.JpegEncoder.Utils.ICurrentOperation)">
            <summary>
            Encodes a provided ImageBuffer[,,] to a JPG Image.
            </summary>
            <param name="ImageBuffer">The ImageBuffer containing the pixel data.</param>
            <param name="originalDimension">Dimension of the original image. This value is written to the image header.</param>
            <param name="actualDimension">Dimension on which the Encoder works. As the Encoder works in 8*8 blocks, if the image size is not divisible by 8 the remaining blocks are set to '0' (in this implementation)</param>
            <param name="OutputStream">Stream to which the JPEG data is to be written.</param>
            <param name="Quantizer_Quality">Required quantizer quality; Default: 50 , Lower value higher quality.</param>
            <param name="progress">Interface for updating Progress.</param>
            <param name="currentOperation">Interface for updating CurrentOperation.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.BaseJPEGEncoder.EncodeImageToJpg(System.Drawing.Bitmap,System.IO.BinaryWriter,System.Single,Spire.Pdf.Graphics.JpegEncoder.Utils.IProgress,Spire.Pdf.Graphics.JpegEncoder.Utils.ICurrentOperation)">
            <summary>
            Encodes a provided Image to a JPG Image.
            </summary>
            <param name="ImageToBeEncoded">The Image to be encoded.</param>
            <param name="OutputStream">Stream to which the JPEG data is to be written.</param>
            <param name="Quantizer_Quality">Required quantizer quality; Default: 50 , Lower value higher quality.</param>
            <param name="progress">Interface for updating Progress.</param>
            <param name="currentOperation">Interface for updating CurrentOperation.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.JpegEncoder.Imaging">
            <summary>
            Generates Y, Cb, Cr, R, G and B values from given RGB_Buffer
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.JpegEncoder.Imaging.ChannelType">
            <summary>
            Defines the different possible channel types.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.Imaging.Get_Channel_Data(System.Byte[0:,0:,0:],System.Boolean,System.Int32,System.Int32,Spire.Pdf.Graphics.JpegEncoder.Imaging.ChannelType,Spire.Pdf.Graphics.JpegEncoder.Utils.IProgress,Spire.Pdf.Graphics.JpegEncoder.Utils.ICurrentOperation)">
            <summary>
            Generates Y, Cb, Cr, R, G and B values from given RGB_Buffer
            </summary>
            <param name="RGB_Buffer">The input RGB_Buffer.</param>
            <param name="drawInGrayscale">Draw in grayscale.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="channel">Enum specifying the channel type required.</param>
            <param name="progress">Interface for updating progress.</param>
            <param name="operation">Interface for updating current operation.</param>
            <returns>3D array of the specified channel type.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device. 
            </summary>
            <param name="hdc">[in] Handle to an existing DC. If this handle is NULL, the function creates a memory DC compatible with the application's current screen. </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            If the function fails, the return value is NULL. 
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC). 
            The new object replaces the previous object of the same type. 
            </summary>
            <param name="hdc">[in] Handle to the DC.</param>
            <param name="hgdiobj">[in] Handle to the object to be selected. The specified object must have been created by using one of the following functions. </param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.SetStretchBltMode(System.IntPtr,System.Int32)">
            <summary>
            The SetStretchBltMode function sets the bitmap stretching mode in the specified device context. 
            </summary>
            <param name="hdc">[in] Handle to the device context. </param>
            <param name="iStretchMode">[in] Specifies the stretching mode. This parameter can be one of the values from StretchBltModes enum.</param>
            <returns>
            If the function succeeds, the return value is the previous stretching mode.
            If the function fails, the return value is zero. 
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.GetObject(System.IntPtr,System.Int32,Spire.Pdf.Graphics.JpegEncoder.InteropGDI.BITMAP@)">
            <summary>
            The GetObject function retrieves information for the specified graphics object. 
            </summary>
            <param name="hgdiobj">[in] Handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the CreateDIBSection function. </param>
            <param name="cbBuffer">[in] Specifies the number of bytes of information to be written to the buffer. </param>
            <param name="lpvObject">[out] Pointer to a buffer that receives the information about the specified graphics object. </param>
            <returns>
            If the function succeeds, and lpvObject is a valid pointer, the return value is the number of bytes stored into the buffer.
            If the function succeeds, and lpvObject is NULL, the return value is the number of bytes required to hold the information the function would store into the buffer.
            If the function fails, the return value is zero. 
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations)">
            <summary>
            The StretchBlt function copies a bitmap from a source rectangle into a destination 
            rectangle, stretching or compressing the bitmap to fit the dimensions of the destination 
            rectangle, if necessary. The system stretches or compresses the bitmap according to 
            the stretching mode currently set in the destination device context. 
            </summary>
            <param name="hdcDest">[in] Handle to the destination device context. </param>
            <param name="nXOriginDest">[in] Specifies the x-coordinate, in logical units, of the upper-left corner of the destination rectangle. </param>
            <param name="nYOriginDest">[in] Specifies the y-coordinate, in logical units, of the upper-left corner of the destination rectangle. </param>
            <param name="nWidthDest">[in] Specifies the width, in logical units, of the destination rectangle. </param>
            <param name="nHeightDest">[in] Specifies the height, in logical units, of the destination rectangle. </param>
            <param name="hdcSrc">[in] Handle to the source device context. </param>
            <param name="nXOriginSrc">[in] Specifies the x-coordinate, in logical units, of the upper-left corner of the source rectangle. </param>
            <param name="nYOriginSrc">[in] Specifies the y-coordinate, in logical units, of the upper-left corner of the source rectangle. </param>
            <param name="nWidthSrc">[in] Specifies the width, in logical units, of the source rectangle. </param>
            <param name="nHeightSrc">[in] Specifies the height, in logical units, of the source rectangle. </param>
            <param name="dwRop">[in] Specifies the raster operation to be performed. Raster operation codes define how the system combines colors in output operations that involve a brush, a source bitmap, and a destination bitmap. </param>
            <returns>
            If the function succeeds, the return value is nonzero. 
            If the function fails, the return value is zero. 
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context. 
            </summary>
            <param name="hdc">[in] Handle to a device context. </param>
            <param name="nWidth">[in] Specifies the bitmap width, in pixels. </param>
            <param name="nHeight">[in] Specifies the bitmap height, in pixels. </param>
            <returns>
            If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.GetDIBits(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.Byte[],Spire.Pdf.Graphics.JpegEncoder.InteropGDI.BITMAPINFOHEADER@,System.UInt32)">
            <summary>
            The GetDIBits function retrieves the bits of the specified compatible bitmap 
            and copies them into a buffer as a DIB using the specified format. 
            </summary>
            <param name="hdc">[in] Handle to the device context. </param>
            <param name="hbmp">[in] Handle to the bitmap. This must be a compatible bitmap (DDB). </param>
            <param name="uStartScan">[in] Specifies the first scan line to retrieve.</param>
            <param name="cScanLines">[in] Specifies the number of scan lines to retrieve.</param>
            <param name="lpvBits">[out] Pointer to a buffer to receive the bitmap data. If this parameter is NULL, the function passes the dimensions and format of the bitmap to the BITMAPINFOHEADER structure pointed to by the lpbi parameter.</param>
            <param name="lpbmi">[in/out] Pointer to a BITMAPINFOHEADER structure that specifies the desired format for the DIB data. </param>
            <param name="uUsage">[in] Specifies the format of the bmiColors member of the BITMAPINFOHEADER structure.</param>
            <returns>If the lpvBits parameter is non-NULL and the function succeeds, the return value is the number of scan lines copied from the bitmap.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.SetDIBits(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.Byte[],Spire.Pdf.Graphics.JpegEncoder.InteropGDI.BITMAPINFOHEADER@,System.UInt32)">
            <summary>
            The SetDIBits function sets the pixels in a compatible bitmap (DDB) 
            using the color data found in the specified DIB . 
            </summary>
            <param name="hdc">[in] Handle to a device context. </param>
            <param name="hbmp">[in] Handle to the compatible bitmap (DDB) that is to be altered using the color data from the specified DIB.</param>
            <param name="uStartScan">[in] Specifies the starting scan line for the device-independent color data in the array pointed to by the lpvBits parameter. </param>
            <param name="cScanLines">[in] Specifies the number of scan lines found in the array containing device-independent color data. </param>
            <param name="lpvBits">[in] Pointer to the DIB color data, stored as an array of bytes. The format of the bitmap values depends on the biBitCount member of the BITMAPINFO structure pointed to by the lpbmi parameter. </param>
            <param name="lpbmi">[in] Pointer to a BITMAPINFOHEADER structure that contains information about the DIB. </param>
            <param name="fuColorUse">[in] Specifies whether the bmiColors member of the BITMAPINFO structure was provided and, if so, whether bmiColors contains explicit red, green, blue (RGB) values or palette indexes.</param>
            <returns>If the function succeeds, the return value is the number of scan lines copied.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a display device context (DC) 
            for the client area of a specified window or for the entire screen.        
            </summary>
            <param name="hWnd">[in] Handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen. </param>
            <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client area. I
            If the function fails, the return value is NULL. 
            </returns>  
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.GetClientRect(System.IntPtr,Spire.Pdf.Graphics.JpegEncoder.InteropGDI.RECT@)">
            <summary>
            The GetClientRect function retrieves the coordinates of a window's client area.
            The client coordinates specify the upper-left and lower-right corners of the client area. 
            </summary>
            <param name="hWnd">[in] Handle to the window whose client coordinates are to be retrieved.</param>
            <param name="lpRect">[out] Pointer to a RECT structure that receives the client coordinates.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations)">
            <summary>
               Performs a bit-block transfer of the color data corresponding to a
               rectangle of pixels from the specified source device context into
               a destination device context.
            </summary>
            <param name="hdc">Handle to the destination device context.</param>
            <param name="nXDest">The leftmost x-coordinate of the destination rectangle (in pixels).</param>
            <param name="nYDest">The topmost y-coordinate of the destination rectangle (in pixels).</param>
            <param name="nWidth">The width of the source and destination rectangles (in pixels).</param>
            <param name="nHeight">The height of the source and the destination rectangles (in pixels).</param>
            <param name="hdcSrc">Handle to the source device context.</param>
            <param name="nXSrc">The leftmost x-coordinate of the source rectangle (in pixels).</param>
            <param name="nYSrc">The topmost y-coordinate of the source rectangle (in pixels).</param>
            <param name="dwRop">A raster-operation code.</param>
            <returns>
               <c>true</c> if the operation succeeded, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, 
            freeing all system resources associated with the object. After the object is deleted, 
            the specified handle is no longer valid. 
            </summary>
            <param name="hObject">[in] Handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications. 
            The effect of the ReleaseDC function depends on the type of DC.
            </summary>
            <param name="hWnd">[in] Handle to the window whose DC is to be released. </param>
            <param name="hDC">[in] Handle to the DC to be released. </param>
            <returns>
            The return value indicates whether the DC was released. 
            If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.SetPixel(System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            The SetPixel function sets the pixel at the specified coordinates to the specified color. 
            </summary>
            <param name="hdc">[in] Handle to the device context. </param>
            <param name="X">[in] Specifies the x-coordinate, in logical units, of the point to be set. </param>
            <param name="Y">[in] Specifies the y-coordinate, in logical units, of the point to be set. </param>
            <param name="crColor">[in] Specifies the color to be used to paint the point.</param>
            <returns>If the function succeeds, the return value is the RGB value that the function sets the pixel to. 
            This value may differ from the color specified by crColor; that occurs when an exact match for the 
            specified color cannot be found.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations">
            <summary>
                Specifies a raster-operation code. These codes define how the color data for the
                source rectangle is to be combined with the color data for the destination
                rectangle to achieve the final color.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.JpegEncoder.InteropGDI.TernaryRasterOperations.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Images.Metafiles.PdfEmfRenderer.FontRegistryKey">
            <summary>
            Get Font registry key.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Images.Metafiles.PdfEmfRenderer.FontNameRegistrySubKey">
            <summary>
            Get font name key of teh registry.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Images.Metafiles.PdfEmfRenderer.DrawLines(System.Drawing.Pen,System.Drawing.PointF[],System.Boolean)">
            <summary>
            Draws extra line between the last and first points.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
            <param name="closeShape">If true, connects last and first points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Images.Metafiles.PdfEmfRenderer.DrawCompoundLine(System.Drawing.Pen,System.Drawing.PointF[],System.Boolean,Spire.Pdf.Graphics.PdfPen)">
            <summary>
            Darw the multiple Line
            </summary>
            <param name="pen"></param>
            <param name="points"></param>
            <param name="rotate"></param>
            <param name="pdfPen"></param>
        </member>
        <member name="P:Spire.Pdf.Graphics.Images.Metafiles.PdfEmfRenderer.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Invalid">
            <summary>
            Invalid object type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Brush">
            <summary>
            Brush object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Pen">
            <summary>
            Pen object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Path">
            <summary>
            Path object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Region">
            <summary>
            Region object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Image">
            <summary>
            Image object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.Font">
            <summary>
            Font object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.StringFormat">
            <summary>
            String format object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.ImageAttributes">
            <summary>
            Image attributes object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectType.CustomLineCap">
            <summary>
            Custom line cap object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.BrushType.SolidBrush">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.BrushType.HatchBrush">
            <summary>
            Hatch brush.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.BrushType.TextureBrush">
            <summary>
            Texture brush.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.BrushType.PathGradientBrush">
            <summary>
            Path gradient brush.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.BrushType.LienarGradientBrush">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags">
            <summary>
            Flags for a linear gradient brush.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags.Default">
            <summary>
            Minimal data are present.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags.Matrix">
            <summary>
            The brush applies a transformation matrix to the source image.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags.ColorBlend">
            <summary>
            The brush contains a ColorBlend object for use with its InterpolationColors property.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags.Blend">
            <summary>
            The brush contains a Blend object for use with its Blend property.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags.FocusScales">
            <summary>
            The brush has a non-default value for the FocusScales property.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.GradientBrushFlags.GammaCorrection">
            <summary>
            The brush uses gamma correction.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Images.Metafiles.PenFlags">
            <summary>
            Represents pen flags.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.Default">
            <summary>
            Pen just with color set.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.Transform">
            <summary>
            Transformation set. (20-... - float )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.StartCap">
            <summary>
            StartCap set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.EndCap">
            <summary>
            EndCap set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.LineJoin">
            <summary>
            LineJoin set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.MiterLimit">
            <summary>
            MiterLimit set. ( 20 - float )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.DashStyle">
            <summary>
            Pen has DashStyle defined.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.DashCap">
            <summary>
            DashCap set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.DashOffset">
            <summary>
            DashOffset is defined. (20 - float)
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.DashPattern">
            <summary>
            DashPattern is defined. (20 - int: numArray; 24-... - float: DashPattern )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.Alignment">
            <summary>
            Alignment set. (20 - int )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.CompoundArray">
            <summary>
            CompoundArray set. (20 - int: numArray; 24-... - float: compoundArray )
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.CustomStartCap">
            <summary>
            The pen uses a custom start cap.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.PenFlags.CustomEndCap">
            <summary>
            The pen uses a custom end cap.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectImageFormat.Unknown">
            <summary>
            Unknown format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectImageFormat.Bitmap">
            <summary>
            Bitmap image.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectImageFormat.Metafile">
            <summary>
            Metafile image.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectRegionInitState.Rectangle">
            <summary>
            Region is from rectangle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectRegionInitState.GraphpicsPath">
            <summary>
            Region is from graphics path.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectRegionInitState.Empty">
            <summary>
            Region is empty.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Images.Metafiles.ObjectRegionInitState.Infinity">
            <summary>
            Region is infinity.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBmpImage">
            <summary>
            Represents the bmp image object.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBmpImage.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBmpImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBmpImage.HorizontalResolution">
            <summary>
            Gets the horizontal resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBmpImage.VerticalResolution">
            <summary>
            Gets the vertical resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBmpImage.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of PdfBmpImage from stream.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBmpImage.#ctor(System.String)">
            <summary>
            Initialize a new instance of PdfBmpImage from path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBmpImage.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of PdfBmpImage from byte array.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.#ctor(System.String)">
            <summary>
            Initialize a new instance of PdfGifImage from path.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of PdfGifImage from byte array.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of PdfGifImage from stream.
            </summary>
            <param name="isp"></param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGifImage.FrameCount">
            <summary>
            Get the count of frame in gif.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGifImage.ActiveFrame">
            <summary>
            Get or set the current frame index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGifImage.Width">
            <summary>
            Get the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGifImage.Height">
            <summary>
            Get the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGifImage.HorizontalResolution">
            <summary>
            Get the horizontal resolution, in pixels per inch, of this Image. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGifImage.VerticalResolution">
            <summary>
            Gets the vertical resolution, in pixels per inch, of this Image. 
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.GetFramePosition(System.Int32)">
            Gets the [x,y] position of the frame in reference to the
            logical screen.
            @param frame the frame
            @return the [x,y] position of the frame
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ReadHeader">
            Reads GIF file header information.
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ReadLSD">
            Reads Logical Screen Descriptor
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ReadShort">
            Reads next 16-bit value, LSB first
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ReadBlock">
             Reads next variable length block from input.
            
             @return number of bytes stored in "buffer"
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ReadImage">
            Reads next frame image
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ResetFrame">
            Resets frame state for reading next image.
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.ReadGraphicControlExt">
            Reads Graphics Control Extension values
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfGifImage.Skip">
            Skips variable length blocks up to and including
            next zero length block.
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfJ2kImage">
            <summary>
            Represents the jpeg2000 image object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJ2kImage.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJ2kImage.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJ2kImage.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJ2kImage.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJ2kImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJ2kImage.HorizontalResolution">
            <summary>
            Gets the horizontal resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJ2kImage.VerticalResolution">
            <summary>
            Gets the vertical resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJ2kImage.#ctor(System.String)">
            <summary>
            Initialize a new instance of PdfBmpImage from path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJ2kImage.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of PdfBmpImage from byte array.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJ2kImage.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of PdfBmpImage from stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJ2kImage.ProcessParameters">
            This method checks if the image is a valid JPEG and processes some parameters.
            @throws BadElementException
            @throws IOException
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJ2kImage.IsJp2">
            @return <code>true</code> if the image is JP2, <code>false</code> if a codestream.
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfJb2Image">
            <summary>
            Represents the jb2 image object.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJb2Image.Width">
            <summary>
            Get the width of the image in pixel unit.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJb2Image.Height">
            <summary>
            Get the height of the image in pixel unit.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJb2Image.HorizontalResolution">
            <summary>
            Get the horizontal resoulution of the image in pixel unit.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJb2Image.VerticalResolution">
            <summary>
            Get the vertical resolution of the image in pixel unit.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJb2Image.#ctor(System.String)">
            <summary>
            Initialize a new instance of PdfJb2Image from file path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJb2Image.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of PdfJb2Image from byte array.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJb2Image.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of PdfJb2Image from stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Spire.Pdf.Graphics.JBIG2SegmentReader.JBIG2Segment">
            Inner class that holds information about a JBIG2 segment.
            @since   2.1.5
        </member>
        <member name="T:Spire.Pdf.Graphics.JBIG2SegmentReader.JBIG2Page">
            Inner class that holds information about a JBIG2 page.
            @since   2.1.5
        </member>
        <member name="M:Spire.Pdf.Graphics.JBIG2SegmentReader.JBIG2Page.GetData(System.Boolean)">
            return as a single byte array the header-data for each segment in segment number
            order, EMBEDDED organization, but i am putting the needed segments in SEQUENTIAL organization.
            if for_embedding, skip the segment types that are known to be not for acrobat. 
            @param for_embedding
            @return  a byte array
            @throws IOException
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfJpegImage">
            <summary>
            Represents the jpeg image object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.RIGHT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.LEFT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.MIDDLE_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.TEXTWRAP">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.UNDERLYING">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.AX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.AY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.BX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.BY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.CX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.CY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.DX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.DY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_NONE">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_JPEG">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_PNG">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_GIF">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_BMP">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_TIFF">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_WMF">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_JPEG2000">
            type of image 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.ORIGINAL_JBIG2">
            type of image
            @since	2.1.5
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.invert">
            Image color inversion 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.alignment">
            <summary> The alignment of the Image. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.alt">
            <summary> Text that can be shown instead of the image. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.absoluteX">
            <summary> This is the absolute X-position of the image. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.absoluteY">
            <summary> This is the absolute Y-position of the image. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.plainWidth">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.plainHeight">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.compressionLevel">
            The compression level of the content streams.
            @since   2.1.3
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.rotationRadians">
            <summary> This is the rotation of the image. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.colorspace">
            <summary> this is the colorspace of a jpeg-image. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.transparency">
            <summary> this is the transparency information of the raw image</summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.indentationLeft">
            the indentation to the left. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.indentationRight">
            the indentation to the right. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.dpiX">
            <summary> Holds value of property dpiX. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.dpiY">
            <summary> Holds value of property dpiY. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.interpolation">
            <summary> Holds value of property interpolation. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.profile">
            <summary> ICC Profile attached </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.deflated">
            Holds value of property deflated. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.smask">
            Holds value of property smask. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.xyRatio">
            Holds value of property XYRatio. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.originalData">
            Holds value of property originalData. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.spacingBefore">
            The spacing before the image. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.spacingAfter">
            The spacing after the image. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.widthPercentage">
            Holds value of property widthPercentage.
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.initialRotation">
            Holds value of property initialRotation.
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.VALID_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.VALID_MARKERS">
            <summary> Acceptable Jpeg markers. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.UNSUPPORTED_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.UNSUPPORTED_MARKERS">
            <summary> Unsupported Jpeg markers. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.NOPARAM_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.NOPARAM_MARKERS">
            <summary> Jpeg markers without additional parameters. </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.M_APPD">
            Marker value for Photoshop IRB 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfJpegImage.PS_8BIM_RESO">
            sequence preceding Photoshop resolution data 
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJpegImage.#ctor(System.String)">
            <summary>
            Initialize a new instance of PdfJpegImage from path. 
            </summary>
            <param name="fileName">The file path</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJpegImage.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of PdfJpegImage from byte array.
            </summary>
            <param name="data">The data array</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfJpegImage.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of PdfJpegImage from stream.
            </summary>
            <param name="imageStream">The data stream</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJpegImage.HorizontalResolution">
            <summary>
            Gets the horizontal resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJpegImage.VerticalResolution">
            <summary>
            Gets the vertical resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJpegImage.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfJpegImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfPngImage">
            <summary>
            Represents the png object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.PNGID">
            Some PNG specific values. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.IHDR">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.PLTE">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.IDAT">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.IEND">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.tRNS">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.pHYs">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.gAMA">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.cHRM">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.sRGB">
            A PNG marker. 
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfPngImage.iCCP">
            A PNG marker. 
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPngImage.Width">
            <summary>
            Get the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPngImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPngImage.HorizontalResolution">
            <summary>
            Get the horizontal resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPngImage.VerticalResolution">
            <summary>
            Get the vertical resolution, in pixels per inch, of this Image.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPngImage.#ctor(System.String)">
            <summary>
            Initialize a new instance of PdfPngImage from file path.
            </summary>
            <param name="filePath">the file path</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPngImage.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of PdfPngImage from byte array.
            </summary>
            <param name="data">byte array</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPngImage.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of PdfPngImage from stream.
            </summary>
            <param name="isp">stream</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPngImage.GetInt(System.IO.Stream)">
             Gets an <CODE>int</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPngImage.GetWord(System.IO.Stream)">
             Gets a <CODE>word</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPngImage.GetString(System.IO.Stream)">
             Gets a <CODE>String</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfTiffImage">
            <summary>
            Represents the tiff image object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.IPdfVisibilityGroup">
            <summary>
            Represent pdf optional content group(or optional content membership).
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.IPdfVisibilityGroup.Visibility">
            <summary>
            Visible of optional content.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfIntent">
            <summary>
            The intent of using optional group
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfIntent.View">
            <summary>
            Which is intended to represent a document designer's 
            structural organization of artwork.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfIntent.Design">
            <summary>
            Which is intended for interactive use by document consumers.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfLayer">
            <summary>
            Represent pdf optional content group.
            Content typically belongs to a single optional content group.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayer.m_dictionary">
            <summary>
            Optional content group dictionary
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayer.m_name">
            <summary>
            Optional content group Name
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayer.m_intent">
            <summary>
            Optional group used Intent
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayer.m_config">
            <summary>
            Optional content configuration.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayer.m_reference">
            <summary>
            Optional content group reference.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayer.Name">
            <summary>
            Get or set pdf layer name.
            Notice: 
            Name may be is not unique.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayer.Visibility">
            <summary>
            Get or set pdf layer visible.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayer.IsShowOnUI">
            <summary>
            Get whether the layer shows on user interface or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayer.Reference">
            <summary>
            Get reference of the layer.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.#ctor(System.String,Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance
            </summary>
            <param name="name">The pdf layer name</param>
            <param name="defaultViewConfig">The optional content configuration.</param>
            <param name="crossTable">The pdf cross Table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.#ctor(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance with the optional content group dictionary
            </summary>
            <param name="dictOptionalContentGroup">The optional content group dictionary</param>
            <param name="defaultViewConfig">The optional content configuration.</param>
            <param name="crossTable">The pdf cross Table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.#ctor(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration,Spire.Pdf.IO.PdfCrossTable,System.String)">
            <summary>
            Construct an instance with the optional content group dictionary
            </summary>
            <param name="dictOptionalContentGroup">The optional content group dictionary</param>
            <param name="defaultViewConfig">The optional content configuration.</param>
            <param name="crossTable">The pdf cross Table</param>
            <param name="reference">The reference of the layer</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.CreateGraphics(Spire.Pdf.Graphics.PdfCanvas)">
            <summary>
            Create the layer graphics.
            </summary>
            <param name="g">
            The pdf layer container's graphics.
            eg: PdfPageBase.Canvas ...
            </param>
            <returns>The pdf layer graphics.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.Dictionary_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Trigger when pdf wrappered element saving.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="ars">The arguments of event.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayer.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.SynchronizeToPdfPrimitive">
            <summary>
            Synchronize the instance to the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.SynchronizeToPdfPrimitiveForName(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_name to the pdf primitive.
            </summary>
            <param name="dictOptionalContentGroup">The optional content group dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.SynchronizeToPdfPrimitiveForIntent(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_intent to the pdf primitive.
            </summary>
            <param name="dictOptionalContentGroup">The optional content group dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.SynchronizeFromPdfPrimitive">
            <summary>
            Synchronize the instance from the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.SynchronizeFromPdfPrimitiveForName(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_name from the pdf primitive.
            </summary>
            <param name="dictOptionalContentGroup">The optional content group dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayer.SynchronizeFromPdfPrimitiveForIntent(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_intent from the pdf primitive.
            </summary>
            <param name="dictOptionalContentGroup">The optional content group dictionary</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfLayerCollection">
            <summary>
            Represent pdf layer collection.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollection.m_documentBase">
            <summary>
            The PdfDocumentBase.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollection.m_dictionary">
            <summary>
            Optional content properties dictionary.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollection.m_layers">
            <summary>
            Optional content groups.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollection.m_defaultViewConfig">
            <summary>
            Default viewing optional content configuration.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerCollection.Item(System.Int32)">
            <summary>
            Get the pdf layer of the index.
            </summary>
            <param name="index">Pdf layer index</param>
            <returns>Pdf layer</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerCollection.Item(System.String)">
            <summary>
            Get the pdf layer of name.
            Notice: 
            Pdf layer name may be is not unique.
            If exist duplication of name,return first pdf layer of name.
            If not exist pdf layer of name,return null;
            </summary>
            <param name="name">Pdf layer name</param>
            <returns>Pdf layer</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerCollection.Count">
            <summary>
            Gets the number of pdf layers contained.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.#ctor(Spire.Pdf.PdfDocumentBase,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance
            </summary>
            <param name="documentBase">The PdfDocumentBase.</param>
            <param name="crossTable">The pdf cross table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.#ctor(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.PdfDocumentBase,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance with the optional content properties dictionary
            </summary>
            <param name="dictOptionalContentProperties">The optional content properties dictionary</param>
            <param name="documentBase">The PdfDocumentBase.</param>
            <param name="crossTable">The pdf cross table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.NewOutline">
            <summary>
            Create a new empty pdf layer outline.
            </summary>
            <returns>Pdf layer outline.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.AddLayer(System.String)">
            <summary>
            Add a new pdf layer.
            </summary>
            <param name="name">Pdf layer name.</param>
            <returns>Pdf layer.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.AddLayer(System.String,Spire.Pdf.Graphics.Layer.PdfVisibility)">
            <summary>
            Add a new pdf layer.
            </summary>
            <param name="name">Pdf layer name.</param>
            <param name="state">Pdf layer's visibility.</param>
            <returns>Pdf layer.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.RemoveLayer(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Remove the pdf layer.
            </summary>
            <param name="layer">The pdf layer.</param>
            <returns>
            True if item is successfully removed; otherwise, false. This method also
             returns false if item was not found
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.RemoveLayer(Spire.Pdf.Graphics.Layer.PdfLayer,System.Boolean)">
            <summary>
            Remove the pdf layer.
            </summary>
            <param name="layer">The pdf layer.</param>
            <param name="withContent">If true,remove content with the pdf layer.Otherwise,false.</param>
            <returns>
            True if item is successfully removed; otherwise, false. This method also
             returns false if item was not found
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.RemovelayerFromOcgs(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Remove layer from Ocgs array.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.RemoveLayer(System.String)">
            <summary>
            Remove the pdf layer.
            Notice: Pdf layer name may be is not unique.
            If exist duplication of name,will remove all pdf layers of name.
            </summary>
            <param name="name">Pdf layer name.</param>
            <returns>
            True if item is successfully removed; otherwise, false. This method also
             returns false if item was not found
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.RemoveLayer(System.String,System.Boolean)">
            <summary>
            Remove the pdf layer.
            Notice: Pdf layer name may be is not unique.
            If exist duplication of name,will remove all pdf layers of name.
            </summary>
            <param name="name">Pdf layer name.</param>
            <param name="withContent">If true,remove content with the pdf layer.Otherwise,false.</param>
            <returns>
            True if item is successfully removed; otherwise, false. This method also
             returns false if item was not found
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.FindLayers(System.String)">
            <summary>
            Find pdf layers of name.
            </summary>
            <param name="name">Pdf layer name.</param>
            <returns>Pdf layers of name.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.Dictionary_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Trigger when pdf wrappered element saving.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="ars">The arguments of event.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.SynchronizeToPdfPrimitive">
            <summary>
            Synchronize the instance to the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.SynchronizeToPdfPrimitiveForConfiguration(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_defaultViewConfig,m_otherConfigs to the pdf primitive.
            </summary>
            <param name="dictOptionalContentProperties">The optional content properties dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.SynchronizeToPdfPrimitiveForLayers(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_layers to the pdf primitive.
            </summary>
            <param name="dictOptionalContentProperties">The optional content properties dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.SynchronizeFromPdfPrimitive">
            <summary>
            Synchronize the instance from the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.SynchronizeFromPdfPrimitiveForConfiguration(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_defaultViewConfig,m_otherConfigs from the pdf primitive.
            </summary>
            <param name="dictOptionalContentProperties">The optional content properties dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollection.SynchronizeFromPdfPrimitiveForLayers(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_layers from the pdf primitive.
            </summary>
            <param name="dictOptionalContentProperties">The optional content properties dictionary</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration">
            <summary>
            Represent pdf optional content configuration
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_dictionary">
            <summary>
            Optional content configuration dictionary
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_name">
            <summary>
            A name for the configuration.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_baseState">
            <summary>
            Used to initialize the states of all optional content groups's visibility.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_on">
            <summary>
            An array of optional content groups whose state should be set to
            ON when this configuration is applied.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_off">
            <summary>
            An array of optional content groups whose state should be set to
            OFF when this configuration is applied.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_intent">
            <summary>
            Used to determine which optional group's states to consider and ignore
            in calculating the visibility of content.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.m_layerOutline">
            <summary>
            An array specifying the recommended order for presentation of optional content
            groups in user interface.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.#ctor(System.String,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance
            </summary>
            <param name="name">A name for the configuration.</param>
            <param name="crossTable">The pdf cross table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.#ctor(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance with the optional content configuration dictionary
            </summary>
            <param name="dictOptionalContentProperties">The optional content configuration dictionary</param>
            <param name="crossTable">The pdf cross table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.NewOutline">
            <summary>
            Create a new empty pdf layer outline.
            </summary>
            <returns>Pdf layer outline.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.AddLayer(Spire.Pdf.Graphics.Layer.PdfLayer,Spire.Pdf.Graphics.Layer.PdfVisibility)">
            <summary>
            Configure a layer at top level.
            </summary>
            <param name="layer">The pdf layer.</param>
            <param name="state">The layer's visibility.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.RemoveLayer(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Remove a layer's configs.
            </summary>
            <param name="layer">The pdf layer.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.GetLayerVisibility(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Get layer's visibility.
            </summary>
            <param name="layer">The pdf layer.</param>
            <returns>The pdf layer's visibility.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SetLayerVisibility(Spire.Pdf.Graphics.Layer.PdfLayer,Spire.Pdf.Graphics.Layer.PdfVisibility)">
            <summary>
            Set layer's visibility.
            </summary>
            <param name="layer">The pdf layer.</param>
            <param name="state">The pdf layer's visibility.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.GetLayerShowOnUI(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Return layer shows on ui or not.
            </summary>
            <param name="layer">The layer</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.GetVisibility(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Get layer's visibility.
            </summary>
            <param name="layer">The pdf Layer dictionary.</param>
            <returns>The pdf layer's visibility.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.AddVisibilitySettings(System.Collections.Generic.List{Spire.Pdf.Interfaces.IPdfPrimitive},Spire.Pdf.Graphics.Layer.PdfVisibility)">
            <summary>
            Add pdf layer visibility settings.
            </summary>
            <param name="layers">The list of pdf Layer dictionary.</param>
            <param name="state">Visibility of the pdf layer.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.AddVisibilitySettings(Spire.Pdf.Interfaces.IPdfPrimitive,Spire.Pdf.Graphics.Layer.PdfVisibility)">
            <summary>
            Add pdf layer visibility settings.
            </summary>
            <param name="layer">The pdf Layer dictionary.</param>
            <param name="state">Visibility of the pdf layer.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.RemoveVisibilitySettings(System.Collections.Generic.List{Spire.Pdf.Interfaces.IPdfPrimitive})">
            <summary>
            Remove pdf layer visibility settings.
            </summary>
            <param name="layers">The list of pdf Layer dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.RemoveVisibilitySettings(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Remove pdf layer visibility settings.
            </summary>
            <param name="layer">The pdf Layer dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.AddVisibilitySettings(Spire.Pdf.Graphics.Layer.PdfLayer,Spire.Pdf.Graphics.Layer.PdfVisibility)">
            <summary>
            Add pdf layer visibility settings.
            </summary>
            <param name="layer">The pdf Layer.</param>
            <param name="state">Visibility of the pdf layer.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.RemoveVisibilitySettings(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Remove pdf layer visibility settings.
            </summary>
            <param name="layer">The pdf Layer.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.GetShowOnUI(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Return the layer shows on ui or not.
            </summary>
            <param name="layer">The layer</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.Dictionary_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Trigger when pdf wrappered element saving.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="ars">The arguments of event.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitive">
            <summary>
            Synchronize the instance to the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitiveForName(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_name to the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitiveForBaseState(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_baseState to the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitiveForOn(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_on to the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitiveForOff(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_off to the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitiveForIntent(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_intent to the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeToPdfPrimitiveForLayerOutline(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_layerOutline to the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitive">
            <summary>
            Synchronize the instance from the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitiveForName(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_name from the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitiveForBaseState(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_baseState from the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitiveForIntent(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_intent from the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitiveForOn(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_on from the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitiveForOff(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_off from the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerCollectionConfiguration.SynchronizeFromPdfPrimitiveForLayerOutline(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_layerOutline from the pdf primitive.
            </summary>
            <param name="dictOptionalContentConfiguration">The optional content configuration dictionary.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfLayerMembership">
            <summary>
            Represent pdf optional content membership.
            To express more complex visibility policies,content should declare itself not 
            to belong directly an optional content group but rather to an optional content
            membership.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerMembership.m_dictionary">
            <summary>
            Optional content membership dictionary
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerMembership.m_relatedLayers">
            <summary>
            Optional content group whose visibility determine the visibility of
            this optional content membership.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerMembership.m_visibilityPolicy">
            <summary>
            Visibility policy.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerMembership.m_visibilityExpression">
            <summary>
            Visibility expression.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerMembership.m_layers">
            <summary>
            All optional content groups in document,not all related this membership.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerMembership.Visibility">
            <summary>
            Pdf layer membership Visibility.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.#ctor(System.Collections.Generic.List{Spire.Pdf.Graphics.Layer.PdfLayer},Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct a instance.
            </summary>
            <param name="layers">all optional content groups.</param>
            <param name="crossTable">The pdf cross table.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.#ctor(Spire.Pdf.Primitives.PdfDictionary,System.Collections.Generic.List{Spire.Pdf.Graphics.Layer.PdfLayer},Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance with the optional content membership dictionary.
            </summary>
            <param name="dictOptionalContentProperties">The optional content membership dictionary.</param>
            <param name="layers">all optional content groups.</param>
            <param name="crossTable">The pdf cross table.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.Dictionary_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Trigger when pdf wrappered element saving.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="ars">The arguments of event.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerMembership.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeToPdfPrimitive">
            <summary>
            Synchronize the instance to the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeToPdfPrimitiveForRelatedLayerss(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_relatedLayers to the pdf primitive.
            </summary>
            <param name="dictOptionalContentMembership">The optional content membership dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeToPdfPrimitiveForVisibilityPolicy(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_visibilityPolicy to the pdf primitive.
            </summary>
            <param name="dictOptionalContentMembership">The optional content membership dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeToPdfPrimitiveForVisibilityExpression(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_visibilityExpression to the pdf primitive.
            </summary>
            <param name="dictOptionalContentMembership">The optional content membership dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeFromPdfPrimitive">
            <summary>
            Synchronize the instance from the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeFromPdfPrimitiveForRelatedLayers(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_relatedLayers from the pdf primitive.
            </summary>
            <param name="dictOptionalContentMembership">The optional content membership dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeFromPdfPrimitiveForVisibilityPolicy(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_visibilityPolicy from the pdf primitive.
            </summary>
            <param name="dictOptionalContentMembership">The optional content membership dictionary</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerMembership.SynchronizeFromPdfPrimitiveForVisibilityExpression(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            Synchronize the instance field m_visibilityExpression from the pdf primitive.
            </summary>
            <param name="dictOptionalContentMembership">The optional content membership dictionary</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfLayerOutline">
            <summary>
            Represent the recommended order for presentation of optional content
            groups in user interface.
            Refrence "Optional content configuration dictionary's entry order".
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfLayerOutline.m_array">
            <summary>
            Optional content configuration dictionary's entry order
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.#ctor(Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance.
            </summary>
            <param name="crossTable">The pdf cross table.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.#ctor(Spire.Pdf.Primitives.PdfArray,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance with .
            </summary>
            <param name="arrayOrder"></param>
            <param name="crossTable">The pdf cross table</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.AddGroup(System.String)">
            <summary>
            Add a sub group outline.
            </summary>
            <param name="name">Group name.</param>
            <returns>Sub group outline.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.AddGroup(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Add a outline entry of the pdf layer with a sub group outline.
            </summary>
            <param name="layer">Pdf layer</param>
            <returns>Sub group outline.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.AddEntry(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Add a outline entry of the pdf layer.
            </summary>
            <param name="layer">Pdf layer</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.Remove(Spire.Pdf.Graphics.Layer.PdfLayer)">
            <summary>
            Remove an entry of the layer,inclued sub enties.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerOutline.Remove(Spire.Pdf.Graphics.Layer.PdfLayer,Spire.Pdf.Primitives.PdfArray)">
            <summary>
            Remove an entry with the layer,inclued sub enties..
            Refrence "Optional content configuration dictionary's entry order".
            </summary>
            <param name="layer">The layer.</param>
            <param name="array">The array include outline entries.</param>
            <returns>True,if has succeed.Otherwise,false.</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfLayerOutline.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfLayerUtils.RemoveLayerContent(Spire.Pdf.Graphics.Layer.PdfLayer,Spire.Pdf.PdfPageBase,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Remove layer content in the page.
            </summary>
            <param name="layer">The layer.</param>
            <param name="page">The page.</param>
            <param name="crossTable">The pdfCrossTable</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfVisibility">
            <summary>
            Represent the visibility of optional content group(or optional content membership).
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression">
            <summary>
            Specify the visibility expression for optional content belonging to PdfLayerMembership.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.m_array">
            <summary>
            An array specifying a visibility expression
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.Visible">
            <summary>
            Visible of optional content.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.#ctor(Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance
            </summary>
            <param name="crossTable">The pdf cross table.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.#ctor(Spire.Pdf.Primitives.PdfArray,Spire.Pdf.IO.PdfCrossTable)">
            <summary>
            Construct an instance with the visibility expression array.
            </summary>
            <param name="arrayVisibilityExpression">The visibility expression array.</param>
            <param name="crossTable">The pdf cross table.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.Dictionary_BeginSave(System.Object,Spire.Pdf.Primitives.SavePdfPrimitiveEventArgs)">
            <summary>
            Trigger when pdf wrappered element saving.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="ars">The arguments of event.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.SynchronizeToPdfPrimitive">
            <summary>
            Synchronize the instance to the pdf primitive.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.Layer.PdfVisibilityExpression.SynchronizeFromPdfPrimitive">
            <summary>
            Synchronize the instance from the pdf primitive.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.Layer.PdfVisibilityPolicy">
            <summary>
            Specify the visibility policy for content belonging to PdfLayerMembership.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfVisibilityPolicy.None">
            <summary>
            Not Specifying the visibility policy.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfVisibilityPolicy.AnyOn">
            <summary>
            Visible if any of layer are On.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfVisibilityPolicy.AllOn">
            <summary>
            Visible only if all of layers are On.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfVisibilityPolicy.AnyOff">
            <summary>
            Visible if any of layer are Off.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.Layer.PdfVisibilityPolicy.AllOff">
            <summary>
            Visible only if all of layers are Off.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfMatrix">
            <summary>
            Represent the matrix
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMatrix.OffsetX">
            <summary>
            Gets the x translation value (the dx value, or the element in the third row and first column).
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMatrix.OffsetY">
            <summary>
            Gets the x translation value (the dx value, or the element in the third row and second column).
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMatrix.Elements">
            <summary>
            Gets an array of floating-point values that represents the elements.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.#ctor">
            <summary>
            Construct a instance as the identity matrix.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a instance as the identity matrix.
            </summary>
            <param name="m11">The value in the first row and first column.</param>
            <param name="m12">The value in the first row and second column.</param>
            <param name="m21">The value in the second row and first column.</param>
            <param name="m22">The value in the second row and second column.</param>
            <param name="dx">The value in the third row and first column.</param>
            <param name="dy">The value in the third row and second column.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])">
            <summary>
            Construct a instance to the geometric transform defined by the specified rectangle and array of points.
            </summary>
            <param name="rect">A System.Drawing.Rectangle structure that represents the rectangle.</param>
            <param name="plgpts">
            An array of three System.Drawing.Point structures that represents the points 
            of a parallelogram to which the upper-left, upper-right, and lower-left corners 
            of the rectangle is to be transformed. The lower-right corner of the parallelogram
            is implied by the first three corners.
            </param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])">
            <summary>
            Construct a instance to the geometric transform defined by the specified rectangle and array of points.
            </summary>
            <param name="rect">A System.Drawing.RectangleF structure that represents the rectangle.</param>
            <param name="plgpts">
            An array of three System.Drawing.PointF structures that represents the points 
            of a parallelogram to which the upper-left, upper-right, and lower-left corners 
            of the rectangle is to be transformed. The lower-right corner of the parallelogram
            is implied by the first three corners.
            </param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Multiply(Spire.Pdf.Graphics.PdfMatrix)">
            <summary>
            Prepend the specified matrix.
            </summary>
            <param name="matrix">Matrix is to be multiplied.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Multiply(Spire.Pdf.Graphics.PdfMatrix,Spire.Pdf.Graphics.PdfMatrixOrder)">
            <summary>
            Apply the specified matrix by the specified order.
            </summary>
            <param name="matrix">Matrix is to be multiplied.</param>
            <param name="order">Represent the applying order.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Translate(System.Single,System.Single)">
            <summary>
            Prepend the specified translation vector (offsetX and offsetY).
            </summary>
            <param name="offsetX">The x value by which to translate.</param>
            <param name="offsetY">The y value by which to translate.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Translate(System.Single,System.Single,Spire.Pdf.Graphics.PdfMatrixOrder)">
            <summary>
            Apply the specified translation vector (offsetX and offsetY) by the specified order.
            </summary>
            <param name="offsetX">The x value by which to translate.</param>
            <param name="offsetY">The y value by which to translate.</param>
            <param name="order">Represent the applying order.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Scale(System.Single,System.Single)">
            <summary>
            Prepend the specified scale vector (scaleX and scaleY).
            </summary>
            <param name="scaleX">The value by which to scale in the x-axis direction.</param>
            <param name="scaleY">The value by which to scale in the y-axis direction.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Scale(System.Single,System.Single,Spire.Pdf.Graphics.PdfMatrixOrder)">
            <summary>
            Apply the specified scale vector (scaleX and scaleY) by the specified order.
            </summary>
            <param name="scaleX">The value by which to scale in the x-axis direction.</param>
            <param name="scaleY">The value by which to scale in the y-axis direction.</param>
            <param name="order">Represent the applying order.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Rotate(System.Single)">
            <summary>
            Prepend a clockwise rotation(angle) around the origin.
            </summary>
            <param name="angle">The angle of the rotation, in degrees.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Rotate(System.Single,Spire.Pdf.Graphics.PdfMatrixOrder)">
            <summary>
            Apply a clockwise rotation(angle) around the origin by the specified order.
            </summary>
            <param name="angle">The angle of the rotation, in degrees.</param>
            <param name="order">Represent the applying order.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Skew(System.Single,System.Single)">
            <summary>
            Prepend the specified skew angles(angleX angleY).
            </summary>
            <param name="angleX">The horizontal skew angle, in degrees.</param>
            <param name="angleY">The vertical skew angle, in degrees.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Skew(System.Single,System.Single,Spire.Pdf.Graphics.PdfMatrixOrder)">
            <summary>
            Prepend the specified skew angles(angleX angleY) by the specified order.
            </summary>
            <param name="angleX">The horizontal skew angle, in degrees.</param>
            <param name="angleY">The vertical skew angle, in degrees.</param>
            <param name="order">Represent the applying order.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Shear(System.Single,System.Single)">
            <summary>
            Prepend the specified Shear vector (shearX and shearY).
            </summary>
            <param name="shearX">The horizontal shear factor.</param>
            <param name="shearY">The vertical shear factor.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Shear(System.Single,System.Single,Spire.Pdf.Graphics.PdfMatrixOrder)">
            <summary>
            Apply the specified Shear vector (shearX and shearY) by the specified order.
            </summary>
            <param name="shearX">The horizontal shear factor.</param>
            <param name="shearY">The vertical shear factor.</param>
            <param name="order">Represent the applying order.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Applies the geometric transform to a specified array of points.
            </summary>
            <param name="pt">An array of points to transform.</param>
            <returns>The transformed points.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Multiply(Spire.Pdf.Graphics.PdfMatrix,Spire.Pdf.Graphics.PdfMatrix)">
            <summary>
            Matrix1 multiply matrix2 to this.
            </summary>
            <param name="matrix1">first matrix.</param>
            <param name="matrix2">second matrix.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.DegreeToRadian(System.Double)">
            <summary>
            Converts degree to radian.
            </summary>
            <param name="degree">The degree</param>
            <returns>The radian</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.RadianToDegree(System.Double)">
            <summary>
            Converts radian to degree.
            </summary>
            <param name="radian">The radian</param>
            <returns>The degree</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Cal3SimpleEquation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate 3 simple equation
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMatrix.Cal3SimpleEquation(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculate 3 simple equation
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfMatrixOrder">
            <summary>
            Represent the applying order to matrix.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfMatrixOrder.Prepend">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfMatrixOrder.Append">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfPens">
            <summary>
            The collection of the default pens.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.AliceBlue">
            <summary>
            Gets the AliceBlue pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.AntiqueWhite">
            <summary>
            Gets the antique white pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Aqua">
            <summary>
            Gets the Aqua default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Aquamarine">
            <summary>
            Gets the Aquamarine default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Azure">
            <summary>
            Gets the Azure default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Beige">
            <summary>
            Gets the Beige default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Bisque">
            <summary>
            Gets the Bisque default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Black">
            <summary>
            Gets the Black default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.BlanchedAlmond">
            <summary>
            Gets the BlanchedAlmond default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Blue">
            <summary>
            Gets the Blue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.BlueViolet">
            <summary>
            Gets the BlueViolet default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Brown">
            <summary>
            Gets the Brown default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.BurlyWood">
            <summary>
            Gets the BurlyWood default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.CadetBlue">
            <summary>
            Gets the CadetBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Chartreuse">
            <summary>
            Gets the Chartreuse default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Chocolate">
            <summary>
            Gets the Chocolate default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Coral">
            <summary>
            Gets the Coral default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.CornflowerBlue">
            <summary>
            Gets the CornflowerBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Cornsilk">
            <summary>
            Gets the Corn silk default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Crimson">
            <summary>
            Gets the Crimson default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Cyan">
            <summary>
            Gets the Cyan default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkBlue">
            <summary>
            Gets the DarkBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkCyan">
            <summary>
            Gets the DarkCyan default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkGoldenrod">
            <summary>
            Gets the DarkGoldenrod default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkGray">
            <summary>
            Gets the DarkGray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkGreen">
            <summary>
            Gets the DarkGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkKhaki">
            <summary>
            Gets the DarkKhaki default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkMagenta">
            <summary>
            Gets the DarkMagenta default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkOliveGreen">
            <summary>
            Gets the DarkOliveGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkOrange">
            <summary>
            Gets the DarkOrange default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkOrchid">
            <summary>
            Gets the DarkOrchid default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkRed">
            <summary>
            Gets the DarkRed default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkSalmon">
            <summary>
            Gets the DarkSalmon default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkSeaGreen">
            <summary>
            Gets the DarkSeaGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkSlateBlue">
            <summary>
            Gets the DarkSlateBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkSlateGray">
            <summary>
            Gets the DarkSlateGray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkTurquoise">
            <summary>
            Gets the DarkTurquoise default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DarkViolet">
            <summary>
            Gets the DarkViolet default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DeepPink">
            <summary>
            Gets the DeepPink default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DeepSkyBlue">
            <summary>
            Gets the DeepSkyBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DimGray">
            <summary>
            Gets the DimGray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.DodgerBlue">
            <summary>
            Gets the DodgerBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Firebrick">
            <summary>
            Gets the Firebrick default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.FloralWhite">
            <summary>
            Gets the FloralWhite default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.ForestGreen">
            <summary>
            Gets the ForestGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Fuchsia">
            <summary>
            Gets the Fuchsia default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Gainsboro">
            <summary>
            Gets the Gainsborough default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.GhostWhite">
            <summary>
            Gets the GhostWhite default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Gold">
            <summary>
            Gets the Gold default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Goldenrod">
            <summary>
            Gets the Goldenrod default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Gray">
            <summary>
            Gets the Gray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Green">
            <summary>
            Gets the Green default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.GreenYellow">
            <summary>
            Gets the GreenYellow default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Honeydew">
            <summary>
            Gets the Honeydew default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.HotPink">
            <summary>
            Gets the HotPink default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.IndianRed">
            <summary>
            Gets the IndianRed default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Indigo">
            <summary>
            Gets the Indigo default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Ivory">
            <summary>
            Gets the Ivory default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Khaki">
            <summary>
            Gets the Khaki default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Lavender">
            <summary>
            Gets the Lavender default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LavenderBlush">
            <summary>
            Gets the LavenderBlush default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LawnGreen">
            <summary>
            Gets the LawnGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LemonChiffon">
            <summary>
            Gets the LemonChiffon default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightBlue">
            <summary>
            Gets the LightBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightCoral">
            <summary>
            Gets the LightCoral default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightCyan">
            <summary>
            Gets the LightCyan default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightGoldenrodYellow">
            <summary>
            Gets the LightGoldenrodYellow default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightGray">
            <summary>
            Gets the LightGray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightGreen">
            <summary>
            Gets the LightGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightPink">
            <summary>
            Gets the LightPink default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightSalmon">
            <summary>
            Gets the LightSalmon default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightSeaGreen">
            <summary>
            Gets the LightSeaGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightSkyBlue">
            <summary>
            Gets the LightSkyBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightSlateGray">
            <summary>
            Gets the LightSlateGray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightSteelBlue">
            <summary>
            Gets the LightSteelBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LightYellow">
            <summary>
            Gets the LightYellow default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Lime">
            <summary>
            Gets the Lime default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.LimeGreen">
            <summary>
            Gets the LimeGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Linen">
            <summary>
            Gets the Linen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Magenta">
            <summary>
            Gets the Magenta default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Maroon">
            <summary>
            Gets the Maroon default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumAquamarine">
            <summary>
            Gets the MediumAquamarine default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumBlue">
            <summary>
            Gets the MediumBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumOrchid">
            <summary>
            Gets the MediumOrchid default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumPurple">
            <summary>
            Gets the MediumPurple default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumSeaGreen">
            <summary>
            Gets the MediumSeaGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumSlateBlue">
            <summary>
            Gets the MediumSlateBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumSpringGreen">
            <summary>
            Gets the MediumSpringGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumTurquoise">
            <summary>
            Gets the MediumTurquoise default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MediumVioletRed">
            <summary>
            Gets the MediumVioletRed default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MidnightBlue">
            <summary>
            Gets the MidnightBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MintCream">
            <summary>
            Gets the MintCream default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.MistyRose">
            <summary>
            Gets the MistyRose default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Moccasin">
            <summary>
            Gets the Moccasin default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.NavajoWhite">
            <summary>
            Gets the NavajoWhite default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Navy">
            <summary>
            Gets the Navy default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.OldLace">
            <summary>
            Gets the OldLace default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Olive">
            <summary>
            Gets the Olive default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.OliveDrab">
            <summary>
            Gets the OliveDrab default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Orange">
            <summary>
            Gets the Orange default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.OrangeRed">
            <summary>
            Gets the OrangeRed default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Orchid">
            <summary>
            Gets the Orchid default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PaleGoldenrod">
            <summary>
            Gets the PaleGoldenrod default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PaleGreen">
            <summary>
            Gets the PaleGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PaleTurquoise">
            <summary>
            Gets the PaleTurquoise default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PaleVioletRed">
            <summary>
            Gets the PaleVioletRed default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PapayaWhip">
            <summary>
            Gets the PapayaWhip default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PeachPuff">
            <summary>
            Gets the PeachPuff default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Peru">
            <summary>
            Gets the Peru default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Pink">
            <summary>
            Gets the Pink default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Plum">
            <summary>
            Gets the Plum default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.PowderBlue">
            <summary>
            Gets the PowderBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Purple">
            <summary>
            Gets the Purple default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Red">
            <summary>
            Gets the Red default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.RosyBrown">
            <summary>
            Gets the RosyBrown default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.RoyalBlue">
            <summary>
            Gets the RoyalBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SaddleBrown">
            <summary>
            Gets the SaddleBrown default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Salmon">
            <summary>
            Gets the Salmon default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SandyBrown">
            <summary>
            Gets the SandyBrown default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SeaGreen">
            <summary>
            Gets the SeaGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SeaShell">
            <summary>
            Gets the SeaShell default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Sienna">
            <summary>
            Gets the Sienna default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Silver">
            <summary>
            Gets the Silver default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SkyBlue">
            <summary>
            Gets the SkyBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SlateBlue">
            <summary>
            Gets the SlateBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SlateGray">
            <summary>
            Gets the SlateGray default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Snow">
            <summary>
            Gets the Snow default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SpringGreen">
            <summary>
            Gets the SpringGreen default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.SteelBlue">
            <summary>
            Gets the SteelBlue default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Tan">
            <summary>
            Gets the Tan default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Teal">
            <summary>
            Gets the Teal default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Thistle">
            <summary>
            Gets the Thistle default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Tomato">
            <summary>
            Gets the Tomato default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Transparent">
            <summary>
            Gets the Transparent default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Turquoise">
            <summary>
            Gets the Turquoise default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Violet">
            <summary>
            Gets the Violet default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Wheat">
            <summary>
            Gets the Wheat default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.White">
            <summary>
            Gets the White default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.WhiteSmoke">
            <summary>
            Gets the WhiteSmoke default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.Yellow">
            <summary>
            Gets the Yellow default pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPens.YellowGreen">
            <summary>
            Gets the YellowGreen default pen.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfHorizontalAlignment">
            <summary>
            Specifies the type of Horizontal alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfHorizontalAlignment.Left">
            <summary>
            Specifies the element is aligned to Left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfHorizontalAlignment.Center">
            <summary>
            Specifies the element is aligned to Center.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfHorizontalAlignment.Right">
            <summary>
            Specifies the element is aligned to Right.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfVerticalAlignment">
            <summary>
            Specifies the type of Vertical alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfVerticalAlignment.Top">
            <summary>
            Specifies the element is aligned to Top.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfVerticalAlignment.Middle">
            <summary>
            Specifies the element is aligned to Middle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfVerticalAlignment.Bottom">
            <summary>
            Specifies the element is aligned to Bottom.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfTextAlignment">
            <summary>
            Specifies the type of horizontal text alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfTextAlignment.Left">
            <summary>
            Specifies the text is aligned to Left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfTextAlignment.Center">
            <summary>
            Specifies the text is aligned to Center.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfTextAlignment.Right">
            <summary>
            Specifies the text is aligned to Right.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfTextAlignment.Justify">
            <summary>
            Specifies the text as Justified text.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.TextRenderingMode">
            <summary>
            Specifies the text rendering mode.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.Stroke">
            <summary>
            Stroke text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.FillStroke">
            <summary>
            Fill, then stroke text.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.None">
            <summary>
            Neither fill nor stroke text (invisible).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.ClipFill">
            <summary>
            Fill text and add to path for clipping (see above)..
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.ClipStroke">
            <summary>
            Stroke text and add to path for clipping (see above).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.ClipFillStroke">
            <summary>
            Stroke fill text  and add to path for clipping.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.TextRenderingMode.Clip">
            <summary>
            Add text to path for clipping.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLineJoin">
            <summary>
            Specifies the corner style of the shapes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLineJoin.Miter">
            <summary>
            The outer edges for the two segments are extended
            until they meet at an angle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLineJoin.Round">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer edges for the two segments.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLineJoin.Bevel">
            <summary>
            The two segments are finished with caps
            and the resulting notch beyond the ends of the segments is filled
            with a triangle.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLineCap">
             <summary>
            Specifies the line cap style to be used at the ends of the lines.
             </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLineCap.Flat">
            <summary>
            The stroke is squared off at the endpoint of the path. There is no
            projection beyond the end of the path.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLineCap.Round">
            <summary>
            A semicircular arc with a diameter equal to the line width is
            drawn around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfLineCap.Square">
            <summary>
             The stroke continues beyond the endpoint of the path
            for a distance equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfDashStyle">
            <summary>
            Possible dash styles of the pen.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfDashStyle.Solid">
            <summary>
            Solid line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfDashStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfDashStyle.Dot">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfDashStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfDashStyle.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfDashStyle.Custom">
            <summary>
            User defined dash style.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfFillMode">
            <summary>
            Specifies how the shapes are filled. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFillMode.Winding">
            <summary>
            Nonzero winding number rule of determining &quot;insideness&quot;
            of point.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfFillMode.Alternate">
            <summary>
            Even odd rule of determining &quot;insideness&quot; of point.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfColorSpace">
            <summary>
            Defines set of color spaces.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfColorSpace.RGB">
            <summary>
            RGB color space.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfColorSpace.CMYK">
            <summary>
            CMYK color space.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfColorSpace.GrayScale">
            <summary>
            GrayScale color space.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfColorSpace.Indexed">
            <summary>
            Indexed color space used internally.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ColorIntent.AbsoluteColorimetric">
            <summary>
            Colors are represented solely with respect to the light source;
            no correction is made for the output mediums white point
            (such as the color of unprinted paper).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ColorIntent.RelativeColorimetric">
            <summary>
            Colors are represented with respect to the combination of
            the light source and the output mediums white point
            (such as the color of unprinted paper).
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ColorIntent.Saturation">
            <summary>
            Colors are represented in a manner that preserves
            or emphasizes saturation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.ColorIntent.Perceptual">
            <summary>
            Colors are represented in a manner that provides a pleasing
            perceptual appearance.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBlendMode">
            <summary>
            Specifies the blend mode for transparency.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color values.
            The result color is always at least as dark as either
            of the two constituent colors. Multiplying
            any color with black produces black; multiplying
            with white leaves the original color unchanged.
            Painting successive overlapping objects with a color
            other than black or white produces progressively darker colors.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source
            color values, then complements the result. The result
            color is always at least as light as either of the two
            constituent colors. Screening any color with white
            produces white; screening with black leaves the original
            color unchanged. The effect is similar to projecting
            multiple photographic slides simultaneously onto a single screen.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Overlay">
            <summary>
            Multiplies or screens the colors, depending on
            the backdrop color value. Source colors overlay
            the backdrop while preserving its highlights and
            shadows. The backdrop color is not replaced but
            is mixed with the source color to reflect the
            lightness or darkness of the backdrop.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Darken">
            <summary>
            Selects the darker of the backdrop and source colors.
            The backdrop is replaced with the source where the source
            is darker; otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors.
            The backdrop is replaced with the source where the source
            is lighter; otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color.
            Painting with black produces no changes.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color.
            Painting with white produces no change.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color value.
            The effect is similar to shining a harsh spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color value.
            The effect is similar to shining a diffused spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Painting with white inverts the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Exclusion">
            <summary>
            Produces an effect similar to that of the Difference mode
            but lower in contrast. Painting with white inverts 
            the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Hue">
            <summary>
            Creates a color with the hue of the source color and 
            the saturation and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Saturation">
            <summary>
            Creates a color with the saturation of the source color
            and the hue and luminosity of the backdrop color. Painting
            with this mode in an area of the backdrop that is a pure
            gray (no saturation) produces no change.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Color">
            <summary>
            Creates a color with the hue and saturation of
            the source color and the luminosity of the backdrop
            color. This preserves the gray levels of the backdrop
            and is useful for coloring monochrome images or tinting color images.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBlendMode.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color
            and the hue and saturation of the backdrop color. This
            produces an inverse effect to that of the Color mode.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfImageType">
            <summary>
            Specifies the type of the PdfImage.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfImageType.Bitmap">
            <summary>
            Specifies the image is bitmap.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfImageType.Metafile">
            <summary>
            Specifies the image is metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfGraphicsUnit">
            <summary>
            Specifies the types of the page's logical units.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Centimeter">
            <summary>
            Specifies the Measurement is in centimeters.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Pica">
            <summary>
            Specifies the Measurement is in picas. A pica represents 12 points.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Pixel">
            <summary>
            Specifies the unit of measurement is 1 pixel.
            </summary>
            <remarks>Pixel unit is device dependent unit. The result depends on the default Dpi on the machine.</remarks>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Inch">
            <summary>
            Specifies the inch as the unit of measure. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfGraphicsUnit.Millimeter">
            <summary>
            Specifies the Measurement is in millimeters.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfImageFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfRGBColor">
            <summary>
            Implements structures and routines working with color.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.Empty">
            <summary>
            Gets a null color.
            </summary>
            <value>The empty.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.IsEmpty">
            <summary>
            Gets whether the PDFColor is Empty or not.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.B">
            <summary>
            Gets or sets Blue channel value.
            </summary>
            <value>The B.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.Blue">
            <summary>
            Gets the blue.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.C">
            <summary>
            Gets or sets Cyan channel value.
            </summary>
            <value>The C.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.G">
            <summary>
            Gets or sets Green channel value.
            </summary>
            <value>The G.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.Green">
            <summary>
            Gets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.Gray">
            <summary>
            Gets or sets Gray channel value.
            </summary>
            <value>The gray.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.K">
            <summary>
            Gets or sets Black channel value.
            </summary>
            <value>The K.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.M">
            <summary>
            Gets or sets Magenta channel value.
            </summary>
            <value>The M.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.R">
            <summary>
            Gets or sets Red channel value.
            </summary>
            <value>The R.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.Red">
            <summary>
            Gets the red.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRGBColor.Y">
            <summary>
            Gets or sets Yellow channel value.
            </summary>
            <value>The Y.</value>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.#ctor(Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color">Source color object.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color">Source color object.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="gray">Gray value.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="red">Red channel value.</param>
            <param name="green">Green channel value.</param>
            <param name="blue">Blue channel value.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="cyan">Cyan channel value.</param>
            <param name="magenta">Magenta channel value.</param>
            <param name="yellow">Yellow channel value.</param>
            <param name="black">Black channel value.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.ToArgb">
            <summary>
            Creates the Alpha ,Red ,Green, and Blue value of this PDFColor structure.
            </summary>
            <returns>ARGB value.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.op_Implicit(System.Drawing.Color)~Spire.Pdf.Graphics.PdfRGBColor">
            <summary>
            Implicit operator.
            </summary>
            <param name="color">System.Drawing.Color.</param>
            <returns>PDFColor.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.op_Implicit(Spire.Pdf.Graphics.PdfRGBColor)~System.Drawing.Color">
            <summary>
            Implicit operator.
            </summary>
            <param name="color">System.Drawing.Color.</param>
            <returns>PDFColor.</returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.op_Equality(Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Operator ==.
            </summary>
            <param name="colour1">The color 1.</param>
            <param name="colour2">The color 2.</param>
            <returns>
            True if color 1 is equal to color 2; otherwise False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.op_Inequality(Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Operator !=.
            </summary>
            <param name="colour1">The color 1.</param>
            <param name="colour2">The color 2.</param>
            <returns>
            True if color 1 is not equal to color 2; otherwise False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.Equals(System.Object)">
            <summary>
            Determines whether the specified 
            is equal to the current .
            </summary>
            <param name="obj">The  to
            compare with the current .</param>
            <returns>
            True if the specified  is equal
            to the current ; otherwise -
            False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.Equals(Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Determines if the specified color is equal to this one.
            </summary>
            <param name="colour">The color.</param>
            <returns>
            True if the color is equal; otherwise - False.
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for
            use in hashing algorithms and data structures like a hash
            table.
            </summary>
            <returns>
            A hash code for the current .
            </returns>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRGBColor.CompareColours(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Compares colors.
            </summary>
            <param name="color1">The color 1.</param>
            <param name="color2">The color 2.</param>
            <returns>
            True if colors are identical; otherwise - False.
            </returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfCanvas">
            <summary>
            The class representing a graphics context of the objects.
            It's used for performing simple graphics operations.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfCanvas.Size">
            <summary>
            Gets the size of the canvas.
            </summary>
            <remarks>Usually, this value is equal to the size of the object this graphics belongs to.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfCanvas.ClientSize">
            <summary>
            Gets the size of the canvas reduced by margins and page templates.
            </summary>
            <remarks>It indicates a size of the canvas reduced by margins and template dimensions.
            This value doesn't change when any custom clip is set.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfCanvas.ColorSpace">
            <summary>
            Gets or sets the current color space.
            </summary>
            <remarks>The value change of this property has impact on the objects
            which will be drawn after the change.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawLine(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawLine(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawRectangle(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawRectangle(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawRectangle(Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawRectangle(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawRectangle(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawRectangle(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawEllipse(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawEllipse(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawEllipse(Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawEllipse(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawEllipse(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawEllipse(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawArc(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawArc(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPie(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPie(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPie(Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPie(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPie(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPie(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPolygon(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPolygon(Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Draws a polygon.
            </summary>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPolygon(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Draws a polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawBezier(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a bezier curve.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawBezier(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a bezier curve.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPath(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPath(Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="brush">The brush.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawPath(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Drawing.PointF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Single,System.Single)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Drawing.RectangleF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Int32,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws an image,recommending monochrome image.
            </summary>
            <param name="image">The image.</param>
            <param name="compressionQuality">The image compresson quality.</param>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawImage(Spire.Pdf.Graphics.PdfImage,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an image,recommending monochrome image
            </summary>
            <param name="image">The image.</param>
            <param name="compressionQuality">The image compresson quality.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="point">The location point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen, Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawFormFieldString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen, Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The location point.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="point">The location point.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="point">The location point.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="point">The point.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawString(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfStringFormat,System.Boolean)">
            <summary>
            Draws the specified text string at the specified location and size
            with the specified Pen, Brush and Font objects. 
            </summary>
            <param name="s">The text string.</param>
            <param name="font">The font.</param>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="layoutRectangle">RectangleF structure that specifies the bounds of the drawn text.</param>
            <param name="format">The text string format.</param>
            <param name="htmlTags">whether the parsing of HTML tags</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.TranslateTransform(System.Single,System.Single)">
            <summary>
            Translates the coordinates by specified coordinates.
            </summary>
            <param name="offsetX">The X value by which to translate
            coordinate system.</param>
            <param name="offsetY">The Y value by which to translate
            coordinate system.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.ScaleTransform(System.Single,System.Single)">
            <summary>
            Scales the coordinates by specified coordinates.
            </summary>
            <param name="scaleX">The value by which to scale coordinate
            system in the X axis direction.</param>
            <param name="scaleY">The value by which to scale coordinate
            system in the Y axis direction.</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.RotateTransform(System.Single,System.Drawing.PointF)">
             <summary>
             Rotates the coordinate system in clockwise direction around specified point.
             </summary>
             <param name="angle">The angle of the rotation (in degrees).</param>
            <param name="angle">A System.Drawing.PointF that represents the center of the rotation. </param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.RotateTransform(System.Single)">
            <summary>
            Rotates the coordinate system in clockwise direction.
            </summary>
            <param name="angle">The angle of the rotation (in degrees).</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SkewTransform(System.Single,System.Single)">
            <summary>
            Skews the coordinate system axes.
            </summary>
            <param name="angleX">Skews the X axis by this angle (in
            degrees).</param>
            <param name="angleY">Skews the Y axis by this angle (in
            degrees).</param>
            <property name="flag" value="Finished"/>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawTemplate(Spire.Pdf.Graphics.PdfTemplate,System.Drawing.PointF)">
            <summary>
            Draws a template using its original size, at the specified location.
            </summary>
            <param name="template"> object.</param>
            <param name="location">Location of the template.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.DrawTemplate(Spire.Pdf.Graphics.PdfTemplate,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Draws a template at the specified location and size.
            </summary>
            <param name="template"> object.</param>
            <param name="location">Location of the template.</param>
            <param name="size">Size of the template.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.Flush">
            <summary>
            Flashes this instance.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.Save">
            <summary>
            Saves the current state of this Graphics and identifies the saved state with a GraphicsState.
            </summary>
            <returns>This method returns a GraphicsState that represents the saved state of this Graphics. </returns>
            <remarks>This method works similar to  method.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.Restore">
            <summary>
            Restores the last state of this Graphics.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.Restore(Spire.Pdf.Graphics.PdfGraphicsState)">
            <summary>
            Restores the state of this Graphics to the state represented by a GraphicsState.
            </summary>
            <param name="state">GraphicsState that represents the state to which to restore this Graphics.</param>
            <remarks>This method works similar to  method.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetClip(System.Drawing.RectangleF)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="rectangle">Clip rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetClip(System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfFillMode)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="rectangle">Clip rectangle.</param>
            <param name="mode">The fill mode to determine which regions lie inside the clipping	path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetClip(Spire.Pdf.Graphics.PdfPath)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="path">Clip path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetClip(Spire.Pdf.Graphics.PdfPath,Spire.Pdf.Graphics.PdfFillMode)">
            <summary>
            Modifying the current clipping path by intersecting it with the current path.
            </summary>
            <param name="path">Clip path.</param>
            <param name="mode">The fill mode to determine which regions lie inside the clipping	path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetTransparency(System.Single)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="alpha">The alpha value for both pen
            and brush operations.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetTransparency(System.Single,System.Single)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="alphaPen">The alpha value for pen operations.</param>
            <param name="alphaBrush">The alpha value for brush operations.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.SetTransparency(System.Single,System.Single,Spire.Pdf.Graphics.PdfBlendMode)">
            <summary>
            Sets the transparency.
            </summary>
            <param name="alphaPen">The alpha value for pen operations.</param>
            <param name="alphaBrush">The alpha value for brush operations.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.TransparencyData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and
            represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfCanvas.TransparencyData.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfGraphicsState">
            <summary>
            Represents the state of a Graphics object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfMargins">
            <summary>
            A class representing page margins.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMargins.Left">
            <summary>
            Gets or sets the left margin size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMargins.Top">
            <summary>
            Gets or sets the top margin size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMargins.Right">
            <summary>
            Gets or sets the right margin size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMargins.Bottom">
            <summary>
            Gets or sets the bottom margin size.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfMargins.All">
            <summary>
            Sets margin of each side.
            </summary>
            <value>Margin of each side.</value>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMargins.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMargins.#ctor(System.Single)">
            <summary>
            Create and initialize margin.
            </summary>
            <param name="margin">The margin size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMargins.#ctor(System.Single,System.Single)">
            <summary>
            Create and initialize margin.
            </summary>
            <param name="leftRight">The left right.</param>
            <param name="topBottom">The top bottom.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMargins.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create and initialize margin.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfMargins.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfPen">
            <summary>
            A class defining settings for drawing operations.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.Brush">
            <summary>
            Gets or sets the brush, which specifies the pen behaviour.
            </summary>
            <remarks>If the brush is set, the color values are ignored,
            except for PdfSolidBrush.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.Color">
            <summary>
            Gets or sets the color of the pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.DashOffset">
            <summary>
            Gets or sets the dash offset of the pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.DashPattern">
            <summary>
            Gets or sets the dash pattern of the pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.DashStyle">
            <summary>
            Gets or sets the dash style of the pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.LineCap">
            <summary>
            Gets or sets the line cap of the pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.LineJoin">
            <summary>
            Gets or sets the line join style of the pen.
            </summary>
            <value>The line join.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.Width">
            <summary>
            Gets or sets the width of the pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPen.MiterLimit">
            <summary>
            Gets or sets the miter limit.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.#ctor(Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.#ctor(Spire.Pdf.Graphics.PdfRGBColor,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color">Color of the pen.</param>
            <param name="width">Width of the pen's line.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.#ctor(Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">Width of the pen's line.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.#ctor(Spire.Pdf.ColorSpace.PdfComplexColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPen.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A new pen with the same properties.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfUnitConvertor">
            <summary>
            Class allowing to convert different unit metrics. Converting is 
            based on Graphics object DPI settings that is why for differ
            graphics settings must be created new instance. For example:
            printers often has 300 and greater dpi resolution, for compare
            default display screen dpi is 96.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBrush">
            <summary>
            Represents the abstract brush, which containing a basic functionality of a brush.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBrush.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfGradientBrush">
            <summary>
            Implements gradient brush capabilities.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGradientBrush.Background">
            <summary>
            Gets or sets the background color of the brush.
            </summary>
            <remarks>This value is optional. If null is assigned to it,
            the associated entry is removed from the appropriate dictionary.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGradientBrush.AntiAlias">
            <summary>
            Gets or sets a value indicating whether use anti aliasing algorithm.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfGradientBrush.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLinearGradientBrush">
            <summary>
            Implements linear gradient brush by using PDF axial shading pattern.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="point1">The starting point of the gradient.</param>
            <param name="point2">The end point of the gradient.</param>
            <param name="color1">The starting color of the gradient.</param>
            <param name="color2">The end color of the gradient.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLinearGradientBrush.#ctor(System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfLinearGradientMode)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rect">A RectangleF structure that specifies the bounds of the linear gradient. </param>
            <param name="color1">The starting color for the gradient.</param>
            <param name="color2">The ending color for the gradient.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLinearGradientBrush.#ctor(System.Drawing.RectangleF,Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rect">A RectangleF structure that specifies the bounds of the linear gradient.</param>
            <param name="color1">The starting color for the gradient.</param>
            <param name="color2">The ending color for the gradient.</param>
            <param name="angle">The angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLinearGradientBrush.Blend">
            <summary>
            Gets or sets a PdfBlend that specifies positions
            and factors that define a custom falloff for the gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLinearGradientBrush.InterpolationColors">
            <summary>
            Gets or sets a ColorBlend that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLinearGradientBrush.LinearColors">
            <summary>
            Gets or sets the starting and ending colors of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLinearGradientBrush.Rectangle">
            <summary>
            Gets a rectangular region that defines
            the boundaries of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLinearGradientBrush.Extend">
            <summary>
            Gets or sets the value indicating whether the gradient
            should extend starting and ending points.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLinearGradientBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfRadialGradientBrush">
            <summary>
            Represent radial gradient brush.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRadialGradientBrush.#ctor(System.Drawing.PointF,System.Single,System.Drawing.PointF,System.Single,Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="centreStart">The start centre.</param>
            <param name="radiusStart">The start radius.</param>
            <param name="centreEnd">The end centre.</param>
            <param name="radiusEnd">The end radius.</param>
            <param name="colorStart">The start color.</param>
            <param name="colorEnd">The end color.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRadialGradientBrush.Blend">
            <summary>
            Gets or sets a PdfBlend that specifies positions
            and factors that define a custom falloff for the gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRadialGradientBrush.InterpolationColors">
            <summary>
            Gets or sets a ColorBlend that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRadialGradientBrush.LinearColors">
            <summary>
            Gets or sets the starting and ending colors of the gradient.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRadialGradientBrush.Rectangle">
            <summary>
            Gets or sets the rectangle.
            </summary>
            <value>The rectangle.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRadialGradientBrush.Extend">
            <summary>
            Gets or sets the value indicating whether the gradient
            should extend starting and ending points.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRadialGradientBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfSolidBrush">
            <summary>
            Represents a brush that fills any object with a solid colour.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfSolidBrush.#ctor(Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfSolidBrush.#ctor(Spire.Pdf.ColorSpace.PdfComplexColor)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="color">color</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfSolidBrush.Color">
            <summary>
            Gets or sets the color of the brush.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfSolidBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfTilingBrush">
            <summary>
            Implements a colored tiling brush.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">The boundaries of the smallest brush cell.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.RectangleF,Spire.Pdf.PdfNewPage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">The boundaries of the smallest brush cell.</param>
            <param name="page">The Current Page Object.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size of the smallest brush cell.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTilingBrush.#ctor(System.Drawing.SizeF,Spire.Pdf.PdfNewPage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size of the smallest brush cell.</param>
            <param name="page">The Current Page Object.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTilingBrush.Rectangle">
            <summary>
            Gets the boundary box of the smallest brush cell.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTilingBrush.Size">
            <summary>
            Gets the size of the smallest brush cell.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTilingBrush.Graphics">
            <summary>
            Gets Graphics context of the brush.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTilingBrush.Clone">
            <summary>
            Creates a new copy of a brush.
            </summary>
            <returns>A new instance of the Brush class.</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTilingBrush.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfArc">
            <summary>
            Represents an arc shape.
            </summary>
            <remarks>It ignores brush setting.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfArc.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfArc.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfArc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfArc.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfArc.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfArc.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBezierCurve">
            <summary>
            Implements Bezier curve shape.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBezierCurve.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBezierCurve.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBezierCurve.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBezierCurve.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBezierCurve.FirstControlPoint">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBezierCurve.SecondControlPoint">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBezierCurve.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfEllipse">
            <summary>
            Describes an ellipse shape.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfEllipse.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfEllipse.RadiusX">
            <summary>
            Gets the radius X.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfEllipse.RadiusY">
            <summary>
            Gets the radius Y.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfEllipse.Center">
            <summary>
            Gets the center point.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfEllipsePart">
            <summary>
            The base class of arc and pie shapes.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfEllipsePart.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfEllipsePart.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfLine">
            <summary>
            Represents a line shape.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLine.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLine.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLine.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfLine.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLine.X1">
            <summary>
            Gets or sets the x coordinate of the start point.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLine.Y1">
            <summary>
            Gets or sets the y coordinate of the start point.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLine.X2">
            <summary>
            Gets or sets the x coordinate of the end point.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfLine.Y2">
            <summary>
            Gets or sets the y coordinate of the end point.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfPath">
            <summary>
            Implements graphics path, which is a sequence of primitive graphics elements.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="points">The points.</param>
            <param name="pathTypes">The path types.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(Spire.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfFillMode)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
            <param name="pathTypes">The path types.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfFillMode,System.Drawing.PointF[],System.Byte[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="points">The points.</param>
            <param name="pathTypes">The path types.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfFillMode)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="fillMode">The fill mode.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPath.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPath.PathPoints">
            <summary>
            Gets the path points.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPath.PathTypes">
            <summary>
            Gets the path point types.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPath.PointCount">
            <summary>
            Gets the point count.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPath.LastPoint">
            <summary>
            Gets the last point.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Adds an arc.
            </summary>
            <param name="rectangle">The boundaries of the arc.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a bezier curve.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a bezier curve.
            </summary>
            <param name="startPointX">The start point X.</param>
            <param name="startPointY">The start point Y.</param>
            <param name="firstControlPointX">The first control point X.</param>
            <param name="firstControlPointY">The first control point Y.</param>
            <param name="secondControlPointX">The second control point X.</param>
            <param name="secondControlPointY">The second control point Y.</param>
            <param name="endPointX">The end point X.</param>
            <param name="endPointY">The end point Y.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddEllipse(System.Drawing.RectangleF)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="rectangle">The boundaries of the ellipse.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a line.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddPath(Spire.Pdf.Graphics.PdfPath)">
            <summary>
            Appends the path specified to this one.
            </summary>
            <param name="path">The path, which should be appended.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddPath(System.Drawing.PointF[],System.Byte[])">
            <summary>
            Appends the path specified by the points and their types to this one.
            </summary>
            <param name="pathPoints">The points.</param>
            <param name="pathTypes">The path point types.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddPie(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Appends the pie to this path.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the pie to this path.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddPolygon(System.Drawing.PointF[])">
            <summary>
            Append the closed polygon to this path.
            </summary>
            <param name="points">The points of the polygon.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddRectangle(System.Drawing.RectangleF)">
            <summary>
            Appends the rectangle to this path.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.AddRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends the rectangle to this path.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.StartFigure">
            <summary>
            Starts a new figure.
            </summary>
            <remarks>The next added primitive will start a new figure.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.CloseFigure">
            <summary>
            Closes the last figure.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.CloseAllFigures">
            <summary>
            Closes all non-closed figures.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.GetLastPoint">
            <summary>
            Gets the last point.
            </summary>
            <returns>The last point.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.GetRectangleF">
            <summary>
            Calc Point w/h
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPath.GetBound">
            <summary>
            get this path's bound.
            </summary>
            <returns>return this path's bound</returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfTemplate">
            <summary>
            Represents Pdf Template object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfTemplate.m_origin">
            <summary>
            the origin location of the template
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.#ctor(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="annotation"></param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="cropBox">RectangleF cropBox</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.#ctor(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="cropBox">RectangleF cropBox</param>
            <param name="cropBox">RectangleF mediaBox</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTemplate.Graphics">
            <summary>
            Gets graphics context of the template.
            </summary>
            <remarks>It will return null, if the template is read-only.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTemplate.Size">
            <summary>
            Gets the size of the template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTemplate.Width">
            <summary>
            Gets the width of the template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTemplate.Height">
            <summary>
            Gets the height of the template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTemplate.ReadOnly">
            <summary>
            Gets a value indicating whether the template is read-only.
            </summary>
            <value><c>true</c> if the template is read-only; otherwise, <c>false</c>.</value>
            <remarks>Read-only templates does not expose graphics. They just return null.</remarks>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.Reset(System.Drawing.SizeF)">
            <summary>
            Resets the template and sets the specified size.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfTemplate.Reset">
            <summary>
            Resets an instance.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfTemplate.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfPie">
            <summary>
            Represents a pie shape.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPie.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfPolygon">
            <summary>
            Represents a set of points connected with lines, could be drawn and filled.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPolygon.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPolygon.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPolygon.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPolygon.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPolygon.Points">
            <summary>
            Gets or sets the points of the polygon.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfPolygon.Count">
            <summary>
            Gets a number of the points in the polygon.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfPolygon.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the polygon.
            </summary>
            <param name="point">The last point of the polygon.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfRectangle">
            <summary>
            Represents a simple rectangle that could be drawn and/or filled.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfRectangle.#ctor(Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfRectangleArea">
            <summary>
            Represents an area bound by a rectangle.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRectangleArea.X">
            <summary>
            Gets or sets the X co-ordinate of the upper-left corner of this the element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRectangleArea.Y">
            <summary>
            Gets or sets the Y co-ordinate of the upper-left corner of this the element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRectangleArea.Width">
            <summary>
            Gets or sets the width of this element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRectangleArea.Height">
            <summary>
            Gets or sets the height of this element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRectangleArea.Size">
            <summary>
            Gets or sets the size of this element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfRectangleArea.Bounds">
            <summary>
            Gets or sets bounds of this element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfBitmap">
            <summary>
            Represents the bitmap images.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Graphics.PdfBitmap.m_Tag">
            <summary>
            When replacing the picture,use this property
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBitmap.ActiveFrame">
            <summary>
            Gets or sets the active frame of the bitmap.
            </summary>
            <value>The active frame index.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBitmap.FrameCount">
            <summary>
            Gets the number of frames in the bitmap.
            </summary>
            <value>The frame count.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBitmap.Mask">
            <summary>
            Gets or sets the mask of bitmap.
            </summary>
            <value>New PdfMask.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBitmap.Quality">
            <summary>
            Gets or sets the quality.
            </summary>
            <remarks>When the image is stored into PDF not as a mask,
            you may reduce its quality, which saves the disk space.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfBitmap.Tag">
            <summary>
            When replacing the picture,use this property
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.#ctor(System.Drawing.Image)">
            <summary>
            Creates new PdfBitmap instance.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.#ctor(System.String)">
            <summary>
            Creates new PdfBitmap instance.
            </summary>
            <param name="path">The image path.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.#ctor(System.IO.Stream)">
            <summary>
            Creates new PdfBitmap instance.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
             is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.CanSaveAsRawImageForIndexedFormat">
            <summary>
            define method "SaveAsRawImageForIndexedFormat" supported IndexedFormat
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.SaveAsRawImageForIndexedFormat">
            <summary>
            save indexed bitmap to raw image
            support PixelFormat: Format1bppIndexed Format4bppIndexed Format8bppIndexed
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfBitmap.SetBit(System.Byte,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfColorMask">
            <summary>
            Represents the color mask for bitmaps.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfColorMask.StartColor">
            <summary>
            Gets or sets the start color.
            </summary>
            <value>The start color.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfColorMask.EndColor">
            <summary>
            Gets or sets the end color.
            </summary>
            <value>The end color.</value>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfColorMask.#ctor(Spire.Pdf.Graphics.PdfRGBColor,Spire.Pdf.Graphics.PdfRGBColor)">
            <summary>
            Creates new PdfColorMask object.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfImage">
            <summary>
            Represents the base class for images.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.PngDirectToJpeg">
            <summary>
            If True, png direct convert to Jpx and no mask.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.HorizontalResolution">
            <summary>
            Gets the horizontal resolution, in pixels per inch, of this Image. 
            </summary>
            <value>The horizontal resolution.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.VerticalResolution">
            <summary>
            Gets the vertical resolution, in pixels per inch, of this Image. 
            </summary>
            <value>The vertical resolution.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.PhysicalDimension">
            <summary>
            Returns the size of the image in points.
            </summary>
            <remarks>This property uses HorizontalResolution and VerticalResolution for calculating the size in points.</remarks>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.ActiveFrame">
            <summary>
            Gets or sets the active frame of the image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.FrameCount">
            <summary>
            Gets the number of frames in the image.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromFile(System.String)">
            <summary>
            Creates PdfImage from a file.
            </summary>
            <param name="path">Path to a file.</param>
            <returns>Returns a created PdfImage object.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromStream(System.IO.Stream)">
            <summary>
            Creates PdfImage from stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Returns a created PdfImage object.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromImage(System.Drawing.Image)">
            <summary>
            Converts a  object into a PDF image.
            </summary>
            <param name="image">The image.</param>
            <returns>Returns a created PdfImage object.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromRtf(System.String,System.Single,Spire.Pdf.Graphics.PdfImageType,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Creates a new image instance from RTF text.
            </summary>
            <param name="rtf">RTF text data.</param>
            <param name="width">Width of the image in points.</param>
            <param name="type">Type of the image that should be created.</param>
            <param name="format">The text string format.</param>
            <returns>PdfImage containing RTF text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromRtf(System.String,System.Single,Spire.Pdf.Graphics.PdfImageType)">
            <summary>
            Creates a new image instance from RTF text.
            </summary>
            <param name="rtf">RTF text data.</param>
            <param name="width">Width of the image in points.</param>
            <param name="type">Type of the image that should be created.</param>
            <returns>PdfImage containing RTF text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromRtf(System.String,System.Single,System.Single,Spire.Pdf.Graphics.PdfImageType)">
            <summary>
            Creates a new image instance from RTF text.
            </summary>
            <param name="rtf">RTF text data.</param>
            <param name="width">Width of the image in points.</param>
            <param name="height">Height of the image in points.</param>
            <param name="type">Type of the image that should be created.</param>
            <returns>PdfImage containing RTF text.</returns>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImage.FromRtf(System.String,System.Single,System.Single,Spire.Pdf.Graphics.PdfImageType,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Creates a new image instance from RTF text.
            </summary>
            <param name="rtf">RTF text data.</param>
            <param name="width">Width of the image in points.</param>
            <param name="height">Height of the image in points.</param>
            <param name="type">Type of the image that should be created.</param>
            <param name="format">The text string format.</param>
            <returns>PdfImage containing RTF text.</returns>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImage.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfImageMask">
            <summary>
            Represents the image mask object for bitmaps.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImageMask.Mask">
            <summary>
            Gets the image mask.
            </summary>
            <value>The image mask.</value>
        </member>
        <member name="P:Spire.Pdf.Graphics.PdfImageMask.SoftMask">
            <summary>
            Gets the mask type.
            </summary>
            <value><c>true</c> if soft mask; otherwise, hard mask <c>false</c>.</value>
        </member>
        <member name="M:Spire.Pdf.Graphics.PdfImageMask.#ctor(Spire.Pdf.Graphics.PdfBitmap)">
            <summary>
            Creates new PdfImageMask object.
            </summary>
            <param name="imageMask">The image mask.</param>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfMask">
            <summary>
            Base class for bitmap masking objects.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Graphics.PdfMetafile">
            <summary>
            Class representing metafiles.
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.HtmlConverter.m_loadHtmlTimeout">
            <summary>
            load URL time out
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.HtmlConverter.m_IsWaiting">
            <summary>
            load URL whether Waiting 
            </summary>
        </member>
        <!-- 对于成员“F:Spire.Pdf.HtmlConverter.HtmlConverter.m_HtmlType”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Pdf.HtmlConverter.HtmlConverter.m_LoadComplete">
            <summary>
            WebBrowser load Complete
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.HtmlConverter.m_PageSettings">
            <summary>
            Gets or sets page settings of the section.
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.HtmlConverter.start">
            <summary>
            Get html page  start time
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.HtmlConverter.IsWaiting">
            <summary>
            load URL whether Waiting
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.HtmlConverter.WaitingTime">
             <summary>
            webBrowser load html  whether  Waiting time in milliseconds.
             </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.HtmlConverter.HtmlType">
            <summary>
            load ScouceCode or URL
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.HtmlConverter.LoadComplete">
            <summary>
            WebBrowser load Complete
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.HtmlConverter.PageSettings">
            <summary>
            Gets or sets page settings of the section.
            </summary>
        </member>
        <member name="T:Spire.Pdf.HtmlConverter.Clip">
            <summary>
            Options of converting html to pdf
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Clip.None">
            <summary>
            Not clip
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Clip.Width">
            <summary>
            Clips width
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Clip.Height">
            <summary>
            Clips height
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Clip.Both">
            <summary>
            Clips width and height
            </summary>
        </member>
        <member name="T:Spire.Pdf.HtmlConverter.LoadHtmlType">
            <summary>
            load from  content type
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.LoadHtmlType.URL">
            <summary>
            load from ulr or file
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.LoadHtmlType.SourceCode">
            <summary>
            load html SourceCode
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.m_loadHtmlTimeout">
            <summary>
            default 30 s
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.m_IsWaiting">
            <summary>
            load URL whether Waiting
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.m_HtmlType">
            <summary>
            load ScouceCode or URL
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.m_LoadComplete">
            <summary>
            WebBrowser load Complete
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.Layout">
            <summary>
            Gets or sets layout type of the element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.FitToPage">
            <summary>
            If html view is larger than pdf page, zooms out it to fit pdf page.
            But if html view is smaller than, will not zoom in it.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.FitToHtml">
            <summary>
            If html view is larger than page, resize pdf page to fit html view.
            But if html view is smaller than, will not resize pdf page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.TrimPage">
            <summary>
            If html view is smaller than page, trim pdf page to fit html view.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.LoadHtmlTimeout">
            <summary>
            The maximum time in milliseconds to wait the completion of loading html.
            Default is 30000.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.IsWaiting">
             <summary>
            webBrowser load html  whether  Waiting
             </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.WaitingTime">
             <summary>
            webBrowser load html  whether  Waiting time  in milliseconds.
             </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.HtmlType">
            <summary>
            load ScouceCode or URL
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat.LoadComplete">
            <summary>
            WebBrowser load Complete
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Clip.None">
            None -> 0
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Clip.Width">
            Width -> 1
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Clip.Height">
            Height -> 2
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Clip.Both">
            Both -> 4
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Margins.Left">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Margins.Top">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Margins.Right">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Margins.Bottom">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.InitViewSize">
            Size
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.PageSize">
            Size
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.PageMargins">
            Margins
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.Layout">
            PdfLayoutType
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.FitToPage">
            Clip
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.FitToHtml">
            Clip
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.TrimPage">
            Clip
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.HTML2PDFOption.LoadHtmlTimeout">
            int
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.FRect.Left">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.FRect.Top">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.FRect.Width">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.FRect.Height">
            float
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.PdfLayoutHTMLResult.Bounds">
            FRect
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.PdfLayoutHTMLResult.Page">
            int
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.PdfLayoutHTMLResult.HTMLViewBounds">
            FRect
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Proxy.pLogInfoMethod">
            <summary>
            Pointer to DebugLog.CLogInfo, C module uses it to write log message.
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Proxy.hLib">
            <summary>
            Pointer to HTMLConverter.dll
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Proxy.ConvertToHTMLMethod">
            <summary>
            Pointer to ConvertToHTML method.
            </summary>
        </member>
        <member name="F:Spire.Pdf.HtmlConverter.Qt.Proxy.dllPath">
            <summary>
            Path of dll folder, which contains HTMLConverter.dll
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.PluginPath">
            <summary>
            Sets the path of the folder which cantains the HTMLConverter.dll
            and other dll files required for conversion.
            </summary>
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.String)">
             <summary>
             Convert an html page to a pdf file. The Qt html engine plugin is required.
             During conversion, JavaScript is enabled, default timeout is 30 seconds.
             The page size of output pdf file is A4 and margin is 90 (left-right) and 72 (top-bottom).
             </summary>
             <param name="url">Url address of the html page.</param>
             <param name="fileName">The output pdf file name.</param>
            [Obsolete("This method may be removed in the future.")]
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.IO.Stream)">
             <summary>
             Convert an html page to a pdf file. The Qt html engine plugin is required.
             During conversion, JavaScript is enabled, default timeout is 30 seconds.
             The page size of output pdf file is A4 and margin is 90 (left-right) and 72 (top-bottom).
             </summary>
             <param name="url">Url address of the html page.</param>
             <param name="stream">The output pdf Stream.</param>
            [Obsolete("This method may be removed in the future.")]
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.String,Spire.Pdf.HtmlConverter.LoadHtmlType)">
            <summary>
            Convert an html page to a pdf file. The Qt html engine plugin is required.
            During conversion, JavaScript is enabled, default timeout is 30 seconds.
            The page size of output pdf file is A4 and margin is 90 (left-right) and 72 (top-bottom).
            </summary>
            <param name="url">Url address of the html page.</param>
            <param name="fileName">The output pdf file name.</param>
            <param name="urlHtml">the load htmlcode or url </param>
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.IO.Stream,Spire.Pdf.HtmlConverter.LoadHtmlType)">
            <summary>
            Convert an html page to a pdf stream. The Qt html engine plugin is required.
            During conversion, JavaScript is enabled, default timeout is 30 seconds.
            The page size of output pdf file is A4 and margin is 90 (left-right) and 72 (top-bottom).
            </summary>
            <param name="url">Url address of the html page.</param>
            <param name="stream">The output pdf stream.</param>
            <param name="urlHtml">the load htmlcode or url </param>
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.String,System.Boolean,System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins)">
             <summary>
             Convert an html page to a pdf file. The Qt html engine plugin is required.
             </summary>
             <param name="url">Url address of the html page.</param>
             <param name="fileName">The output pdf file name.</param>
             <param name="enableJavaScript">Indicates whether enable JavaScript.</param>
             <param name="timeout">The timeout of loading html.</param>
             <param name="pageSize">The page size of output pdf file.</param>
             <param name="margins">The margins of output pdf file.</param>
            [Obsolete("This method may be removed in the future.")]
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.IO.Stream,System.Boolean,System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins)">
             <summary>
             Convert an html page to a pdf stream. The Qt html engine plugin is required.
             </summary>
             <param name="url">Url address of the html page.</param>
             <param name="stream">The output pdf stream.</param>
             <param name="enableJavaScript">Indicates whether enable JavaScript.</param>
             <param name="timeout">The timeout of loading html.</param>
             <param name="pageSize">The page size of output pdf file.</param>
             <param name="margins">The margins of output pdf file.</param>
            [Obsolete("This method may be removed in the future.")]
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.init(System.String,System.Boolean,System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins)">
            <summary>
            init HTML2PDFOption param
            </summary>
            <param name="url">Url address of the html page.</param>
            <param name="enableJavaScript">Indicates whether enable JavaScript.</param>
            <param name="timeout">The timeout of loading html.</param>
            <param name="pageSize">The page size of output pdf file.</param>
            <param name="margins">The margins of output pdf file.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.String,System.Boolean,System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins,Spire.Pdf.HtmlConverter.LoadHtmlType)">
            <summary>
             Convert an html page to a pdf file. The Qt html engine plugin is required.
            </summary>
            <param name="url">Url address of the html page.</param>
            <param name="fileName">The output pdf file name.</param>
            <param name="enableJavaScript">Indicates whether enable JavaScript.</param>
            <param name="timeout">The timeout of loading html.</param>
            <param name="pageSize">The page size of output pdf file.</param>
            <param name="margins">The margins of output pdf file.</param>
            <param name="urlHtml">url or htmlcontent</param>
        </member>
        <member name="M:Spire.Pdf.HtmlConverter.Qt.HtmlConverter.Convert(System.String,System.IO.Stream,System.Boolean,System.Int32,System.Drawing.SizeF,Spire.Pdf.Graphics.PdfMargins,Spire.Pdf.HtmlConverter.LoadHtmlType)">
            <summary>
            Convert an html page to a pdf file. The Qt html engine plugin is required.
            </summary>
            <param name="url">Url address of the html page.</param>
            <param name="stream">The output pdf stream.</param>
            <param name="enableJavaScript">Indicates whether enable JavaScript.</param>
            <param name="timeout">The timeout of loading html.</param>
            <param name="pageSize">The page size of output pdf file.</param>
            <param name="margins">The margins of output pdf file.</param>
            <param name="urlHtml">url or htmlcontent</param>
        </member>
        <member name="T:Spire.Pdf.HtmlToPdf.HtmlToPdfLayoutParams">
            <summary>
            Represents the layout parameters.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlToPdf.HtmlToPdfLayoutParams.Page">
            <summary>
            Gets or sets the starting layout page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlToPdf.HtmlToPdfLayoutParams.Bounds">
            <summary>
            Gets or sets the lay outing bounds.
            </summary>
        </member>
        <member name="P:Spire.Pdf.HtmlToPdf.HtmlToPdfLayoutParams.VerticalOffsets">
            <summary>
            Gets or sets the vertical offsets.
            </summary>
            <value>The vertical offsets.</value>
        </member>
        <member name="P:Spire.Pdf.HtmlToPdf.HtmlToPdfLayoutParams.Format">
            <summary>
            Gets or sets the lay outing settings.
            </summary>
        </member>
        <member name="T:Spire.Pdf.HtmlToPdf.HtmlTags">
            <summary>
            HTML tags
            </summary>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlHelper.ForeachTags(System.String,System.Drawing.PointF,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            parsing html tags
            </summary>
            <param name="s">html content</param>
            <param name="point"></param>
            <param name="fontBase">drawing font</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlHelper.ProcessHtml(System.String@,System.Int32,System.Drawing.PointF,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            parsing html tags
            </summary>
            <param name="s">html content</param>
            <param name="index"></param>
            <param name="point"></param>
            <param name="fontBase"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlHelper.SetHtmlTagsType(Spire.Pdf.HtmlToPdf.HtmlTags,System.String)">
            <summary>
            set html type
            </summary>
            <param name="htmlTags"></param>
            <param name="type"></param>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlHelper.SetHtmlTagsFont(Spire.Pdf.HtmlToPdf.HtmlTags)">
            <summary>
            set text font
            </summary>
            <param name="htmlTags"></param>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlHelper.SetFontStyle(Spire.Pdf.HtmlToPdf.HtmlTags,System.Single,System.Drawing.FontStyle)">
            <summary>
            set font style
            </summary>
            <param name="htmlTags"></param>
            <param name="size"></param>
            <param name="style"></param>
        </member>
        <member name="T:Spire.Pdf.HtmlToPdf.HtmlToPdfResult">
            <summary>
            Represents the result of html to pdf conversion.
            </summary>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlToPdfResult.#ctor(System.Drawing.Image[],System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="image">The image.</param>
            <param name="pageBreaks">The page breaks.</param>
            <param name="anchors">The anchors.</param>
        </member>
        <member name="P:Spire.Pdf.HtmlToPdf.HtmlToPdfResult.RenderedImage">
            <summary>
            Gets the rendered image.
            </summary>
            <value>The rendered image.</value>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlToPdfResult.Render(Spire.Pdf.PdfPageBase,Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Draws the HtmlToPdfResults on to the document.
            </summary>
            <param name="page">The Pdf Page.</param>
            <param name="format">The Metafile layout format.</param>
        </member>
        <member name="M:Spire.Pdf.HtmlToPdf.HtmlToPdfResult.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spire.Pdf.IO.PrimitiveStatus">
            <summary>
            Specfies the status of the IPdfPrmitive.
            </summary>
        </member>
        <member name="F:Spire.Pdf.IO.CrossTable.m_isCrossReferenceStream">
            <summary>
            The information of cross-reference store in a cross-referebnce stream
            </summary>
        </member>
        <!-- 对于成员“F:Spire.Pdf.IO.CrossTable.m_initialNumberOfSubsection”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Pdf.IO.CrossTable.m_loadState">
            <summary>
            The current load state
            </summary>
        </member>
        <member name="T:Spire.Pdf.IO.CrossTable.LoadStates">
            <summary>
            The load state
            </summary>
        </member>
        <member name="M:Spire.Pdf.IO.CrossTable.CheckCrossReferenceStreamEntries">
            <summary>
            Check whether the entry of cross reference stream is in correct place  
            </summary>
            <returns>if correct return true ,otherwise false</returns>
        </member>
        <member name="M:Spire.Pdf.IO.CrossTable.CheckCrossReferenceTableEntries">
            <summary>
            Check whether the entry of cross reference table is in correct place  
            </summary>
            <returns>If correct return true ,otherwise false</returns>
        </member>
        <member name="M:Spire.Pdf.IO.CrossTable.CheckCrossReferenceEntries">
            <summary>
            Check whether the entry`s offset that in cross reference table or cross reference stream is
            in correct place
            </summary>
            <returns>If correct return true ,otherwise false</returns>
        </member>
        <member name="M:Spire.Pdf.IO.PdfLexer.FixedUnicodeString">
            <summary>
            Fixed TokenType.UnicodeString mismatch.
            </summary>
        </member>
        <member name="F:Spire.Pdf.IO.Operators.BeginImage">
            <summary>
            Begin an inline image object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.IO.Operators.ImageData">
            <summary>
            Begin the image data for an inline image object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.IO.Operators.EndImage">
            <summary>
            End an inline image object.
            </summary>
        </member>
        <member name="P:Spire.Pdf.IO.PdfParser.IntegerQueue">
            <summary>
            Get Holds all integers that have been read ahead.
            </summary>
        </member>
        <member name="M:Spire.Pdf.IO.PdfParser.CheckIndirectObjectPosition(System.Int64,System.Int64)">
            <summary>
            Check whether the indirect object`s position in file are same as the offset
            </summary>
            <param name="offset">The indirect object`offset</param>
            <param name="objNum">The object number</param>
            <returns>If correct return true ,otherwise return false</returns>
        </member>
        <member name="M:Spire.Pdf.IO.PdfStreamWriter.StringToByte(System.String)">
            <summary>
            Convert string to a byte array.
            </summary>
            <param name="stringData">String data</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Spire.Pdf.IO.PdfStreamWriter.SetGrayColorForStroking(System.String)">
            <summary>
            1 G ,Pen Color
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Spire.Pdf.IO.PdfStreamWriter.SetGrayColorForNonstroking(System.String)">
            <summary>
             1 g ,Pen Color
            </summary>
            <param name="color"></param>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoType.CT_TYPE1">
            <summary>
            Retrieves character type info
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoType.CT_TYPE2">
            <summary>
            Retrieves bi-directional layout info
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoType.CT_TYPE3">
            <summary>
            Retrieves text processing info
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_UPPER">
            <summary>
            Uppercase
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_LOWER">
            <summary>
            Lowercase
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_DIGIT">
            <summary>
            Decimal digits
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_SPACE">
            <summary>
            Space characters
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_PUNCT">
            <summary>
            Punctuation
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_CNTRL">
            <summary>
            Control characters
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_BLANK">
            <summary>
            Blank characters
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_XDIGIT">
            <summary>
            Hexadecimal digits
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype1.C1_ALPHA">
            <summary>
            Any linguistic character: alphabetic, syllabary, or ideographic
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_LEFTTORIGHT">
            <summary>
            Left to right
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_RIGHTTOLEFT">
            <summary>
            Right to left
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_EUROPENUMBER">
            <summary>
            European number, European digit
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_EUROPESEPARATOR">
            <summary>
            European numeric separator
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_EUROPETERMINATOR">
            <summary>
            European numeric terminator
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_ARABICNUMBER">
            <summary>
            Arabic number
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_COMMONSEPARATOR">
            <summary>
            Common numeric separator
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_BLOCKSEPARATOR">
            <summary>
            Block separator
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_SEGMENTSEPARATOR">
            <summary>
            Segment separator
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_WHITESPACE">
            <summary>
            White space
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_OTHERNEUTRAL">
            <summary>
            Other neutrals
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype2.C2_NOTAPPLICABLE">
            <summary>
            No implicit directionality (for example, control codes)
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_DIACRITIC">
            <summary>
            Diacritic nonspacing mark
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_VOWELMARK">
            <summary>
            Vowel nonspacing mark
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_SYMBOL">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_KATAKANA">
            <summary>
            Katakana character
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_HIRAGANA">
            <summary>
            Hiragana character
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_HALFWIDTH">
            <summary>
            Half-width (narrow) character
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_FULLWIDTH">
            <summary>
            Full-width (wide) character
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_IDEOGRAPH">
            <summary>
            Ideographic character
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_KASHIDA">
            <summary>
            Arabic Kashida character
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_LEXICAL">
            <summary>
            Punctuation which is counted as part of the word
            (Kashida, hyphen, feminine/masculine ordinal indicators, equal sign, and so forth)
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_ALPHA">
            <summary>
            All linguistic characters (alphabetical, syllabary, and ideographic)
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.StringInfoCtype3.C3_NOTAPPLICABLE">
            <summary>
            Not applicable
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.FormatMessageFlags">
            <summary>
            Native enum.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SETMITERLIMIT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.EMR_SETMITERLIMIT.eMiterLimit">
            <summary>
            New miter limit.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_MODIFYWORLDTRANSFORM">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.XFORM">
            <summary>
            The XFORM structure specifies a world-space to page-space transformation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.XFORM.eM11">
            <summary>
            Specifies scaling/rotation/reflection
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.XFORM.eM12">
            <summary>
            Specified shear/rotation
            </summary>   
        </member>
        <member name="F:Spire.Pdf.Native.XFORM.eM21">
            <summary>
            Specified shear/rotation
            </summary>   
        </member>
        <member name="F:Spire.Pdf.Native.XFORM.eM22">
            <summary>
            Specifies scaling/rotation/reflection
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.XFORM.eDx">
            <summary>
            Specifies the horizontal translation component, in logical units.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.XFORM.eDy">
            <summary>
            Specifies the vertical translation component, in logical units.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_EXTCREATEPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EXTLOGPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Native.POINT.#ctor(System.Int32)">
            <summary>
            Point creation from lParam's data.
            </summary>
            <param name="lParam">lParam's data for initialing point structure.</param>
        </member>
        <member name="M:Spire.Pdf.Native.POINT.op_Implicit(Spire.Pdf.Native.POINT)~System.Drawing.Point">
            <summary>
            Performs an implicit conversion from  to <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spire.Pdf.Native.POINT.op_Implicit(Spire.Pdf.Native.POINT)~System.Drawing.PointF">
            <summary>
            Performs an implicit conversion from  to <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spire.Pdf.Native.POINT.op_Implicit(System.Drawing.Point)~Spire.Pdf.Native.POINT">
            <summary>
            Performs an implicit conversion from  to <see cref="T:Spire.Pdf.Native.POINT"/>.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Spire.Pdf.Native.LOGBRUSH32">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_CREATEBRUSHINDIRECT">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SELECTCLIPPATH">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.ABC">
            <summary>
            ABC structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.ColorDataEx">
            <summary>
            Structure for 32 bit images saving.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorDataEx.Blue">
            <summary>
            Value of Blue chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorDataEx.Green">
            <summary>
            Value of Green chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorDataEx.Red">
            <summary>
            Value of Red chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorDataEx.Alpha">
            <summary>
            Value of Alpha chanel.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.ColorData">
            <summary>
            Structure for 24 bit images saving.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorData.Blue">
            <summary>
            Value of Blue chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorData.Green">
            <summary>
            Value of Green chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorData.Red">
            <summary>
            Value of Red chanel.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.ColorData16">
            <summary>
            Structure for 24 bit images saving.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorData16.Blue">
            <summary>
            Value of Blue chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorData16.Green">
            <summary>
            Value of Green chanel.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Native.ColorData16.Red">
            <summary>
            Value of Red chanel.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_POLYPOLYLINE16">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_POLYPOLYLINE">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SETVIEWPORTEXTEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SETVIEWPORTORGEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SCALEVIEWPORTEXTEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_LINETO">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_POLYLINE16">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_POLYLINE">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_ALPHABLEND">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_OFFSETCLIPRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_EXCLUDECLIPRECT">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SETARCDIRECTION">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_FILLRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.RGNDATA">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.RGNDATAHEADER">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_INVERTRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_EXTSELECTCLIPRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SETTEXTCOLOR">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_SETWORLDTRANSFORM">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_CREATEPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.LOGPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_ANGLEARC">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_RECTANGLE">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_ROUNDRECT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_ARC">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_FILLPATH">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.RGBQUAD">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.BITMAPINFOHEADER">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.BITMAPINFO">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.BITMAP">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_STRETCHDIBITS">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_BITBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_STRETCHBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.EMR_MASKBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Native.LOGFONT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PageAddedEventHandler">
            <summary>
            Represents the  method that executes on a PdfNewDocument when a new page is created.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A  that contains the event data.</param>
        </member>
        <member name="T:Spire.Pdf.PageAddedEventArgs">
            <summary>
            Provides data for PageAdded event.
            </summary>
            <remarks>
            This event raised on adding the pages. 
            </remarks> 
        </member>
        <member name="P:Spire.Pdf.PageAddedEventArgs.Page">
            <summary>
            Gets the newly added page.
            </summary>
            <value>a  object representing the page which is added in the document.</value>
        </member>
        <member name="M:Spire.Pdf.PageAddedEventArgs.#ctor(Spire.Pdf.PdfNewPage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="page">a  object representing the page which is added in the document.</param>
        </member>
        <member name="T:Spire.Pdf.PdfDocumentTemplate">
            <summary>
            Encapsulates a page template for all the pages in the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.Left">
            <summary>
            Gets or sets a left page template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.Top">
            <summary>
            Gets or sets a top page template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.Right">
            <summary>
            Gets or sets a right page template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.Bottom">
            <summary>
            Gets or sets a bottom page template.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.EvenLeft">
            <summary>
            Gets or sets a left page template using on the even pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.EvenTop">
            <summary>
            Gets or sets a top page template using on the even pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.EvenRight">
            <summary>
            Gets or sets a right page template using on the even pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.EvenBottom">
            <summary>
            Gets or sets a bottom page template using on the even pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.OddLeft">
            <summary>
            Gets or sets a left page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.OddTop">
            <summary>
            Gets or sets a top page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.OddRight">
            <summary>
            Gets or sets a right page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.OddBottom">
            <summary>
            Gets or sets a bottom page template using on the odd pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentTemplate.Stamps">
            <summary>
            Gets a collection of stamp elements.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentTemplate.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageNumberCollection">
            <summary>
            This class allows to manipulate with page
            labels of one of the sections.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumberCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumberCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Spire.Pdf.PdfPageNumberCollection.Add(Spire.Pdf.PdfPageNumber)">
            <summary>
            Add the Page Label.
            </summary>
            <param name="pageLabel"></param>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumberCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.PdfPageBase">
            <summary>
            The base class for all pages.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.IsBlank">
            <summary>
            Returns page is blank flag for page's content.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.CropBox">
            <summary>
            Returns the visible region of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.BleedBox">
            <summary>
            Returns page region after clipping.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.MediaBox">
            <summary>
            Returns page region mediabox.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.TrimBox">
            <summary>
            Returns page region after trimming.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.ArtBox">
            <summary>
            Returns page region containing content.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.AnnotationsWidget">
            <summary>
            Gets the field collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.GetImagesInfo(System.Drawing.Image[],System.Collections.Generic.List{System.Drawing.RectangleF}@)">
            <summary>
            Get picture information and location
            </summary>
            <param name="images"></param>
            <param name="bounds"></param>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.ImagesInfo">
            <summary>
            Gets the information about the extracted image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.Canvas">
            <summary>
            Gets the graphics of the .
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.Section">
            <summary>
            Gets the parent section of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.PageLayers">
            <summary>
            Gets the collection of the page's layers.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.AddCommand">
            <summary>
            add 'q','Q'
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.DefaultLayerIndex">
            <summary>
            Gets or sets index of the default layer.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.DefaultLayer">
            <summary>
            Gets the default layer of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.Size">
            <summary>
            Gets the size of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.ActualSize">
            <summary>
            Gets the actual size of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.BackgroundImage">
            <summary>
            Gets or sets page's background image.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.BackgroundColor">
            <summary>
            Gets or sets page's background color.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.BackgroundRegion">
            <summary>
            The position and size of the background 
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.GetClientSize">
            <summary>
            Returns a page size reduced by page margins and page template dimensions.
            </summary>
            <remarks>It's the actual size of the page where some output can be performed.</remarks>
            <returns>Returns a page size reduced by page margins and page template dimensions.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ReplaceImage(System.Int32,Spire.Pdf.Graphics.PdfImage)">
            <summary>
            Replace the Image at index's Position.
            </summary>
            <param name="index">index of an image</param>
            <param name="image">The New Replace image</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.CreateTemplate">
            <summary>
            Creates a template from page content and all annotation appearances.
            </summary>
            <returns>The created template.</returns>
        </member>
        <member name="F:Spire.Pdf.PdfPageBase.finds">
            <summary>
            Text search result
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageBase.searchText">
            <summary>
            Find text
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.FindText(System.String,System.Boolean)">
            <summary>
            find text 
            </summary>
            <param name="searchPatternText">
            The text intends to search.
            </param>
            <param name="isPrisiceResult">
            Indicate the expected result is the whole word or not, which means, if it is true, only the word is exactly the same with the 
            searching word will be found;if it is false, any word including the searching word will be found. For instance,the text is "is this a pen?" 
            and the target is "is", if true, one result will be returned; if false, two results will be returned.
            </param>
            <returns></returns>
            
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.FindText(System.String)">
            <summary>
            find text
            </summary>
            <param name="searchPatternText">string searchPatternText</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.FindText(System.String,System.Boolean,System.Boolean)">
            <summary>
            find text
            </summary>
            <param name="searchPatternText"></param>
            <param name="isSearchWholeWord"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.FindAllText">
            <summary>
            Find all text and position.
            </summary>
            <returns>All text find in the page.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.SortByPosition(System.Collections.Hashtable,System.Drawing.RectangleF)">
            <summary>
            Sort text position
            </summary>
            <param name="TextTable"></param>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExecuteCommandFindText(System.String)">
            <summary>
            Find text in page
            </summary>
            <param name="searchPatternText">The text which is to be searched  </param>
            <returns>The result which has already been searched </returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExecuteCommandFindText(System.String,Spire.Pdf.Exporting.XObjectElement,Spire.Pdf.General.Render.PdfElement.PdfRecordCollection)">
            <summary>
            
            </summary>
            <param name="searchPatternText"></param>
            <param name="parentObj"></param>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExecuteCommandFindTextWithInvariantCulture(System.String,Spire.Pdf.Exporting.XObjectElement,Spire.Pdf.General.Render.PdfElement.PdfRecordCollection)">
            <summary>
            Find text in page
            </summary>
            <param name="searchPatternText">The text which is to be searched  </param>
            <returns>The result which has already been searched </returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.GetColorspace(System.String[])">
            <summary>
            
            </summary>
            <param name="colorElement"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.GetColorFromColorspace(System.String[],System.String,Spire.Pdf.General.Render.ColorSpace.PDFColorSpace)">
            <summary>
            
            </summary>
            <param name="colorElement"></param>
            <param name="type"></param>
            <param name="colorSpace"></param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ApplyStrokingColor(System.String,System.Single[])">
            <summary>
            Apply Color
            </summary>
            <param name="type"></param>
            <param name="colorRed"></param>
            <param name="colorGreen"></param>
            <param name="colorBlue"></param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.GetFindTextFromXObject(System.String[],Spire.Pdf.Exporting.PdfPageResources,Spire.Pdf.Exporting.XObjectElement)">
            <summary>
            find text from XObject
            </summary>
            <param name="xobjectElement">string[] xobjectElement</param>
            <param name="m_pageResources">Spire.Pdf.Exporting.PdfPageResources m_pageResources</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractText(Spire.Pdf.Exporting.Text.SimpleTextExtractionStrategy)">
            <summary>
            Extracts text from the given PDF Page by SimpleTextExtractionStrategy.
            </summary>
            <returns>The Extracted Text.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractText(System.Drawing.RectangleF)">
            <summary>
            Extracts text in the range of rectangle from the given PDF Page.
            The unit is Point,1/72 inch default.
            the coordinate origin is top left corner of the page.
            </summary>
            <param name="rectangeleF">Provide a rangle to extract text.</param>
            <returns>The Extracted Text.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractText(System.Drawing.RectangleF,Spire.Pdf.Exporting.Text.SimpleTextExtractionStrategy)">
            <summary>
            Extracts text in the range of rectangle from the given PDF page by SimpleTextExtractionStrategy.
            the coordinate origin is top left corner of the page.
            </summary>
            <param name="rectangeleF">Provide a rangle to extract text.</param>
            <param name="sim">Provide simple text extraction policy</param>
            <returns>The Extracted Text.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ProcessTextTable(System.Collections.Hashtable)">
            <summary>
            Process text table.when the number of char in text is bigger one, split into multiple text.
            </summary>
            <param name="textTable">the old text table</param>
            <returns>the new text table</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractText(System.Boolean)">
            <summary>
            Extracts text from the given PDF Page.
            </summary>
            <returns>The Extracted Text.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractTextWithComplexity">
            <summary>
            Extracts text from the given PDF Page.
            </summary>
            <returns>The Extracted Text.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ForeachFont(Spire.Pdf.Primitives.PdfDictionary)">
            <summary>
            foreach font from Dictionary
            </summary>
            <param name="pagedic">pagedic</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractImages">
            <summary>
            Extracts images from the given PDF Page.
            The name of a image in the resources save in the Tag attribute of the iamge.
            </summary>
            <returns>Returns the extracted image as Image[].</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.ExtractImages(System.Boolean)">
            <summary>
            Extracts images from the given PDF Page. and image is not processed.
            The name of a image in the resources save in the Tag attribute of the iamge.
            </summary>
            <returns>Returns the extracted image as Image[].</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.DeleteImage(System.Drawing.Image)">
            <summary>
            Delete an image.
            The value of the image's Tag attribute is the name of the image in the resources.
            If the value of Tag is null,the sample image is an inline image type.
            </summary>
            <param name="image">The image to the delete.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.DeleteImage(System.String)">
            <summary>
            Delete an image in a page.
            </summary>
            <param name="imageName">The image's name.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.DeleteImage(System.Int32)">
            <summary>
             Delete an image by index in a page.
            </summary>
            <param name="imageIndex">The image index.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.TryCompressImage(System.Int32)">
            <summary>
            Try to compress images(except inline image).
            </summary>
            <param name="index">The image index</param>
            <returns>If success, return true; otherwise false.</returns>
        </member>
        <member name="P:Spire.Pdf.PdfPageBase.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.LoadFromRTF(System.String,System.Single,System.Boolean)">
            <summary>
            Insert rich text to page
            </summary>
            <param name="rtf">rich text</param>
            <param name="width">width</param>
            <param name="IsSplitLine">IsSplitLine</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.LoadFromRTF(System.String,System.Single,System.Boolean,System.Drawing.PointF)">
            <summary>
            Insert rich text to page
            </summary>
            <param name="rtf">rich text</param>
            <param name="width">width</param>
            <param name="IsSplitLine">IsSplitLine</param>
            <param name="point">Draw text x,y point</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.LoadFromRTF(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Insert rich text to page
            </summary>
            <param name="rtf">rich text</param>
            <param name="width">width</param>
            <param name="IsSplitLine">IsSplitLine</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.LoadFromRTF(System.String,System.Single,System.Single,System.Boolean,System.Drawing.PointF)">
            <summary>
            Insert rich text to page
            </summary>
            <param name="rtf">rich text</param>
            <param name="width">width</param>
            <param name="IsSplitLine">IsSplitLine</param>
            <param name="point">Draw text x,y point</param>
        </member>
        <member name="E:Spire.Pdf.PdfPageBase.BeginSave">
            <summary>
            Raises before the page saves.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageBase.InnerCompareInLine(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Pdf.PdfPageNumber">
            <summary>
            This class allows to manipulate with page
            labels of one of the sections.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumber.NumberStyle">
            <summary>
            Gets or sets the numbering style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumber.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumber.StartNumber">
            <summary>
            Gets or sets the start number.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageNumber.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageNumber.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.PdfPageTransition">
            <summary>
            Represents parameters how to display the page in the presentation mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Style">
            <summary>
            Gets or sets the transition style to use when moving to this page from another 
            during a presentation.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Duration">
            <summary>
            Gets or sets the duration of the transition effect, in seconds.
            </summary>
            <value>The transition duration.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Dimension">
            <summary>
            Gets or sets the dimension in which the specified transition effect occurs.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Motion">
            <summary>
            Gets or sets the the direction of motion for the specified transition effect.
            </summary>
            <value>The motion.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Direction">
            <summary>
            The direction in which the specified transition effect moves, expressed in degrees counter 
            clockwise starting from a left-to-right direction. (This differs from the page objects 
            Rotate property, which is measured clockwise from the top.)
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Scale">
            <summary>
            Gets or sets the starting or ending scale at which the changes are drawn. 
            If Motion property specifies an inward transition, the scale of the changes drawn progresses 
            from Scale to 1.0 over the course of the transition. If Motion specifies an outward 
            transition, the scale of the changes drawn progresses from 1.0 to Scale over the course 
            of the transition.
            </summary>
            <remarks>
            This property has effect for Fly transition style only.
            </remarks>
            <value>The scale.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.PageDuration">
            <summary>
            Gets or sets The pages display duration (also called its advance timing): the maximum 
            length of time, in seconds, that the page is displayed during presentations before 
            the viewer application automatically advances to the next page. By default, 
            the viewer does not advance automatically.
            </summary>
            <value>The page duration.</value>
        </member>
        <member name="M:Spire.Pdf.PdfPageTransition.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTransition.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="M:Spire.Pdf.PdfPageTransition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Spire.Pdf.PdfSectionPageCollection">
            <summary>
            Manipulates pages within a section.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionPageCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionPageCollection.Count">
            <summary>
            Gets the count of the pages.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.Add">
            <summary>
            Creates a new page and adds it into the collection.
            </summary>
            <returns>The new page.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.Add(Spire.Pdf.PdfNewPage)">
            <summary>
            Adds a page into collection.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.Insert(System.Int32,Spire.Pdf.PdfNewPage)">
            <summary>
            Inserts a page at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.IndexOf(Spire.Pdf.PdfNewPage)">
            <summary>
            Returns the index of the specified page.
            </summary>
            <param name="page">The page.</param>
            <returns>The index of the page.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.Contains(Spire.Pdf.PdfNewPage)">
            <summary>
            Determines whether the specified page is within the collection.
            </summary>
            <param name="page">The page.</param>
            <returns>
            	<c>true</c> if the collection contains the specified page; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.Remove(Spire.Pdf.PdfNewPage)">
            <summary>
            Removes the specified page.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a page at the index specified.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Spire.Pdf.PdfSectionPageCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <!-- 对于成员“M:Spire.Pdf.PdfSectionPageCollection.System#Collections#IEnumerable#GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="T:Spire.Pdf.PdfSectionTemplate">
            <summary>
            Encapsulates a page template for all the pages in the section.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionTemplate.ApplyDocumentLeftTemplate">
            <summary>
            Gets or sets value indicating whether parent Left page template should be used or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionTemplate.ApplyDocumentTopTemplate">
            <summary>
            Gets or sets value indicating whether parent Top page template should be used or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionTemplate.ApplyDocumentRightTemplate">
            <summary>
            Gets or sets value indicating whether parent Right page template should be used or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionTemplate.ApplyDocumentBottomTemplate">
            <summary>
            Gets or sets value indicating whether parent Bottom page template should be used or not.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionTemplate.ApplyDocumentStamps">
            <summary>
            Gets or sets value indicating whether 
            the parent stamp elements should be used or not.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfSectionTemplate.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfStampCollection">
            <summary>
            A collection of stamps that are applied to the page templates.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfStampCollection.Item(System.Int32)">
            <summary>
            Gets a stamp element by its index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.#ctor">
            <summary>
            Creates a new stamp collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.Add(Spire.Pdf.PdfPageTemplateElement)">
            <summary>
            Adds a stamp element to the collection.
            </summary>
            <param name="template">The stamp element.</param>
            <returns>The index of the stamp element.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.Add(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a stamp element and adds it to the collection.
            </summary>
            <param name="x">X co-ordinate of the stamp.</param>
            <param name="y">Y co-ordinate of the stamp.</param>
            <param name="width">Width of the stamp.</param>
            <param name="height">Height of the stamp.</param>
            <returns>The created stamp element.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.Contains(Spire.Pdf.PdfPageTemplateElement)">
            <summary>
            Checks whether the stamp element exists in the collection.
            </summary>
            <param name="template">Stamp element.</param>
            <returns>True - if stamp element exists in the collection, False otherwise.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.Insert(System.Int32,Spire.Pdf.PdfPageTemplateElement)">
            <summary>
            Inserts a stamp element to the collection at the specified position.
            </summary>
            <param name="index">The index of the stamp in the collection.</param>
            <param name="template">The stamp element.</param>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.Remove(Spire.Pdf.PdfPageTemplateElement)">
            <summary>
            Removes the stamp element from the collection.
            </summary>
            <param name="template">The stamp element.</param>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a stamp element from the specified position in the collection.
            </summary>
            <param name="index">The index of the stamp in the collection.</param>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.Clear">
            <summary>
            Cleares the collection.
            </summary>
        </member>
        <!-- 对于成员“M:Spire.Pdf.PdfStampCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Spire.Pdf.PdfStampCollection.PdfPageTemplateEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="F:Spire.Pdf.Primitives.PdfName.m_originalvalue">
            <summary>
            Value of the element.By Bug735
            </summary>
        </member>
        <member name="P:Spire.Pdf.Primitives.PdfStream.ImageFormat">
            <summary>
            Image Format
            </summary>
        </member>
        <member name="P:Spire.Pdf.Primitives.PdfString.ExtractedString">
            <summary>
            Gets the readable string .
            </summary>
            <value>The readable string.</value>
        </member>
        <member name="P:Spire.Pdf.Primitives.PdfString.Position">
            <summary>
            Gets or sets the integer value of the specified object.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Print.PdfMultiPageLayout">
            <summary>
            Multi pages to one paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageLayout.m_pageOrder">
             <summary>
            Multiple pages order in paper layout.
             </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageLayout.m_HasPageBorder">
            <summary>
            A value indicating whether the pages has the page border.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageLayout.m_rowNum">
            <summary>
            The number of rows for the paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageLayout.m_columnNum">
            <summary>
            The number of columns for the paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageLayout.m_pageSpacing">
            <summary>
            The spacing between pages and pages,measured in hundredths of an inch.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfMultiPageLayout.ColumnNum">
            <summary>
            Get or set the number of columns for paper layout.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfMultiPageLayout.RowNum">
            <summary>
             Get or set the number of rows for paper layout.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfMultiPageLayout.HasPageBorder">
            <summary>
            Get or set a value indicating whether the pages has the page border.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfMultiPageLayout.PageOrder">
            <summary>
            Get or set the order of pages in the paper layout.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.#ctor">
            <summary>
            Initializes a new instance of the PdfMultiPageLayout class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.GetPageContentBounds(System.Drawing.RectangleF)">
            <summary>
            Get the page content bounds in paper content bound.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <returns>The page content bound in paper content bound.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.GetHorizontalPageBound(System.Drawing.RectangleF)">
            <summary>
            Get the page bounds in horizontal layout.
            </summary>
            <param name="paperContentBound">the paper content bound</param>
            <returns>The page bounds.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.GetHorizontalReversedPageBound(System.Drawing.RectangleF)">
            <summary>
            Get the page bounds in horizontal reverse layout.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <returns>The page bounds.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.GetVerticalPageBound(System.Drawing.RectangleF)">
            <summary>
            Get the page bounds in vertical layout.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <returns>The page bounds.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.GetVerticalReversedPageBound(System.Drawing.RectangleF)">
            <summary>
            Get the page bounds in vertical reverse layout.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <returns>The page bounds.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfMultiPageLayout.GetPageContentBound(System.Collections.Generic.List{System.Drawing.RectangleF})">
            <summary>
            Get the page content bounds in paper bound.
            </summary>
            <param name="pageBounds">The page bounds.</param>
            <returns>The page content bounds.</returns>
        </member>
        <member name="T:Spire.Pdf.Print.PdfMultiPageOrder">
            <summary>
            Multi pages order in the Paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageOrder.Horizontal">
            <summary>
            Horizontal and from left to right
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageOrder.HorizontalReversed">
            <summary>
            Horizontal and from right to left
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageOrder.Vertical">
            <summary>
            Vertical and from left to right
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfMultiPageOrder.VerticalReversed">
            <summary>
            Vertical and from right to left
            </summary>
        </member>
        <member name="T:Spire.Pdf.Print.PdfSplitPageLayout">
            <summary>
            Split one page to multi papers layout.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSplitPageLayout.#ctor">
            <summary>
            Initializes a new instance of the PdfSplitPageLayout class
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSplitPageLayout.GetPageBounds(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Get page bounds.
            </summary>
            <param name="pageBound">The page bound.</param>
            <param name="paperContentBound">The paper content bound.</param>
            <returns>A List collection abount the page bounds.</returns>
        </member>
        <member name="T:Spire.Pdf.Print.PdfSinglePageLayout">
            <summary>
            One page to one paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageLayout.m_pageScalingMode">
            <summary>
            Page scaling mode,default value FitSize.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageLayout.m_customScaling">
            <summary>
            Custom scaling(unit:percent),default value 100f.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageLayout.m_autoPortraitOrLandscape">
            <summary>
            A value indicating whether automatic portrait and landscape.
            Default value false.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfSinglePageLayout.PageScalingMode">
            <summary>
            Get or set page scaling mode,default value FitSize.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfSinglePageLayout.CustomScaling">
            <summary>
            Get or set custom scaling(unit:percent),default value 100f.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfSinglePageLayout.AutoPortraitOrLandscape">
            <summary>
            Get or set a value indicating whether automatic portrait and landscape.
            Default value false.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSinglePageLayout.#ctor">
            <summary>
            Initializes a new instance of the PdfSinglePageLayout class
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSinglePageLayout.GetPageContentBound(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Get page content bound in paper content bound.
            </summary>
            <param name="paperPrintableContentBound">The paper printable content bound.</param>
            <param name="paperContentBound">The paper content bound.</param>
            <param name="pageBound">The page bound.</param>
            <returns>The page content bound.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSinglePageLayout.GetPageContentBoundFitSizePaper(System.Drawing.RectangleF)">
            <summary>
            Get page content bound when scaling mode is FitSize.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <returns>The page content bound.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSinglePageLayout.GetPageContentBoundActualSizePaper(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Get page content bound when scaling mode is ActualSize.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <param name="pageBound">The page bound.</param>
            <returns>The page content bound.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSinglePageLayout.GetPageContentBoundCustomSaclePaper(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Get page content bound when scaling mode is CustomSacle.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <param name="pageBound">The page bound.</param>
            <returns>The page content bound.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfSinglePageLayout.GetPageContentBoundShrinkOverSizedPaper(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Get page content bound when scaling mode is ShrinkOverSized.
            </summary>
            <param name="paperContentBound">The paper content bound.</param>
            <param name="pageBound">The page bound.</param>
            <returns>The page content bound.</returns>
        </member>
        <member name="T:Spire.Pdf.Print.PdfSinglePageScalingMode">
            <summary>
            Pdf Print Page Scale type
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageScalingMode.FitSize">
            <summary>
            Adaptive content size.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageScalingMode.ActualSize">
            <summary>
            The actual size of the content.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageScalingMode.ShrinkOversized">
            <summary>
            Shrink oversized pages.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfSinglePageScalingMode.CustomScale">
            <summary>
            Custom scale.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Print.PdfPaperSizes">
            <summary>
            Represents information about page size.
            The PaperSize's width and height,unit:in hundredths of an inch.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.Letter">
            <summary>
            Letter format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.Note">
            <summary>
            Note format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.Legal">
            <summary>
            Legal format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A0">
            <summary>
            A0 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A1">
            <summary>
            A1 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A2">
            <summary>
            A2 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A3">
            <summary>
            A3 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A4">
            <summary>
            A4 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A5">
            <summary>
            A5 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A6">
            <summary>
            A6 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A7">
            <summary>
            A7 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A8">
            <summary>
            A8 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A9">
            <summary>
            A9 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.A10">
            <summary>
            A10 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.B0">
            <summary>
            B0 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.B1">
            <summary>
            B1 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.B2">
            <summary>
            B2 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.B3">
            <summary>
            B3 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.B4">
            <summary>
            B4 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.B5">
            <summary>
            B5 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.ArchE">
            <summary>
            ArchE format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.ArchD">
            <summary>
            ArchD format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.ArchC">
            <summary>
            ArchC format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.ArchB">
            <summary>
            ArchB format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.ArchA">
            <summary>
            ArchA format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.Flsa">
            <summary>
            The American Foolscap format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.HalfLetter">
            <summary>
            HalfLetter format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.Letter11x17">
            <summary>
            11x17 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPaperSizes.Ledger">
            <summary>
            Ledger format.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Print.PdfPrinter">
            <summary>
            The page print to paper.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_printSettings">
            <summary>
            Pdf document printSetting.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_documentBase">
            <summary>
            Pdf document object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_currentPageIndex">
            <summary>
            The current pages array index in m_pages.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_pages">
            <summary>
            The printed pages array, it's elements value is document page index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.#ctor(Spire.Pdf.Print.PdfPrintSettings,Spire.Pdf.PdfDocumentBase)">
            <summary>
            Initializes a new instance of the PdfPrinter class.
            </summary>
            <param name="printSettings">Pdf document printSetting.</param>
            <param name="documentBase">Pdf document object.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.Preview(System.Windows.Forms.PrintPreviewControl)">
            <summary>
            Print Preview.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.Print">
            <summary>
            Print document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnBeginPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Begin print page.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnQueryPageSettings(System.Object,System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Query page setting.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnPrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print Page.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnEndPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            End print.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnePageToOnePaper_OnBeginPrint">
            <summary>
            Begin print page for one page to one paper.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnePageToOnePaper_OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Query page setting for one page to one paper.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnePageToOnePaper_OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print one page to one paper.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.MultiplePagesToOnePaper_OnBeginPrint">
            <summary>
            Begin print page for multiple pages to one paper.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.MultiplePagesToOnePaper_OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Query page setting for multiple pages to one paper.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.MultiplePagesToOnePaper_OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print multiple pages to one paper.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_currentPageImage">
            <summary>
            Current page image.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_currentPageBound">
            <summary>
            Current page bound.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_currentPageSplitBounds">
            <summary>
            Split bounds of current page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_currentPageSplitBoundIndex">
            <summary>
            Split bound index of current page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.m_paperContentBound">
            <summary>
            Paper content bound.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnePageToMultiplePapers_OnBeginPrint">
            <summary>
            Begin print page for one page to multiple papers.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnePageToMultiplePapers_OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Query page setting for one page to multiple papers. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.OnePageTomultiplePapers_OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print one page to multiple papers.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.CheckEvalExpired(System.Drawing.Graphics,System.Int32)">
            <summary>
            Write Warning info
            </summary>
            <param name="g"></param>
            <param name="currentPageIndex"></param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.InitialPrint">
            <summary>
            Initialize print.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.GetPageMetafile(System.Int32)">
            <summary>
            Get page metafile.
            </summary>
            <param name="documentPageIndex">Document page index.</param>
            <returns>Page Image.</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.GetPaperContentBound(System.Drawing.Printing.PageSettings,System.Boolean)">
            <summary>
            Get paper margin bound which according paperSettings. the paperSettings 
            is the attribute of PrintPageEventArgs.PageSettings. (Unit: hundredths of an inch)
            PrinterUnit.Display is hundredths of an inch.
            </summary>
            <param name="paperSettings">Paper set.</param>
            <param name="considerHardXY">Is consider hard margin.</param>
            <returns>
            If the considerHardXY is true,get the paper content bound arrcording to the printable area.
            Otherwise the considerHardXY is false,get the paper content bound according to the whole piece of paper.
            Paper content bound(Unit:hundredths of an inch).
            </returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.GetPageBound(Spire.Pdf.General.Render.Page)">
            <summary>
            Get page bound.
            </summary>
            <returns>Page bound(Unit:PrinterUnit.Display).</returns>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.PrintPageByUniform(System.Drawing.Printing.PrintPageEventArgs,Spire.Pdf.PdfPageBase,System.Drawing.RectangleF)">
            <summary>
             Print the pdf page to the paper's bound using uniform mode.
            </summary>
            <param name="args">Provides data for the print page event.</param>
            <param name="page">The pdf page.</param>
            <param name="paperBound">The paper's bound(Unit:PrinterUnit.Display).</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.PrintPageByFill(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Print the page bound of pdf page image to the paper's bound using fill mode. 
            </summary>
            <param name="args">Provides data for the print page event.</param>
            <param name="pageImage">The pdf page image.</param>
            <param name="papeBound">The pdf page bound(Unit:PrinterUnit.Display).</param>
            <param name="pageSplitBound">The pdf page split bound(Unit:PrinterUnit.Display).</param>
            <param name="paperBound">The paper's bound(Unit:PrinterUnit.Display).</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrinter.disposed">
            <summary>
            Specify whether to had released resources.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrinter.Dispose(System.Boolean)">
            <summary>
            Releases all resources used.
            </summary>
            <param name="disposing">True,Releases all resources;False,Releases unmanaged resources.</param>
        </member>
        <member name="T:Spire.Pdf.Print.PdfPaperSettingsEventArgs">
            <summary>
            Provides data for paper setting event.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPaperSettingsEventArgs.CurrentPaper">
            <summary>
            Get current paper index,from 1.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPaperSettingsEventArgs.PaperSources">
            <summary>
             Gets the paper source trays that are available on the printer.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPaperSettingsEventArgs.CurrentPaperSource">
            <summary>
            Get or set current paper source on the printer.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPaperSettingsEventArgs.#ctor(System.Int32,System.Drawing.Printing.PrinterSettings.PaperSourceCollection,System.Drawing.Printing.PaperSource)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="currentPaper">Current paper index.</param>
            <param name="paperSources">paper source trays that are available on the printer.</param>
            <param name="currentPaperSource">Current paper source on the printer.</param>
        </member>
        <member name="T:Spire.Pdf.Print.PdfPaperSettingsEventHandler">
            <summary>
            Represents the method that handles paper setting event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:Spire.Pdf.Print.PdfPrintSettings">
            <summary>
            The page print settings.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.m_printDocument">
            <summary>
            Defines a reusable object that sends output to a printer.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.m_pageLayoutMode">
            <summary>
            Page layout mode.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.m_singlePageLayout">
            <summary>
            One page to one paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.m_multiPageLayout">
            <summary>
            Multi-page to one paper layout. 
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.m_splitPageLayout">
            <summary>
            One page to multi-paper layout.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.m_printPages">
            <summary>
            The user has specified print pages save in the array. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PrintDocument">
            <summary>
            Defines a reusable object that sends output to a printer.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PrinterName">
            <summary>
            Get or set the name of printer which is on printing pdf document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.DocumentName">
            <summary>
             Get or set the document name to display (for example, in a print status dialog box or printer queue) while printing the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PaperSize">
            <summary>
            Get or set the size of a piece of paper.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.Copies">
            <summary>
            Get or set the number of copies of the document to print.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.Color">
            <summary>
            Get or set a value indicating whether the page should be printed in color.
            true if the page should be printed in color; otherwise, false. The default
            is determined by the printer.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.Collate">
            <summary>
            Get or set a value indicating whether the printed document is collated.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.Landscape">
            <summary>
            Get or set a value indicating whether the page is printed in landscape or portrait orientation.
            Returns:
            True if the page should be printed in landscape orientation; otherwise, false.
            </summary>   
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PrintController">
            <summary>
            Get or set the print controller that guides the printing process.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.CanDuplex">
            <summary>
            Get a value indicating whether the printer supports double-sided printing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.Duplex">
            <summary>
             Get or set the printer setting for double-sided printing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PrintFromPage">
            <summary>
            Get the pagenumber which you choose as the start page to printing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PrintToPage">
            <summary>
            Get the pagenumber which you choose as the final page to printing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PrintPages">
            <summary>
            Get the user has specified print pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.PageLayoutMode">
            <summary>
            Get or set page layout mode.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.SinglePageLayout">
            <summary>
            Get one page to one paper layout.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.MultiPageLayout">
            <summary>
            Get multi-page to one paper layout.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Print.PdfPrintSettings.SplitPageLayout">
            <summary>
            Get one page to multi-paper layout.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Print.PdfPrintSettings.PaperSettings">
            <summary>
            Occurs immediately before print each paper.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Print.PdfPrintSettings.BeginPrint">
            <summary>
             Occurs when the Spire.pdf.PdfDocument.Print() method is called
             and before the first page of the document prints.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Print.PdfPrintSettings.EndPrint">
            <summary>
            Occurs when the last page of the document has printed.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Print.PdfPrintSettings.PrintPage">
            <summary>
            Occurs when the output to print for the current page is needed.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Print.PdfPrintSettings.QueryPageSettings">
            <summary>
            Occurs immediately before each Spire.pdf.PdfDocument.PrintSettings.PrintPage
            event.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.#ctor">
            <summary>
            Initializes a new instance of the PdfPrintSetting class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectPageRange(System.Int32,System.Int32)">
            <summary>
            Set print page range.
            </summary>
            <param name="fromPage">From page.</param>
            <param name="toPage">To page.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectSomePages(System.Int32[])">
            <summary>
            Set print some pages.
            </summary>
            <param name="pages">Selection pages.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectSinglePageLayout">
            <summary>
            Select one page to one paper layout.
            Default pageScalingMode = PdfSinglePageScalingMode.FitSize, autoPortraitOrLandscape = true, customScaling = 100f.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectSinglePageLayout(Spire.Pdf.Print.PdfSinglePageScalingMode)">
            <summary>
            Select one page to one paper layout.
            </summary>
            <param name="pageScalingMode">Page scaling mode.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectSinglePageLayout(Spire.Pdf.Print.PdfSinglePageScalingMode,System.Boolean)">
            <summary>
            Select one page to one paper layout.
            </summary>
            <param name="pageScalingMode">Page scaling mode.</param>
            <param name="autoPortraitOrLandscape">Indicating whether automatic portrait and landscape.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectSinglePageLayout(Spire.Pdf.Print.PdfSinglePageScalingMode,System.Boolean,System.Single)">
            <summary>
            Select one page to one paper layout.
            </summary>
            <param name="pageScalingMode">Page scaling mode.</param>
            <param name="autoPortraitOrLandscape">Indicating whether automatic portrait and landscape.</param>
            <param name="customScaling">Custom scaling(unit:percent),default value 100f.Valid only if pageScalingMode== PdfSinglePageScalingMode.CustomScale.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectMultiPageLayout">
            <summary>
            Select muti page to one paper layout.
            Default rows = 2, columns = 2, hasPageBorder = false, pageOrder = PdfMultiPageOrder.Horizontal.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectMultiPageLayout(System.Int32)">
            <summary>
            Select muti page to one paper layout.
            </summary>
            <param name="rows">The number of rows for the paper layout.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectMultiPageLayout(System.Int32,System.Int32)">
            <summary>
            Select muti page to one paper layout.
            </summary>
            <param name="rows">The number of rows for the paper layout.</param>
            <param name="columns">The number of columns for the paper layout.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectMultiPageLayout(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Select muti page to one paper layout.
            </summary>
            <param name="rows">The number of rows for the paper layout.</param>
            <param name="columns">The number of columns for the paper layout.</param>
            <param name="hasPageBorder">A value indicating whether the pages has the page border.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectMultiPageLayout(System.Int32,System.Int32,System.Boolean,Spire.Pdf.Print.PdfMultiPageOrder)">
            <summary>
            Select muti page to one paper layout.
            </summary>
            <param name="rows">The number of rows for the paper layout.</param>
            <param name="columns">The number of columns for the paper layout.</param>
            <param name="hasPageBorder">A value indicating whether the pages has the page border.</param>
            <param name="pageOrder">Multiple pages order.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SelectSplitPageLayout">
            <summary>
            Select split page to muti paper layout.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.SetPaperMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set paper margins,measured in hundredths of an inch.
            </summary>
            <param name="top">Paper margin top(unit:hundredths of an inch).</param>
            <param name="bottom">Paper margin bottom(unit:hundredths of an inch).</param>
            <param name="left">Paper margin left(unit:hundredths of an inch).</param>
            <param name="right">Paper margin right(unit:hundredths of an inch).</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.PrintToFile(System.String)">
            <summary>
            Set printing to file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.OnQueryPageSettings(System.Object,Spire.Pdf.Print.PdfPaperSettingsEventArgs)">
            <summary>
            Trig before each System.Drawing.Printing.PrintDocument.PrintPage.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Drawing.Printing.QueryPageSettingsEventArgs that contains the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.OnBeginPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            User set event in begin print.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Drawing.Printing.PrintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.OnEndPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            User set event when the last page of the document has printed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Drawing.Printing.PrintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.OnPrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            User set event in print page.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Drawing.Printing.PrintPageEventArgs that contains the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.OnQueryPageSettings(System.Object,System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            User set event in query page setting.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Drawing.Printing.QueryPageSettingsEventArgs that contains the event data.</param>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPrintSettings.disposed">
            <summary>
            Specify whether to had released resources.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Print.PdfPrintSettings.Dispose(System.Boolean)">
            <summary>
            Releases all resources used.
            </summary>
            <param name="disposing">True,Releases all resources;False,Releases unmanaged resources.</param>
        </member>
        <member name="T:Spire.Pdf.Print.PdfPageLayoutMode">
            <summary>
            Pdf print pages layout mode.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPageLayoutMode.SinglePage">
            <summary>
            One page to one paper.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPageLayoutMode.MultiPage">
            <summary>
            Multiple pages to one paper.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Print.PdfPageLayoutMode.SplitPage">
            <summary>
            One page to multiple papers.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfCompressionLevel">
            <summary>
            Defines data compression level.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCompressionLevel.None">
            <summary>
            Pack without compression.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCompressionLevel.BestSpeed">
            <summary>
            Use high speed compression, reduce of data size is low.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCompressionLevel.BelowNormal">
            <summary>
            Something middle between normal and BestSpeed compressions.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCompressionLevel.Normal">
            <summary>
            Use normal compression, middle between speed and size.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCompressionLevel.AboveNormal">
            <summary>
            Pack better but require a little more time.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfCompressionLevel.Best">
            <summary>
            Use best compression, slow enough.
            </summary>
        </member>
        <member name="F:Spire.Pdf.CompressionType.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Spire.Pdf.CompressionType.Zlib">
            <summary>
            Compresses data using the zlib or deflate compression method,
            reproducing the original text or binary data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.CompressionType.LZW">
            <summary>
            Compresses data using the LZW compression method, reproducing
            the original text or binary data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.CompressionType.ASCII85">
            <summary>
            Compresses data using the ASCII85 compression method, reproducing
            the original text or binary data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.StreamFilters.DCTDecode">
            <summary>
            Decompresses data encoded using a DCT (discrete cosine transform)
            technique based on the JPEG standard, reproducing image sample
            data that approximates the original data.
            </summary>
        </member>
        <member name="F:Spire.Pdf.StreamFilters.FlateDecode">
            <summary>
            Decompresses data encoded using the zlib / deflate
            compression method, reproducing the original text or binary
            data.
            </summary>
        </member>
        <member name="M:Spire.Pdf.OCProperties.#ctor(Spire.Pdf.PdfDocumentBase)">
            <summary>
             PdfDocumentBase Object
            </summary>
            <param name="doc"></param>
        </member>
        <member name="T:Spire.Pdf.PdfNewDocument">
            <summary>
            Represents a logic to create Pdf document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNewDocument.m_OCProperties">
            <summary>
            Layer OCProperties info
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfNewDocument.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>        
        </member>
        <member name="M:Spire.Pdf.PdfNewDocument.#ctor(Spire.Pdf.PdfConformanceLevel)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="conformance">The conformance level.</param>
            <remarks>Not Supported under Medium Trust environment.</remarks>        
        </member>
        <member name="M:Spire.Pdf.PdfNewDocument.SetConformanceValue(Spire.Pdf.PdfConformanceLevel)">
            <summary>
            set conformance value.
            </summary>
            <param name="conformance">The Conformance level.</param>
        </member>
        <member name="T:Spire.Pdf.PdfNewDocument.ProgressEventHandler">
            <summary>
            Delegate for the  event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="E:Spire.Pdf.PdfNewDocument.SaveProgress">
            <summary>
            Occurs when the document is being saved.
            </summary>
            <remarks>
            This event raised on saving the document. It will keep track of the save progress of the document.
            </remarks> 
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.DocOCProperties">
            <summary>
            Layer OCProperties info
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.Bookmarks">
            <summary>
            Gets the root of the bookmark tree in the document.
            </summary>
            <value>A  object specifying the document's bookmarks. </value>
            <remarks>Creates an bookmark root instance
            if it's called for first time.</remarks>
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.Attachments">
            <summary>
            Gets the attachments of the document.
            </summary>
            <value>The  object contains list of files which are attached in the PDF document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.Form">
            <summary>
            Gets the interactive form of the document.
            </summary>
            <value>The  object contains the list of form elements of the document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.ColorSpace">
            <summary>
            Gets or sets the color space of the document.
            </summary>
            <remarks>This property has impact on the new created pages only.
            If a page was created it remains its colour space obliviously
            to this property changes.</remarks>
            <value>The  of the document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.IsMergedDocument">
            <summary>
            Indicates the document is a merged document or not, defalut value: false.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfNewDocument.Conformance">
            <summary>
            Gets or Sets the Pdf Conformance level.
            Supported : PDF/A-1b - Level B compliance in Part 1
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfNewDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream object where PDF document will be saved.</param>    
        </member>
        <member name="M:Spire.Pdf.PdfNewDocument.Close(System.Boolean)">
            <summary>
            Closes the document.
            </summary>
            <param name="completely">if set to <c>true</c> the document should be disposed completely.</param>
            <remarks>The document is disposed after calling the Close method. So, the document can not be saved if Close method was invoked.</remarks>
        </member>
        <member name="M:Spire.Pdf.PdfNewDocument.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <value>A new object that is a copy of this instance.</value>        
            <remarks>The resulting clone must be of the same type as or a compatible type to the original instance.</remarks>
        </member>
        <member name="T:Spire.Pdf.ProgressEventArgs">
            <summary>
            Shows the saving progress.
            </summary>
        </member>
        <member name="P:Spire.Pdf.ProgressEventArgs.Total">
            <summary>
            Gets the total number of the elements (pages) that need to be saved.
            </summary>     
        </member>
        <member name="P:Spire.Pdf.ProgressEventArgs.Current">
            <summary>
            Gets the current element (page) index that just was saved.
            </summary>
            <remarks>The index value increases constantly from 0 to Total.</remarks>
        </member>
        <member name="P:Spire.Pdf.ProgressEventArgs.Progress">
            <summary>
            Gets the progress.
            </summary>
            <remarks>Progress constantly increases from 0.0 to 1.0.
            1.0 value means that entire document has been saved.</remarks>
        </member>
        <member name="T:Spire.Pdf.PdfDocumentInformation">
            <summary>
            A class containing the information about the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.CreationDate">
            <summary>
            Gets or sets the creation date.
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.ModificationDate">
            <summary>
            Gets or sets the modification date.
            </summary>
            <value>The modification date.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author of the document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
            <value>The keywords.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Creator">
            <summary>
            Gets or sets the creator.
            </summary>
            <value>The creator.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Producer">
            <summary>
            If the document was converted to PDF from another format,
            the name of the application (for example, Acrobat Distiller)
            that converted it to PDF.
            </summary>
            <value>The producer of the document.</value>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentInformation.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.PdfViewerPreferences">
            <summary>
            Defines the way the document is to be presented on the screen or in print.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.CenterWindow">
            <summary>
            A flag specifying whether to position the documents window in the center of the screen.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfViewerPreferences.SetBookMarkExpandOrCollapse(Spire.Pdf.Primitives.PdfDictionary,System.Boolean)">
            <summary>
            Set Expand or Collapse
            </summary>
            <param name="dictionary"></param>
            <param name="open"></param>
        </member>
        <member name="M:Spire.Pdf.PdfViewerPreferences.FineNodeTree(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Primitives.PdfName)">
            <summary>
            Find Node Tree
            </summary>
            <param name="dicNodeTree"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfViewerPreferences.ForeachTree(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Primitives.PdfName,Spire.Pdf.Primitives.PdfName,System.Boolean)">
            <summary>
            iterates Bookmark,Set Expand or Collapse
            </summary>
            <param name="dictionary"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="open"></param>
        </member>
        <member name="M:Spire.Pdf.PdfViewerPreferences.FindFloorNode(Spire.Pdf.Primitives.PdfDictionary,Spire.Pdf.Primitives.PdfName,Spire.Pdf.Primitives.PdfName)">
            <summary>
            Find the click node
            </summary>
            <param name="dictionary"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.BookMarkExpandOrCollapse">
            <summary>
            Set Expand or Collapse
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.DisplayTitle">
            <summary>
            A flag specifying whether the windows title bar should display the document title taken 
            from the Title entry of the document information dictionary. If false, the title bar 
            should instead display the name of the Pdf file containing the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.FitWindow">
            <summary>
            A flag specifying whether to resize the documents window to fit the size of the first 
            displayed page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.HideMenubar">
            <summary>
            A flag specifying whether to hide the viewer applications menu bar when the 
            document is active.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.HideToolbar">
            <summary>
            A flag specifying whether to hide the viewer applications tool bars when the document is active.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.HideWindowUI">
            <summary>
            A flag specifying whether to hide user interface elements in the documents window 
            (such as scroll bars and navigation controls), leaving only the documents contents displayed.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.PageMode">
            <summary>
            A name object specifying how the document should be displayed when opened.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.PageLayout">
            <summary>
            A name object specifying the page layout to be used when the document is opened.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.PrintScaling">
            <summary>
            Gets or Set the page scaling option to be selected 
            when a print dialog is displayed for this document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfViewerPreferences.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="T:Spire.Pdf.PdfCollection">
            <summary>
            Base collection of the pdf objects.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfCollection.Count">
            <summary>
            Gets number of the elements in the collection.
            </summary>
            <value>The total number of elements in the collection.</value>
        </member>
        <member name="P:Spire.Pdf.PdfCollection.List">
            <summary>
            Gets internal list of the collection.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="T:Spire.Pdf.Functions.PdfExponentialInterpolationFunction">
            <summary>
            Implements PDF Exponential Interpolation Function.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Functions.PdfExponentialInterpolationFunction.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="Init">init</param>
        </member>
        <member name="P:Spire.Pdf.Functions.PdfExponentialInterpolationFunction.C0">
            <summary>
            Gets or sets the function result when x = 0.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Functions.PdfExponentialInterpolationFunction.C1">
            <summary>
            Gets or sets the function result when x = 1.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Functions.PdfExponentialInterpolationFunction.Exponent">
            <summary>
            Gets or sets the Exponent.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Functions.PdfFunction">
            <summary>
            Implements the base class for all functions.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Functions.PdfFunction.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Pdf.PdfResources.Item(System.String,Spire.Pdf.PdfResourceType)">
            <summary>
            Get a resource.
            </summary>
            <param name="resourceName">The resource name.</param>
            <param name="resourceType">The resource type.</param>
            <returns>A resource.return null if not exist.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfResources.GetResource(System.String,Spire.Pdf.PdfResourceType)">
            <summary>
            Get the resource.
            </summary>
            <param name="resourceName">The resource name.</param>
            <param name="resourceType">The resource type.</param>
            <returns>The resource.Return null,if not contain a resource with the name.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfResources.AddResource(Spire.Pdf.Interfaces.IPdfPrimitive,Spire.Pdf.PdfResourceType)">
            <summary>
            Add a resource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="resourceType">The resource type.</param>
        </member>
        <member name="M:Spire.Pdf.PdfResources.RemoveResource(System.String,Spire.Pdf.PdfResourceType)">
            <summary>
            Remove a resource.
            </summary>
            <param name="resourceName">The resource name.</param>
            <param name="resourceType">The resource type.</param>
        </member>
        <member name="M:Spire.Pdf.PdfResources.ContainResource(Spire.Pdf.Interfaces.IPdfPrimitive,Spire.Pdf.PdfResourceType)">
            <summary>
            Whether to contain the resource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="resourceType">The resource type.</param>
            <returns>True,if contain the resource;False,otherwise.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfResources.GetResources(Spire.Pdf.PdfResourceType)">
            <summary>
            Get the resources.
            </summary>
            <param name="resourceType">The resource type.</param>
            <returns>The resources dictionary of the resource type.</returns>
        </member>
        <member name="T:Spire.Pdf.PdfPageOrientation">
            <summary>
            Enumerator that implements page orientations.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageOrientation.Portrait">
            <summary>
            Portrait orientation.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageOrientation.Landscape">
            <summary>
            Landscape orientation.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageRotateAngle">
            <summary>
            The number of degrees by which the page should be rotated clockwise when displayed or printed.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageRotateAngle.RotateAngle0">
            <summary>
            The page is rotated as 0 angle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageRotateAngle.RotateAngle90">
            <summary>
            The page is rotated as 90 angle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageRotateAngle.RotateAngle180">
            <summary>
            The page is rotated as 180 angle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageRotateAngle.RotateAngle270">
            <summary>
            The page is rotated as 270 angle.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfNumberStyle">
            <summary>
            Specifies numbering style of page labels.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNumberStyle.None">
            <summary>
            No numbering at all.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNumberStyle.Numeric">
            <summary>
            Decimal arabic numerals.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNumberStyle.LowerLatin">
            <summary>
            Lowercase letters a-z.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNumberStyle.LowerRoman">
            <summary>
            Lowercase roman numerals.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNumberStyle.UpperLatin">
            <summary>
            Uppercase letters A-Z.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfNumberStyle.UpperRoman">
            <summary>
            Uppercase roman numerals.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfDockStyle">
            <summary>
            Specifies the docking style of the page template.
            </summary>
            <remarks>This enumeration is used in  class.</remarks>
        </member>
        <member name="F:Spire.Pdf.PdfDockStyle.None">
            <summary>
            The page template is not docked.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDockStyle.Bottom">
            <summary>
            The page template edge is docked to the bottom page's side.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDockStyle.Top">
            <summary>
            The page template edge is docked to the top page's side.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDockStyle.Left">
            <summary>
            The page template edge is docked to the left page's side.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDockStyle.Right">
            <summary>
            The page template edge is docked to the right page's side.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfDockStyle.Fill">
            <summary>
            The page template stretch on full page.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfAlignmentStyle">
            <summary>
            Specifies how the page template is aligned relative to the template area.    
            </summary>
            <remarks>This enumeration is used in  class.</remarks>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.None">
            <summary>
            Specifies no alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.TopLeft">
            <summary>
            The template is top left aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.TopCenter">
            <summary>
            The template is top center aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.TopRight">
            <summary>
            The template is top right aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.MiddleLeft">
            <summary>
            The template is middle left aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.MiddleCenter">
            <summary>
            The template is middle center aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.MiddleRight">
            <summary>
            The template is middle right aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.BottomLeft">
            <summary>
            The template is bottom left aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.BottomCenter">
            <summary>
            The template is bottom center aligned.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfAlignmentStyle.BottomRight">
            <summary>
             The template is bottom right aligned.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageLayout">
            <summary>
            A name object specifying the page layout to be used when the
            document is opened.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageLayout.SinglePage">
            <summary>
            Default Value. Display one page at a time.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageLayout.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageLayout.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with odd numbered
            pages on the left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageLayout.TwoColumnRight">
            <summary>
            Display the pages in two columns, with odd numbered
            pages on the right.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageLayout.TwoPageLeft">
            <summary>
            Display the pages two at a time, with odd-numbered pages on the left
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageLayout.TwoPageRight">
            <summary>
            Display the pages two at a time, with odd-numbered pages on the right
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageMode">
            <summary>
            Represents mode of document displaying.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageMode.UseNone">
            <summary>
            Default value. Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageMode.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window
            controls, or any other window visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageMode.UseOC">
            <summary>
            Optional content group panel visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageMode.UseAttachments">
            <summary>
            Attachments are visible.
            </summary>
        </member>
        <member name="F:Spire.Pdf.TemplateType.None">
            <summary>
            Page template is not used as header.
            </summary>
        </member>
        <member name="F:Spire.Pdf.TemplateType.Top">
            <summary>
            Page template is used as Top.
            </summary>
        </member>
        <member name="F:Spire.Pdf.TemplateType.Bottom">
            <summary>
            Page template is used as Bottom.
            </summary>
        </member>
        <member name="F:Spire.Pdf.TemplateType.Left">
            <summary>
            Page template is used as Left.
            </summary>
        </member>
        <member name="F:Spire.Pdf.TemplateType.Right">
            <summary>
            Page template is used as Right.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfTransitionStyle">
            <summary>
            Enumeration of possible transition styles when moving to the page from another 
            during a presentation
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Split">
            <summary>
            Two lines sweep across the screen, revealing the new page. The lines may be either 
            horizontal or vertical and may move inward from the edges of the page or outward 
            from the center.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Blinds">
            <summary>
            Multiple lines, evenly spaced across the screen, synchronously sweep in the same 
            direction to reveal the new page. The lines may be either horizontal or vertical.
            Horizontal lines move downward; vertical lines move to the right.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Box">
            <summary>
            A rectangular box sweeps inward from the edges of the page or outward from the center,
            revealing the new page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Wipe">
            <summary>
            A single line sweeps across the screen from one edge to the other, revealing the new page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Dissolve">
            <summary>
            The old page dissolves gradually to reveal the new one.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Glitter">
            <summary>
            Similar to Dissolve, except that the effect sweeps across the page in a wide band moving from 
            one side of the screen to the other.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Replace">
            <summary>
            The new page simply replaces the old one with no special transition effect.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Fly">
            <summary>
            Changes are flown out or in, to or from a location that is offscreen.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Push">
            <summary>
            The old page slides off the screen while the new page slides in, pushing the old page out.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Cover">
            <summary>
            The new page slides on to the screen, covering the old page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Uncover">
            <summary>
            The old page slides off the screen, uncovering the new page.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionStyle.Fade">
            <summary>
            The new page gradually becomes visible through the old one.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfTransitionDimension">
            <summary>
            Enumeration of transition dimensions.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDimension.Horizontal">
            <summary>
            Horizontal effect.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDimension.Vertical">
            <summary>
            Vertical effect.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfTransitionMotion">
            <summary>
            Enumeration of transition motions.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionMotion.Inward">
            <summary>
            Inward motion from the edges of the page to center..
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionMotion.Outward">
            <summary>
            Outward motion from the center of the page to edges.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfTransitionDirection">
            <summary>
            Enumeration of transition directions.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDirection.LeftToRight">
            <summary>
            Left to Right direction.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDirection.BottomToTop">
            <summary>
            Bottom to Top direction.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDirection.RightToLeft">
            <summary>
            Right to Left direction.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDirection.TopToBottom">
            <summary>
            Top to Bottom direction.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfTransitionDirection.TopLeftToBottomRight">
            <summary>
            TopLeft to BottomRight direction.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPrintPageScaling">
            <summary>
            Pdf Print Page Scale type
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPrintPageScaling.FitSize">
            <summary>
            Adaptive content size
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPrintPageScaling.ActualSize">
            <summary>
            The actual size of the content
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPrintPageScaling.ShrinkOversized">
            <summary>
            Shrink oversized pages
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPrintPageScaling.CustomSacle">
            <summary>
            Custom Scale
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPrintPageMode">
            <summary>
            Pdf Print Page Mode
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPrintPageMode.NormalMode">
            <summary>
            Normal Print
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPrintPageMode.MultiPageMode">
            <summary>
            Multi-Page Print
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageSize">
            <summary>
            Represents information about page size.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.Letter">
            <summary>
            Letter format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.Note">
            <summary>
            Note format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.Legal">
            <summary>
            Legal format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A0">
            <summary>
            A0 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A1">
            <summary>
            A1 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A2">
            <summary>
            A2 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A3">
            <summary>
            A3 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A4">
            <summary>
            A4 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A5">
            <summary>
            A5 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A6">
            <summary>
            A6 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A7">
            <summary>
            A7 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A8">
            <summary>
            A8 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A9">
            <summary>
            A9 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.A10">
            <summary>
            A10 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.B0">
            <summary>
            B0 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.B1">
            <summary>
            B1 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.B2">
            <summary>
            B2 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.B3">
            <summary>
            B3 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.B4">
            <summary>
            B4 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.B5">
            <summary>
            B5 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.ArchE">
            <summary>
            ArchE format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.ArchD">
            <summary>
            ArchD format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.ArchC">
            <summary>
            ArchC format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.ArchB">
            <summary>
            ArchB format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.ArchA">
            <summary>
            ArchA format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.Flsa">
            <summary>
            The American Foolscap format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.HalfLetter">
            <summary>
            HalfLetter format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.Letter11x17">
            <summary>
            11x17 format.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfPageSize.Ledger">
            <summary>
            Ledger format.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageWidget">
            <summary>
            Represents a page loaded from a document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageWidget.Size">
            <summary>
            Gets the size of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageWidget.ActualSize">
            <summary>
            Get the visible region of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageWidget.Document">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageWidget.RemoveFromDictionaries(Spire.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Raises before the page saves.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageWidget.FontName(System.String,System.Single@)">
            <summary>
            Gets the text size of a specified font.
            </summary>
            <param name="key">Font key</param>
            <returns>Returns the text size of the specified font</returns>
        </member>
        <member name="T:Spire.Pdf.PdfNewPage">
            <summary>
            Represents a single PDF page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfNewPage.Size">
            <summary>
            Gets the size of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfNewPage.Annotations">
            <summary>
            Gets a collection of the annotations of the page.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfNewPage.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfDocumentPageCollection">
            <summary>
            Implements a virtual collection of all pages in the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentPageCollection.Count">
            <summary>
            Gets the total number of the pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfDocumentPageCollection.Item(System.Int32)">
            <summary>
            Gets a page by its index in the document.
            </summary>
        </member>
        <member name="E:Spire.Pdf.PdfDocumentPageCollection.PageAdded">
            <summary>
            Represents the  method that executes on a PdfNewDocument when a new page is created.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentPageCollection.Add">
            <summary>
            Creates a page and adds it to the last section in the document.
            </summary>
            <returns>Created page object.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentPageCollection.Insert(System.Int32,Spire.Pdf.PdfNewPage)">
            <summary>
            Inserts a page at the specified index to the last section in the document.
            </summary>
            <param name="index">The index of the page in the section.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentPageCollection.IndexOf(Spire.Pdf.PdfNewPage)">
            <summary>
            Gets the index of the page in the document.
            </summary>
            <param name="page">The current page.</param>
            <returns>Index of the page in the document if exists, -1 otherwise.</returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.PdfDocumentPageCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Spire.Pdf.PdfDocumentPageCollection.PdfPageEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="T:Spire.Pdf.PdfPageLayer">
            <summary>
            Describes layer of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageLayer.Page">
            <summary>
            Gets parent page of the layer.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageLayer.Graphics">
            <summary>
            Gets Graphics context of the layer.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayer.#ctor(Spire.Pdf.PdfPageBase)">
            <summary>
            Creates new layer.
            </summary>
            <param name="page">Parent page of the layer.</param>
        </member>
        <member name="P:Spire.Pdf.PdfPageLayer.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageLayerCollection">
            <summary>
            Collection of the pages layers.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageLayerCollection.Item(System.Int32)">
            <summary>
            Gets or sets element by its index.
            </summary>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.#ctor(Spire.Pdf.PdfPageBase)">
            <summary>
            Creates new collection.
            </summary>
            <param name="page">Parent page for the layers in the collection.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Add">
            <summary>
            Creates a new layer and adds it to the end of the collection.
            </summary>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Add(System.String,System.Boolean)">
            <summary>
            Creates a new layer and adds it to the end of the collection.
            </summary>
            <param name="name">Layer Name.</param>
            <param name="isVisible">Layer Visibility.</param>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Add(System.String)">
            <summary>
            Creates a new layer and adds it to the collection.
            </summary>
            <param name="LayerName">Layer Name.</param>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new layer and adds it to the end of the collection.
            </summary>
            <param name="name">Layer Name.</param>
            <param name="layerId">Layer Id.</param>
            <param name="isVisible">Layer Visibility.</param>
            <returns>Created layer.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.DeleteOldLayer(System.String)">
             <summary>
            You can only delete the layer that exists in the source document
             </summary>
             <param name="layerName">Layer Name.</param>
             <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.DeleteOldLayer(System.String,System.Boolean,System.Boolean)">
            <summary>
            You can only delete the layer that exists in the source document
            </summary>
            <param name="layerName">Layer Name.</param>
            <param name="isDelAllContent">Is delete all content include in this layer.</param>
            <param name="delLayerDocProperties">Is remove layerdefine in doc properties..</param>
            <returns>delete layer message.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Add(Spire.Pdf.PdfPageLayer)">
            <summary>
            Adds layer to the collection.
            </summary>
            <param name="layer">Layer object.</param>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Insert(System.Int32,Spire.Pdf.PdfPageLayer)">
            <summary>
            Inserts layer into collection.
            </summary>
            <param name="index">Index of the layer.</param>
            <param name="layer">Layer object.</param>
            <remarks>The layers belonging to the same page can be added to the collection only.</remarks>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Remove(Spire.Pdf.PdfPageLayer)">
            <summary>
            Removes layer from the collection. Only the currently created layer can be deleted
            </summary>
            <param name="layer">Layer object.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.RemoveAt(System.Int32)">
            <summary>
            Removes layer by its index. Only the currently created layer can be deleted
            </summary>
            <param name="index">Index of the layer.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Contains(Spire.Pdf.PdfPageLayer)">
            <summary>
            Checks whether collection contains layer.
            </summary>
            <param name="layer">Layer object.</param>
            <returns>True - if collection contains layer, False otherwise.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.IndexOf(Spire.Pdf.PdfPageLayer)">
            <summary>
            Returns index of the layer in the collection if exists, -1 otherwise.
            </summary>
            <param name="layer">Layer object.</param>
            <returns>Returns index of the layer in the collection if exists, -1 otherwise.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfPageLayerCollection.Clear">
            <summary>
            Cleares the collection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageSettings">
            <summary>
            Represent class with setting of page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Orientation">
            <summary>
            Gets or sets the page orientation.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Size">
            <summary>
            Gets or sets the size of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Width">
            <summary>
            Gets or sets the width of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Height">
            <summary>
            Gets or sets the height of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Margins">
            <summary>
            Gets or sets the margins of the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Rotate">
            <summary>
            Gets or sets the number of degrees by which the page should be rotated clockwise when displayed or printed.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageSettings.Transition">
            <summary>
            Gets or sets the transition.
            </summary>
            <value>The transition.</value>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(Spire.Pdf.PdfPageOrientation)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="pageOrientation">The page orientation.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,Spire.Pdf.PdfPageOrientation)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="leftMargin">The left margin.</param>
            <param name="topMargin">The top margin.</param>
            <param name="rightMargin">The right margin.</param>
            <param name="bottomMargin">The bottom margin.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
            <param name="leftMargin">The left margin.</param>
            <param name="topMargin">The top margin.</param>
            <param name="rightMargin">The right margin.</param>
            <param name="bottomMargin">The bottom margin.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,Spire.Pdf.PdfPageOrientation,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.#ctor(System.Drawing.SizeF,Spire.Pdf.PdfPageOrientation,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="size">The size.</param>
            <param name="pageOrientation">The page orientation.</param>
            <param name="leftMargin">The left margin.</param>
            <param name="topMargin">The top margin.</param>
            <param name="rightMargin">The right margin.</param>
            <param name="bottomMargin">The bottom margin.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.SetMargins(System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="margins">The margins.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.SetMargins(System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="leftRight">The left right.</param>
            <param name="topBottom">The top bottom.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageSettings.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="T:Spire.Pdf.PdfPaperSourceTray">
            <summary>
            Specifies the paper tray when the document is printed.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPaperSourceTray.StartPage">
            <summary>
            Gets or sets the page number (non zero-based) of the first page to print.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPaperSourceTray.EndPage">
            <summary>
            Gets or sets the page number (non zero-based) of the last page to print.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPaperSourceTray.PrintPaperSource">
            <summary>
            Specifies the paper tray from which the printer gets paper.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfPageTemplateElement">
            <summary>
            Describes a page template object that can be used as header/footer, watermark or stamp.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Dock">
            <summary>
            Gets or sets the dock style of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Alignment">
            <summary>
            Gets or sets alignment of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Foreground">
            <summary>
            Indicates whether the page template is located in front of 
            the page layers or behind of it.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Background">
            <summary>
            Indicates whether the page template is located behind of 
            the page layers or in front of it.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Location">
            <summary>
            Gets or sets location of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.X">
            <summary>
            Gets or sets X co-ordinate of the template element on the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Y">
            <summary>
            Gets or sets Y co-ordinate of the template element on the page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Size">
            <summary>
            Gets or sets size of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Width">
            <summary>
            Gets or sets width of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Height">
            <summary>
            Gets or sets height of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Bounds">
            <summary>
            Gets or sets bounds of the page template element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfPageTemplateElement.Graphics">
            <summary>
            Gets graphics context of the page template element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="bounds">Bounds of the template.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.RectangleF,Spire.Pdf.PdfNewPage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="location">Location of the template.</param>
            <param name="size">Size of the template.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF,Spire.Pdf.PdfNewPage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates new page template object.
            </summary>
            <param name="size">Size of the template.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single,Spire.Pdf.PdfNewPage)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
            <param name="page">The Current Page object.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="x">X co-ordinate of the template.</param>
            <param name="y">Y co-ordinate of the template.</param>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
        </member>
        <member name="M:Spire.Pdf.PdfPageTemplateElement.#ctor(System.Single,System.Single,System.Single,System.Single,Spire.Pdf.PdfNewPage)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="x">X co-ordinate of the template.</param>
            <param name="y">Y co-ordinate of the template.</param>
            <param name="width">Width of the template.</param>
            <param name="height">Height of the template.</param>
            <param name="page">The Current Page object.</param>
        </member>
        <member name="T:Spire.Pdf.PdfSection">
            <summary>
            Represents a section entity. A section it's a set of the pages with similar page settings.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSection.Pages">
            <summary>
            Gets the pages.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSection.PageNumber">
            <summary>
            Gets or sets the page label.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSection.PageSettings">
            <summary>
            Gets or sets page settings of the section.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSection.Template">
            <summary>
            Gets or sets a template for the pages in the section.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSection.Document">
            <summary>
            Gets the owner document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="E:Spire.Pdf.PdfSection.PageAdded">
            <summary>
            Event rises when the new page has been added
            </summary>
        </member>
        <!-- 对于成员“M:Spire.Pdf.PdfSection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.PdfSection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfSection.ResizePageCanvas(Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat,System.Drawing.SizeF)">
            <summary>
            Resize the canvas of page according to html view size.
            </summary>
            <param name="layoutFormat"></param>
            <param name="htmlViewSize"></param>
            <returns>Return the new size of canvas.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfSection.SetLayoutFormat(Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat,System.Boolean)">
            <summary>
            set PdfHtmlLayoutFormat
            </summary>
            <param name="layoutFormat">PdfHtmlLayoutFormat layoutFormat</param>
            <param name="autoDetectPageBreak">bool autoDetectPageBreak</param>
        </member>
        <member name="M:Spire.Pdf.PdfSection.LoadFromHTML(System.String,System.Boolean,System.Boolean,Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat)">
            <summary>
            Draws HTML to PDF
            </summary>
            <param name="url">Url address</param>
            <param name="enableJavaScript">Enable javascrpit</param>
            <param name="enableHyperlinks">Enable hyperlink</param>
            <param name="layoutFormat">Layouts html view format</param>
        </member>
        <member name="M:Spire.Pdf.PdfSection.LoadFromHTML(System.String,System.Boolean,System.Boolean,System.Boolean,Spire.Pdf.HtmlConverter.PdfHtmlLayoutFormat)">
            <summary>
             Draws HTML to PDF
            </summary>
            <param name="URLOrSourceCode">url address or socuce code</param>
            <param name="enableJavaScript">Enable javascrpit</param>
            <param name="enableHyperlinks">Enable hyperlink</param>
            <param name="autoDetectPageBreak">Enable autoDetectPageBreak</param>
            <param name="layoutFormat">Layouts html view format</param>
        </member>
        <member name="M:Spire.Pdf.PdfSection.SplitImage(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Split by page height image
            </summary>
            <param name="bitmap"></param>
            <param name="signleImageHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.PdfSection.Scan0Bitmap(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Scan image data 
            </summary>
            <param name="buffer"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="offset"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Pdf.PdfSection.PdfPageEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfSection.PdfPageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Spire.Pdf.PdfSection.PdfPageEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="T:Spire.Pdf.PdfSectionCollection">
            <summary>
            The collection of the sections.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Pdf.PdfSectionCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spire.Pdf.PdfSectionCollection.Add(Spire.Pdf.PdfPageSettings)">
            <summary>
            Creates a section and adds it to the collection.
            </summary>
            <returns>Created section object.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfSectionCollection.IndexOf(Spire.Pdf.PdfSection)">
            <summary>
            Determines the index of the section.
            </summary>
            <param name="section">The section.</param>
            <returns>The index of the section.</returns>
        </member>
        <member name="M:Spire.Pdf.PdfSectionCollection.Insert(System.Int32,Spire.Pdf.PdfSection)">
            <summary>
            Inserts the section at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="section">The section.</param>
        </member>
        <member name="M:Spire.Pdf.PdfSectionCollection.Contains(Spire.Pdf.PdfSection)">
            <summary>
            Checks whether the collection contains the section.
            </summary>
            <param name="section">The section object.</param>
            <returns>True - if the sections belongs to the collection, False otherwise.</returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.PdfSectionCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.PdfSectionCollection.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the wrapped element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfSectionCollection.PdfSectionEnumerator.Current">
            <summary>
            Gets the current section.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfSectionCollection.PdfSectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Spire.Pdf.PdfSectionCollection.PdfSectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.Headers">
            <summary>
            Gets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.DataMember">
            <summary>
            Gets or sets the data member.
            </summary>
            <value>The data member.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.RepeatHeader">
            <summary>
            Gets or sets a value indicating whether [repeat header].
            </summary>
            <value><c>true</c> if [repeat header]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGrid.AllowCrossPages">
            <summary>
            Gets or sets whether to cross a page.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Drawing.PointF,System.Single)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="location">The location.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Drawing.RectangleF)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Drawing.PointF)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Drawing.PointF,Spire.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Drawing.RectangleF)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Drawing.RectangleF,Spire.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single,Spire.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGrid.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single,System.Single,Spire.Pdf.Grid.PdfGridLayoutFormat)">
            <summary>
            Draws the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.RowSpan">
            <summary>
            Gets or sets the row span.
            </summary>
            <value>The row span.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.ColumnSpan">
            <summary>
            Gets or sets the column span.
            </summary>
            <value>The column span.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.Style">
            <summary>
            Gets or sets the cell style.
            </summary>
            <value>The cell style.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCell.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridCell.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridCell.#ctor(Spire.Pdf.Grid.PdfGridRow)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCellCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCellCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridCellCollection.IndexOf(Spire.Pdf.Grid.PdfGridCell)">
            <summary>
            Returns the index of a particular cell in the collection.
            </summary>
            <param name="cell">The cell.</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Spire.Pdf.Grid.PdfGridCellCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridCellCollection.PdfGridCellEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridColumn.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridColumn.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridColumn.Grid">
            <summary>
            Gets the grid.
            </summary>
            <value>The grid.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumn.#ctor(Spire.Pdf.Grid.PdfGrid)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridColumnCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridColumnCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.Add">
            <summary>
            Adds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.Add(System.Int32)">
            <summary>
            Adds the specified count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.Add(Spire.Pdf.Grid.PdfGridColumn)">
            <summary>
            Adds the specified column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.Remove(Spire.Pdf.Grid.PdfGridColumn)">
            <summary>
            Removes the first occurrence of a specific object from the PdfGridColumnCollection.
            </summary>
            <param name="item">The object to remove from the PdfGridColumnCollection.
            </param>
            <returns>true if item is successfully removed; otherwise, false</returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the PdfGridColumnCollection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <!-- 对于成员“M:Spire.Pdf.Grid.PdfGridColumnCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridColumnCollection.PdfGridColumnEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridRow.Cells">
            <summary>
            Gets the cells.
            </summary>
            <value>The cells.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridRow.Style">
            <summary>
            Gets or sets the row style.
            </summary>
            <value>The row style.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridRow.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridRow.#ctor(Spire.Pdf.Grid.PdfGrid)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="parentGrid">The parent grid.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridRow.ApplyStyle(Spire.Pdf.Grid.PdfGridCellStyle)">
            <summary>
            Applies the cell style to all the cells present in a row.
            </summary>
            <param name="cellStyle">The cell style.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridRowCollection.Add">
            <summary>
            Adds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridRowCollection.SetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the span.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="cellIndex">Index of the cell.</param>
            <param name="rowSpan">The row span.</param>
            <param name="colSpan">The col span.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridRowCollection.ApplyStyle(Spire.Pdf.Grid.PdfGridStyleBase)">
            <summary>
            Applies the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridHeaderCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridHeaderCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridHeaderCollection.Add(System.Int32)">
            <summary>
            Adds the specified count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridHeaderCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridHeaderCollection.ApplyStyle(Spire.Pdf.Grid.PdfGridStyleBase)">
            <summary>
            Applies the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <!-- 对于成员“M:Spire.Pdf.Grid.PdfGridHeaderCollection.GetEnumerator”忽略有格式错误的 XML 注释 -->
        <member name="P:Spire.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridHeaderCollection.PdfGridHeaderRowEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridStyleBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyleBase.BackgroundBrush">
            <summary>
            Gets or sets the background brush.
            </summary>
            <value>The background brush.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyleBase.TextBrush">
            <summary>
            Gets or sets the text brush.
            </summary>
            <value>The text brush.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyleBase.TextPen">
            <summary>
            Gets or sets the text pen.
            </summary>
            <value>The text pen.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyleBase.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridStyleBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyle.CellSpacing">
            <summary>
            Gets or sets the cell spacing.
            </summary>
            <value>The cell spacing.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyle.CellPadding">
            <summary>
            Gets or sets the cell padding.
            </summary>
            <value>The cell padding.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyle.BorderOverlapStyle">
            <summary>
            Gets or sets the border overlap style.
            </summary>
            <value>The border overlap style.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyle.AllowHorizontalOverflow">
            <summary>
            Gets or sets a value indicating whether to allow horizontal overflow.
            </summary>
            <value>
            	<c>true</c> if [allow horizontal overflow]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridStyle.HorizontalOverflowType">
            <summary>
            Gets or sets the type of the horizontal overflow.
            </summary>
            <value>The type of the horizontal overflow.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridStyle.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridRowStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridRowStyle.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridCellStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCellStyle.StringFormat">
            <summary>
            Gets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCellStyle.Borders">
            <summary>
            Gets or sets the border.
            </summary>
            <value>The border.</value>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridCellStyle.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
            <value>The background image.</value>
        </member>
        <member name="M:Spire.Pdf.Grid.PdfGridCellStyle.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridCellContent">
            <summary>
            Represents the content that can be written in a grid cell.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridCellContentList">
            <summary>
            It is a collection of PdfGridCellContent classes
            </summary>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfHorizontalOverflowType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Grid.PdfHorizontalOverflowType.NextPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Pdf.Grid.PdfHorizontalOverflowType.LastPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridBeginPageLayoutEventArgs">
            <summary>
            Arguments of BeginPageLayoutEvent.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Grid.PdfGridBeginPageLayoutEventArgs.StartRowIndex">
            <summary>
            Gets the start row.
            </summary>
            <value>The start row.</value>
        </member>
        <member name="T:Spire.Pdf.Grid.PdfGridEndPageLayoutEventArgs">
            <summary>
            Arguments of EndPageLayoutEvent.
            </summary>
        </member>
        <member name="P:Spire.Pdf.PdfBorders.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Spire.Pdf.PdfBorders.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Spire.Pdf.PdfBorders.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Spire.Pdf.PdfBorders.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Spire.Pdf.PdfBorders.All">
            <summary>
            Sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="P:Spire.Pdf.PdfBorders.Default">
            <summary>
            Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:Spire.Pdf.PdfEdges.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Spire.Pdf.PdfEdges.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Spire.Pdf.PdfEdges.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Spire.Pdf.PdfEdges.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Spire.Pdf.PdfEdges.All">
            <summary>
            Sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="M:Spire.Pdf.PdfEdges.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfEdges.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="P:Spire.Pdf.PdfPaddings.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPaddings.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPaddings.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPaddings.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Spire.Pdf.PdfPaddings.All">
            <summary>
            Sets all.
            </summary>
            <value>All.</value>
        </member>
        <member name="M:Spire.Pdf.PdfPaddings.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.PdfPaddings.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfMarkerBase">
            <summary>
            Represents base class for markers.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarkerBase.Font">
            <summary>
            Gets or sets marker font.
            </summary>		
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarkerBase.Brush">
            <summary>
            Gets or sets marker brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarkerBase.Pen">
            <summary>
            Gets or sets marker pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarkerBase.StringFormat">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarkerBase.Alignment">
            <summary>
            Gets or sets a value indicating whether the marker is
            situated at the left of the list or at the right of the list.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfOrderedMarker">
            <summary>
            Represents marker for ordered list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfOrderedMarker.Style">
            <summary>
            Gets or sets the list numbering style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfOrderedMarker.StartNumber">
            <summary>
            Gets ar sets start number for ordered list. Default value is 1.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfOrderedMarker.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfOrderedMarker.Suffix">
            <summary>
            Gets or sets the suffix of the marker.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfOrderedMarker.#ctor(Spire.Pdf.PdfNumberStyle,System.String,System.String,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">Number style of marker.</param>
            <param name="delimiter">Number delimiter of marker.</param>
            <param name="suffix">Number suffix of marker.</param>
            <param name="font">Number font of marker.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfOrderedMarker.#ctor(Spire.Pdf.PdfNumberStyle,System.String,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">Number style of marker.</param>
            <param name="suffix">Number suffix of the marker.</param>
            <param name="font">Number font of marker.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfOrderedMarker.#ctor(Spire.Pdf.PdfNumberStyle,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">Number style of marker.</param>
            <param name="font">Number font of marker.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfMarker">
            <summary>
            Represents bullet for the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarker.Template">
            <summary>
            Gets or sets template of the marker.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarker.Image">
            <summary>
            Gets or sets image of the marker.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarker.Text">
            <summary>
            Gets or sets marker text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfMarker.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfMarker.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text of the marker.</param>
            <param name="font">Marker font.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfMarker.#ctor(Spire.Pdf.Lists.PdfUnorderedMarkerStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">The style of the marker.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfMarker.#ctor(Spire.Pdf.Graphics.PdfImage)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="image">The image of the marker.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfMarker.#ctor(Spire.Pdf.Graphics.PdfTemplate)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="template">Template of the marker.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfUnorderedMarkerStyle">
            <summary>
            Specifies the marker style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.None">
            <summary>
            Marker have  no style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.Disk">
            <summary>
            Marker is like a disk.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.Square">
            <summary>
            Marker is like a square.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.Asterisk">
            <summary>
            Marker is like a Asterisk.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.Circle">
            <summary>
            Marker is like a circle.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.CustomString">
            <summary>
            Marker is custom string.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.CustomImage">
            <summary>
            Marker is custom image.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfUnorderedMarkerStyle.CustomTemplate">
            <summary>
            Marker is custom template.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfListMarkerAlignment">
            <summary>
            Represents marker alignment.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfListMarkerAlignment.Left">
            <summary>
            Left alignment for marker.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Lists.PdfListMarkerAlignment.Right">
            <summary>
            Right alignment for marker.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfListBase">
            <summary>
            Represents base class for lists.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.Items">
            <summary>
            Gets items of the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.Indent">
            <summary>
            Gets or sets tabulation for the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.TextIndent">
            <summary>
            Gets or sets the indent from the marker to the list item text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.Font">
            <summary>
            Gets or sets the list font.
            </summary>		
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.Brush">
            <summary>
            Gets or sets list brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.Pen">
            <summary>
            Gets or sets list pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListBase.StringFormat">
            <summary>
            Gets or sets the format of the list.
            </summary>
            <value>The format.</value>
        </member>
        <member name="E:Spire.Pdf.Lists.PdfListBase.BeginItemLayout">
            <summary>
            Event that rises when item begin layout.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Lists.PdfListBase.EndItemLayout">
            <summary>
            Event that rises when item end layout.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListBase.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Single,System.Single)">
            <summary>
            Draws an list on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the list should be printed.</param>
            <param name="x">X co-ordinate of the list.</param>
            <param name="y">Y co-ordinate of the list.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfListItem">
            <summary>
            Represents the list item of the list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.Font">
            <summary>
            Gets or sets item font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.Text">
            <summary>
            Gets or sets item text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.StringFormat">
            <summary>
            Gets or sets item string format.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.Pen">
            <summary>
            Gets or sets list item pen.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.Brush">
            <summary>
            Gets or sets list item brush.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.SubList">
            <summary>
            Gets or sets sublist for item. 
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItem.TextIndent">
            <summary>
            Gets or sets indent for item.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItem.#ctor">
            <summary>
            Creates new empty pdf list item.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItem.#ctor(System.String)">
            <summary>
            Creates new pdf list item with default settings.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItem.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text of item.</param>
            <param name="font">The font of item.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItem.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfStringFormat)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The text of item.</param>
            <param name="font">The font of item.</param>
            <param name="format">The string format.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItem.#ctor(System.String,Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfStringFormat,Spire.Pdf.Graphics.PdfPen,Spire.Pdf.Graphics.PdfBrush)">
            <summary>
            Creates new list item.
            </summary>
            <param name="text">The item text.</param>
            <param name="font">The item font.</param>
            <param name="format">The string format of item.</param>
            <param name="pen">The item pen.</param>
            <param name="brush">The item brush.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfListItemCollection">
            <summary>
            Represents collection of list items.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfListItemCollection.Item(System.Int32)">
            <summary>
            Gets the PdfListItem from collection at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="items">A string array that contains items separated by the new line character.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Add(Spire.Pdf.Lists.PdfListItem)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The item index in collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Add(Spire.Pdf.Lists.PdfListItem,System.Single)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="itemIndent">The item indent.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Add(System.String)">
            <summary>
            Adds the item with a specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Add(System.String,System.Single)">
            <summary>
            Adds the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="itemIndent">The item indent.</param>
            <returns>List item.</returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Add(System.String,Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Adds the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <returns>The item index in collection.</returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Add(System.String,Spire.Pdf.Graphics.PdfFontBase,System.Single)">
            <summary>
            Adds the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="itemIndent">The item indent.</param>
            <returns>List item.</returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Insert(System.Int32,Spire.Pdf.Lists.PdfListItem)">
            <summary>
            Inserts item at the specified index.
            </summary>
            <param name="index">The specified index.</param>
            <param name="item">The item.</param>
            <returns>The item index </returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Insert(System.Int32,Spire.Pdf.Lists.PdfListItem,System.Single)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <param name="itemIndent">The item indent.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Remove(Spire.Pdf.Lists.PdfListItem)">
            <summary>
            Removes the specified item from the list.
            </summary>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">he specified index.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.IndexOf(Spire.Pdf.Lists.PdfListItem)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The item to locate in the list. </param>
            <returns>The index of item if found in the list; otherwise, -1. </returns>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfListItemCollection.Clear">
            <summary>
            Clears collection.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfSortedList">
            <summary>
            Represents the ordered list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfSortedList.Marker">
            <summary>
            Gets or sets marker of the list items.
            </summary>       
        </member>
        <member name="P:Spire.Pdf.Lists.PdfSortedList.MarkerHierarchy">
            <summary>
            True if user want to use numbering hierarchy, otherwise false.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor">
            <summary>
            Creates ordered list.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(Spire.Pdf.PdfNumberStyle)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(Spire.Pdf.Lists.PdfListItemCollection)">
            <summary>
            Creates ordered list using items.
            </summary>
            <param name="items">Items for a list.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(Spire.Pdf.Lists.PdfOrderedMarker)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(Spire.Pdf.Lists.PdfListItemCollection,Spire.Pdf.Lists.PdfOrderedMarker)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="items">The item collection.</param>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The formatted text.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfSortedList.#ctor(System.String,Spire.Pdf.Lists.PdfOrderedMarker)">
            <summary>
            Initializes a new instance of the  class
            from formatted text that is splitted by new lines.
            </summary>
            <param name="text">The formatted text.</param>
            <param name="marker">The marker.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.PdfList">
            <summary>
            Represents unordered list.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.PdfList.Marker">
            <summary>
            Gets or sets the marker.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor(Spire.Pdf.Lists.PdfListItemCollection)">
            <summary>
            Creates unordered list using items.
            </summary>
            <param name="items">Items for a list.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor(Spire.Pdf.Lists.PdfMarker)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor(Spire.Pdf.Lists.PdfListItemCollection,Spire.Pdf.Lists.PdfMarker)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="items">The items collection.</param>
            <param name="marker">The marker for the list.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="text">The formatted text.</param>
        </member>
        <member name="M:Spire.Pdf.Lists.PdfList.#ctor(System.String,Spire.Pdf.Lists.PdfMarker)">
            <summary>
            Initializes a new instance of the  class
            from formatted text that is splitted by new lines.
            </summary>
            <param name="text">The formatted text.</param>
            <param name="marker">The marker.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.BeginItemLayoutEventHandler">
            <summary>
            Delegate for handling BeginItemLayoutEvent.
            </summary>
            <param name="sender">The item that begin layout.</param>
            <param name="args">Begin Item Layout arguments.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.EndItemLayoutEventHandler">
            <summary>
            Delegate for handling EndItemLayoutEvent.
            </summary>
            <param name="sender">The item that end layout.</param>
            <param name="args">End Item Layout arguments.</param>
        </member>
        <member name="T:Spire.Pdf.Lists.BeginItemLayoutEventArgs">
            <summary>
            Represents begin layout event arguments.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.BeginItemLayoutEventArgs.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item that layout.</value>
        </member>
        <member name="P:Spire.Pdf.Lists.BeginItemLayoutEventArgs.Page">
            <summary>
            Gets the page.
            </summary>
            <value>The page in which item start layout.</value>
        </member>
        <member name="T:Spire.Pdf.Lists.EndItemLayoutEventArgs">
            <summary>
            Represents end layout event arguments.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Lists.EndItemLayoutEventArgs.Item">
            <summary>
            Gets the item that layout.
            </summary>
            <value>The item that layout.</value>
        </member>
        <member name="P:Spire.Pdf.Lists.EndItemLayoutEventArgs.Page">
            <summary>
            Gets the page in which item ended layout.
            </summary>
            <value>The page in which item ended layout.</value>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfTable">
            <summary>
            Represents fast table with few features.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The table column collection</value>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.Rows">
            <summary>
            Gets the rows.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.DataMember">
            <summary>
            Gets or sets the data member.
            </summary>
            <value>The data member.</value>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.DataSourceType">
            <summary>
            Gets or sets the datasource type of the PdfTable
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.Style">
            <summary>
            Gets or sets the properties.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.IgnoreSorting">
            <summary>
            Gets or sets a value indicating whether
            PdfTable should ignore sorting in data table.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTable.AllowCrossPages">
            <summary>
            Gets a value Indicates whether can cross a page.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.BeginRowLayout">
            <summary>
            The event raised on starting row lay outing.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.EndRowLayout">
            <summary>
            The event raised on having finished row lay outing.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.BeginCellLayout">
            <summary>
            The event raised on starting cell lay outing.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.EndCellLayout">
            <summary>
            The event raised on having finished cell layout.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.QueryNextRow">
            <summary>
            The event raised when the next row data is requested.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.QueryColumnCount">
            <summary>
            The event raised when the column number is requested.
            </summary>
        </member>
        <member name="E:Spire.Pdf.Tables.PdfTable.QueryRowCount">
            <summary>
            The event raised when the row number is requested.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Drawing.PointF,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="location">The location of the element.</param>
            <param name="width">The width of the table.</param>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Single,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
            <param name="width">The width of the table.</param>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Drawing.RectangleF)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Drawing.PointF)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Drawing.PointF,Spire.Pdf.Tables.PdfTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="location">The location.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Drawing.RectangleF)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Drawing.RectangleF,Spire.Pdf.Tables.PdfTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="bounds">The bounds.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single,Spire.Pdf.Tables.PdfTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single,System.Single)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.PdfNewPage,System.Single,System.Single,System.Single,Spire.Pdf.Tables.PdfTableLayoutFormat)">
            <summary>
            Draws the table starting from the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width.</param>
            <param name="format">The format.</param>
            <returns>The results of the lay outing.</returns>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTable.Draw(Spire.Pdf.Graphics.PdfCanvas,System.Single,System.Single)">
            <summary>
            Draws an element on the Graphics.
            </summary>
            <param name="graphics">Graphics context where the element should be printed.</param>
            <param name="x">X co-ordinate of the element.</param>
            <param name="y">Y co-ordinate of the element.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfTableStyle">
            <summary>
            Represents parameters of PdfTable.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.DefaultStyle">
            <summary>
            Gets or sets the default cell style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.AlternateStyle">
            <summary>
            Gets or sets the alternate style, which is the style of the odd rows.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.HeaderSource">
            <summary>
            Gets or sets a value indicating whether
            to use rows or column captions for forming header.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.HeaderRowCount">
            <summary>
            Gets or sets the header rows count.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.HeaderStyle">
            <summary>
            Gets or sets the header cell style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.RepeatHeader">
            <summary>
            Gets or sets a value indicating whether to repeat header on each page.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.ShowHeader">
            <summary>
            Gets or sets a value indicating whether the header is visible.
            </summary>
            <remarks>If the header is made up with ordinary rows they aren't visible
            while this property is set to false.</remarks>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.CellSpacing">
            <summary>
            Gets or sets the cell spacing.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.CellPadding">
            <summary>
            Gets or sets the cell padding.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.BorderOverlapStyle">
            <summary>
            Gets or sets a value indicating whether the cell borders
            should overlap its neighbour's borders or be drawn in the cell interior.
            </summary>
            <remarks>Please, use this property with caution,
            because it might cause unexpected results if borders
            are not the same width and colour.</remarks>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableStyle.BorderPen">
            <summary>
            Gets or sets the pen of the table border.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTableStyle.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfCellStyle">
            <summary>
            Represents information about cell style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfCellStyle.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfCellStyle.StringFormat">
            <summary>
            Gets or sets the string format of the cell text.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfCellStyle.TextPen">
            <summary>
            Gets or sets the font which will be used to draw text outlines.
            </summary>
            <remarks>It should be null for default text representation.</remarks>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfCellStyle.TextBrush">
            <summary>
            Gets or sets the brush which will be used to draw font.
            </summary>
            <remarks>This brush will be used to fill glyphs interior, which is the default.</remarks>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfCellStyle.BorderPen">
            <summary>
            Gets or sets the pen with which the border will be drawn.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfCellStyle.BackgroundBrush">
            <summary>
            Gets or sets the brush with which the background will be drawn.
            </summary>
            <remarks>It's null by default.</remarks>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfCellStyle.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfCellStyle.#ctor(Spire.Pdf.Graphics.PdfFontBase,Spire.Pdf.Graphics.PdfBrush,Spire.Pdf.Graphics.PdfPen)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="font">The font.</param>
            <param name="fontBrush">The font brush.</param>
            <param name="borderPen">The border pen.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfColumnCollection">
            <summary>
            Represents the collection of the columns.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfColumnCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfColumnCollection.Add(Spire.Pdf.Tables.PdfColumn)">
            <summary>
            Adds the specified column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfColumn">
            <summary>
            Represents a single column of the table.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfColumn.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfColumn.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfColumn.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfColumn.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfRow">
            <summary>
            Represents a single column of the table.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfRow.Values">
            <summary>
            The array of values that are used to create the new row.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfRowCollection">
            <summary>
            Represents the collection of the columns.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfRowCollection.Item(System.Int32)">
            <summary>
            Gets the  at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfRowCollection.Add(Spire.Pdf.Tables.PdfRow)">
            <summary>
            Adds the specified row.
            </summary>
            <param name="row">The row.</param> 
        </member>
        <member name="M:Spire.Pdf.Tables.PdfRowCollection.Add(System.Object[])">
            <summary>
            The array of values that are used to create the new row.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfTableException">
            <summary>
            Represents as a message deliverer from PdfTable class to the user.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfTableLayoutFormat">
            <summary>
            Represents the parameters for Light Table layout.
            </summary>  
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableLayoutFormat.StartColumnIndex">
            <summary>
            Gets or sets the start column index.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.PdfTableLayoutFormat.EndColumnIndex">
            <summary>
            Gets or sets the end column index.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTableLayoutFormat.#ctor">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Tables.PdfTableLayoutFormat.#ctor(Spire.Pdf.Graphics.PdfTextLayout)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="baseFormat">The base format.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.BeginRowLayoutEventHandler">
            <summary>
            Delegate for handling StartRowLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when starting a row in a layout.</remarks>
        </member>
        <member name="T:Spire.Pdf.Tables.EndRowLayoutEventHandler">
            <summary>
            Delegate for handling EndRowLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when you are finished laying out a row on a page.</remarks>
        </member>
        <member name="T:Spire.Pdf.Tables.BeginCellLayoutEventHandler">
            <summary>
            Delegate for handling StartCellLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when laying out a cell on a page.</remarks>
        </member>
        <member name="T:Spire.Pdf.Tables.EndCellLayoutEventHandler">
            <summary>
            Delegate for handling EndCellLayoutEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
            <remarks>This event is raised when you have finished laying out a page.</remarks>
        </member>
        <member name="T:Spire.Pdf.Tables.QueryNextRowEventHandler">
            <summary>
            Delegate for handling NextRowEvent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.QueryColumnCountEventHandler">
            <summary>
            Delegate for handling GettingColumnNumber Event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.QueryRowCountEventHandler">
            <summary>
            Delegate for handling GettingRowNumber Event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="T:Spire.Pdf.Tables.BeginRowLayoutEventArgs">
            <summary>
            Represents StartRowLayout Event arguments.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.CellStyle">
            <summary>
            Gets or sets the cell style.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.ColumnSpanMap">
            <summary>
            Gets or sets the span map.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether table drawing should stop.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.Skip">
            <summary>
            Gets or sets a value indicating whether this row should be ignored.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.IgnoreColumnFormat">
            <summary>
            Gets or sets a value indicating whether column string format should be ignored.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginRowLayoutEventArgs.MinimalHeight">
            <summary>
            Sets the minimal height of the row.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.EndRowLayoutEventArgs">
            <summary>
            Represents arguments of EndRowLayoutEvent.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.EndRowLayoutEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.EndRowLayoutEventArgs.LayoutCompleted">
            <summary>
            Gets a value indicating whether the row was drawn completely
            (nothing should be printed on the next page).
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.EndRowLayoutEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this row should be the last one printed.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.EndRowLayoutEventArgs.Bounds">
            <summary>
            Gets or sets the row bounds.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.CellLayoutEventArgs">
            <summary>
            The base class for cell layout arguments.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.CellLayoutEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.CellLayoutEventArgs.CellIndex">
            <summary>
            Gets the index of the cell.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.CellLayoutEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
            <remarks>The value might be null or an empty string,
            which means that either no text were acquired or all
            text was on the previous page.</remarks>
        </member>
        <member name="P:Spire.Pdf.Tables.CellLayoutEventArgs.Bounds">
            <summary>
            Gets the bounds of the cell.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.CellLayoutEventArgs.Graphics">
            <summary>
            Gets the graphics, on which the cell should be drawn.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.BeginCellLayoutEventArgs">
            <summary>
            Represents arguments of StartCellLayout Event.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.BeginCellLayoutEventArgs.Skip">
            <summary>
            Gets or sets a value indicating whether the value of this cell should be skipped.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.EndCellLayoutEventArgs">
            <summary>
            Represents arguments of EndCellLayout Event.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.QueryNextRowEventArgs">
            <summary>
            Represents arguments of the NextRow Event.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.QueryNextRowEventArgs.RowData">
            <summary>
            Gets or sets the row data.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.QueryNextRowEventArgs.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.QueryNextRowEventArgs.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.QueryColumnCountEventArgs">
            <summary>
            The arguments of the GettingColumnNumber Event.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.QueryColumnCountEventArgs.ColumnCount">
            <summary>
            Gets or sets the column number.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.QueryRowCountEventArgs">
            <summary>
            The arguments of the GettingRowNumber Event.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Tables.QueryRowCountEventArgs.RowCount">
            <summary>
            Gets or sets the column number.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfHeaderSource">
            <summary>
            Specifies values specifying where the header should formed from.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Tables.PdfHeaderSource.ColumnCaptions">
            <summary>
            The header is formed from column captions' values.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Tables.PdfHeaderSource.Rows">
            <summary>
            The header is formed from rows.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Tables.PdfTableDataSourceType">
            <summary>
            Specifies the datasource type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Tables.PdfTableDataSourceType.External">
            <summary>
            Specifies that the PdfTable has been binded to an external datasource.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Tables.PdfTableDataSourceType.TableDirect">
            <summary>
            Specifies that the values are directly binded to the PdfTable.
            </summary>
        </member>
        <member name="T:Spire.Pdf.PdfBorderOverlapStyle">
            <summary>
            Specifies values of the border overlap style.
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfBorderOverlapStyle.Overlap">
            <summary>
            Cell borders overlap (are drawn using the same coordinates).
            </summary>
        </member>
        <member name="F:Spire.Pdf.PdfBorderOverlapStyle.Inside">
            <summary>
            Cell borders are drawns in the cell's interior.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Xmp.CustomMetadata">
            <summary>
            Represents custom Metadata.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Xmp.CustomMetadata.Item(System.String)">
            <summary>
            Sets the xmp property.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Xmp.CustomMetadata.SchemaType">
            <summary>
            Gets type of the schema.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Xmp.CustomMetadata.#ctor(Spire.Pdf.Xmp.XmpMetadata,System.String,System.String)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="xmp">Parent XmpMetadata.</param>
            <param name="xmlNamespace">The XML namespace.</param>
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="T:Spire.Pdf.Xmp.XmpStructureType">
            <summary>
            Enumerates types of the xmp structure.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpStructureType.Dimensions">
            <summary>
            A structure containing dimensions for a drawn object.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpStructureType.Font">
            <summary>
            A structure containing the characteristics of a font used in a document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpStructureType.Colorant">
            <summary>
            A structure containing the characteristics of a Coloring (swatch) used in a document.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpStructureType.Thumbnail">
            <summary>
            A thumbnail image for a file.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpStructureType.Job">
            <summary>
            Job structure.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Xmp.XmpSchemaType">
            <summary>
            Enumerates types of the xmp schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.DublinCoreSchema">
            <summary>
            Dublin Core Schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.BasicSchema">
            <summary>
            Basic Schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.RightsManagementSchema">
            <summary>
            Rights Management Schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.BasicJobTicketSchema">
            <summary>
            Basic Job Ticket Schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.PagedTextSchema">
            <summary>
            Paged Text Schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.PDFSchema">
            <summary>
            Adobe PDF Schema.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpSchemaType.Custom">
            <summary>
            Custom schema.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Xmp.XmpArrayType">
            <summary>
            Types of the xmp arrays.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpArrayType.Unknown">
            <summary>
            Unknown array type.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpArrayType.Bag">
            <summary>
            Unordered array.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpArrayType.Seq">
            <summary>
            Ordered array.
            </summary>
        </member>
        <member name="F:Spire.Pdf.Xmp.XmpArrayType.Alt">
            <summary>
            Alternative array.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Xmp.XmpEntityBase">
            <summary>
            Base class for the xmp entities.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Xmp.XmpEntityBase.XmlData">
            <summary>
            Gets Xml data of the entity.
            </summary>
        </member>
        <member name="T:Spire.Pdf.Xmp.XmpMetadata">
            <summary>
            Represents XMP metadata of the document.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Xmp.XmpMetadata.XmlData">
            <summary>
            Gets XMP data in XML format.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Xmp.XmpMetadata.NamespaceManager">
            <summary>
            Gets namespace manager of the Xmp metadata.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.#ctor(Spire.Pdf.PdfDocumentInformation)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the  class.
            </summary>
            <param name="xmp">The XMP.</param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.Load(System.Xml.XmlDocument)">
            <summary>
            Loads XMP from the XML.
            </summary>
            <param name="xmp">XMP data in XMLDocument.</param>
            <remarks>If there was any data in this XMP, it will be replaced by the data from the XML.</remarks>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.Add(System.Xml.XmlElement)">
            <summary>
            Adds schema to the XMP in XML format.
            </summary>
            <param name="schema">XMP schema in XML format.</param>
            <remarks>If XMP already contains such schema - there will be two equal schemas at the xmp.</remarks>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetTitle">
            <summary>
            Return title if exists; otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetSubject">
            <summary>
            Return subject if exists; otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetAuthor">
            <summary>
            Return author if exists; otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetProducer">
            <summary>
            Return producer if exists; otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetKeywords">
            <summary>
            return keywords if exists; otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetCustomProperty(System.String)">
            <summary>
            Return specified custom field value if exists; otherwise return null
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetAllCustomProperties">
            <summary>
            Return all custom properties if exsit; otherwise return empty Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetCreateDate">
            <summary>
            Return create date if exists; otherwise return default DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetCreator">
            <summary>
            Return creator if exists; otherwise return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.GetModifyDate">
            <summary>
            Return modify date if exists; otherwise return default DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetTitle(System.String)">
            <summary>
            Set title to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetSubject(System.String)">
            <summary>
            Set subject to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetAuthor(System.String)">
            <summary>
            Set subject to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetProducer(System.String)">
            <summary>
            Set producer to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetKeywords(System.String)">
            <summary>
            Set keywords to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetCustomProperty(System.String,System.String)">
            <summary>
            Set custom property to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetCreateDate(System.DateTime)">
            <summary>
            Set title to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetCreator(System.String)">
            <summary>
            Set Creator to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Pdf.Xmp.XmpMetadata.SetModifyDate(System.DateTime)">
            <summary>
            Set ModifyDates to xmpmeta; if value is null, remove the node; if the node is null, create the node
            </summary>
            <param name="dt"></param>
        </member>
        <member name="P:Spire.Pdf.Xmp.XmpMetadata.Spire#Pdf#Interfaces#IPdfWrapper#Element">
            <summary>
            Gets the element.
            </summary>
            <value></value>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCache.EqualsTo(Spire.Pdf.Interfaces.IPdfCache)">
            <summary>
            Checks whether the object is similar to another object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True - if the objects have equal internals and can share them, False otherwise.</returns>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfChangable.Changed">
            <summary>
            Gets a value indicating whether this  is changed.
            </summary>
            <value><c>true</c> if changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfChangable.FreezeChanges(System.Object)">
            <summary>
            Freezes the changes.
            </summary>
            <param name="freezer">The freezer.</param>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfCompressor.Type">
            <summary>
            Gets the compressor type.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfCompressor.Name">
            <summary>
            Gets the compressor name in PDF format.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCompressor.Compress(System.Byte[])">
            <summary>
            Compresses bytes data.
            </summary>
            <param name="data">Bytes data.</param>
            <returns>
            Compressed bytes data.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCompressor.Compress(System.String)">
            <summary>
            Compresses string data.
            </summary>
            <param name="data">String data.</param>
            <returns>
            Compressed string data.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCompressor.Compress(System.IO.Stream)">
            <summary>
            Compresses stream data.
            </summary>
            <param name="inputStream">Stream data.</param>
            <returns>
            Compressed streams data.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCompressor.Decompress(System.String)">
            <summary>
            Decompresses string data.
            </summary>
            <param name="value">String data.</param>
            <returns>
            Decompressed bytes data.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses bytes data.
            </summary>
            <param name="value">Bytes data.</param>
            <returns>
            Decompressed bytes data.
            </returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfCompressor.Decompress(System.IO.Stream)">
            <summary>
            Decompresses stream data.
            </summary>
            <param name="inputStream">Stream data.</param>
            <returns>
            Decompressed stream data.
            </returns>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfDecryptable.WasEncrypted">
            <summary>
            Gets a value indicating whether [was encrypted].
            </summary>
            <value><c>true</c> if [was encrypted]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfDecryptable.Decrypted">
            <summary>
            Gets a value indicating whether this  is decrypted.
            </summary>
            <value><c>true</c> if decrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfDecryptable.Decrypt(Spire.Pdf.Security.PdfEncryptor,System.Int64)">
            <summary>
            Decrypts the specified encryptor.
            </summary>
            <param name="encryptor">The encryptor.</param>
            <param name="currObjNumber">The curr obj number.</param>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfPrimitive.Save(Spire.Pdf.Interfaces.IPdfWriter)">
            <summary>
            Saves the object using the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfWrapper.Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfWriter.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfWriter.Length">
            <summary>
            Stream length.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.IPdfWriter.Document">
            <summary>
            The document required for saving process.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfWriter.Write(Spire.Pdf.Interfaces.IPdfPrimitive)">
            <summary>
            Writes the specified PDF object.
            </summary>
            <param name="pdfObject">The PDF object.</param>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfWriter.Write(System.Int64)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfWriter.Write(System.Single)">
            <summary>
            Writes the specified number.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfWriter.Write(System.String)">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfWriter.Write(System.Char[])">
            <summary>
            Writes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Spire.Pdf.Interfaces.IPdfWriter.Write(System.Byte[])">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Spire.Pdf.Interfaces.ITrueTypeFont.Font">
            <summary>
            Gets system font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.ITrueTypeFont.Size">
            <summary>
            Gets size of the font.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.ITrueTypeFont.Metrics">
            <summary>
            Gets font metrics.
            </summary>
        </member>
        <member name="P:Spire.Pdf.Interfaces.ITrueTypeFont.TTFMetrics">
            <summary>
            Get the ttf metrics.
            </summary>
        </member>
        <member name="M:Spire.Pdf.Interfaces.ITrueTypeFont.EqualsToFont(Spire.Pdf.Graphics.PdfFontBase)">
            <summary>
            Checks whether fonts are equals.
            </summary>
            <param name="font">Font to compare.</param>
            <returns>True if fonts are equal, False ofhtrwise.</returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.ITrueTypeFont.GetCharWidth(System.Char)">
            <summary>
            Returns width of the char symbol.
            </summary>
            <param name="charCode">Char symbol.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.ITrueTypeFont.GetLineWidth(System.String)">
            <summary>
            Returns width of the text line.
            </summary>
            <param name="line">String line.</param>
            <returns>Width of the char symbol in universal units.</returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.ITrueTypeFont.GetCharCodeInFont(System.Char)">
            <summary>
            
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.ITrueTypeFont.GetLineInFont(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Pdf.Interfaces.ITrueTypeFont.Close">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="F:Spire.Compression.Zip.Constants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Spire.Compression.Zip.Constants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:Spire.Compression.Zip.Constants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="P:Spire.Compression.Zip.ZipArchive.DicZipArchiveItem">
            <summary>
            Returns m_dicItems
            </summary>
        </member>
    </members>
</doc>
